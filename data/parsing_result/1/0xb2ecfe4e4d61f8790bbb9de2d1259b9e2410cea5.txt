{'type': 'FunctionDefinition', 'name': 'IDelegate.transfer', 'start_line': 7, 'end_line': 12, 'offset_start': 153, 'offset_end': 336, 'content': 'function transfer(\n        address caller,\n        OrderType orderType,\n        Transfer[] calldata transfers,\n        uint256 length\n    ) external returns (bool[] memory successful);', 'contract_name': 'IDelegate', 'contract_code': '{\n    function transfer(\n        address caller,\n        OrderType orderType,\n        Transfer[] calldata transfers,\n        uint256 length\n    ) external returns (bool[] memory successful);\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC1822ProxiableUpgradeable.proxiableUUID', 'start_line': 33, 'end_line': 33, 'offset_start': 1171, 'offset_end': 1227, 'content': 'function proxiableUUID() external view returns (bytes32);', 'contract_name': 'IERC1822ProxiableUpgradeable', 'contract_code': '{\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'MerkleProof.verify', 'start_line': 110, 'end_line': 112, 'offset_start': 3453, 'offset_end': 3606, 'content': 'function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }', 'contract_name': 'MerkleProof', 'contract_code': '{\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, "MerkleProof: invalid multiproof");\n\n        // The xxxPos values are "pointers" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue\'s "pop".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the "main queue". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the "main queue" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, "MerkleProof: invalid multiproof");\n\n        // The xxxPos values are "pointers" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue\'s "pop".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the "main queue". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the "main queue" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'MerkleProof.verifyCalldata', 'start_line': 119, 'end_line': 121, 'offset_start': 3708, 'offset_end': 3879, 'content': 'function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }', 'contract_name': 'MerkleProof', 'contract_code': '{\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, "MerkleProof: invalid multiproof");\n\n        // The xxxPos values are "pointers" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue\'s "pop".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the "main queue". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the "main queue" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, "MerkleProof: invalid multiproof");\n\n        // The xxxPos values are "pointers" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue\'s "pop".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the "main queue". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the "main queue" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'MerkleProof.processProof', 'start_line': 131, 'end_line': 137, 'offset_start': 4231, 'offset_end': 4520, 'content': 'function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }', 'contract_name': 'MerkleProof', 'contract_code': '{\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, "MerkleProof: invalid multiproof");\n\n        // The xxxPos values are "pointers" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue\'s "pop".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the "main queue". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the "main queue" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, "MerkleProof: invalid multiproof");\n\n        // The xxxPos values are "pointers" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue\'s "pop".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the "main queue". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the "main queue" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'MerkleProof.processProofCalldata', 'start_line': 144, 'end_line': 150, 'offset_start': 4628, 'offset_end': 4927, 'content': 'function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }', 'contract_name': 'MerkleProof', 'contract_code': '{\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, "MerkleProof: invalid multiproof");\n\n        // The xxxPos values are "pointers" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue\'s "pop".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the "main queue". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the "main queue" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, "MerkleProof: invalid multiproof");\n\n        // The xxxPos values are "pointers" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue\'s "pop".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the "main queue". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the "main queue" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'MerkleProof.multiProofVerify', 'start_line': 160, 'end_line': 167, 'offset_start': 5289, 'offset_end': 5546, 'content': 'function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }', 'contract_name': 'MerkleProof', 'contract_code': '{\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, "MerkleProof: invalid multiproof");\n\n        // The xxxPos values are "pointers" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue\'s "pop".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the "main queue". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the "main queue" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, "MerkleProof: invalid multiproof");\n\n        // The xxxPos values are "pointers" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue\'s "pop".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the "main queue". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the "main queue" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'MerkleProof.multiProofVerifyCalldata', 'start_line': 176, 'end_line': 183, 'offset_start': 5758, 'offset_end': 6035, 'content': 'function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }', 'contract_name': 'MerkleProof', 'contract_code': '{\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, "MerkleProof: invalid multiproof");\n\n        // The xxxPos values are "pointers" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue\'s "pop".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the "main queue". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the "main queue" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, "MerkleProof: invalid multiproof");\n\n        // The xxxPos values are "pointers" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue\'s "pop".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the "main queue". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the "main queue" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'MerkleProof.processMultiProof', 'start_line': 197, 'end_line': 240, 'offset_start': 6815, 'offset_end': 8927, 'content': 'function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, "MerkleProof: invalid multiproof");\n\n        // The xxxPos values are "pointers" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue\'s "pop".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the "main queue". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the "main queue" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }', 'contract_name': 'MerkleProof', 'contract_code': '{\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, "MerkleProof: invalid multiproof");\n\n        // The xxxPos values are "pointers" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue\'s "pop".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the "main queue". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the "main queue" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, "MerkleProof: invalid multiproof");\n\n        // The xxxPos values are "pointers" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue\'s "pop".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the "main queue". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the "main queue" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'MerkleProof.processMultiProofCalldata', 'start_line': 249, 'end_line': 292, 'offset_start': 9141, 'offset_end': 11265, 'content': 'function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, "MerkleProof: invalid multiproof");\n\n        // The xxxPos values are "pointers" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue\'s "pop".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the "main queue". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the "main queue" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }', 'contract_name': 'MerkleProof', 'contract_code': '{\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, "MerkleProof: invalid multiproof");\n\n        // The xxxPos values are "pointers" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue\'s "pop".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the "main queue". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the "main queue" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, "MerkleProof: invalid multiproof");\n\n        // The xxxPos values are "pointers" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue\'s "pop".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the "main queue". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the "main queue" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'MerkleProof._hashPair', 'start_line': 294, 'end_line': 296, 'offset_start': 11272, 'offset_end': 11418, 'content': 'function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }', 'contract_name': 'MerkleProof', 'contract_code': '{\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, "MerkleProof: invalid multiproof");\n\n        // The xxxPos values are "pointers" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue\'s "pop".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the "main queue". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the "main queue" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, "MerkleProof: invalid multiproof");\n\n        // The xxxPos values are "pointers" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue\'s "pop".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the "main queue". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the "main queue" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'private', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'MerkleProof._efficientHash', 'start_line': 298, 'end_line': 305, 'offset_start': 11425, 'offset_end': 11685, 'content': 'function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }', 'contract_name': 'MerkleProof', 'contract_code': '{\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, "MerkleProof: invalid multiproof");\n\n        // The xxxPos values are "pointers" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue\'s "pop".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the "main queue". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the "main queue" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, "MerkleProof: invalid multiproof");\n\n        // The xxxPos values are "pointers" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue\'s "pop".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the "main queue". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the "main queue" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'private', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'ContextUpgradeable.__Context_init', 'start_line': 325, 'end_line': 326, 'offset_start': 12401, 'offset_end': 12459, 'content': 'function __Context_init() internal onlyInitializing {\n    }', 'contract_name': 'ContextUpgradeable', 'contract_code': '{\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'ContextUpgradeable.__Context_init_unchained', 'start_line': 328, 'end_line': 329, 'offset_start': 12466, 'offset_end': 12534, 'content': 'function __Context_init_unchained() internal onlyInitializing {\n    }', 'contract_name': 'ContextUpgradeable', 'contract_code': '{\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'ContextUpgradeable._msgSender', 'start_line': 330, 'end_line': 332, 'offset_start': 12540, 'offset_end': 12635, 'content': 'function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }', 'contract_name': 'ContextUpgradeable', 'contract_code': '{\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'ContextUpgradeable._msgData', 'start_line': 334, 'end_line': 336, 'offset_start': 12642, 'offset_end': 12740, 'content': 'function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }', 'contract_name': 'ContextUpgradeable', 'contract_code': '{\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'IBeaconUpgradeable.implementation', 'start_line': 360, 'end_line': 360, 'offset_start': 13436, 'offset_end': 13493, 'content': 'function implementation() external view returns (address);', 'contract_name': 'IBeaconUpgradeable', 'contract_code': '{\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'IValidation.protocolFee', 'start_line': 369, 'end_line': 369, 'offset_start': 13630, 'offset_end': 13692, 'content': 'function protocolFee() external view returns (address, uint16);', 'contract_name': 'IValidation', 'contract_code': '{\n    function protocolFee() external view returns (address, uint16);\n\n    function amountTaken(address user, bytes32 hash, uint256 listingIndex) external view returns (uint256);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'IValidation.amountTaken', 'start_line': 371, 'end_line': 371, 'offset_start': 13699, 'offset_end': 13801, 'content': 'function amountTaken(address user, bytes32 hash, uint256 listingIndex) external view returns (uint256);', 'contract_name': 'IValidation', 'contract_code': '{\n    function protocolFee() external view returns (address, uint16);\n\n    function amountTaken(address user, bytes32 hash, uint256 listingIndex) external view returns (uint256);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Initializable._disableInitializers', 'start_line': 517, 'end_line': 523, 'offset_start': 19734, 'offset_end': 20012, 'content': 'function _disableInitializers() internal virtual {\n        require(!_initializing, "Initializable: contract is initializing");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }', 'contract_name': 'Initializable', 'contract_code': '{\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            "Initializable: contract is already initialized"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn\'t been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, "Initializable: contract is already initialized");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, "Initializable: contract is not initializing");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, "Initializable: contract is initializing");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Initializable._getInitializedVersion', 'start_line': 528, 'end_line': 530, 'offset_start': 20123, 'offset_end': 20222, 'content': 'function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }', 'contract_name': 'Initializable', 'contract_code': '{\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            "Initializable: contract is already initialized"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn\'t been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, "Initializable: contract is already initialized");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, "Initializable: contract is not initializing");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, "Initializable: contract is initializing");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Initializable._isInitializing', 'start_line': 535, 'end_line': 537, 'offset_start': 20339, 'offset_end': 20431, 'content': 'function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }', 'contract_name': 'Initializable', 'contract_code': '{\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            "Initializable: contract is already initialized"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn\'t been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, "Initializable: contract is already initialized");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, "Initializable: contract is not initializing");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, "Initializable: contract is initializing");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'ReentrancyGuardUpgradeable.__Reentrancy_init', 'start_line': 548, 'end_line': 550, 'offset_start': 20783, 'offset_end': 20847, 'content': 'function __Reentrancy_init() internal {\n        locked = 1;\n    }', 'contract_name': 'ReentrancyGuardUpgradeable', 'contract_code': '{\n    uint256 private locked;\n\n    function __Reentrancy_init() internal {\n        locked = 1;\n    }\n\n    modifier nonReentrant() virtual {\n        require(locked == 1, "REENTRANCY");\n\n        locked = 2;\n\n        _;\n\n        locked = 1;\n    }\n\n    uint256[49] private __gap;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Validation.tor', 'start_line': 583, 'end_line': 583, 'offset_start': 21758, 'offset_end': 21804, 'content': 'constructor(address proxy) Signatures(proxy) {}', 'contract_name': 'Validation', 'contract_code': "{\n    uint256 internal constant _BASIS_POINTS = 10_000;\n    uint256 internal constant _MAX_PROTOCOL_FEE_RATE = 250;\n\n    FeeRate public protocolFee;\n\n    /* amountTaken[user][orderHash][listingIndex] */\n    mapping(address => mapping(bytes32 => mapping(uint256 => uint256))) public amountTaken;\n\n    constructor(address proxy) Signatures(proxy) {}\n\n    /**\n     * @notice Check if an order has expired\n     * @param order Order to check liveness\n     * @return Order is live\n     */\n    function _checkLiveness(Order memory order) private view returns (bool) {\n        return (order.expirationTime > block.timestamp);\n    }\n\n    /**\n     * @notice Check that the fees to be taken will not overflow the purchase price\n     * @param makerFee Maker fee amount\n     * @param fees Protocol and taker fee rates\n     * @return Fees are valid\n     */\n    function _checkFee(FeeRate memory makerFee, Fees memory fees) private pure returns (bool) {\n        return makerFee.rate + fees.takerFee.rate + fees.protocolFee.rate <= _BASIS_POINTS;\n    }\n\n    /**\n     * @notice Validate a list of orders and prepare arrays for recording pending fulfillments\n     * @param orders List of orders\n     * @param orderType Order type for all orders\n     * @param signatures Bytes array of the order signatures\n     * @param fees Protocol and taker fee rates\n     */\n    function _validateOrders(\n        Order[] memory orders,\n        OrderType orderType,\n        bytes memory signatures,\n        Fees memory fees\n    ) internal view returns (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) {\n        uint256 ordersLength = orders.length;\n        validOrders = new bool[](ordersLength);\n        pendingAmountTaken = new uint256[][](ordersLength);\n        for (uint256 i; i < ordersLength; ) {\n            pendingAmountTaken[i] = new uint256[](orders[i].numberOfListings);\n            validOrders[i] = _validateOrder(orders[i], orderType, signatures, fees, i);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Validate an order\n     * @param order Order to validate\n     * @param orderType Order type\n     * @param signatures Bytes array of order signatures\n     * @param fees Protocol and taker fee rates\n     * @param signatureIndex Index of the order signature\n     * @return Validity of the order\n     */\n    function _validateOrder(\n        Order memory order,\n        OrderType orderType,\n        bytes memory signatures,\n        Fees memory fees,\n        uint256 signatureIndex\n    ) internal view returns (bool) {\n        bytes32 orderHash = hashOrder(order, orderType);\n\n        /* After hashing, the salt is no longer needed so we can store the order hash here. */\n        order.salt = uint256(orderHash);\n\n        return _verifyAuthorization(\n            order.trader,\n            orderHash,\n            signatures,\n            signatureIndex\n        ) &&\n            _checkLiveness(order) &&\n            _checkFee(order.makerFee, fees);\n    }\n\n    /**\n     * @notice Validate a listing (only valid if the order has be prevalidated)\n     * @dev Validation can be manipulated by inputting the same order twice in the orders array,\n     * which will effectively bypass the `pendingAmountTaken` check. There is a safety check at the\n     * execution phase that will revert the transaction if this manipulation overdraws an order.\n     * @param order Order of the listing\n     * @param orderType Order type\n     * @param exchange Exchange containing the listing\n     * @param validOrders List indicated which orders were validated\n     * @param pendingAmountTaken Pending fulfillments from the current batch\n     * @return validListing Validity of the listing\n     */\n    function _validateListingFromBatch(\n        Order memory order,\n        OrderType orderType,\n        Exchange memory exchange,\n        bool[] memory validOrders,\n        uint256[][] memory pendingAmountTaken\n    ) internal view returns (bool validListing) {\n        Listing memory listing = exchange.listing;\n        uint256 listingIndex = listing.index;\n        uint256 amountTaken = amountTaken[order.trader][bytes32(order.salt)][listingIndex];\n        uint256 pendingAmountTaken = pendingAmountTaken[exchange.index][listingIndex];\n        uint256 takerAmount = exchange.taker.amount;\n        unchecked {\n            validListing =\n                validOrders[exchange.index] &&\n                _validateListing(order, orderType, exchange) &&\n                pendingAmountTaken + takerAmount <= type(uint256).max - amountTaken &&\n                amountTaken + pendingAmountTaken + takerAmount <= listing.amount;\n        }\n    }\n\n    /**\n     * @notice Validate a listing and its proposed exchange\n     * @param order Order of the listing\n     * @param orderType Order type\n     * @param exchange Exchange containing the listing\n     * @return validListing Validity of the listing and its proposed exchange\n     */\n    function _validateListing(\n        Order memory order,\n        OrderType orderType,\n        Exchange memory exchange\n    ) private pure returns (bool validListing) {\n        Listing memory listing = exchange.listing;\n        validListing = MerkleProof.verify(exchange.proof, order.listingsRoot, hashListing(listing));\n        Taker memory taker = exchange.taker;\n        if (orderType == OrderType.ASK) {\n            if (order.assetType == AssetType.ERC721) {\n                validListing = validListing && taker.amount == 1 && listing.amount == 1;\n            }\n            validListing = validListing && listing.tokenId == taker.tokenId;\n        } else {\n            if (order.assetType == AssetType.ERC721) {\n                validListing = validListing && taker.amount == 1;\n            } else {\n                validListing = validListing && listing.tokenId == taker.tokenId;\n            }\n        }\n    }\n\n    /**\n     * @notice Validate both the listing and it's parent order (only for single executions)\n     * @param order Order of the listing\n     * @param orderType Order type\n     * @param exchange Exchange containing the listing\n     * @param signature Order signature\n     * @param fees Protocol and taker fee rates\n     * @return Validity of the order and listing\n     */\n    function _validateOrderAndListing(\n        Order memory order,\n        OrderType orderType,\n        Exchange memory exchange,\n        bytes memory signature,\n        Fees memory fees\n    ) internal view returns (bool) {\n        Listing memory listing = exchange.listing;\n        uint256 listingIndex = listing.index;\n        return\n            _validateOrder(order, orderType, signature, fees, 0) &&\n            _validateListing(order, orderType, exchange) &&\n            amountTaken[order.trader][bytes32(order.salt)][listingIndex] + exchange.taker.amount <=\n            listing.amount;\n    }\n\n    uint256[49] private __gap;\n}", 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'default', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Validation._checkLiveness', 'start_line': 590, 'end_line': 592, 'offset_start': 21945, 'offset_end': 22080, 'content': 'function _checkLiveness(Order memory order) private view returns (bool) {\n        return (order.expirationTime > block.timestamp);\n    }', 'contract_name': 'Validation', 'contract_code': "{\n    uint256 internal constant _BASIS_POINTS = 10_000;\n    uint256 internal constant _MAX_PROTOCOL_FEE_RATE = 250;\n\n    FeeRate public protocolFee;\n\n    /* amountTaken[user][orderHash][listingIndex] */\n    mapping(address => mapping(bytes32 => mapping(uint256 => uint256))) public amountTaken;\n\n    constructor(address proxy) Signatures(proxy) {}\n\n    /**\n     * @notice Check if an order has expired\n     * @param order Order to check liveness\n     * @return Order is live\n     */\n    function _checkLiveness(Order memory order) private view returns (bool) {\n        return (order.expirationTime > block.timestamp);\n    }\n\n    /**\n     * @notice Check that the fees to be taken will not overflow the purchase price\n     * @param makerFee Maker fee amount\n     * @param fees Protocol and taker fee rates\n     * @return Fees are valid\n     */\n    function _checkFee(FeeRate memory makerFee, Fees memory fees) private pure returns (bool) {\n        return makerFee.rate + fees.takerFee.rate + fees.protocolFee.rate <= _BASIS_POINTS;\n    }\n\n    /**\n     * @notice Validate a list of orders and prepare arrays for recording pending fulfillments\n     * @param orders List of orders\n     * @param orderType Order type for all orders\n     * @param signatures Bytes array of the order signatures\n     * @param fees Protocol and taker fee rates\n     */\n    function _validateOrders(\n        Order[] memory orders,\n        OrderType orderType,\n        bytes memory signatures,\n        Fees memory fees\n    ) internal view returns (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) {\n        uint256 ordersLength = orders.length;\n        validOrders = new bool[](ordersLength);\n        pendingAmountTaken = new uint256[][](ordersLength);\n        for (uint256 i; i < ordersLength; ) {\n            pendingAmountTaken[i] = new uint256[](orders[i].numberOfListings);\n            validOrders[i] = _validateOrder(orders[i], orderType, signatures, fees, i);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Validate an order\n     * @param order Order to validate\n     * @param orderType Order type\n     * @param signatures Bytes array of order signatures\n     * @param fees Protocol and taker fee rates\n     * @param signatureIndex Index of the order signature\n     * @return Validity of the order\n     */\n    function _validateOrder(\n        Order memory order,\n        OrderType orderType,\n        bytes memory signatures,\n        Fees memory fees,\n        uint256 signatureIndex\n    ) internal view returns (bool) {\n        bytes32 orderHash = hashOrder(order, orderType);\n\n        /* After hashing, the salt is no longer needed so we can store the order hash here. */\n        order.salt = uint256(orderHash);\n\n        return _verifyAuthorization(\n            order.trader,\n            orderHash,\n            signatures,\n            signatureIndex\n        ) &&\n            _checkLiveness(order) &&\n            _checkFee(order.makerFee, fees);\n    }\n\n    /**\n     * @notice Validate a listing (only valid if the order has be prevalidated)\n     * @dev Validation can be manipulated by inputting the same order twice in the orders array,\n     * which will effectively bypass the `pendingAmountTaken` check. There is a safety check at the\n     * execution phase that will revert the transaction if this manipulation overdraws an order.\n     * @param order Order of the listing\n     * @param orderType Order type\n     * @param exchange Exchange containing the listing\n     * @param validOrders List indicated which orders were validated\n     * @param pendingAmountTaken Pending fulfillments from the current batch\n     * @return validListing Validity of the listing\n     */\n    function _validateListingFromBatch(\n        Order memory order,\n        OrderType orderType,\n        Exchange memory exchange,\n        bool[] memory validOrders,\n        uint256[][] memory pendingAmountTaken\n    ) internal view returns (bool validListing) {\n        Listing memory listing = exchange.listing;\n        uint256 listingIndex = listing.index;\n        uint256 amountTaken = amountTaken[order.trader][bytes32(order.salt)][listingIndex];\n        uint256 pendingAmountTaken = pendingAmountTaken[exchange.index][listingIndex];\n        uint256 takerAmount = exchange.taker.amount;\n        unchecked {\n            validListing =\n                validOrders[exchange.index] &&\n                _validateListing(order, orderType, exchange) &&\n                pendingAmountTaken + takerAmount <= type(uint256).max - amountTaken &&\n                amountTaken + pendingAmountTaken + takerAmount <= listing.amount;\n        }\n    }\n\n    /**\n     * @notice Validate a listing and its proposed exchange\n     * @param order Order of the listing\n     * @param orderType Order type\n     * @param exchange Exchange containing the listing\n     * @return validListing Validity of the listing and its proposed exchange\n     */\n    function _validateListing(\n        Order memory order,\n        OrderType orderType,\n        Exchange memory exchange\n    ) private pure returns (bool validListing) {\n        Listing memory listing = exchange.listing;\n        validListing = MerkleProof.verify(exchange.proof, order.listingsRoot, hashListing(listing));\n        Taker memory taker = exchange.taker;\n        if (orderType == OrderType.ASK) {\n            if (order.assetType == AssetType.ERC721) {\n                validListing = validListing && taker.amount == 1 && listing.amount == 1;\n            }\n            validListing = validListing && listing.tokenId == taker.tokenId;\n        } else {\n            if (order.assetType == AssetType.ERC721) {\n                validListing = validListing && taker.amount == 1;\n            } else {\n                validListing = validListing && listing.tokenId == taker.tokenId;\n            }\n        }\n    }\n\n    /**\n     * @notice Validate both the listing and it's parent order (only for single executions)\n     * @param order Order of the listing\n     * @param orderType Order type\n     * @param exchange Exchange containing the listing\n     * @param signature Order signature\n     * @param fees Protocol and taker fee rates\n     * @return Validity of the order and listing\n     */\n    function _validateOrderAndListing(\n        Order memory order,\n        OrderType orderType,\n        Exchange memory exchange,\n        bytes memory signature,\n        Fees memory fees\n    ) internal view returns (bool) {\n        Listing memory listing = exchange.listing;\n        uint256 listingIndex = listing.index;\n        return\n            _validateOrder(order, orderType, signature, fees, 0) &&\n            _validateListing(order, orderType, exchange) &&\n            amountTaken[order.trader][bytes32(order.salt)][listingIndex] + exchange.taker.amount <=\n            listing.amount;\n    }\n\n    uint256[49] private __gap;\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'private', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Validation._checkFee', 'start_line': 600, 'end_line': 602, 'offset_start': 22305, 'offset_end': 22493, 'content': 'function _checkFee(FeeRate memory makerFee, Fees memory fees) private pure returns (bool) {\n        return makerFee.rate + fees.takerFee.rate + fees.protocolFee.rate <= _BASIS_POINTS;\n    }', 'contract_name': 'Validation', 'contract_code': "{\n    uint256 internal constant _BASIS_POINTS = 10_000;\n    uint256 internal constant _MAX_PROTOCOL_FEE_RATE = 250;\n\n    FeeRate public protocolFee;\n\n    /* amountTaken[user][orderHash][listingIndex] */\n    mapping(address => mapping(bytes32 => mapping(uint256 => uint256))) public amountTaken;\n\n    constructor(address proxy) Signatures(proxy) {}\n\n    /**\n     * @notice Check if an order has expired\n     * @param order Order to check liveness\n     * @return Order is live\n     */\n    function _checkLiveness(Order memory order) private view returns (bool) {\n        return (order.expirationTime > block.timestamp);\n    }\n\n    /**\n     * @notice Check that the fees to be taken will not overflow the purchase price\n     * @param makerFee Maker fee amount\n     * @param fees Protocol and taker fee rates\n     * @return Fees are valid\n     */\n    function _checkFee(FeeRate memory makerFee, Fees memory fees) private pure returns (bool) {\n        return makerFee.rate + fees.takerFee.rate + fees.protocolFee.rate <= _BASIS_POINTS;\n    }\n\n    /**\n     * @notice Validate a list of orders and prepare arrays for recording pending fulfillments\n     * @param orders List of orders\n     * @param orderType Order type for all orders\n     * @param signatures Bytes array of the order signatures\n     * @param fees Protocol and taker fee rates\n     */\n    function _validateOrders(\n        Order[] memory orders,\n        OrderType orderType,\n        bytes memory signatures,\n        Fees memory fees\n    ) internal view returns (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) {\n        uint256 ordersLength = orders.length;\n        validOrders = new bool[](ordersLength);\n        pendingAmountTaken = new uint256[][](ordersLength);\n        for (uint256 i; i < ordersLength; ) {\n            pendingAmountTaken[i] = new uint256[](orders[i].numberOfListings);\n            validOrders[i] = _validateOrder(orders[i], orderType, signatures, fees, i);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Validate an order\n     * @param order Order to validate\n     * @param orderType Order type\n     * @param signatures Bytes array of order signatures\n     * @param fees Protocol and taker fee rates\n     * @param signatureIndex Index of the order signature\n     * @return Validity of the order\n     */\n    function _validateOrder(\n        Order memory order,\n        OrderType orderType,\n        bytes memory signatures,\n        Fees memory fees,\n        uint256 signatureIndex\n    ) internal view returns (bool) {\n        bytes32 orderHash = hashOrder(order, orderType);\n\n        /* After hashing, the salt is no longer needed so we can store the order hash here. */\n        order.salt = uint256(orderHash);\n\n        return _verifyAuthorization(\n            order.trader,\n            orderHash,\n            signatures,\n            signatureIndex\n        ) &&\n            _checkLiveness(order) &&\n            _checkFee(order.makerFee, fees);\n    }\n\n    /**\n     * @notice Validate a listing (only valid if the order has be prevalidated)\n     * @dev Validation can be manipulated by inputting the same order twice in the orders array,\n     * which will effectively bypass the `pendingAmountTaken` check. There is a safety check at the\n     * execution phase that will revert the transaction if this manipulation overdraws an order.\n     * @param order Order of the listing\n     * @param orderType Order type\n     * @param exchange Exchange containing the listing\n     * @param validOrders List indicated which orders were validated\n     * @param pendingAmountTaken Pending fulfillments from the current batch\n     * @return validListing Validity of the listing\n     */\n    function _validateListingFromBatch(\n        Order memory order,\n        OrderType orderType,\n        Exchange memory exchange,\n        bool[] memory validOrders,\n        uint256[][] memory pendingAmountTaken\n    ) internal view returns (bool validListing) {\n        Listing memory listing = exchange.listing;\n        uint256 listingIndex = listing.index;\n        uint256 amountTaken = amountTaken[order.trader][bytes32(order.salt)][listingIndex];\n        uint256 pendingAmountTaken = pendingAmountTaken[exchange.index][listingIndex];\n        uint256 takerAmount = exchange.taker.amount;\n        unchecked {\n            validListing =\n                validOrders[exchange.index] &&\n                _validateListing(order, orderType, exchange) &&\n                pendingAmountTaken + takerAmount <= type(uint256).max - amountTaken &&\n                amountTaken + pendingAmountTaken + takerAmount <= listing.amount;\n        }\n    }\n\n    /**\n     * @notice Validate a listing and its proposed exchange\n     * @param order Order of the listing\n     * @param orderType Order type\n     * @param exchange Exchange containing the listing\n     * @return validListing Validity of the listing and its proposed exchange\n     */\n    function _validateListing(\n        Order memory order,\n        OrderType orderType,\n        Exchange memory exchange\n    ) private pure returns (bool validListing) {\n        Listing memory listing = exchange.listing;\n        validListing = MerkleProof.verify(exchange.proof, order.listingsRoot, hashListing(listing));\n        Taker memory taker = exchange.taker;\n        if (orderType == OrderType.ASK) {\n            if (order.assetType == AssetType.ERC721) {\n                validListing = validListing && taker.amount == 1 && listing.amount == 1;\n            }\n            validListing = validListing && listing.tokenId == taker.tokenId;\n        } else {\n            if (order.assetType == AssetType.ERC721) {\n                validListing = validListing && taker.amount == 1;\n            } else {\n                validListing = validListing && listing.tokenId == taker.tokenId;\n            }\n        }\n    }\n\n    /**\n     * @notice Validate both the listing and it's parent order (only for single executions)\n     * @param order Order of the listing\n     * @param orderType Order type\n     * @param exchange Exchange containing the listing\n     * @param signature Order signature\n     * @param fees Protocol and taker fee rates\n     * @return Validity of the order and listing\n     */\n    function _validateOrderAndListing(\n        Order memory order,\n        OrderType orderType,\n        Exchange memory exchange,\n        bytes memory signature,\n        Fees memory fees\n    ) internal view returns (bool) {\n        Listing memory listing = exchange.listing;\n        uint256 listingIndex = listing.index;\n        return\n            _validateOrder(order, orderType, signature, fees, 0) &&\n            _validateListing(order, orderType, exchange) &&\n            amountTaken[order.trader][bytes32(order.salt)][listingIndex] + exchange.taker.amount <=\n            listing.amount;\n    }\n\n    uint256[49] private __gap;\n}", 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'private', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Validation._validateOrders', 'start_line': 611, 'end_line': 627, 'offset_start': 22806, 'offset_end': 23487, 'content': 'function _validateOrders(\n        Order[] memory orders,\n        OrderType orderType,\n        bytes memory signatures,\n        Fees memory fees\n    ) internal view returns (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) {\n        uint256 ordersLength = orders.length;\n        validOrders = new bool[](ordersLength);\n        pendingAmountTaken = new uint256[][](ordersLength);\n        for (uint256 i; i < ordersLength; ) {\n            pendingAmountTaken[i] = new uint256[](orders[i].numberOfListings);\n            validOrders[i] = _validateOrder(orders[i], orderType, signatures, fees, i);\n            unchecked {\n                ++i;\n            }\n        }\n    }', 'contract_name': 'Validation', 'contract_code': "{\n    uint256 internal constant _BASIS_POINTS = 10_000;\n    uint256 internal constant _MAX_PROTOCOL_FEE_RATE = 250;\n\n    FeeRate public protocolFee;\n\n    /* amountTaken[user][orderHash][listingIndex] */\n    mapping(address => mapping(bytes32 => mapping(uint256 => uint256))) public amountTaken;\n\n    constructor(address proxy) Signatures(proxy) {}\n\n    /**\n     * @notice Check if an order has expired\n     * @param order Order to check liveness\n     * @return Order is live\n     */\n    function _checkLiveness(Order memory order) private view returns (bool) {\n        return (order.expirationTime > block.timestamp);\n    }\n\n    /**\n     * @notice Check that the fees to be taken will not overflow the purchase price\n     * @param makerFee Maker fee amount\n     * @param fees Protocol and taker fee rates\n     * @return Fees are valid\n     */\n    function _checkFee(FeeRate memory makerFee, Fees memory fees) private pure returns (bool) {\n        return makerFee.rate + fees.takerFee.rate + fees.protocolFee.rate <= _BASIS_POINTS;\n    }\n\n    /**\n     * @notice Validate a list of orders and prepare arrays for recording pending fulfillments\n     * @param orders List of orders\n     * @param orderType Order type for all orders\n     * @param signatures Bytes array of the order signatures\n     * @param fees Protocol and taker fee rates\n     */\n    function _validateOrders(\n        Order[] memory orders,\n        OrderType orderType,\n        bytes memory signatures,\n        Fees memory fees\n    ) internal view returns (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) {\n        uint256 ordersLength = orders.length;\n        validOrders = new bool[](ordersLength);\n        pendingAmountTaken = new uint256[][](ordersLength);\n        for (uint256 i; i < ordersLength; ) {\n            pendingAmountTaken[i] = new uint256[](orders[i].numberOfListings);\n            validOrders[i] = _validateOrder(orders[i], orderType, signatures, fees, i);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Validate an order\n     * @param order Order to validate\n     * @param orderType Order type\n     * @param signatures Bytes array of order signatures\n     * @param fees Protocol and taker fee rates\n     * @param signatureIndex Index of the order signature\n     * @return Validity of the order\n     */\n    function _validateOrder(\n        Order memory order,\n        OrderType orderType,\n        bytes memory signatures,\n        Fees memory fees,\n        uint256 signatureIndex\n    ) internal view returns (bool) {\n        bytes32 orderHash = hashOrder(order, orderType);\n\n        /* After hashing, the salt is no longer needed so we can store the order hash here. */\n        order.salt = uint256(orderHash);\n\n        return _verifyAuthorization(\n            order.trader,\n            orderHash,\n            signatures,\n            signatureIndex\n        ) &&\n            _checkLiveness(order) &&\n            _checkFee(order.makerFee, fees);\n    }\n\n    /**\n     * @notice Validate a listing (only valid if the order has be prevalidated)\n     * @dev Validation can be manipulated by inputting the same order twice in the orders array,\n     * which will effectively bypass the `pendingAmountTaken` check. There is a safety check at the\n     * execution phase that will revert the transaction if this manipulation overdraws an order.\n     * @param order Order of the listing\n     * @param orderType Order type\n     * @param exchange Exchange containing the listing\n     * @param validOrders List indicated which orders were validated\n     * @param pendingAmountTaken Pending fulfillments from the current batch\n     * @return validListing Validity of the listing\n     */\n    function _validateListingFromBatch(\n        Order memory order,\n        OrderType orderType,\n        Exchange memory exchange,\n        bool[] memory validOrders,\n        uint256[][] memory pendingAmountTaken\n    ) internal view returns (bool validListing) {\n        Listing memory listing = exchange.listing;\n        uint256 listingIndex = listing.index;\n        uint256 amountTaken = amountTaken[order.trader][bytes32(order.salt)][listingIndex];\n        uint256 pendingAmountTaken = pendingAmountTaken[exchange.index][listingIndex];\n        uint256 takerAmount = exchange.taker.amount;\n        unchecked {\n            validListing =\n                validOrders[exchange.index] &&\n                _validateListing(order, orderType, exchange) &&\n                pendingAmountTaken + takerAmount <= type(uint256).max - amountTaken &&\n                amountTaken + pendingAmountTaken + takerAmount <= listing.amount;\n        }\n    }\n\n    /**\n     * @notice Validate a listing and its proposed exchange\n     * @param order Order of the listing\n     * @param orderType Order type\n     * @param exchange Exchange containing the listing\n     * @return validListing Validity of the listing and its proposed exchange\n     */\n    function _validateListing(\n        Order memory order,\n        OrderType orderType,\n        Exchange memory exchange\n    ) private pure returns (bool validListing) {\n        Listing memory listing = exchange.listing;\n        validListing = MerkleProof.verify(exchange.proof, order.listingsRoot, hashListing(listing));\n        Taker memory taker = exchange.taker;\n        if (orderType == OrderType.ASK) {\n            if (order.assetType == AssetType.ERC721) {\n                validListing = validListing && taker.amount == 1 && listing.amount == 1;\n            }\n            validListing = validListing && listing.tokenId == taker.tokenId;\n        } else {\n            if (order.assetType == AssetType.ERC721) {\n                validListing = validListing && taker.amount == 1;\n            } else {\n                validListing = validListing && listing.tokenId == taker.tokenId;\n            }\n        }\n    }\n\n    /**\n     * @notice Validate both the listing and it's parent order (only for single executions)\n     * @param order Order of the listing\n     * @param orderType Order type\n     * @param exchange Exchange containing the listing\n     * @param signature Order signature\n     * @param fees Protocol and taker fee rates\n     * @return Validity of the order and listing\n     */\n    function _validateOrderAndListing(\n        Order memory order,\n        OrderType orderType,\n        Exchange memory exchange,\n        bytes memory signature,\n        Fees memory fees\n    ) internal view returns (bool) {\n        Listing memory listing = exchange.listing;\n        uint256 listingIndex = listing.index;\n        return\n            _validateOrder(order, orderType, signature, fees, 0) &&\n            _validateListing(order, orderType, exchange) &&\n            amountTaken[order.trader][bytes32(order.salt)][listingIndex] + exchange.taker.amount <=\n            listing.amount;\n    }\n\n    uint256[49] private __gap;\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Validation._validateOrder', 'start_line': 638, 'end_line': 658, 'offset_start': 23816, 'offset_end': 24456, 'content': 'function _validateOrder(\n        Order memory order,\n        OrderType orderType,\n        bytes memory signatures,\n        Fees memory fees,\n        uint256 signatureIndex\n    ) internal view returns (bool) {\n        bytes32 orderHash = hashOrder(order, orderType);\n\n        /* After hashing, the salt is no longer needed so we can store the order hash here. */\n        order.salt = uint256(orderHash);\n\n        return _verifyAuthorization(\n            order.trader,\n            orderHash,\n            signatures,\n            signatureIndex\n        ) &&\n            _checkLiveness(order) &&\n            _checkFee(order.makerFee, fees);\n    }', 'contract_name': 'Validation', 'contract_code': "{\n    uint256 internal constant _BASIS_POINTS = 10_000;\n    uint256 internal constant _MAX_PROTOCOL_FEE_RATE = 250;\n\n    FeeRate public protocolFee;\n\n    /* amountTaken[user][orderHash][listingIndex] */\n    mapping(address => mapping(bytes32 => mapping(uint256 => uint256))) public amountTaken;\n\n    constructor(address proxy) Signatures(proxy) {}\n\n    /**\n     * @notice Check if an order has expired\n     * @param order Order to check liveness\n     * @return Order is live\n     */\n    function _checkLiveness(Order memory order) private view returns (bool) {\n        return (order.expirationTime > block.timestamp);\n    }\n\n    /**\n     * @notice Check that the fees to be taken will not overflow the purchase price\n     * @param makerFee Maker fee amount\n     * @param fees Protocol and taker fee rates\n     * @return Fees are valid\n     */\n    function _checkFee(FeeRate memory makerFee, Fees memory fees) private pure returns (bool) {\n        return makerFee.rate + fees.takerFee.rate + fees.protocolFee.rate <= _BASIS_POINTS;\n    }\n\n    /**\n     * @notice Validate a list of orders and prepare arrays for recording pending fulfillments\n     * @param orders List of orders\n     * @param orderType Order type for all orders\n     * @param signatures Bytes array of the order signatures\n     * @param fees Protocol and taker fee rates\n     */\n    function _validateOrders(\n        Order[] memory orders,\n        OrderType orderType,\n        bytes memory signatures,\n        Fees memory fees\n    ) internal view returns (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) {\n        uint256 ordersLength = orders.length;\n        validOrders = new bool[](ordersLength);\n        pendingAmountTaken = new uint256[][](ordersLength);\n        for (uint256 i; i < ordersLength; ) {\n            pendingAmountTaken[i] = new uint256[](orders[i].numberOfListings);\n            validOrders[i] = _validateOrder(orders[i], orderType, signatures, fees, i);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Validate an order\n     * @param order Order to validate\n     * @param orderType Order type\n     * @param signatures Bytes array of order signatures\n     * @param fees Protocol and taker fee rates\n     * @param signatureIndex Index of the order signature\n     * @return Validity of the order\n     */\n    function _validateOrder(\n        Order memory order,\n        OrderType orderType,\n        bytes memory signatures,\n        Fees memory fees,\n        uint256 signatureIndex\n    ) internal view returns (bool) {\n        bytes32 orderHash = hashOrder(order, orderType);\n\n        /* After hashing, the salt is no longer needed so we can store the order hash here. */\n        order.salt = uint256(orderHash);\n\n        return _verifyAuthorization(\n            order.trader,\n            orderHash,\n            signatures,\n            signatureIndex\n        ) &&\n            _checkLiveness(order) &&\n            _checkFee(order.makerFee, fees);\n    }\n\n    /**\n     * @notice Validate a listing (only valid if the order has be prevalidated)\n     * @dev Validation can be manipulated by inputting the same order twice in the orders array,\n     * which will effectively bypass the `pendingAmountTaken` check. There is a safety check at the\n     * execution phase that will revert the transaction if this manipulation overdraws an order.\n     * @param order Order of the listing\n     * @param orderType Order type\n     * @param exchange Exchange containing the listing\n     * @param validOrders List indicated which orders were validated\n     * @param pendingAmountTaken Pending fulfillments from the current batch\n     * @return validListing Validity of the listing\n     */\n    function _validateListingFromBatch(\n        Order memory order,\n        OrderType orderType,\n        Exchange memory exchange,\n        bool[] memory validOrders,\n        uint256[][] memory pendingAmountTaken\n    ) internal view returns (bool validListing) {\n        Listing memory listing = exchange.listing;\n        uint256 listingIndex = listing.index;\n        uint256 amountTaken = amountTaken[order.trader][bytes32(order.salt)][listingIndex];\n        uint256 pendingAmountTaken = pendingAmountTaken[exchange.index][listingIndex];\n        uint256 takerAmount = exchange.taker.amount;\n        unchecked {\n            validListing =\n                validOrders[exchange.index] &&\n                _validateListing(order, orderType, exchange) &&\n                pendingAmountTaken + takerAmount <= type(uint256).max - amountTaken &&\n                amountTaken + pendingAmountTaken + takerAmount <= listing.amount;\n        }\n    }\n\n    /**\n     * @notice Validate a listing and its proposed exchange\n     * @param order Order of the listing\n     * @param orderType Order type\n     * @param exchange Exchange containing the listing\n     * @return validListing Validity of the listing and its proposed exchange\n     */\n    function _validateListing(\n        Order memory order,\n        OrderType orderType,\n        Exchange memory exchange\n    ) private pure returns (bool validListing) {\n        Listing memory listing = exchange.listing;\n        validListing = MerkleProof.verify(exchange.proof, order.listingsRoot, hashListing(listing));\n        Taker memory taker = exchange.taker;\n        if (orderType == OrderType.ASK) {\n            if (order.assetType == AssetType.ERC721) {\n                validListing = validListing && taker.amount == 1 && listing.amount == 1;\n            }\n            validListing = validListing && listing.tokenId == taker.tokenId;\n        } else {\n            if (order.assetType == AssetType.ERC721) {\n                validListing = validListing && taker.amount == 1;\n            } else {\n                validListing = validListing && listing.tokenId == taker.tokenId;\n            }\n        }\n    }\n\n    /**\n     * @notice Validate both the listing and it's parent order (only for single executions)\n     * @param order Order of the listing\n     * @param orderType Order type\n     * @param exchange Exchange containing the listing\n     * @param signature Order signature\n     * @param fees Protocol and taker fee rates\n     * @return Validity of the order and listing\n     */\n    function _validateOrderAndListing(\n        Order memory order,\n        OrderType orderType,\n        Exchange memory exchange,\n        bytes memory signature,\n        Fees memory fees\n    ) internal view returns (bool) {\n        Listing memory listing = exchange.listing;\n        uint256 listingIndex = listing.index;\n        return\n            _validateOrder(order, orderType, signature, fees, 0) &&\n            _validateListing(order, orderType, exchange) &&\n            amountTaken[order.trader][bytes32(order.salt)][listingIndex] + exchange.taker.amount <=\n            listing.amount;\n    }\n\n    uint256[49] private __gap;\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Validation._validateListingFromBatch', 'start_line': 672, 'end_line': 691, 'offset_start': 25182, 'offset_end': 26110, 'content': 'function _validateListingFromBatch(\n        Order memory order,\n        OrderType orderType,\n        Exchange memory exchange,\n        bool[] memory validOrders,\n        uint256[][] memory pendingAmountTaken\n    ) internal view returns (bool validListing) {\n        Listing memory listing = exchange.listing;\n        uint256 listingIndex = listing.index;\n        uint256 amountTaken = amountTaken[order.trader][bytes32(order.salt)][listingIndex];\n        uint256 pendingAmountTaken = pendingAmountTaken[exchange.index][listingIndex];\n        uint256 takerAmount = exchange.taker.amount;\n        unchecked {\n            validListing =\n                validOrders[exchange.index] &&\n                _validateListing(order, orderType, exchange) &&\n                pendingAmountTaken + takerAmount <= type(uint256).max - amountTaken &&\n                amountTaken + pendingAmountTaken + takerAmount <= listing.amount;\n        }\n    }', 'contract_name': 'Validation', 'contract_code': "{\n    uint256 internal constant _BASIS_POINTS = 10_000;\n    uint256 internal constant _MAX_PROTOCOL_FEE_RATE = 250;\n\n    FeeRate public protocolFee;\n\n    /* amountTaken[user][orderHash][listingIndex] */\n    mapping(address => mapping(bytes32 => mapping(uint256 => uint256))) public amountTaken;\n\n    constructor(address proxy) Signatures(proxy) {}\n\n    /**\n     * @notice Check if an order has expired\n     * @param order Order to check liveness\n     * @return Order is live\n     */\n    function _checkLiveness(Order memory order) private view returns (bool) {\n        return (order.expirationTime > block.timestamp);\n    }\n\n    /**\n     * @notice Check that the fees to be taken will not overflow the purchase price\n     * @param makerFee Maker fee amount\n     * @param fees Protocol and taker fee rates\n     * @return Fees are valid\n     */\n    function _checkFee(FeeRate memory makerFee, Fees memory fees) private pure returns (bool) {\n        return makerFee.rate + fees.takerFee.rate + fees.protocolFee.rate <= _BASIS_POINTS;\n    }\n\n    /**\n     * @notice Validate a list of orders and prepare arrays for recording pending fulfillments\n     * @param orders List of orders\n     * @param orderType Order type for all orders\n     * @param signatures Bytes array of the order signatures\n     * @param fees Protocol and taker fee rates\n     */\n    function _validateOrders(\n        Order[] memory orders,\n        OrderType orderType,\n        bytes memory signatures,\n        Fees memory fees\n    ) internal view returns (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) {\n        uint256 ordersLength = orders.length;\n        validOrders = new bool[](ordersLength);\n        pendingAmountTaken = new uint256[][](ordersLength);\n        for (uint256 i; i < ordersLength; ) {\n            pendingAmountTaken[i] = new uint256[](orders[i].numberOfListings);\n            validOrders[i] = _validateOrder(orders[i], orderType, signatures, fees, i);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Validate an order\n     * @param order Order to validate\n     * @param orderType Order type\n     * @param signatures Bytes array of order signatures\n     * @param fees Protocol and taker fee rates\n     * @param signatureIndex Index of the order signature\n     * @return Validity of the order\n     */\n    function _validateOrder(\n        Order memory order,\n        OrderType orderType,\n        bytes memory signatures,\n        Fees memory fees,\n        uint256 signatureIndex\n    ) internal view returns (bool) {\n        bytes32 orderHash = hashOrder(order, orderType);\n\n        /* After hashing, the salt is no longer needed so we can store the order hash here. */\n        order.salt = uint256(orderHash);\n\n        return _verifyAuthorization(\n            order.trader,\n            orderHash,\n            signatures,\n            signatureIndex\n        ) &&\n            _checkLiveness(order) &&\n            _checkFee(order.makerFee, fees);\n    }\n\n    /**\n     * @notice Validate a listing (only valid if the order has be prevalidated)\n     * @dev Validation can be manipulated by inputting the same order twice in the orders array,\n     * which will effectively bypass the `pendingAmountTaken` check. There is a safety check at the\n     * execution phase that will revert the transaction if this manipulation overdraws an order.\n     * @param order Order of the listing\n     * @param orderType Order type\n     * @param exchange Exchange containing the listing\n     * @param validOrders List indicated which orders were validated\n     * @param pendingAmountTaken Pending fulfillments from the current batch\n     * @return validListing Validity of the listing\n     */\n    function _validateListingFromBatch(\n        Order memory order,\n        OrderType orderType,\n        Exchange memory exchange,\n        bool[] memory validOrders,\n        uint256[][] memory pendingAmountTaken\n    ) internal view returns (bool validListing) {\n        Listing memory listing = exchange.listing;\n        uint256 listingIndex = listing.index;\n        uint256 amountTaken = amountTaken[order.trader][bytes32(order.salt)][listingIndex];\n        uint256 pendingAmountTaken = pendingAmountTaken[exchange.index][listingIndex];\n        uint256 takerAmount = exchange.taker.amount;\n        unchecked {\n            validListing =\n                validOrders[exchange.index] &&\n                _validateListing(order, orderType, exchange) &&\n                pendingAmountTaken + takerAmount <= type(uint256).max - amountTaken &&\n                amountTaken + pendingAmountTaken + takerAmount <= listing.amount;\n        }\n    }\n\n    /**\n     * @notice Validate a listing and its proposed exchange\n     * @param order Order of the listing\n     * @param orderType Order type\n     * @param exchange Exchange containing the listing\n     * @return validListing Validity of the listing and its proposed exchange\n     */\n    function _validateListing(\n        Order memory order,\n        OrderType orderType,\n        Exchange memory exchange\n    ) private pure returns (bool validListing) {\n        Listing memory listing = exchange.listing;\n        validListing = MerkleProof.verify(exchange.proof, order.listingsRoot, hashListing(listing));\n        Taker memory taker = exchange.taker;\n        if (orderType == OrderType.ASK) {\n            if (order.assetType == AssetType.ERC721) {\n                validListing = validListing && taker.amount == 1 && listing.amount == 1;\n            }\n            validListing = validListing && listing.tokenId == taker.tokenId;\n        } else {\n            if (order.assetType == AssetType.ERC721) {\n                validListing = validListing && taker.amount == 1;\n            } else {\n                validListing = validListing && listing.tokenId == taker.tokenId;\n            }\n        }\n    }\n\n    /**\n     * @notice Validate both the listing and it's parent order (only for single executions)\n     * @param order Order of the listing\n     * @param orderType Order type\n     * @param exchange Exchange containing the listing\n     * @param signature Order signature\n     * @param fees Protocol and taker fee rates\n     * @return Validity of the order and listing\n     */\n    function _validateOrderAndListing(\n        Order memory order,\n        OrderType orderType,\n        Exchange memory exchange,\n        bytes memory signature,\n        Fees memory fees\n    ) internal view returns (bool) {\n        Listing memory listing = exchange.listing;\n        uint256 listingIndex = listing.index;\n        return\n            _validateOrder(order, orderType, signature, fees, 0) &&\n            _validateListing(order, orderType, exchange) &&\n            amountTaken[order.trader][bytes32(order.salt)][listingIndex] + exchange.taker.amount <=\n            listing.amount;\n    }\n\n    uint256[49] private __gap;\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Validation._validateListing', 'start_line': 700, 'end_line': 720, 'offset_start': 26402, 'offset_end': 27310, 'content': 'function _validateListing(\n        Order memory order,\n        OrderType orderType,\n        Exchange memory exchange\n    ) private pure returns (bool validListing) {\n        Listing memory listing = exchange.listing;\n        validListing = MerkleProof.verify(exchange.proof, order.listingsRoot, hashListing(listing));\n        Taker memory taker = exchange.taker;\n        if (orderType == OrderType.ASK) {\n            if (order.assetType == AssetType.ERC721) {\n                validListing = validListing && taker.amount == 1 && listing.amount == 1;\n            }\n            validListing = validListing && listing.tokenId == taker.tokenId;\n        } else {\n            if (order.assetType == AssetType.ERC721) {\n                validListing = validListing && taker.amount == 1;\n            } else {\n                validListing = validListing && listing.tokenId == taker.tokenId;\n            }\n        }\n    }', 'contract_name': 'Validation', 'contract_code': "{\n    uint256 internal constant _BASIS_POINTS = 10_000;\n    uint256 internal constant _MAX_PROTOCOL_FEE_RATE = 250;\n\n    FeeRate public protocolFee;\n\n    /* amountTaken[user][orderHash][listingIndex] */\n    mapping(address => mapping(bytes32 => mapping(uint256 => uint256))) public amountTaken;\n\n    constructor(address proxy) Signatures(proxy) {}\n\n    /**\n     * @notice Check if an order has expired\n     * @param order Order to check liveness\n     * @return Order is live\n     */\n    function _checkLiveness(Order memory order) private view returns (bool) {\n        return (order.expirationTime > block.timestamp);\n    }\n\n    /**\n     * @notice Check that the fees to be taken will not overflow the purchase price\n     * @param makerFee Maker fee amount\n     * @param fees Protocol and taker fee rates\n     * @return Fees are valid\n     */\n    function _checkFee(FeeRate memory makerFee, Fees memory fees) private pure returns (bool) {\n        return makerFee.rate + fees.takerFee.rate + fees.protocolFee.rate <= _BASIS_POINTS;\n    }\n\n    /**\n     * @notice Validate a list of orders and prepare arrays for recording pending fulfillments\n     * @param orders List of orders\n     * @param orderType Order type for all orders\n     * @param signatures Bytes array of the order signatures\n     * @param fees Protocol and taker fee rates\n     */\n    function _validateOrders(\n        Order[] memory orders,\n        OrderType orderType,\n        bytes memory signatures,\n        Fees memory fees\n    ) internal view returns (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) {\n        uint256 ordersLength = orders.length;\n        validOrders = new bool[](ordersLength);\n        pendingAmountTaken = new uint256[][](ordersLength);\n        for (uint256 i; i < ordersLength; ) {\n            pendingAmountTaken[i] = new uint256[](orders[i].numberOfListings);\n            validOrders[i] = _validateOrder(orders[i], orderType, signatures, fees, i);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Validate an order\n     * @param order Order to validate\n     * @param orderType Order type\n     * @param signatures Bytes array of order signatures\n     * @param fees Protocol and taker fee rates\n     * @param signatureIndex Index of the order signature\n     * @return Validity of the order\n     */\n    function _validateOrder(\n        Order memory order,\n        OrderType orderType,\n        bytes memory signatures,\n        Fees memory fees,\n        uint256 signatureIndex\n    ) internal view returns (bool) {\n        bytes32 orderHash = hashOrder(order, orderType);\n\n        /* After hashing, the salt is no longer needed so we can store the order hash here. */\n        order.salt = uint256(orderHash);\n\n        return _verifyAuthorization(\n            order.trader,\n            orderHash,\n            signatures,\n            signatureIndex\n        ) &&\n            _checkLiveness(order) &&\n            _checkFee(order.makerFee, fees);\n    }\n\n    /**\n     * @notice Validate a listing (only valid if the order has be prevalidated)\n     * @dev Validation can be manipulated by inputting the same order twice in the orders array,\n     * which will effectively bypass the `pendingAmountTaken` check. There is a safety check at the\n     * execution phase that will revert the transaction if this manipulation overdraws an order.\n     * @param order Order of the listing\n     * @param orderType Order type\n     * @param exchange Exchange containing the listing\n     * @param validOrders List indicated which orders were validated\n     * @param pendingAmountTaken Pending fulfillments from the current batch\n     * @return validListing Validity of the listing\n     */\n    function _validateListingFromBatch(\n        Order memory order,\n        OrderType orderType,\n        Exchange memory exchange,\n        bool[] memory validOrders,\n        uint256[][] memory pendingAmountTaken\n    ) internal view returns (bool validListing) {\n        Listing memory listing = exchange.listing;\n        uint256 listingIndex = listing.index;\n        uint256 amountTaken = amountTaken[order.trader][bytes32(order.salt)][listingIndex];\n        uint256 pendingAmountTaken = pendingAmountTaken[exchange.index][listingIndex];\n        uint256 takerAmount = exchange.taker.amount;\n        unchecked {\n            validListing =\n                validOrders[exchange.index] &&\n                _validateListing(order, orderType, exchange) &&\n                pendingAmountTaken + takerAmount <= type(uint256).max - amountTaken &&\n                amountTaken + pendingAmountTaken + takerAmount <= listing.amount;\n        }\n    }\n\n    /**\n     * @notice Validate a listing and its proposed exchange\n     * @param order Order of the listing\n     * @param orderType Order type\n     * @param exchange Exchange containing the listing\n     * @return validListing Validity of the listing and its proposed exchange\n     */\n    function _validateListing(\n        Order memory order,\n        OrderType orderType,\n        Exchange memory exchange\n    ) private pure returns (bool validListing) {\n        Listing memory listing = exchange.listing;\n        validListing = MerkleProof.verify(exchange.proof, order.listingsRoot, hashListing(listing));\n        Taker memory taker = exchange.taker;\n        if (orderType == OrderType.ASK) {\n            if (order.assetType == AssetType.ERC721) {\n                validListing = validListing && taker.amount == 1 && listing.amount == 1;\n            }\n            validListing = validListing && listing.tokenId == taker.tokenId;\n        } else {\n            if (order.assetType == AssetType.ERC721) {\n                validListing = validListing && taker.amount == 1;\n            } else {\n                validListing = validListing && listing.tokenId == taker.tokenId;\n            }\n        }\n    }\n\n    /**\n     * @notice Validate both the listing and it's parent order (only for single executions)\n     * @param order Order of the listing\n     * @param orderType Order type\n     * @param exchange Exchange containing the listing\n     * @param signature Order signature\n     * @param fees Protocol and taker fee rates\n     * @return Validity of the order and listing\n     */\n    function _validateOrderAndListing(\n        Order memory order,\n        OrderType orderType,\n        Exchange memory exchange,\n        bytes memory signature,\n        Fees memory fees\n    ) internal view returns (bool) {\n        Listing memory listing = exchange.listing;\n        uint256 listingIndex = listing.index;\n        return\n            _validateOrder(order, orderType, signature, fees, 0) &&\n            _validateListing(order, orderType, exchange) &&\n            amountTaken[order.trader][bytes32(order.salt)][listingIndex] + exchange.taker.amount <=\n            listing.amount;\n    }\n\n    uint256[49] private __gap;\n}", 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'private', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Validation._validateOrderAndListing', 'start_line': 731, 'end_line': 745, 'offset_start': 27693, 'offset_end': 28285, 'content': 'function _validateOrderAndListing(\n        Order memory order,\n        OrderType orderType,\n        Exchange memory exchange,\n        bytes memory signature,\n        Fees memory fees\n    ) internal view returns (bool) {\n        Listing memory listing = exchange.listing;\n        uint256 listingIndex = listing.index;\n        return\n            _validateOrder(order, orderType, signature, fees, 0) &&\n            _validateListing(order, orderType, exchange) &&\n            amountTaken[order.trader][bytes32(order.salt)][listingIndex] + exchange.taker.amount <=\n            listing.amount;\n    }', 'contract_name': 'Validation', 'contract_code': "{\n    uint256 internal constant _BASIS_POINTS = 10_000;\n    uint256 internal constant _MAX_PROTOCOL_FEE_RATE = 250;\n\n    FeeRate public protocolFee;\n\n    /* amountTaken[user][orderHash][listingIndex] */\n    mapping(address => mapping(bytes32 => mapping(uint256 => uint256))) public amountTaken;\n\n    constructor(address proxy) Signatures(proxy) {}\n\n    /**\n     * @notice Check if an order has expired\n     * @param order Order to check liveness\n     * @return Order is live\n     */\n    function _checkLiveness(Order memory order) private view returns (bool) {\n        return (order.expirationTime > block.timestamp);\n    }\n\n    /**\n     * @notice Check that the fees to be taken will not overflow the purchase price\n     * @param makerFee Maker fee amount\n     * @param fees Protocol and taker fee rates\n     * @return Fees are valid\n     */\n    function _checkFee(FeeRate memory makerFee, Fees memory fees) private pure returns (bool) {\n        return makerFee.rate + fees.takerFee.rate + fees.protocolFee.rate <= _BASIS_POINTS;\n    }\n\n    /**\n     * @notice Validate a list of orders and prepare arrays for recording pending fulfillments\n     * @param orders List of orders\n     * @param orderType Order type for all orders\n     * @param signatures Bytes array of the order signatures\n     * @param fees Protocol and taker fee rates\n     */\n    function _validateOrders(\n        Order[] memory orders,\n        OrderType orderType,\n        bytes memory signatures,\n        Fees memory fees\n    ) internal view returns (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) {\n        uint256 ordersLength = orders.length;\n        validOrders = new bool[](ordersLength);\n        pendingAmountTaken = new uint256[][](ordersLength);\n        for (uint256 i; i < ordersLength; ) {\n            pendingAmountTaken[i] = new uint256[](orders[i].numberOfListings);\n            validOrders[i] = _validateOrder(orders[i], orderType, signatures, fees, i);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Validate an order\n     * @param order Order to validate\n     * @param orderType Order type\n     * @param signatures Bytes array of order signatures\n     * @param fees Protocol and taker fee rates\n     * @param signatureIndex Index of the order signature\n     * @return Validity of the order\n     */\n    function _validateOrder(\n        Order memory order,\n        OrderType orderType,\n        bytes memory signatures,\n        Fees memory fees,\n        uint256 signatureIndex\n    ) internal view returns (bool) {\n        bytes32 orderHash = hashOrder(order, orderType);\n\n        /* After hashing, the salt is no longer needed so we can store the order hash here. */\n        order.salt = uint256(orderHash);\n\n        return _verifyAuthorization(\n            order.trader,\n            orderHash,\n            signatures,\n            signatureIndex\n        ) &&\n            _checkLiveness(order) &&\n            _checkFee(order.makerFee, fees);\n    }\n\n    /**\n     * @notice Validate a listing (only valid if the order has be prevalidated)\n     * @dev Validation can be manipulated by inputting the same order twice in the orders array,\n     * which will effectively bypass the `pendingAmountTaken` check. There is a safety check at the\n     * execution phase that will revert the transaction if this manipulation overdraws an order.\n     * @param order Order of the listing\n     * @param orderType Order type\n     * @param exchange Exchange containing the listing\n     * @param validOrders List indicated which orders were validated\n     * @param pendingAmountTaken Pending fulfillments from the current batch\n     * @return validListing Validity of the listing\n     */\n    function _validateListingFromBatch(\n        Order memory order,\n        OrderType orderType,\n        Exchange memory exchange,\n        bool[] memory validOrders,\n        uint256[][] memory pendingAmountTaken\n    ) internal view returns (bool validListing) {\n        Listing memory listing = exchange.listing;\n        uint256 listingIndex = listing.index;\n        uint256 amountTaken = amountTaken[order.trader][bytes32(order.salt)][listingIndex];\n        uint256 pendingAmountTaken = pendingAmountTaken[exchange.index][listingIndex];\n        uint256 takerAmount = exchange.taker.amount;\n        unchecked {\n            validListing =\n                validOrders[exchange.index] &&\n                _validateListing(order, orderType, exchange) &&\n                pendingAmountTaken + takerAmount <= type(uint256).max - amountTaken &&\n                amountTaken + pendingAmountTaken + takerAmount <= listing.amount;\n        }\n    }\n\n    /**\n     * @notice Validate a listing and its proposed exchange\n     * @param order Order of the listing\n     * @param orderType Order type\n     * @param exchange Exchange containing the listing\n     * @return validListing Validity of the listing and its proposed exchange\n     */\n    function _validateListing(\n        Order memory order,\n        OrderType orderType,\n        Exchange memory exchange\n    ) private pure returns (bool validListing) {\n        Listing memory listing = exchange.listing;\n        validListing = MerkleProof.verify(exchange.proof, order.listingsRoot, hashListing(listing));\n        Taker memory taker = exchange.taker;\n        if (orderType == OrderType.ASK) {\n            if (order.assetType == AssetType.ERC721) {\n                validListing = validListing && taker.amount == 1 && listing.amount == 1;\n            }\n            validListing = validListing && listing.tokenId == taker.tokenId;\n        } else {\n            if (order.assetType == AssetType.ERC721) {\n                validListing = validListing && taker.amount == 1;\n            } else {\n                validListing = validListing && listing.tokenId == taker.tokenId;\n            }\n        }\n    }\n\n    /**\n     * @notice Validate both the listing and it's parent order (only for single executions)\n     * @param order Order of the listing\n     * @param orderType Order type\n     * @param exchange Exchange containing the listing\n     * @param signature Order signature\n     * @param fees Protocol and taker fee rates\n     * @return Validity of the order and listing\n     */\n    function _validateOrderAndListing(\n        Order memory order,\n        OrderType orderType,\n        Exchange memory exchange,\n        bytes memory signature,\n        Fees memory fees\n    ) internal view returns (bool) {\n        Listing memory listing = exchange.listing;\n        uint256 listingIndex = listing.index;\n        return\n            _validateOrder(order, orderType, signature, fees, 0) &&\n            _validateListing(order, orderType, exchange) &&\n            amountTaken[order.trader][bytes32(order.salt)][listingIndex] + exchange.taker.amount <=\n            listing.amount;\n    }\n\n    uint256[49] private __gap;\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'ISignatures.oracles', 'start_line': 770, 'end_line': 770, 'offset_start': 28706, 'offset_end': 28770, 'content': 'function oracles(address oracle) external view returns (uint256);', 'contract_name': 'ISignatures', 'contract_code': '{\n    error Unauthorized();\n    error ExpiredOracleSignature();\n    error UnauthorizedOracle();\n    error InvalidOracleSignature();\n    error InvalidDomain();\n\n    function oracles(address oracle) external view returns (uint256);\n    function nonces(address user) external view returns (uint256);\n    function blockRange() external view returns (uint256);\n\n    function verifyDomain() external view;\n\n    function information() external view returns (string memory version, bytes32 domainSeparator);\n    function hashListing(Listing memory listing) external pure returns (bytes32);\n    function hashOrder(Order memory order, OrderType orderType) external view returns (bytes32);\n    function hashTakeAsk(TakeAsk memory inputs, address _caller) external pure returns (bytes32);\n    function hashTakeBid(TakeBid memory inputs, address _caller) external pure returns (bytes32);\n    function hashTakeAskSingle(TakeAskSingle memory inputs, address _caller) external pure returns (bytes32);\n    function hashTakeBidSingle(TakeBidSingle memory inputs, address _caller) external pure returns (bytes32);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'ISignatures.nonces', 'start_line': 771, 'end_line': 771, 'offset_start': 28776, 'offset_end': 28837, 'content': 'function nonces(address user) external view returns (uint256);', 'contract_name': 'ISignatures', 'contract_code': '{\n    error Unauthorized();\n    error ExpiredOracleSignature();\n    error UnauthorizedOracle();\n    error InvalidOracleSignature();\n    error InvalidDomain();\n\n    function oracles(address oracle) external view returns (uint256);\n    function nonces(address user) external view returns (uint256);\n    function blockRange() external view returns (uint256);\n\n    function verifyDomain() external view;\n\n    function information() external view returns (string memory version, bytes32 domainSeparator);\n    function hashListing(Listing memory listing) external pure returns (bytes32);\n    function hashOrder(Order memory order, OrderType orderType) external view returns (bytes32);\n    function hashTakeAsk(TakeAsk memory inputs, address _caller) external pure returns (bytes32);\n    function hashTakeBid(TakeBid memory inputs, address _caller) external pure returns (bytes32);\n    function hashTakeAskSingle(TakeAskSingle memory inputs, address _caller) external pure returns (bytes32);\n    function hashTakeBidSingle(TakeBidSingle memory inputs, address _caller) external pure returns (bytes32);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'ISignatures.blockRange', 'start_line': 772, 'end_line': 772, 'offset_start': 28843, 'offset_end': 28896, 'content': 'function blockRange() external view returns (uint256);', 'contract_name': 'ISignatures', 'contract_code': '{\n    error Unauthorized();\n    error ExpiredOracleSignature();\n    error UnauthorizedOracle();\n    error InvalidOracleSignature();\n    error InvalidDomain();\n\n    function oracles(address oracle) external view returns (uint256);\n    function nonces(address user) external view returns (uint256);\n    function blockRange() external view returns (uint256);\n\n    function verifyDomain() external view;\n\n    function information() external view returns (string memory version, bytes32 domainSeparator);\n    function hashListing(Listing memory listing) external pure returns (bytes32);\n    function hashOrder(Order memory order, OrderType orderType) external view returns (bytes32);\n    function hashTakeAsk(TakeAsk memory inputs, address _caller) external pure returns (bytes32);\n    function hashTakeBid(TakeBid memory inputs, address _caller) external pure returns (bytes32);\n    function hashTakeAskSingle(TakeAskSingle memory inputs, address _caller) external pure returns (bytes32);\n    function hashTakeBidSingle(TakeBidSingle memory inputs, address _caller) external pure returns (bytes32);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'ISignatures.verifyDomain', 'start_line': 774, 'end_line': 774, 'offset_start': 28903, 'offset_end': 28940, 'content': 'function verifyDomain() external view;', 'contract_name': 'ISignatures', 'contract_code': '{\n    error Unauthorized();\n    error ExpiredOracleSignature();\n    error UnauthorizedOracle();\n    error InvalidOracleSignature();\n    error InvalidDomain();\n\n    function oracles(address oracle) external view returns (uint256);\n    function nonces(address user) external view returns (uint256);\n    function blockRange() external view returns (uint256);\n\n    function verifyDomain() external view;\n\n    function information() external view returns (string memory version, bytes32 domainSeparator);\n    function hashListing(Listing memory listing) external pure returns (bytes32);\n    function hashOrder(Order memory order, OrderType orderType) external view returns (bytes32);\n    function hashTakeAsk(TakeAsk memory inputs, address _caller) external pure returns (bytes32);\n    function hashTakeBid(TakeBid memory inputs, address _caller) external pure returns (bytes32);\n    function hashTakeAskSingle(TakeAskSingle memory inputs, address _caller) external pure returns (bytes32);\n    function hashTakeBidSingle(TakeBidSingle memory inputs, address _caller) external pure returns (bytes32);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'ISignatures.information', 'start_line': 776, 'end_line': 776, 'offset_start': 28947, 'offset_end': 29040, 'content': 'function information() external view returns (string memory version, bytes32 domainSeparator);', 'contract_name': 'ISignatures', 'contract_code': '{\n    error Unauthorized();\n    error ExpiredOracleSignature();\n    error UnauthorizedOracle();\n    error InvalidOracleSignature();\n    error InvalidDomain();\n\n    function oracles(address oracle) external view returns (uint256);\n    function nonces(address user) external view returns (uint256);\n    function blockRange() external view returns (uint256);\n\n    function verifyDomain() external view;\n\n    function information() external view returns (string memory version, bytes32 domainSeparator);\n    function hashListing(Listing memory listing) external pure returns (bytes32);\n    function hashOrder(Order memory order, OrderType orderType) external view returns (bytes32);\n    function hashTakeAsk(TakeAsk memory inputs, address _caller) external pure returns (bytes32);\n    function hashTakeBid(TakeBid memory inputs, address _caller) external pure returns (bytes32);\n    function hashTakeAskSingle(TakeAskSingle memory inputs, address _caller) external pure returns (bytes32);\n    function hashTakeBidSingle(TakeBidSingle memory inputs, address _caller) external pure returns (bytes32);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'ISignatures.hashListing', 'start_line': 777, 'end_line': 777, 'offset_start': 29046, 'offset_end': 29122, 'content': 'function hashListing(Listing memory listing) external pure returns (bytes32);', 'contract_name': 'ISignatures', 'contract_code': '{\n    error Unauthorized();\n    error ExpiredOracleSignature();\n    error UnauthorizedOracle();\n    error InvalidOracleSignature();\n    error InvalidDomain();\n\n    function oracles(address oracle) external view returns (uint256);\n    function nonces(address user) external view returns (uint256);\n    function blockRange() external view returns (uint256);\n\n    function verifyDomain() external view;\n\n    function information() external view returns (string memory version, bytes32 domainSeparator);\n    function hashListing(Listing memory listing) external pure returns (bytes32);\n    function hashOrder(Order memory order, OrderType orderType) external view returns (bytes32);\n    function hashTakeAsk(TakeAsk memory inputs, address _caller) external pure returns (bytes32);\n    function hashTakeBid(TakeBid memory inputs, address _caller) external pure returns (bytes32);\n    function hashTakeAskSingle(TakeAskSingle memory inputs, address _caller) external pure returns (bytes32);\n    function hashTakeBidSingle(TakeBidSingle memory inputs, address _caller) external pure returns (bytes32);\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'ISignatures.hashOrder', 'start_line': 778, 'end_line': 778, 'offset_start': 29128, 'offset_end': 29219, 'content': 'function hashOrder(Order memory order, OrderType orderType) external view returns (bytes32);', 'contract_name': 'ISignatures', 'contract_code': '{\n    error Unauthorized();\n    error ExpiredOracleSignature();\n    error UnauthorizedOracle();\n    error InvalidOracleSignature();\n    error InvalidDomain();\n\n    function oracles(address oracle) external view returns (uint256);\n    function nonces(address user) external view returns (uint256);\n    function blockRange() external view returns (uint256);\n\n    function verifyDomain() external view;\n\n    function information() external view returns (string memory version, bytes32 domainSeparator);\n    function hashListing(Listing memory listing) external pure returns (bytes32);\n    function hashOrder(Order memory order, OrderType orderType) external view returns (bytes32);\n    function hashTakeAsk(TakeAsk memory inputs, address _caller) external pure returns (bytes32);\n    function hashTakeBid(TakeBid memory inputs, address _caller) external pure returns (bytes32);\n    function hashTakeAskSingle(TakeAskSingle memory inputs, address _caller) external pure returns (bytes32);\n    function hashTakeBidSingle(TakeBidSingle memory inputs, address _caller) external pure returns (bytes32);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'ISignatures.hashTakeAsk', 'start_line': 779, 'end_line': 779, 'offset_start': 29225, 'offset_end': 29317, 'content': 'function hashTakeAsk(TakeAsk memory inputs, address _caller) external pure returns (bytes32);', 'contract_name': 'ISignatures', 'contract_code': '{\n    error Unauthorized();\n    error ExpiredOracleSignature();\n    error UnauthorizedOracle();\n    error InvalidOracleSignature();\n    error InvalidDomain();\n\n    function oracles(address oracle) external view returns (uint256);\n    function nonces(address user) external view returns (uint256);\n    function blockRange() external view returns (uint256);\n\n    function verifyDomain() external view;\n\n    function information() external view returns (string memory version, bytes32 domainSeparator);\n    function hashListing(Listing memory listing) external pure returns (bytes32);\n    function hashOrder(Order memory order, OrderType orderType) external view returns (bytes32);\n    function hashTakeAsk(TakeAsk memory inputs, address _caller) external pure returns (bytes32);\n    function hashTakeBid(TakeBid memory inputs, address _caller) external pure returns (bytes32);\n    function hashTakeAskSingle(TakeAskSingle memory inputs, address _caller) external pure returns (bytes32);\n    function hashTakeBidSingle(TakeBidSingle memory inputs, address _caller) external pure returns (bytes32);\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'ISignatures.hashTakeBid', 'start_line': 780, 'end_line': 780, 'offset_start': 29323, 'offset_end': 29415, 'content': 'function hashTakeBid(TakeBid memory inputs, address _caller) external pure returns (bytes32);', 'contract_name': 'ISignatures', 'contract_code': '{\n    error Unauthorized();\n    error ExpiredOracleSignature();\n    error UnauthorizedOracle();\n    error InvalidOracleSignature();\n    error InvalidDomain();\n\n    function oracles(address oracle) external view returns (uint256);\n    function nonces(address user) external view returns (uint256);\n    function blockRange() external view returns (uint256);\n\n    function verifyDomain() external view;\n\n    function information() external view returns (string memory version, bytes32 domainSeparator);\n    function hashListing(Listing memory listing) external pure returns (bytes32);\n    function hashOrder(Order memory order, OrderType orderType) external view returns (bytes32);\n    function hashTakeAsk(TakeAsk memory inputs, address _caller) external pure returns (bytes32);\n    function hashTakeBid(TakeBid memory inputs, address _caller) external pure returns (bytes32);\n    function hashTakeAskSingle(TakeAskSingle memory inputs, address _caller) external pure returns (bytes32);\n    function hashTakeBidSingle(TakeBidSingle memory inputs, address _caller) external pure returns (bytes32);\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'ISignatures.hashTakeAskSingle', 'start_line': 781, 'end_line': 781, 'offset_start': 29421, 'offset_end': 29525, 'content': 'function hashTakeAskSingle(TakeAskSingle memory inputs, address _caller) external pure returns (bytes32);', 'contract_name': 'ISignatures', 'contract_code': '{\n    error Unauthorized();\n    error ExpiredOracleSignature();\n    error UnauthorizedOracle();\n    error InvalidOracleSignature();\n    error InvalidDomain();\n\n    function oracles(address oracle) external view returns (uint256);\n    function nonces(address user) external view returns (uint256);\n    function blockRange() external view returns (uint256);\n\n    function verifyDomain() external view;\n\n    function information() external view returns (string memory version, bytes32 domainSeparator);\n    function hashListing(Listing memory listing) external pure returns (bytes32);\n    function hashOrder(Order memory order, OrderType orderType) external view returns (bytes32);\n    function hashTakeAsk(TakeAsk memory inputs, address _caller) external pure returns (bytes32);\n    function hashTakeBid(TakeBid memory inputs, address _caller) external pure returns (bytes32);\n    function hashTakeAskSingle(TakeAskSingle memory inputs, address _caller) external pure returns (bytes32);\n    function hashTakeBidSingle(TakeBidSingle memory inputs, address _caller) external pure returns (bytes32);\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'ISignatures.hashTakeBidSingle', 'start_line': 782, 'end_line': 782, 'offset_start': 29531, 'offset_end': 29635, 'content': 'function hashTakeBidSingle(TakeBidSingle memory inputs, address _caller) external pure returns (bytes32);', 'contract_name': 'ISignatures', 'contract_code': '{\n    error Unauthorized();\n    error ExpiredOracleSignature();\n    error UnauthorizedOracle();\n    error InvalidOracleSignature();\n    error InvalidDomain();\n\n    function oracles(address oracle) external view returns (uint256);\n    function nonces(address user) external view returns (uint256);\n    function blockRange() external view returns (uint256);\n\n    function verifyDomain() external view;\n\n    function information() external view returns (string memory version, bytes32 domainSeparator);\n    function hashListing(Listing memory listing) external pure returns (bytes32);\n    function hashOrder(Order memory order, OrderType orderType) external view returns (bytes32);\n    function hashTakeAsk(TakeAsk memory inputs, address _caller) external pure returns (bytes32);\n    function hashTakeBid(TakeBid memory inputs, address _caller) external pure returns (bytes32);\n    function hashTakeAskSingle(TakeAskSingle memory inputs, address _caller) external pure returns (bytes32);\n    function hashTakeBidSingle(TakeBidSingle memory inputs, address _caller) external pure returns (bytes32);\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'StorageSlotUpgradeable.getAddressSlot', 'start_line': 836, 'end_line': 841, 'offset_start': 31265, 'offset_end': 31454, 'content': 'function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }', 'contract_name': 'StorageSlotUpgradeable', 'contract_code': '{\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'StorageSlotUpgradeable.getBooleanSlot', 'start_line': 846, 'end_line': 851, 'offset_start': 31553, 'offset_end': 31742, 'content': 'function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }', 'contract_name': 'StorageSlotUpgradeable', 'contract_code': '{\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'StorageSlotUpgradeable.getBytes32Slot', 'start_line': 856, 'end_line': 861, 'offset_start': 31841, 'offset_end': 32030, 'content': 'function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }', 'contract_name': 'StorageSlotUpgradeable', 'contract_code': '{\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'StorageSlotUpgradeable.getUint256Slot', 'start_line': 866, 'end_line': 871, 'offset_start': 32129, 'offset_end': 32318, 'content': 'function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }', 'contract_name': 'StorageSlotUpgradeable', 'contract_code': '{\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'UUPSUpgradeable.__UUPSUpgradeable_init', 'start_line': 923, 'end_line': 924, 'offset_start': 34042, 'offset_end': 34108, 'content': 'function __UUPSUpgradeable_init() internal onlyInitializing {\n    }', 'contract_name': 'UUPSUpgradeable', 'contract_code': '{\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, "Function must be called through delegatecall");\n        require(_getImplementation() == __self, "Function must be called through active proxy");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, "UUPSUpgradeable: must not be called through delegatecall");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation\'s compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'UUPSUpgradeable.__UUPSUpgradeable_init_unchained', 'start_line': 926, 'end_line': 927, 'offset_start': 34115, 'offset_end': 34191, 'content': 'function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }', 'contract_name': 'UUPSUpgradeable', 'contract_code': '{\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, "Function must be called through delegatecall");\n        require(_getImplementation() == __self, "Function must be called through active proxy");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, "UUPSUpgradeable: must not be called through delegatecall");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation\'s compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'UUPSUpgradeable.proxiableUUID', 'start_line': 961, 'end_line': 963, 'offset_start': 36006, 'offset_end': 36136, 'content': 'function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }', 'contract_name': 'UUPSUpgradeable', 'contract_code': '{\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, "Function must be called through delegatecall");\n        require(_getImplementation() == __self, "Function must be called through active proxy");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, "UUPSUpgradeable: must not be called through delegatecall");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation\'s compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}', 'modifiers': [None], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'UUPSUpgradeable.upgradeTo', 'start_line': 972, 'end_line': 975, 'offset_start': 36317, 'offset_end': 36513, 'content': 'function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }', 'contract_name': 'UUPSUpgradeable', 'contract_code': '{\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, "Function must be called through delegatecall");\n        require(_getImplementation() == __self, "Function must be called through active proxy");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, "UUPSUpgradeable: must not be called through delegatecall");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation\'s compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'UUPSUpgradeable.upgradeToAndCall', 'start_line': 985, 'end_line': 988, 'offset_start': 36763, 'offset_end': 36984, 'content': 'function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }', 'contract_name': 'UUPSUpgradeable', 'contract_code': '{\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, "Function must be called through delegatecall");\n        require(_getImplementation() == __self, "Function must be called through active proxy");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, "UUPSUpgradeable: must not be called through delegatecall");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation\'s compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}', 'modifiers': [None], 'stateMutability': 'payable', 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'UUPSUpgradeable._authorizeUpgrade', 'start_line': 1000, 'end_line': 1000, 'offset_start': 37393, 'offset_end': 37463, 'content': 'function _authorizeUpgrade(address newImplementation) internal virtual;', 'contract_name': 'UUPSUpgradeable', 'contract_code': '{\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, "Function must be called through delegatecall");\n        require(_getImplementation() == __self, "Function must be called through active proxy");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, "UUPSUpgradeable: must not be called through delegatecall");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation\'s compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'BlurExchangeV2._authorizeUpgrade', 'start_line': 1049, 'end_line': 1049, 'offset_start': 38780, 'offset_end': 38845, 'content': 'function _authorizeUpgrade(address) internal override onlyOwner {}', 'contract_name': 'BlurExchangeV2', 'contract_code': "{\n    address public governor;\n\n    // required by the OZ UUPS module\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    constructor(address delegate, address pool, address proxy) Executor(delegate, pool, proxy) {\n        _disableInitializers();\n    }\n\n    function initialize() external initializer {\n        __UUPSUpgradeable_init();\n        __Ownable_init();\n        __Reentrancy_init();\n        verifyDomain();\n    }\n\n    modifier onlyGovernor() {\n        if (msg.sender != governor) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    /**\n     * @notice Governor only function to set the protocol fee rate and recipient\n     * @param recipient Protocol fee recipient\n     * @param rate Protocol fee rate\n     */\n    function setProtocolFee(address recipient, uint16 rate) external onlyGovernor {\n        if (rate > _MAX_PROTOCOL_FEE_RATE) {\n            revert ProtocolFeeTooHigh();\n        }\n        protocolFee = FeeRate(recipient, rate);\n        emit NewProtocolFee(recipient, rate);\n    }\n\n    /**\n     * @notice Admin only function to set the governor of the exchange\n     * @param _governor Address of governor to set\n     */\n    function setGovernor(address _governor) external onlyOwner {\n        governor = _governor;\n        emit NewGovernor(_governor);\n    }\n\n    /**\n     * @notice Admin only function to grant or revoke the approval of an oracle\n     * @param oracle Address to set approval of\n     * @param approved If the oracle should be approved or not\n     */\n    function setOracle(address oracle, bool approved) external onlyOwner {\n        if (approved) {\n            oracles[oracle] = 1;\n        } else {\n            oracles[oracle] = 0;\n        }\n        emit SetOracle(oracle, approved);\n    }\n\n    /**\n     * @notice Admin only function to set the block range\n     * @param _blockRange Block range that oracle signatures are valid for\n     */\n    function setBlockRange(uint256 _blockRange) external onlyOwner {\n        blockRange = _blockRange;\n        emit NewBlockRange(_blockRange);\n    }\n\n    /**\n     * @notice Cancel listings by recording their fulfillment\n     * @param cancels List of cancels to execute\n     */\n    function cancelTrades(Cancel[] memory cancels) external {\n        uint256 cancelsLength = cancels.length;\n        for (uint256 i; i < cancelsLength; ) {\n            Cancel memory cancel = cancels[i];\n            amountTaken[msg.sender][cancel.hash][cancel.index] += cancel.amount;\n            emit CancelTrade(msg.sender, cancel.hash, cancel.index, cancel.amount);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Cancels all orders by incrementing caller nonce\n     */\n    function incrementNonce() external {\n        emit NonceIncremented(msg.sender, ++nonces[msg.sender]);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of _takeAsk that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAsk(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAsk(\n            inputs.orders,\n            inputs.exchanges,\n            inputs.takerFee,\n            inputs.signatures,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBid that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBid\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBid(\n        TakeBid memory inputs,\n        bytes calldata oracleSignature\n    ) public verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBid(inputs.orders, inputs.exchanges, inputs.takerFee, inputs.signatures);\n    }\n\n    /**\n     * @notice Wrapper of _takeAskSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAskSingle(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAskSingle(\n            inputs.order,\n            inputs.exchange,\n            inputs.takerFee,\n            inputs.signature,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBidSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBidSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBidSingle(\n        TakeBidSingle memory inputs,\n        bytes calldata oracleSignature\n    ) external verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBidSingle(inputs.order, inputs.exchange, inputs.takerFee, inputs.signature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of takeAskSingle that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAskSingle(inputs, oracleSignature);\n    }\n\n    /**\n     * @notice Wrapper of takeAsk that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAsk(inputs, oracleSignature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Take a single ask\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     * @param tokenRecipient Address to receive the token transfer\n     */\n    function _takeAskSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.ASK, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.ASK,\n            listing.tokenId,\n            takerAmount,\n            tokenRecipient\n        );\n\n        /* Set the fulfillment of the order. */\n        unchecked {\n            amountTaken[order.trader][bytes32(order.salt)][listing.index] += takerAmount;\n        }\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* If there are insufficient funds to cover the price with the fees, revert. */\n        unchecked {\n            if (address(this).balance < totalPrice + takerFeeAmount) {\n                revert InsufficientFunds();\n            }\n        }\n\n        /* Execute ETH transfers. */\n        _transferETH(fees.protocolFee.recipient, protocolFeeAmount);\n        _transferETH(fees.takerFee.recipient, takerFeeAmount);\n        _transferETH(order.makerFee.recipient, makerFeeAmount);\n        unchecked {\n            _transferETH(order.trader, totalPrice - makerFeeAmount - protocolFeeAmount);\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take a single bid\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     */\n    function _takeBidSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.BID, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.BID,\n            exchange.taker.tokenId,\n            takerAmount,\n            msg.sender\n        );\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* Execute pool transfers and set the fulfillment of the order. */\n        address trader = order.trader;\n        _transferPool(trader, order.makerFee.recipient, makerFeeAmount);\n        _transferPool(trader, fees.takerFee.recipient, takerFeeAmount);\n        _transferPool(trader, fees.protocolFee.recipient, protocolFeeAmount);\n        unchecked {\n            _transferPool(trader, msg.sender, totalPrice - takerFeeAmount - protocolFeeAmount);\n\n            amountTaken[trader][bytes32(order.salt)][listing.index] += exchange.taker.amount;\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.BID);\n    }\n\n    /**\n     * @notice Take multiple asks; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     * @param tokenRecipient Address to receive the tokens purchased\n     */\n    function _takeAsk(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.ASK,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.ASK, tokenRecipient);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        uint256 remainingETH = address(this).balance;\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.ASK,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                bool inserted;\n                (remainingETH, inserted) = _insertExecutionAsk(\n                    executionBatch,\n                    fungibleTransfers,\n                    order,\n                    exchange,\n                    fees,\n                    remainingETH\n                );\n                if (inserted) {\n                    unchecked {\n                        pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                            .taker\n                            .amount;\n                    }\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take multiple bids; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     */\n    function _takeBid(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.BID,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.BID, msg.sender);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.BID,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                _insertExecutionBid(executionBatch, fungibleTransfers, order, exchange, fees);\n\n                /* Record the pending fulfillment. */\n                unchecked {\n                    pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                        .taker\n                        .amount;\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.BID);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Initialize the ExecutionBatch and FungibleTransfers objects for bulk execution\n     * @param exchangesLength Number of exchanges\n     * @param orderType Order type\n     * @param taker Order taker address\n     */\n    function _initializeBatch(\n        uint256 exchangesLength,\n        OrderType orderType,\n        address taker\n    )\n        internal\n        pure\n        returns (bytes memory executionBatch, FungibleTransfers memory fungibleTransfers)\n    {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size * exchangesLength + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), exchangesLength) // set the length of the transfers array\n        }\n\n        /* Initialize the fungible transfers object. */\n        AtomicExecution[] memory executions = new AtomicExecution[](exchangesLength);\n        address[] memory feeRecipients = new address[](exchangesLength);\n        address[] memory makers = new address[](exchangesLength);\n        uint256[] memory makerTransfers = new uint256[](exchangesLength);\n        uint256[] memory feeTransfers = new uint256[](exchangesLength);\n        fungibleTransfers = FungibleTransfers({\n            totalProtocolFee: 0,\n            totalSellerTransfer: 0,\n            totalTakerFee: 0,\n            feeRecipientId: 0,\n            feeRecipients: feeRecipients,\n            makerId: 0,\n            makers: makers,\n            feeTransfers: feeTransfers,\n            makerTransfers: makerTransfers,\n            executions: executions\n        });\n    }\n\n    /**\n     * @notice Initialize the ExecutionBatch object for a single execution\n     * @param order Order to take a Listing from\n     * @param orderType Order type\n     * @param tokenId Token id\n     * @param amount ERC721/ERC1155 amount\n     * @param taker Order taker address\n     */\n    function _initializeSingleExecution(\n        Order memory order,\n        OrderType orderType,\n        uint256 tokenId,\n        uint256 amount,\n        address taker\n    ) internal pure returns (bytes memory executionBatch) {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), 1) // set the length of the transfers array\n        }\n\n        /* Insert the transfer into the batch. */\n        _insertNonfungibleTransfer(executionBatch, order, tokenId, amount);\n    }\n}", 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'BlurExchangeV2.tor', 'start_line': 1051, 'end_line': 1053, 'offset_start': 38852, 'offset_end': 38981, 'content': 'constructor(address delegate, address pool, address proxy) Executor(delegate, pool, proxy) {\n        _disableInitializers();\n    }', 'contract_name': 'BlurExchangeV2', 'contract_code': "{\n    address public governor;\n\n    // required by the OZ UUPS module\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    constructor(address delegate, address pool, address proxy) Executor(delegate, pool, proxy) {\n        _disableInitializers();\n    }\n\n    function initialize() external initializer {\n        __UUPSUpgradeable_init();\n        __Ownable_init();\n        __Reentrancy_init();\n        verifyDomain();\n    }\n\n    modifier onlyGovernor() {\n        if (msg.sender != governor) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    /**\n     * @notice Governor only function to set the protocol fee rate and recipient\n     * @param recipient Protocol fee recipient\n     * @param rate Protocol fee rate\n     */\n    function setProtocolFee(address recipient, uint16 rate) external onlyGovernor {\n        if (rate > _MAX_PROTOCOL_FEE_RATE) {\n            revert ProtocolFeeTooHigh();\n        }\n        protocolFee = FeeRate(recipient, rate);\n        emit NewProtocolFee(recipient, rate);\n    }\n\n    /**\n     * @notice Admin only function to set the governor of the exchange\n     * @param _governor Address of governor to set\n     */\n    function setGovernor(address _governor) external onlyOwner {\n        governor = _governor;\n        emit NewGovernor(_governor);\n    }\n\n    /**\n     * @notice Admin only function to grant or revoke the approval of an oracle\n     * @param oracle Address to set approval of\n     * @param approved If the oracle should be approved or not\n     */\n    function setOracle(address oracle, bool approved) external onlyOwner {\n        if (approved) {\n            oracles[oracle] = 1;\n        } else {\n            oracles[oracle] = 0;\n        }\n        emit SetOracle(oracle, approved);\n    }\n\n    /**\n     * @notice Admin only function to set the block range\n     * @param _blockRange Block range that oracle signatures are valid for\n     */\n    function setBlockRange(uint256 _blockRange) external onlyOwner {\n        blockRange = _blockRange;\n        emit NewBlockRange(_blockRange);\n    }\n\n    /**\n     * @notice Cancel listings by recording their fulfillment\n     * @param cancels List of cancels to execute\n     */\n    function cancelTrades(Cancel[] memory cancels) external {\n        uint256 cancelsLength = cancels.length;\n        for (uint256 i; i < cancelsLength; ) {\n            Cancel memory cancel = cancels[i];\n            amountTaken[msg.sender][cancel.hash][cancel.index] += cancel.amount;\n            emit CancelTrade(msg.sender, cancel.hash, cancel.index, cancel.amount);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Cancels all orders by incrementing caller nonce\n     */\n    function incrementNonce() external {\n        emit NonceIncremented(msg.sender, ++nonces[msg.sender]);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of _takeAsk that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAsk(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAsk(\n            inputs.orders,\n            inputs.exchanges,\n            inputs.takerFee,\n            inputs.signatures,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBid that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBid\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBid(\n        TakeBid memory inputs,\n        bytes calldata oracleSignature\n    ) public verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBid(inputs.orders, inputs.exchanges, inputs.takerFee, inputs.signatures);\n    }\n\n    /**\n     * @notice Wrapper of _takeAskSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAskSingle(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAskSingle(\n            inputs.order,\n            inputs.exchange,\n            inputs.takerFee,\n            inputs.signature,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBidSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBidSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBidSingle(\n        TakeBidSingle memory inputs,\n        bytes calldata oracleSignature\n    ) external verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBidSingle(inputs.order, inputs.exchange, inputs.takerFee, inputs.signature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of takeAskSingle that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAskSingle(inputs, oracleSignature);\n    }\n\n    /**\n     * @notice Wrapper of takeAsk that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAsk(inputs, oracleSignature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Take a single ask\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     * @param tokenRecipient Address to receive the token transfer\n     */\n    function _takeAskSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.ASK, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.ASK,\n            listing.tokenId,\n            takerAmount,\n            tokenRecipient\n        );\n\n        /* Set the fulfillment of the order. */\n        unchecked {\n            amountTaken[order.trader][bytes32(order.salt)][listing.index] += takerAmount;\n        }\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* If there are insufficient funds to cover the price with the fees, revert. */\n        unchecked {\n            if (address(this).balance < totalPrice + takerFeeAmount) {\n                revert InsufficientFunds();\n            }\n        }\n\n        /* Execute ETH transfers. */\n        _transferETH(fees.protocolFee.recipient, protocolFeeAmount);\n        _transferETH(fees.takerFee.recipient, takerFeeAmount);\n        _transferETH(order.makerFee.recipient, makerFeeAmount);\n        unchecked {\n            _transferETH(order.trader, totalPrice - makerFeeAmount - protocolFeeAmount);\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take a single bid\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     */\n    function _takeBidSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.BID, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.BID,\n            exchange.taker.tokenId,\n            takerAmount,\n            msg.sender\n        );\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* Execute pool transfers and set the fulfillment of the order. */\n        address trader = order.trader;\n        _transferPool(trader, order.makerFee.recipient, makerFeeAmount);\n        _transferPool(trader, fees.takerFee.recipient, takerFeeAmount);\n        _transferPool(trader, fees.protocolFee.recipient, protocolFeeAmount);\n        unchecked {\n            _transferPool(trader, msg.sender, totalPrice - takerFeeAmount - protocolFeeAmount);\n\n            amountTaken[trader][bytes32(order.salt)][listing.index] += exchange.taker.amount;\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.BID);\n    }\n\n    /**\n     * @notice Take multiple asks; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     * @param tokenRecipient Address to receive the tokens purchased\n     */\n    function _takeAsk(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.ASK,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.ASK, tokenRecipient);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        uint256 remainingETH = address(this).balance;\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.ASK,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                bool inserted;\n                (remainingETH, inserted) = _insertExecutionAsk(\n                    executionBatch,\n                    fungibleTransfers,\n                    order,\n                    exchange,\n                    fees,\n                    remainingETH\n                );\n                if (inserted) {\n                    unchecked {\n                        pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                            .taker\n                            .amount;\n                    }\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take multiple bids; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     */\n    function _takeBid(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.BID,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.BID, msg.sender);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.BID,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                _insertExecutionBid(executionBatch, fungibleTransfers, order, exchange, fees);\n\n                /* Record the pending fulfillment. */\n                unchecked {\n                    pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                        .taker\n                        .amount;\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.BID);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Initialize the ExecutionBatch and FungibleTransfers objects for bulk execution\n     * @param exchangesLength Number of exchanges\n     * @param orderType Order type\n     * @param taker Order taker address\n     */\n    function _initializeBatch(\n        uint256 exchangesLength,\n        OrderType orderType,\n        address taker\n    )\n        internal\n        pure\n        returns (bytes memory executionBatch, FungibleTransfers memory fungibleTransfers)\n    {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size * exchangesLength + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), exchangesLength) // set the length of the transfers array\n        }\n\n        /* Initialize the fungible transfers object. */\n        AtomicExecution[] memory executions = new AtomicExecution[](exchangesLength);\n        address[] memory feeRecipients = new address[](exchangesLength);\n        address[] memory makers = new address[](exchangesLength);\n        uint256[] memory makerTransfers = new uint256[](exchangesLength);\n        uint256[] memory feeTransfers = new uint256[](exchangesLength);\n        fungibleTransfers = FungibleTransfers({\n            totalProtocolFee: 0,\n            totalSellerTransfer: 0,\n            totalTakerFee: 0,\n            feeRecipientId: 0,\n            feeRecipients: feeRecipients,\n            makerId: 0,\n            makers: makers,\n            feeTransfers: feeTransfers,\n            makerTransfers: makerTransfers,\n            executions: executions\n        });\n    }\n\n    /**\n     * @notice Initialize the ExecutionBatch object for a single execution\n     * @param order Order to take a Listing from\n     * @param orderType Order type\n     * @param tokenId Token id\n     * @param amount ERC721/ERC1155 amount\n     * @param taker Order taker address\n     */\n    function _initializeSingleExecution(\n        Order memory order,\n        OrderType orderType,\n        uint256 tokenId,\n        uint256 amount,\n        address taker\n    ) internal pure returns (bytes memory executionBatch) {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), 1) // set the length of the transfers array\n        }\n\n        /* Insert the transfer into the batch. */\n        _insertNonfungibleTransfer(executionBatch, order, tokenId, amount);\n    }\n}", 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'default', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'BlurExchangeV2.initialize', 'start_line': 1055, 'end_line': 1060, 'offset_start': 38988, 'offset_end': 39150, 'content': 'function initialize() external initializer {\n        __UUPSUpgradeable_init();\n        __Ownable_init();\n        __Reentrancy_init();\n        verifyDomain();\n    }', 'contract_name': 'BlurExchangeV2', 'contract_code': "{\n    address public governor;\n\n    // required by the OZ UUPS module\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    constructor(address delegate, address pool, address proxy) Executor(delegate, pool, proxy) {\n        _disableInitializers();\n    }\n\n    function initialize() external initializer {\n        __UUPSUpgradeable_init();\n        __Ownable_init();\n        __Reentrancy_init();\n        verifyDomain();\n    }\n\n    modifier onlyGovernor() {\n        if (msg.sender != governor) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    /**\n     * @notice Governor only function to set the protocol fee rate and recipient\n     * @param recipient Protocol fee recipient\n     * @param rate Protocol fee rate\n     */\n    function setProtocolFee(address recipient, uint16 rate) external onlyGovernor {\n        if (rate > _MAX_PROTOCOL_FEE_RATE) {\n            revert ProtocolFeeTooHigh();\n        }\n        protocolFee = FeeRate(recipient, rate);\n        emit NewProtocolFee(recipient, rate);\n    }\n\n    /**\n     * @notice Admin only function to set the governor of the exchange\n     * @param _governor Address of governor to set\n     */\n    function setGovernor(address _governor) external onlyOwner {\n        governor = _governor;\n        emit NewGovernor(_governor);\n    }\n\n    /**\n     * @notice Admin only function to grant or revoke the approval of an oracle\n     * @param oracle Address to set approval of\n     * @param approved If the oracle should be approved or not\n     */\n    function setOracle(address oracle, bool approved) external onlyOwner {\n        if (approved) {\n            oracles[oracle] = 1;\n        } else {\n            oracles[oracle] = 0;\n        }\n        emit SetOracle(oracle, approved);\n    }\n\n    /**\n     * @notice Admin only function to set the block range\n     * @param _blockRange Block range that oracle signatures are valid for\n     */\n    function setBlockRange(uint256 _blockRange) external onlyOwner {\n        blockRange = _blockRange;\n        emit NewBlockRange(_blockRange);\n    }\n\n    /**\n     * @notice Cancel listings by recording their fulfillment\n     * @param cancels List of cancels to execute\n     */\n    function cancelTrades(Cancel[] memory cancels) external {\n        uint256 cancelsLength = cancels.length;\n        for (uint256 i; i < cancelsLength; ) {\n            Cancel memory cancel = cancels[i];\n            amountTaken[msg.sender][cancel.hash][cancel.index] += cancel.amount;\n            emit CancelTrade(msg.sender, cancel.hash, cancel.index, cancel.amount);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Cancels all orders by incrementing caller nonce\n     */\n    function incrementNonce() external {\n        emit NonceIncremented(msg.sender, ++nonces[msg.sender]);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of _takeAsk that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAsk(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAsk(\n            inputs.orders,\n            inputs.exchanges,\n            inputs.takerFee,\n            inputs.signatures,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBid that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBid\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBid(\n        TakeBid memory inputs,\n        bytes calldata oracleSignature\n    ) public verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBid(inputs.orders, inputs.exchanges, inputs.takerFee, inputs.signatures);\n    }\n\n    /**\n     * @notice Wrapper of _takeAskSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAskSingle(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAskSingle(\n            inputs.order,\n            inputs.exchange,\n            inputs.takerFee,\n            inputs.signature,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBidSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBidSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBidSingle(\n        TakeBidSingle memory inputs,\n        bytes calldata oracleSignature\n    ) external verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBidSingle(inputs.order, inputs.exchange, inputs.takerFee, inputs.signature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of takeAskSingle that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAskSingle(inputs, oracleSignature);\n    }\n\n    /**\n     * @notice Wrapper of takeAsk that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAsk(inputs, oracleSignature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Take a single ask\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     * @param tokenRecipient Address to receive the token transfer\n     */\n    function _takeAskSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.ASK, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.ASK,\n            listing.tokenId,\n            takerAmount,\n            tokenRecipient\n        );\n\n        /* Set the fulfillment of the order. */\n        unchecked {\n            amountTaken[order.trader][bytes32(order.salt)][listing.index] += takerAmount;\n        }\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* If there are insufficient funds to cover the price with the fees, revert. */\n        unchecked {\n            if (address(this).balance < totalPrice + takerFeeAmount) {\n                revert InsufficientFunds();\n            }\n        }\n\n        /* Execute ETH transfers. */\n        _transferETH(fees.protocolFee.recipient, protocolFeeAmount);\n        _transferETH(fees.takerFee.recipient, takerFeeAmount);\n        _transferETH(order.makerFee.recipient, makerFeeAmount);\n        unchecked {\n            _transferETH(order.trader, totalPrice - makerFeeAmount - protocolFeeAmount);\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take a single bid\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     */\n    function _takeBidSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.BID, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.BID,\n            exchange.taker.tokenId,\n            takerAmount,\n            msg.sender\n        );\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* Execute pool transfers and set the fulfillment of the order. */\n        address trader = order.trader;\n        _transferPool(trader, order.makerFee.recipient, makerFeeAmount);\n        _transferPool(trader, fees.takerFee.recipient, takerFeeAmount);\n        _transferPool(trader, fees.protocolFee.recipient, protocolFeeAmount);\n        unchecked {\n            _transferPool(trader, msg.sender, totalPrice - takerFeeAmount - protocolFeeAmount);\n\n            amountTaken[trader][bytes32(order.salt)][listing.index] += exchange.taker.amount;\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.BID);\n    }\n\n    /**\n     * @notice Take multiple asks; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     * @param tokenRecipient Address to receive the tokens purchased\n     */\n    function _takeAsk(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.ASK,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.ASK, tokenRecipient);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        uint256 remainingETH = address(this).balance;\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.ASK,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                bool inserted;\n                (remainingETH, inserted) = _insertExecutionAsk(\n                    executionBatch,\n                    fungibleTransfers,\n                    order,\n                    exchange,\n                    fees,\n                    remainingETH\n                );\n                if (inserted) {\n                    unchecked {\n                        pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                            .taker\n                            .amount;\n                    }\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take multiple bids; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     */\n    function _takeBid(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.BID,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.BID, msg.sender);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.BID,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                _insertExecutionBid(executionBatch, fungibleTransfers, order, exchange, fees);\n\n                /* Record the pending fulfillment. */\n                unchecked {\n                    pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                        .taker\n                        .amount;\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.BID);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Initialize the ExecutionBatch and FungibleTransfers objects for bulk execution\n     * @param exchangesLength Number of exchanges\n     * @param orderType Order type\n     * @param taker Order taker address\n     */\n    function _initializeBatch(\n        uint256 exchangesLength,\n        OrderType orderType,\n        address taker\n    )\n        internal\n        pure\n        returns (bytes memory executionBatch, FungibleTransfers memory fungibleTransfers)\n    {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size * exchangesLength + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), exchangesLength) // set the length of the transfers array\n        }\n\n        /* Initialize the fungible transfers object. */\n        AtomicExecution[] memory executions = new AtomicExecution[](exchangesLength);\n        address[] memory feeRecipients = new address[](exchangesLength);\n        address[] memory makers = new address[](exchangesLength);\n        uint256[] memory makerTransfers = new uint256[](exchangesLength);\n        uint256[] memory feeTransfers = new uint256[](exchangesLength);\n        fungibleTransfers = FungibleTransfers({\n            totalProtocolFee: 0,\n            totalSellerTransfer: 0,\n            totalTakerFee: 0,\n            feeRecipientId: 0,\n            feeRecipients: feeRecipients,\n            makerId: 0,\n            makers: makers,\n            feeTransfers: feeTransfers,\n            makerTransfers: makerTransfers,\n            executions: executions\n        });\n    }\n\n    /**\n     * @notice Initialize the ExecutionBatch object for a single execution\n     * @param order Order to take a Listing from\n     * @param orderType Order type\n     * @param tokenId Token id\n     * @param amount ERC721/ERC1155 amount\n     * @param taker Order taker address\n     */\n    function _initializeSingleExecution(\n        Order memory order,\n        OrderType orderType,\n        uint256 tokenId,\n        uint256 amount,\n        address taker\n    ) internal pure returns (bytes memory executionBatch) {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), 1) // set the length of the transfers array\n        }\n\n        /* Insert the transfer into the batch. */\n        _insertNonfungibleTransfer(executionBatch, order, tokenId, amount);\n    }\n}", 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'BlurExchangeV2.setProtocolFee', 'start_line': 1074, 'end_line': 1080, 'offset_start': 39469, 'offset_end': 39743, 'content': 'function setProtocolFee(address recipient, uint16 rate) external onlyGovernor {\n        if (rate > _MAX_PROTOCOL_FEE_RATE) {\n            revert ProtocolFeeTooHigh();\n        }\n        protocolFee = FeeRate(recipient, rate);\n        emit NewProtocolFee(recipient, rate);\n    }', 'contract_name': 'BlurExchangeV2', 'contract_code': "{\n    address public governor;\n\n    // required by the OZ UUPS module\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    constructor(address delegate, address pool, address proxy) Executor(delegate, pool, proxy) {\n        _disableInitializers();\n    }\n\n    function initialize() external initializer {\n        __UUPSUpgradeable_init();\n        __Ownable_init();\n        __Reentrancy_init();\n        verifyDomain();\n    }\n\n    modifier onlyGovernor() {\n        if (msg.sender != governor) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    /**\n     * @notice Governor only function to set the protocol fee rate and recipient\n     * @param recipient Protocol fee recipient\n     * @param rate Protocol fee rate\n     */\n    function setProtocolFee(address recipient, uint16 rate) external onlyGovernor {\n        if (rate > _MAX_PROTOCOL_FEE_RATE) {\n            revert ProtocolFeeTooHigh();\n        }\n        protocolFee = FeeRate(recipient, rate);\n        emit NewProtocolFee(recipient, rate);\n    }\n\n    /**\n     * @notice Admin only function to set the governor of the exchange\n     * @param _governor Address of governor to set\n     */\n    function setGovernor(address _governor) external onlyOwner {\n        governor = _governor;\n        emit NewGovernor(_governor);\n    }\n\n    /**\n     * @notice Admin only function to grant or revoke the approval of an oracle\n     * @param oracle Address to set approval of\n     * @param approved If the oracle should be approved or not\n     */\n    function setOracle(address oracle, bool approved) external onlyOwner {\n        if (approved) {\n            oracles[oracle] = 1;\n        } else {\n            oracles[oracle] = 0;\n        }\n        emit SetOracle(oracle, approved);\n    }\n\n    /**\n     * @notice Admin only function to set the block range\n     * @param _blockRange Block range that oracle signatures are valid for\n     */\n    function setBlockRange(uint256 _blockRange) external onlyOwner {\n        blockRange = _blockRange;\n        emit NewBlockRange(_blockRange);\n    }\n\n    /**\n     * @notice Cancel listings by recording their fulfillment\n     * @param cancels List of cancels to execute\n     */\n    function cancelTrades(Cancel[] memory cancels) external {\n        uint256 cancelsLength = cancels.length;\n        for (uint256 i; i < cancelsLength; ) {\n            Cancel memory cancel = cancels[i];\n            amountTaken[msg.sender][cancel.hash][cancel.index] += cancel.amount;\n            emit CancelTrade(msg.sender, cancel.hash, cancel.index, cancel.amount);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Cancels all orders by incrementing caller nonce\n     */\n    function incrementNonce() external {\n        emit NonceIncremented(msg.sender, ++nonces[msg.sender]);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of _takeAsk that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAsk(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAsk(\n            inputs.orders,\n            inputs.exchanges,\n            inputs.takerFee,\n            inputs.signatures,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBid that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBid\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBid(\n        TakeBid memory inputs,\n        bytes calldata oracleSignature\n    ) public verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBid(inputs.orders, inputs.exchanges, inputs.takerFee, inputs.signatures);\n    }\n\n    /**\n     * @notice Wrapper of _takeAskSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAskSingle(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAskSingle(\n            inputs.order,\n            inputs.exchange,\n            inputs.takerFee,\n            inputs.signature,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBidSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBidSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBidSingle(\n        TakeBidSingle memory inputs,\n        bytes calldata oracleSignature\n    ) external verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBidSingle(inputs.order, inputs.exchange, inputs.takerFee, inputs.signature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of takeAskSingle that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAskSingle(inputs, oracleSignature);\n    }\n\n    /**\n     * @notice Wrapper of takeAsk that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAsk(inputs, oracleSignature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Take a single ask\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     * @param tokenRecipient Address to receive the token transfer\n     */\n    function _takeAskSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.ASK, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.ASK,\n            listing.tokenId,\n            takerAmount,\n            tokenRecipient\n        );\n\n        /* Set the fulfillment of the order. */\n        unchecked {\n            amountTaken[order.trader][bytes32(order.salt)][listing.index] += takerAmount;\n        }\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* If there are insufficient funds to cover the price with the fees, revert. */\n        unchecked {\n            if (address(this).balance < totalPrice + takerFeeAmount) {\n                revert InsufficientFunds();\n            }\n        }\n\n        /* Execute ETH transfers. */\n        _transferETH(fees.protocolFee.recipient, protocolFeeAmount);\n        _transferETH(fees.takerFee.recipient, takerFeeAmount);\n        _transferETH(order.makerFee.recipient, makerFeeAmount);\n        unchecked {\n            _transferETH(order.trader, totalPrice - makerFeeAmount - protocolFeeAmount);\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take a single bid\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     */\n    function _takeBidSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.BID, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.BID,\n            exchange.taker.tokenId,\n            takerAmount,\n            msg.sender\n        );\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* Execute pool transfers and set the fulfillment of the order. */\n        address trader = order.trader;\n        _transferPool(trader, order.makerFee.recipient, makerFeeAmount);\n        _transferPool(trader, fees.takerFee.recipient, takerFeeAmount);\n        _transferPool(trader, fees.protocolFee.recipient, protocolFeeAmount);\n        unchecked {\n            _transferPool(trader, msg.sender, totalPrice - takerFeeAmount - protocolFeeAmount);\n\n            amountTaken[trader][bytes32(order.salt)][listing.index] += exchange.taker.amount;\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.BID);\n    }\n\n    /**\n     * @notice Take multiple asks; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     * @param tokenRecipient Address to receive the tokens purchased\n     */\n    function _takeAsk(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.ASK,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.ASK, tokenRecipient);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        uint256 remainingETH = address(this).balance;\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.ASK,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                bool inserted;\n                (remainingETH, inserted) = _insertExecutionAsk(\n                    executionBatch,\n                    fungibleTransfers,\n                    order,\n                    exchange,\n                    fees,\n                    remainingETH\n                );\n                if (inserted) {\n                    unchecked {\n                        pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                            .taker\n                            .amount;\n                    }\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take multiple bids; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     */\n    function _takeBid(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.BID,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.BID, msg.sender);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.BID,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                _insertExecutionBid(executionBatch, fungibleTransfers, order, exchange, fees);\n\n                /* Record the pending fulfillment. */\n                unchecked {\n                    pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                        .taker\n                        .amount;\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.BID);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Initialize the ExecutionBatch and FungibleTransfers objects for bulk execution\n     * @param exchangesLength Number of exchanges\n     * @param orderType Order type\n     * @param taker Order taker address\n     */\n    function _initializeBatch(\n        uint256 exchangesLength,\n        OrderType orderType,\n        address taker\n    )\n        internal\n        pure\n        returns (bytes memory executionBatch, FungibleTransfers memory fungibleTransfers)\n    {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size * exchangesLength + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), exchangesLength) // set the length of the transfers array\n        }\n\n        /* Initialize the fungible transfers object. */\n        AtomicExecution[] memory executions = new AtomicExecution[](exchangesLength);\n        address[] memory feeRecipients = new address[](exchangesLength);\n        address[] memory makers = new address[](exchangesLength);\n        uint256[] memory makerTransfers = new uint256[](exchangesLength);\n        uint256[] memory feeTransfers = new uint256[](exchangesLength);\n        fungibleTransfers = FungibleTransfers({\n            totalProtocolFee: 0,\n            totalSellerTransfer: 0,\n            totalTakerFee: 0,\n            feeRecipientId: 0,\n            feeRecipients: feeRecipients,\n            makerId: 0,\n            makers: makers,\n            feeTransfers: feeTransfers,\n            makerTransfers: makerTransfers,\n            executions: executions\n        });\n    }\n\n    /**\n     * @notice Initialize the ExecutionBatch object for a single execution\n     * @param order Order to take a Listing from\n     * @param orderType Order type\n     * @param tokenId Token id\n     * @param amount ERC721/ERC1155 amount\n     * @param taker Order taker address\n     */\n    function _initializeSingleExecution(\n        Order memory order,\n        OrderType orderType,\n        uint256 tokenId,\n        uint256 amount,\n        address taker\n    ) internal pure returns (bytes memory executionBatch) {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), 1) // set the length of the transfers array\n        }\n\n        /* Insert the transfer into the batch. */\n        _insertNonfungibleTransfer(executionBatch, order, tokenId, amount);\n    }\n}", 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'BlurExchangeV2.setGovernor', 'start_line': 1086, 'end_line': 1089, 'offset_start': 39888, 'offset_end': 40020, 'content': 'function setGovernor(address _governor) external onlyOwner {\n        governor = _governor;\n        emit NewGovernor(_governor);\n    }', 'contract_name': 'BlurExchangeV2', 'contract_code': "{\n    address public governor;\n\n    // required by the OZ UUPS module\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    constructor(address delegate, address pool, address proxy) Executor(delegate, pool, proxy) {\n        _disableInitializers();\n    }\n\n    function initialize() external initializer {\n        __UUPSUpgradeable_init();\n        __Ownable_init();\n        __Reentrancy_init();\n        verifyDomain();\n    }\n\n    modifier onlyGovernor() {\n        if (msg.sender != governor) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    /**\n     * @notice Governor only function to set the protocol fee rate and recipient\n     * @param recipient Protocol fee recipient\n     * @param rate Protocol fee rate\n     */\n    function setProtocolFee(address recipient, uint16 rate) external onlyGovernor {\n        if (rate > _MAX_PROTOCOL_FEE_RATE) {\n            revert ProtocolFeeTooHigh();\n        }\n        protocolFee = FeeRate(recipient, rate);\n        emit NewProtocolFee(recipient, rate);\n    }\n\n    /**\n     * @notice Admin only function to set the governor of the exchange\n     * @param _governor Address of governor to set\n     */\n    function setGovernor(address _governor) external onlyOwner {\n        governor = _governor;\n        emit NewGovernor(_governor);\n    }\n\n    /**\n     * @notice Admin only function to grant or revoke the approval of an oracle\n     * @param oracle Address to set approval of\n     * @param approved If the oracle should be approved or not\n     */\n    function setOracle(address oracle, bool approved) external onlyOwner {\n        if (approved) {\n            oracles[oracle] = 1;\n        } else {\n            oracles[oracle] = 0;\n        }\n        emit SetOracle(oracle, approved);\n    }\n\n    /**\n     * @notice Admin only function to set the block range\n     * @param _blockRange Block range that oracle signatures are valid for\n     */\n    function setBlockRange(uint256 _blockRange) external onlyOwner {\n        blockRange = _blockRange;\n        emit NewBlockRange(_blockRange);\n    }\n\n    /**\n     * @notice Cancel listings by recording their fulfillment\n     * @param cancels List of cancels to execute\n     */\n    function cancelTrades(Cancel[] memory cancels) external {\n        uint256 cancelsLength = cancels.length;\n        for (uint256 i; i < cancelsLength; ) {\n            Cancel memory cancel = cancels[i];\n            amountTaken[msg.sender][cancel.hash][cancel.index] += cancel.amount;\n            emit CancelTrade(msg.sender, cancel.hash, cancel.index, cancel.amount);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Cancels all orders by incrementing caller nonce\n     */\n    function incrementNonce() external {\n        emit NonceIncremented(msg.sender, ++nonces[msg.sender]);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of _takeAsk that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAsk(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAsk(\n            inputs.orders,\n            inputs.exchanges,\n            inputs.takerFee,\n            inputs.signatures,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBid that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBid\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBid(\n        TakeBid memory inputs,\n        bytes calldata oracleSignature\n    ) public verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBid(inputs.orders, inputs.exchanges, inputs.takerFee, inputs.signatures);\n    }\n\n    /**\n     * @notice Wrapper of _takeAskSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAskSingle(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAskSingle(\n            inputs.order,\n            inputs.exchange,\n            inputs.takerFee,\n            inputs.signature,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBidSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBidSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBidSingle(\n        TakeBidSingle memory inputs,\n        bytes calldata oracleSignature\n    ) external verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBidSingle(inputs.order, inputs.exchange, inputs.takerFee, inputs.signature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of takeAskSingle that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAskSingle(inputs, oracleSignature);\n    }\n\n    /**\n     * @notice Wrapper of takeAsk that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAsk(inputs, oracleSignature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Take a single ask\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     * @param tokenRecipient Address to receive the token transfer\n     */\n    function _takeAskSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.ASK, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.ASK,\n            listing.tokenId,\n            takerAmount,\n            tokenRecipient\n        );\n\n        /* Set the fulfillment of the order. */\n        unchecked {\n            amountTaken[order.trader][bytes32(order.salt)][listing.index] += takerAmount;\n        }\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* If there are insufficient funds to cover the price with the fees, revert. */\n        unchecked {\n            if (address(this).balance < totalPrice + takerFeeAmount) {\n                revert InsufficientFunds();\n            }\n        }\n\n        /* Execute ETH transfers. */\n        _transferETH(fees.protocolFee.recipient, protocolFeeAmount);\n        _transferETH(fees.takerFee.recipient, takerFeeAmount);\n        _transferETH(order.makerFee.recipient, makerFeeAmount);\n        unchecked {\n            _transferETH(order.trader, totalPrice - makerFeeAmount - protocolFeeAmount);\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take a single bid\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     */\n    function _takeBidSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.BID, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.BID,\n            exchange.taker.tokenId,\n            takerAmount,\n            msg.sender\n        );\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* Execute pool transfers and set the fulfillment of the order. */\n        address trader = order.trader;\n        _transferPool(trader, order.makerFee.recipient, makerFeeAmount);\n        _transferPool(trader, fees.takerFee.recipient, takerFeeAmount);\n        _transferPool(trader, fees.protocolFee.recipient, protocolFeeAmount);\n        unchecked {\n            _transferPool(trader, msg.sender, totalPrice - takerFeeAmount - protocolFeeAmount);\n\n            amountTaken[trader][bytes32(order.salt)][listing.index] += exchange.taker.amount;\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.BID);\n    }\n\n    /**\n     * @notice Take multiple asks; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     * @param tokenRecipient Address to receive the tokens purchased\n     */\n    function _takeAsk(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.ASK,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.ASK, tokenRecipient);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        uint256 remainingETH = address(this).balance;\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.ASK,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                bool inserted;\n                (remainingETH, inserted) = _insertExecutionAsk(\n                    executionBatch,\n                    fungibleTransfers,\n                    order,\n                    exchange,\n                    fees,\n                    remainingETH\n                );\n                if (inserted) {\n                    unchecked {\n                        pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                            .taker\n                            .amount;\n                    }\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take multiple bids; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     */\n    function _takeBid(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.BID,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.BID, msg.sender);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.BID,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                _insertExecutionBid(executionBatch, fungibleTransfers, order, exchange, fees);\n\n                /* Record the pending fulfillment. */\n                unchecked {\n                    pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                        .taker\n                        .amount;\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.BID);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Initialize the ExecutionBatch and FungibleTransfers objects for bulk execution\n     * @param exchangesLength Number of exchanges\n     * @param orderType Order type\n     * @param taker Order taker address\n     */\n    function _initializeBatch(\n        uint256 exchangesLength,\n        OrderType orderType,\n        address taker\n    )\n        internal\n        pure\n        returns (bytes memory executionBatch, FungibleTransfers memory fungibleTransfers)\n    {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size * exchangesLength + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), exchangesLength) // set the length of the transfers array\n        }\n\n        /* Initialize the fungible transfers object. */\n        AtomicExecution[] memory executions = new AtomicExecution[](exchangesLength);\n        address[] memory feeRecipients = new address[](exchangesLength);\n        address[] memory makers = new address[](exchangesLength);\n        uint256[] memory makerTransfers = new uint256[](exchangesLength);\n        uint256[] memory feeTransfers = new uint256[](exchangesLength);\n        fungibleTransfers = FungibleTransfers({\n            totalProtocolFee: 0,\n            totalSellerTransfer: 0,\n            totalTakerFee: 0,\n            feeRecipientId: 0,\n            feeRecipients: feeRecipients,\n            makerId: 0,\n            makers: makers,\n            feeTransfers: feeTransfers,\n            makerTransfers: makerTransfers,\n            executions: executions\n        });\n    }\n\n    /**\n     * @notice Initialize the ExecutionBatch object for a single execution\n     * @param order Order to take a Listing from\n     * @param orderType Order type\n     * @param tokenId Token id\n     * @param amount ERC721/ERC1155 amount\n     * @param taker Order taker address\n     */\n    function _initializeSingleExecution(\n        Order memory order,\n        OrderType orderType,\n        uint256 tokenId,\n        uint256 amount,\n        address taker\n    ) internal pure returns (bytes memory executionBatch) {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), 1) // set the length of the transfers array\n        }\n\n        /* Insert the transfer into the batch. */\n        _insertNonfungibleTransfer(executionBatch, order, tokenId, amount);\n    }\n}", 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'BlurExchangeV2.setOracle', 'start_line': 1096, 'end_line': 1103, 'offset_start': 40234, 'offset_end': 40468, 'content': 'function setOracle(address oracle, bool approved) external onlyOwner {\n        if (approved) {\n            oracles[oracle] = 1;\n        } else {\n            oracles[oracle] = 0;\n        }\n        emit SetOracle(oracle, approved);\n    }', 'contract_name': 'BlurExchangeV2', 'contract_code': "{\n    address public governor;\n\n    // required by the OZ UUPS module\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    constructor(address delegate, address pool, address proxy) Executor(delegate, pool, proxy) {\n        _disableInitializers();\n    }\n\n    function initialize() external initializer {\n        __UUPSUpgradeable_init();\n        __Ownable_init();\n        __Reentrancy_init();\n        verifyDomain();\n    }\n\n    modifier onlyGovernor() {\n        if (msg.sender != governor) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    /**\n     * @notice Governor only function to set the protocol fee rate and recipient\n     * @param recipient Protocol fee recipient\n     * @param rate Protocol fee rate\n     */\n    function setProtocolFee(address recipient, uint16 rate) external onlyGovernor {\n        if (rate > _MAX_PROTOCOL_FEE_RATE) {\n            revert ProtocolFeeTooHigh();\n        }\n        protocolFee = FeeRate(recipient, rate);\n        emit NewProtocolFee(recipient, rate);\n    }\n\n    /**\n     * @notice Admin only function to set the governor of the exchange\n     * @param _governor Address of governor to set\n     */\n    function setGovernor(address _governor) external onlyOwner {\n        governor = _governor;\n        emit NewGovernor(_governor);\n    }\n\n    /**\n     * @notice Admin only function to grant or revoke the approval of an oracle\n     * @param oracle Address to set approval of\n     * @param approved If the oracle should be approved or not\n     */\n    function setOracle(address oracle, bool approved) external onlyOwner {\n        if (approved) {\n            oracles[oracle] = 1;\n        } else {\n            oracles[oracle] = 0;\n        }\n        emit SetOracle(oracle, approved);\n    }\n\n    /**\n     * @notice Admin only function to set the block range\n     * @param _blockRange Block range that oracle signatures are valid for\n     */\n    function setBlockRange(uint256 _blockRange) external onlyOwner {\n        blockRange = _blockRange;\n        emit NewBlockRange(_blockRange);\n    }\n\n    /**\n     * @notice Cancel listings by recording their fulfillment\n     * @param cancels List of cancels to execute\n     */\n    function cancelTrades(Cancel[] memory cancels) external {\n        uint256 cancelsLength = cancels.length;\n        for (uint256 i; i < cancelsLength; ) {\n            Cancel memory cancel = cancels[i];\n            amountTaken[msg.sender][cancel.hash][cancel.index] += cancel.amount;\n            emit CancelTrade(msg.sender, cancel.hash, cancel.index, cancel.amount);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Cancels all orders by incrementing caller nonce\n     */\n    function incrementNonce() external {\n        emit NonceIncremented(msg.sender, ++nonces[msg.sender]);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of _takeAsk that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAsk(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAsk(\n            inputs.orders,\n            inputs.exchanges,\n            inputs.takerFee,\n            inputs.signatures,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBid that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBid\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBid(\n        TakeBid memory inputs,\n        bytes calldata oracleSignature\n    ) public verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBid(inputs.orders, inputs.exchanges, inputs.takerFee, inputs.signatures);\n    }\n\n    /**\n     * @notice Wrapper of _takeAskSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAskSingle(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAskSingle(\n            inputs.order,\n            inputs.exchange,\n            inputs.takerFee,\n            inputs.signature,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBidSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBidSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBidSingle(\n        TakeBidSingle memory inputs,\n        bytes calldata oracleSignature\n    ) external verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBidSingle(inputs.order, inputs.exchange, inputs.takerFee, inputs.signature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of takeAskSingle that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAskSingle(inputs, oracleSignature);\n    }\n\n    /**\n     * @notice Wrapper of takeAsk that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAsk(inputs, oracleSignature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Take a single ask\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     * @param tokenRecipient Address to receive the token transfer\n     */\n    function _takeAskSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.ASK, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.ASK,\n            listing.tokenId,\n            takerAmount,\n            tokenRecipient\n        );\n\n        /* Set the fulfillment of the order. */\n        unchecked {\n            amountTaken[order.trader][bytes32(order.salt)][listing.index] += takerAmount;\n        }\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* If there are insufficient funds to cover the price with the fees, revert. */\n        unchecked {\n            if (address(this).balance < totalPrice + takerFeeAmount) {\n                revert InsufficientFunds();\n            }\n        }\n\n        /* Execute ETH transfers. */\n        _transferETH(fees.protocolFee.recipient, protocolFeeAmount);\n        _transferETH(fees.takerFee.recipient, takerFeeAmount);\n        _transferETH(order.makerFee.recipient, makerFeeAmount);\n        unchecked {\n            _transferETH(order.trader, totalPrice - makerFeeAmount - protocolFeeAmount);\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take a single bid\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     */\n    function _takeBidSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.BID, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.BID,\n            exchange.taker.tokenId,\n            takerAmount,\n            msg.sender\n        );\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* Execute pool transfers and set the fulfillment of the order. */\n        address trader = order.trader;\n        _transferPool(trader, order.makerFee.recipient, makerFeeAmount);\n        _transferPool(trader, fees.takerFee.recipient, takerFeeAmount);\n        _transferPool(trader, fees.protocolFee.recipient, protocolFeeAmount);\n        unchecked {\n            _transferPool(trader, msg.sender, totalPrice - takerFeeAmount - protocolFeeAmount);\n\n            amountTaken[trader][bytes32(order.salt)][listing.index] += exchange.taker.amount;\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.BID);\n    }\n\n    /**\n     * @notice Take multiple asks; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     * @param tokenRecipient Address to receive the tokens purchased\n     */\n    function _takeAsk(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.ASK,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.ASK, tokenRecipient);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        uint256 remainingETH = address(this).balance;\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.ASK,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                bool inserted;\n                (remainingETH, inserted) = _insertExecutionAsk(\n                    executionBatch,\n                    fungibleTransfers,\n                    order,\n                    exchange,\n                    fees,\n                    remainingETH\n                );\n                if (inserted) {\n                    unchecked {\n                        pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                            .taker\n                            .amount;\n                    }\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take multiple bids; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     */\n    function _takeBid(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.BID,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.BID, msg.sender);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.BID,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                _insertExecutionBid(executionBatch, fungibleTransfers, order, exchange, fees);\n\n                /* Record the pending fulfillment. */\n                unchecked {\n                    pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                        .taker\n                        .amount;\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.BID);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Initialize the ExecutionBatch and FungibleTransfers objects for bulk execution\n     * @param exchangesLength Number of exchanges\n     * @param orderType Order type\n     * @param taker Order taker address\n     */\n    function _initializeBatch(\n        uint256 exchangesLength,\n        OrderType orderType,\n        address taker\n    )\n        internal\n        pure\n        returns (bytes memory executionBatch, FungibleTransfers memory fungibleTransfers)\n    {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size * exchangesLength + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), exchangesLength) // set the length of the transfers array\n        }\n\n        /* Initialize the fungible transfers object. */\n        AtomicExecution[] memory executions = new AtomicExecution[](exchangesLength);\n        address[] memory feeRecipients = new address[](exchangesLength);\n        address[] memory makers = new address[](exchangesLength);\n        uint256[] memory makerTransfers = new uint256[](exchangesLength);\n        uint256[] memory feeTransfers = new uint256[](exchangesLength);\n        fungibleTransfers = FungibleTransfers({\n            totalProtocolFee: 0,\n            totalSellerTransfer: 0,\n            totalTakerFee: 0,\n            feeRecipientId: 0,\n            feeRecipients: feeRecipients,\n            makerId: 0,\n            makers: makers,\n            feeTransfers: feeTransfers,\n            makerTransfers: makerTransfers,\n            executions: executions\n        });\n    }\n\n    /**\n     * @notice Initialize the ExecutionBatch object for a single execution\n     * @param order Order to take a Listing from\n     * @param orderType Order type\n     * @param tokenId Token id\n     * @param amount ERC721/ERC1155 amount\n     * @param taker Order taker address\n     */\n    function _initializeSingleExecution(\n        Order memory order,\n        OrderType orderType,\n        uint256 tokenId,\n        uint256 amount,\n        address taker\n    ) internal pure returns (bytes memory executionBatch) {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), 1) // set the length of the transfers array\n        }\n\n        /* Insert the transfer into the batch. */\n        _insertNonfungibleTransfer(executionBatch, order, tokenId, amount);\n    }\n}", 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'BlurExchangeV2.setBlockRange', 'start_line': 1109, 'end_line': 1112, 'offset_start': 40624, 'offset_end': 40768, 'content': 'function setBlockRange(uint256 _blockRange) external onlyOwner {\n        blockRange = _blockRange;\n        emit NewBlockRange(_blockRange);\n    }', 'contract_name': 'BlurExchangeV2', 'contract_code': "{\n    address public governor;\n\n    // required by the OZ UUPS module\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    constructor(address delegate, address pool, address proxy) Executor(delegate, pool, proxy) {\n        _disableInitializers();\n    }\n\n    function initialize() external initializer {\n        __UUPSUpgradeable_init();\n        __Ownable_init();\n        __Reentrancy_init();\n        verifyDomain();\n    }\n\n    modifier onlyGovernor() {\n        if (msg.sender != governor) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    /**\n     * @notice Governor only function to set the protocol fee rate and recipient\n     * @param recipient Protocol fee recipient\n     * @param rate Protocol fee rate\n     */\n    function setProtocolFee(address recipient, uint16 rate) external onlyGovernor {\n        if (rate > _MAX_PROTOCOL_FEE_RATE) {\n            revert ProtocolFeeTooHigh();\n        }\n        protocolFee = FeeRate(recipient, rate);\n        emit NewProtocolFee(recipient, rate);\n    }\n\n    /**\n     * @notice Admin only function to set the governor of the exchange\n     * @param _governor Address of governor to set\n     */\n    function setGovernor(address _governor) external onlyOwner {\n        governor = _governor;\n        emit NewGovernor(_governor);\n    }\n\n    /**\n     * @notice Admin only function to grant or revoke the approval of an oracle\n     * @param oracle Address to set approval of\n     * @param approved If the oracle should be approved or not\n     */\n    function setOracle(address oracle, bool approved) external onlyOwner {\n        if (approved) {\n            oracles[oracle] = 1;\n        } else {\n            oracles[oracle] = 0;\n        }\n        emit SetOracle(oracle, approved);\n    }\n\n    /**\n     * @notice Admin only function to set the block range\n     * @param _blockRange Block range that oracle signatures are valid for\n     */\n    function setBlockRange(uint256 _blockRange) external onlyOwner {\n        blockRange = _blockRange;\n        emit NewBlockRange(_blockRange);\n    }\n\n    /**\n     * @notice Cancel listings by recording their fulfillment\n     * @param cancels List of cancels to execute\n     */\n    function cancelTrades(Cancel[] memory cancels) external {\n        uint256 cancelsLength = cancels.length;\n        for (uint256 i; i < cancelsLength; ) {\n            Cancel memory cancel = cancels[i];\n            amountTaken[msg.sender][cancel.hash][cancel.index] += cancel.amount;\n            emit CancelTrade(msg.sender, cancel.hash, cancel.index, cancel.amount);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Cancels all orders by incrementing caller nonce\n     */\n    function incrementNonce() external {\n        emit NonceIncremented(msg.sender, ++nonces[msg.sender]);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of _takeAsk that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAsk(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAsk(\n            inputs.orders,\n            inputs.exchanges,\n            inputs.takerFee,\n            inputs.signatures,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBid that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBid\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBid(\n        TakeBid memory inputs,\n        bytes calldata oracleSignature\n    ) public verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBid(inputs.orders, inputs.exchanges, inputs.takerFee, inputs.signatures);\n    }\n\n    /**\n     * @notice Wrapper of _takeAskSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAskSingle(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAskSingle(\n            inputs.order,\n            inputs.exchange,\n            inputs.takerFee,\n            inputs.signature,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBidSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBidSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBidSingle(\n        TakeBidSingle memory inputs,\n        bytes calldata oracleSignature\n    ) external verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBidSingle(inputs.order, inputs.exchange, inputs.takerFee, inputs.signature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of takeAskSingle that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAskSingle(inputs, oracleSignature);\n    }\n\n    /**\n     * @notice Wrapper of takeAsk that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAsk(inputs, oracleSignature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Take a single ask\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     * @param tokenRecipient Address to receive the token transfer\n     */\n    function _takeAskSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.ASK, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.ASK,\n            listing.tokenId,\n            takerAmount,\n            tokenRecipient\n        );\n\n        /* Set the fulfillment of the order. */\n        unchecked {\n            amountTaken[order.trader][bytes32(order.salt)][listing.index] += takerAmount;\n        }\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* If there are insufficient funds to cover the price with the fees, revert. */\n        unchecked {\n            if (address(this).balance < totalPrice + takerFeeAmount) {\n                revert InsufficientFunds();\n            }\n        }\n\n        /* Execute ETH transfers. */\n        _transferETH(fees.protocolFee.recipient, protocolFeeAmount);\n        _transferETH(fees.takerFee.recipient, takerFeeAmount);\n        _transferETH(order.makerFee.recipient, makerFeeAmount);\n        unchecked {\n            _transferETH(order.trader, totalPrice - makerFeeAmount - protocolFeeAmount);\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take a single bid\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     */\n    function _takeBidSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.BID, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.BID,\n            exchange.taker.tokenId,\n            takerAmount,\n            msg.sender\n        );\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* Execute pool transfers and set the fulfillment of the order. */\n        address trader = order.trader;\n        _transferPool(trader, order.makerFee.recipient, makerFeeAmount);\n        _transferPool(trader, fees.takerFee.recipient, takerFeeAmount);\n        _transferPool(trader, fees.protocolFee.recipient, protocolFeeAmount);\n        unchecked {\n            _transferPool(trader, msg.sender, totalPrice - takerFeeAmount - protocolFeeAmount);\n\n            amountTaken[trader][bytes32(order.salt)][listing.index] += exchange.taker.amount;\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.BID);\n    }\n\n    /**\n     * @notice Take multiple asks; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     * @param tokenRecipient Address to receive the tokens purchased\n     */\n    function _takeAsk(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.ASK,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.ASK, tokenRecipient);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        uint256 remainingETH = address(this).balance;\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.ASK,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                bool inserted;\n                (remainingETH, inserted) = _insertExecutionAsk(\n                    executionBatch,\n                    fungibleTransfers,\n                    order,\n                    exchange,\n                    fees,\n                    remainingETH\n                );\n                if (inserted) {\n                    unchecked {\n                        pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                            .taker\n                            .amount;\n                    }\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take multiple bids; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     */\n    function _takeBid(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.BID,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.BID, msg.sender);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.BID,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                _insertExecutionBid(executionBatch, fungibleTransfers, order, exchange, fees);\n\n                /* Record the pending fulfillment. */\n                unchecked {\n                    pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                        .taker\n                        .amount;\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.BID);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Initialize the ExecutionBatch and FungibleTransfers objects for bulk execution\n     * @param exchangesLength Number of exchanges\n     * @param orderType Order type\n     * @param taker Order taker address\n     */\n    function _initializeBatch(\n        uint256 exchangesLength,\n        OrderType orderType,\n        address taker\n    )\n        internal\n        pure\n        returns (bytes memory executionBatch, FungibleTransfers memory fungibleTransfers)\n    {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size * exchangesLength + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), exchangesLength) // set the length of the transfers array\n        }\n\n        /* Initialize the fungible transfers object. */\n        AtomicExecution[] memory executions = new AtomicExecution[](exchangesLength);\n        address[] memory feeRecipients = new address[](exchangesLength);\n        address[] memory makers = new address[](exchangesLength);\n        uint256[] memory makerTransfers = new uint256[](exchangesLength);\n        uint256[] memory feeTransfers = new uint256[](exchangesLength);\n        fungibleTransfers = FungibleTransfers({\n            totalProtocolFee: 0,\n            totalSellerTransfer: 0,\n            totalTakerFee: 0,\n            feeRecipientId: 0,\n            feeRecipients: feeRecipients,\n            makerId: 0,\n            makers: makers,\n            feeTransfers: feeTransfers,\n            makerTransfers: makerTransfers,\n            executions: executions\n        });\n    }\n\n    /**\n     * @notice Initialize the ExecutionBatch object for a single execution\n     * @param order Order to take a Listing from\n     * @param orderType Order type\n     * @param tokenId Token id\n     * @param amount ERC721/ERC1155 amount\n     * @param taker Order taker address\n     */\n    function _initializeSingleExecution(\n        Order memory order,\n        OrderType orderType,\n        uint256 tokenId,\n        uint256 amount,\n        address taker\n    ) internal pure returns (bytes memory executionBatch) {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), 1) // set the length of the transfers array\n        }\n\n        /* Insert the transfer into the batch. */\n        _insertNonfungibleTransfer(executionBatch, order, tokenId, amount);\n    }\n}", 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'BlurExchangeV2.cancelTrades', 'start_line': 1118, 'end_line': 1128, 'offset_start': 40902, 'offset_end': 41340, 'content': 'function cancelTrades(Cancel[] memory cancels) external {\n        uint256 cancelsLength = cancels.length;\n        for (uint256 i; i < cancelsLength; ) {\n            Cancel memory cancel = cancels[i];\n            amountTaken[msg.sender][cancel.hash][cancel.index] += cancel.amount;\n            emit CancelTrade(msg.sender, cancel.hash, cancel.index, cancel.amount);\n            unchecked {\n                ++i;\n            }\n        }\n    }', 'contract_name': 'BlurExchangeV2', 'contract_code': "{\n    address public governor;\n\n    // required by the OZ UUPS module\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    constructor(address delegate, address pool, address proxy) Executor(delegate, pool, proxy) {\n        _disableInitializers();\n    }\n\n    function initialize() external initializer {\n        __UUPSUpgradeable_init();\n        __Ownable_init();\n        __Reentrancy_init();\n        verifyDomain();\n    }\n\n    modifier onlyGovernor() {\n        if (msg.sender != governor) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    /**\n     * @notice Governor only function to set the protocol fee rate and recipient\n     * @param recipient Protocol fee recipient\n     * @param rate Protocol fee rate\n     */\n    function setProtocolFee(address recipient, uint16 rate) external onlyGovernor {\n        if (rate > _MAX_PROTOCOL_FEE_RATE) {\n            revert ProtocolFeeTooHigh();\n        }\n        protocolFee = FeeRate(recipient, rate);\n        emit NewProtocolFee(recipient, rate);\n    }\n\n    /**\n     * @notice Admin only function to set the governor of the exchange\n     * @param _governor Address of governor to set\n     */\n    function setGovernor(address _governor) external onlyOwner {\n        governor = _governor;\n        emit NewGovernor(_governor);\n    }\n\n    /**\n     * @notice Admin only function to grant or revoke the approval of an oracle\n     * @param oracle Address to set approval of\n     * @param approved If the oracle should be approved or not\n     */\n    function setOracle(address oracle, bool approved) external onlyOwner {\n        if (approved) {\n            oracles[oracle] = 1;\n        } else {\n            oracles[oracle] = 0;\n        }\n        emit SetOracle(oracle, approved);\n    }\n\n    /**\n     * @notice Admin only function to set the block range\n     * @param _blockRange Block range that oracle signatures are valid for\n     */\n    function setBlockRange(uint256 _blockRange) external onlyOwner {\n        blockRange = _blockRange;\n        emit NewBlockRange(_blockRange);\n    }\n\n    /**\n     * @notice Cancel listings by recording their fulfillment\n     * @param cancels List of cancels to execute\n     */\n    function cancelTrades(Cancel[] memory cancels) external {\n        uint256 cancelsLength = cancels.length;\n        for (uint256 i; i < cancelsLength; ) {\n            Cancel memory cancel = cancels[i];\n            amountTaken[msg.sender][cancel.hash][cancel.index] += cancel.amount;\n            emit CancelTrade(msg.sender, cancel.hash, cancel.index, cancel.amount);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Cancels all orders by incrementing caller nonce\n     */\n    function incrementNonce() external {\n        emit NonceIncremented(msg.sender, ++nonces[msg.sender]);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of _takeAsk that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAsk(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAsk(\n            inputs.orders,\n            inputs.exchanges,\n            inputs.takerFee,\n            inputs.signatures,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBid that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBid\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBid(\n        TakeBid memory inputs,\n        bytes calldata oracleSignature\n    ) public verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBid(inputs.orders, inputs.exchanges, inputs.takerFee, inputs.signatures);\n    }\n\n    /**\n     * @notice Wrapper of _takeAskSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAskSingle(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAskSingle(\n            inputs.order,\n            inputs.exchange,\n            inputs.takerFee,\n            inputs.signature,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBidSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBidSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBidSingle(\n        TakeBidSingle memory inputs,\n        bytes calldata oracleSignature\n    ) external verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBidSingle(inputs.order, inputs.exchange, inputs.takerFee, inputs.signature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of takeAskSingle that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAskSingle(inputs, oracleSignature);\n    }\n\n    /**\n     * @notice Wrapper of takeAsk that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAsk(inputs, oracleSignature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Take a single ask\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     * @param tokenRecipient Address to receive the token transfer\n     */\n    function _takeAskSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.ASK, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.ASK,\n            listing.tokenId,\n            takerAmount,\n            tokenRecipient\n        );\n\n        /* Set the fulfillment of the order. */\n        unchecked {\n            amountTaken[order.trader][bytes32(order.salt)][listing.index] += takerAmount;\n        }\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* If there are insufficient funds to cover the price with the fees, revert. */\n        unchecked {\n            if (address(this).balance < totalPrice + takerFeeAmount) {\n                revert InsufficientFunds();\n            }\n        }\n\n        /* Execute ETH transfers. */\n        _transferETH(fees.protocolFee.recipient, protocolFeeAmount);\n        _transferETH(fees.takerFee.recipient, takerFeeAmount);\n        _transferETH(order.makerFee.recipient, makerFeeAmount);\n        unchecked {\n            _transferETH(order.trader, totalPrice - makerFeeAmount - protocolFeeAmount);\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take a single bid\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     */\n    function _takeBidSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.BID, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.BID,\n            exchange.taker.tokenId,\n            takerAmount,\n            msg.sender\n        );\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* Execute pool transfers and set the fulfillment of the order. */\n        address trader = order.trader;\n        _transferPool(trader, order.makerFee.recipient, makerFeeAmount);\n        _transferPool(trader, fees.takerFee.recipient, takerFeeAmount);\n        _transferPool(trader, fees.protocolFee.recipient, protocolFeeAmount);\n        unchecked {\n            _transferPool(trader, msg.sender, totalPrice - takerFeeAmount - protocolFeeAmount);\n\n            amountTaken[trader][bytes32(order.salt)][listing.index] += exchange.taker.amount;\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.BID);\n    }\n\n    /**\n     * @notice Take multiple asks; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     * @param tokenRecipient Address to receive the tokens purchased\n     */\n    function _takeAsk(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.ASK,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.ASK, tokenRecipient);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        uint256 remainingETH = address(this).balance;\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.ASK,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                bool inserted;\n                (remainingETH, inserted) = _insertExecutionAsk(\n                    executionBatch,\n                    fungibleTransfers,\n                    order,\n                    exchange,\n                    fees,\n                    remainingETH\n                );\n                if (inserted) {\n                    unchecked {\n                        pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                            .taker\n                            .amount;\n                    }\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take multiple bids; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     */\n    function _takeBid(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.BID,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.BID, msg.sender);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.BID,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                _insertExecutionBid(executionBatch, fungibleTransfers, order, exchange, fees);\n\n                /* Record the pending fulfillment. */\n                unchecked {\n                    pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                        .taker\n                        .amount;\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.BID);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Initialize the ExecutionBatch and FungibleTransfers objects for bulk execution\n     * @param exchangesLength Number of exchanges\n     * @param orderType Order type\n     * @param taker Order taker address\n     */\n    function _initializeBatch(\n        uint256 exchangesLength,\n        OrderType orderType,\n        address taker\n    )\n        internal\n        pure\n        returns (bytes memory executionBatch, FungibleTransfers memory fungibleTransfers)\n    {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size * exchangesLength + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), exchangesLength) // set the length of the transfers array\n        }\n\n        /* Initialize the fungible transfers object. */\n        AtomicExecution[] memory executions = new AtomicExecution[](exchangesLength);\n        address[] memory feeRecipients = new address[](exchangesLength);\n        address[] memory makers = new address[](exchangesLength);\n        uint256[] memory makerTransfers = new uint256[](exchangesLength);\n        uint256[] memory feeTransfers = new uint256[](exchangesLength);\n        fungibleTransfers = FungibleTransfers({\n            totalProtocolFee: 0,\n            totalSellerTransfer: 0,\n            totalTakerFee: 0,\n            feeRecipientId: 0,\n            feeRecipients: feeRecipients,\n            makerId: 0,\n            makers: makers,\n            feeTransfers: feeTransfers,\n            makerTransfers: makerTransfers,\n            executions: executions\n        });\n    }\n\n    /**\n     * @notice Initialize the ExecutionBatch object for a single execution\n     * @param order Order to take a Listing from\n     * @param orderType Order type\n     * @param tokenId Token id\n     * @param amount ERC721/ERC1155 amount\n     * @param taker Order taker address\n     */\n    function _initializeSingleExecution(\n        Order memory order,\n        OrderType orderType,\n        uint256 tokenId,\n        uint256 amount,\n        address taker\n    ) internal pure returns (bytes memory executionBatch) {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), 1) // set the length of the transfers array\n        }\n\n        /* Insert the transfer into the batch. */\n        _insertNonfungibleTransfer(executionBatch, order, tokenId, amount);\n    }\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'BlurExchangeV2.incrementNonce', 'start_line': 1133, 'end_line': 1135, 'offset_start': 41426, 'offset_end': 41532, 'content': 'function incrementNonce() external {\n        emit NonceIncremented(msg.sender, ++nonces[msg.sender]);\n    }', 'contract_name': 'BlurExchangeV2', 'contract_code': "{\n    address public governor;\n\n    // required by the OZ UUPS module\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    constructor(address delegate, address pool, address proxy) Executor(delegate, pool, proxy) {\n        _disableInitializers();\n    }\n\n    function initialize() external initializer {\n        __UUPSUpgradeable_init();\n        __Ownable_init();\n        __Reentrancy_init();\n        verifyDomain();\n    }\n\n    modifier onlyGovernor() {\n        if (msg.sender != governor) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    /**\n     * @notice Governor only function to set the protocol fee rate and recipient\n     * @param recipient Protocol fee recipient\n     * @param rate Protocol fee rate\n     */\n    function setProtocolFee(address recipient, uint16 rate) external onlyGovernor {\n        if (rate > _MAX_PROTOCOL_FEE_RATE) {\n            revert ProtocolFeeTooHigh();\n        }\n        protocolFee = FeeRate(recipient, rate);\n        emit NewProtocolFee(recipient, rate);\n    }\n\n    /**\n     * @notice Admin only function to set the governor of the exchange\n     * @param _governor Address of governor to set\n     */\n    function setGovernor(address _governor) external onlyOwner {\n        governor = _governor;\n        emit NewGovernor(_governor);\n    }\n\n    /**\n     * @notice Admin only function to grant or revoke the approval of an oracle\n     * @param oracle Address to set approval of\n     * @param approved If the oracle should be approved or not\n     */\n    function setOracle(address oracle, bool approved) external onlyOwner {\n        if (approved) {\n            oracles[oracle] = 1;\n        } else {\n            oracles[oracle] = 0;\n        }\n        emit SetOracle(oracle, approved);\n    }\n\n    /**\n     * @notice Admin only function to set the block range\n     * @param _blockRange Block range that oracle signatures are valid for\n     */\n    function setBlockRange(uint256 _blockRange) external onlyOwner {\n        blockRange = _blockRange;\n        emit NewBlockRange(_blockRange);\n    }\n\n    /**\n     * @notice Cancel listings by recording their fulfillment\n     * @param cancels List of cancels to execute\n     */\n    function cancelTrades(Cancel[] memory cancels) external {\n        uint256 cancelsLength = cancels.length;\n        for (uint256 i; i < cancelsLength; ) {\n            Cancel memory cancel = cancels[i];\n            amountTaken[msg.sender][cancel.hash][cancel.index] += cancel.amount;\n            emit CancelTrade(msg.sender, cancel.hash, cancel.index, cancel.amount);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Cancels all orders by incrementing caller nonce\n     */\n    function incrementNonce() external {\n        emit NonceIncremented(msg.sender, ++nonces[msg.sender]);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of _takeAsk that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAsk(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAsk(\n            inputs.orders,\n            inputs.exchanges,\n            inputs.takerFee,\n            inputs.signatures,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBid that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBid\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBid(\n        TakeBid memory inputs,\n        bytes calldata oracleSignature\n    ) public verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBid(inputs.orders, inputs.exchanges, inputs.takerFee, inputs.signatures);\n    }\n\n    /**\n     * @notice Wrapper of _takeAskSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAskSingle(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAskSingle(\n            inputs.order,\n            inputs.exchange,\n            inputs.takerFee,\n            inputs.signature,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBidSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBidSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBidSingle(\n        TakeBidSingle memory inputs,\n        bytes calldata oracleSignature\n    ) external verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBidSingle(inputs.order, inputs.exchange, inputs.takerFee, inputs.signature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of takeAskSingle that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAskSingle(inputs, oracleSignature);\n    }\n\n    /**\n     * @notice Wrapper of takeAsk that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAsk(inputs, oracleSignature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Take a single ask\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     * @param tokenRecipient Address to receive the token transfer\n     */\n    function _takeAskSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.ASK, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.ASK,\n            listing.tokenId,\n            takerAmount,\n            tokenRecipient\n        );\n\n        /* Set the fulfillment of the order. */\n        unchecked {\n            amountTaken[order.trader][bytes32(order.salt)][listing.index] += takerAmount;\n        }\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* If there are insufficient funds to cover the price with the fees, revert. */\n        unchecked {\n            if (address(this).balance < totalPrice + takerFeeAmount) {\n                revert InsufficientFunds();\n            }\n        }\n\n        /* Execute ETH transfers. */\n        _transferETH(fees.protocolFee.recipient, protocolFeeAmount);\n        _transferETH(fees.takerFee.recipient, takerFeeAmount);\n        _transferETH(order.makerFee.recipient, makerFeeAmount);\n        unchecked {\n            _transferETH(order.trader, totalPrice - makerFeeAmount - protocolFeeAmount);\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take a single bid\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     */\n    function _takeBidSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.BID, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.BID,\n            exchange.taker.tokenId,\n            takerAmount,\n            msg.sender\n        );\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* Execute pool transfers and set the fulfillment of the order. */\n        address trader = order.trader;\n        _transferPool(trader, order.makerFee.recipient, makerFeeAmount);\n        _transferPool(trader, fees.takerFee.recipient, takerFeeAmount);\n        _transferPool(trader, fees.protocolFee.recipient, protocolFeeAmount);\n        unchecked {\n            _transferPool(trader, msg.sender, totalPrice - takerFeeAmount - protocolFeeAmount);\n\n            amountTaken[trader][bytes32(order.salt)][listing.index] += exchange.taker.amount;\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.BID);\n    }\n\n    /**\n     * @notice Take multiple asks; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     * @param tokenRecipient Address to receive the tokens purchased\n     */\n    function _takeAsk(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.ASK,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.ASK, tokenRecipient);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        uint256 remainingETH = address(this).balance;\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.ASK,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                bool inserted;\n                (remainingETH, inserted) = _insertExecutionAsk(\n                    executionBatch,\n                    fungibleTransfers,\n                    order,\n                    exchange,\n                    fees,\n                    remainingETH\n                );\n                if (inserted) {\n                    unchecked {\n                        pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                            .taker\n                            .amount;\n                    }\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take multiple bids; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     */\n    function _takeBid(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.BID,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.BID, msg.sender);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.BID,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                _insertExecutionBid(executionBatch, fungibleTransfers, order, exchange, fees);\n\n                /* Record the pending fulfillment. */\n                unchecked {\n                    pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                        .taker\n                        .amount;\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.BID);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Initialize the ExecutionBatch and FungibleTransfers objects for bulk execution\n     * @param exchangesLength Number of exchanges\n     * @param orderType Order type\n     * @param taker Order taker address\n     */\n    function _initializeBatch(\n        uint256 exchangesLength,\n        OrderType orderType,\n        address taker\n    )\n        internal\n        pure\n        returns (bytes memory executionBatch, FungibleTransfers memory fungibleTransfers)\n    {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size * exchangesLength + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), exchangesLength) // set the length of the transfers array\n        }\n\n        /* Initialize the fungible transfers object. */\n        AtomicExecution[] memory executions = new AtomicExecution[](exchangesLength);\n        address[] memory feeRecipients = new address[](exchangesLength);\n        address[] memory makers = new address[](exchangesLength);\n        uint256[] memory makerTransfers = new uint256[](exchangesLength);\n        uint256[] memory feeTransfers = new uint256[](exchangesLength);\n        fungibleTransfers = FungibleTransfers({\n            totalProtocolFee: 0,\n            totalSellerTransfer: 0,\n            totalTakerFee: 0,\n            feeRecipientId: 0,\n            feeRecipients: feeRecipients,\n            makerId: 0,\n            makers: makers,\n            feeTransfers: feeTransfers,\n            makerTransfers: makerTransfers,\n            executions: executions\n        });\n    }\n\n    /**\n     * @notice Initialize the ExecutionBatch object for a single execution\n     * @param order Order to take a Listing from\n     * @param orderType Order type\n     * @param tokenId Token id\n     * @param amount ERC721/ERC1155 amount\n     * @param taker Order taker address\n     */\n    function _initializeSingleExecution(\n        Order memory order,\n        OrderType orderType,\n        uint256 tokenId,\n        uint256 amount,\n        address taker\n    ) internal pure returns (bytes memory executionBatch) {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), 1) // set the length of the transfers array\n        }\n\n        /* Insert the transfer into the batch. */\n        _insertNonfungibleTransfer(executionBatch, order, tokenId, amount);\n    }\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'BlurExchangeV2.takeAsk', 'start_line': 1146, 'end_line': 1162, 'offset_start': 41939, 'offset_end': 42349, 'content': 'function takeAsk(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAsk(\n            inputs.orders,\n            inputs.exchanges,\n            inputs.takerFee,\n            inputs.signatures,\n            inputs.tokenRecipient\n        );\n    }', 'contract_name': 'BlurExchangeV2', 'contract_code': "{\n    address public governor;\n\n    // required by the OZ UUPS module\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    constructor(address delegate, address pool, address proxy) Executor(delegate, pool, proxy) {\n        _disableInitializers();\n    }\n\n    function initialize() external initializer {\n        __UUPSUpgradeable_init();\n        __Ownable_init();\n        __Reentrancy_init();\n        verifyDomain();\n    }\n\n    modifier onlyGovernor() {\n        if (msg.sender != governor) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    /**\n     * @notice Governor only function to set the protocol fee rate and recipient\n     * @param recipient Protocol fee recipient\n     * @param rate Protocol fee rate\n     */\n    function setProtocolFee(address recipient, uint16 rate) external onlyGovernor {\n        if (rate > _MAX_PROTOCOL_FEE_RATE) {\n            revert ProtocolFeeTooHigh();\n        }\n        protocolFee = FeeRate(recipient, rate);\n        emit NewProtocolFee(recipient, rate);\n    }\n\n    /**\n     * @notice Admin only function to set the governor of the exchange\n     * @param _governor Address of governor to set\n     */\n    function setGovernor(address _governor) external onlyOwner {\n        governor = _governor;\n        emit NewGovernor(_governor);\n    }\n\n    /**\n     * @notice Admin only function to grant or revoke the approval of an oracle\n     * @param oracle Address to set approval of\n     * @param approved If the oracle should be approved or not\n     */\n    function setOracle(address oracle, bool approved) external onlyOwner {\n        if (approved) {\n            oracles[oracle] = 1;\n        } else {\n            oracles[oracle] = 0;\n        }\n        emit SetOracle(oracle, approved);\n    }\n\n    /**\n     * @notice Admin only function to set the block range\n     * @param _blockRange Block range that oracle signatures are valid for\n     */\n    function setBlockRange(uint256 _blockRange) external onlyOwner {\n        blockRange = _blockRange;\n        emit NewBlockRange(_blockRange);\n    }\n\n    /**\n     * @notice Cancel listings by recording their fulfillment\n     * @param cancels List of cancels to execute\n     */\n    function cancelTrades(Cancel[] memory cancels) external {\n        uint256 cancelsLength = cancels.length;\n        for (uint256 i; i < cancelsLength; ) {\n            Cancel memory cancel = cancels[i];\n            amountTaken[msg.sender][cancel.hash][cancel.index] += cancel.amount;\n            emit CancelTrade(msg.sender, cancel.hash, cancel.index, cancel.amount);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Cancels all orders by incrementing caller nonce\n     */\n    function incrementNonce() external {\n        emit NonceIncremented(msg.sender, ++nonces[msg.sender]);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of _takeAsk that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAsk(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAsk(\n            inputs.orders,\n            inputs.exchanges,\n            inputs.takerFee,\n            inputs.signatures,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBid that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBid\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBid(\n        TakeBid memory inputs,\n        bytes calldata oracleSignature\n    ) public verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBid(inputs.orders, inputs.exchanges, inputs.takerFee, inputs.signatures);\n    }\n\n    /**\n     * @notice Wrapper of _takeAskSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAskSingle(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAskSingle(\n            inputs.order,\n            inputs.exchange,\n            inputs.takerFee,\n            inputs.signature,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBidSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBidSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBidSingle(\n        TakeBidSingle memory inputs,\n        bytes calldata oracleSignature\n    ) external verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBidSingle(inputs.order, inputs.exchange, inputs.takerFee, inputs.signature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of takeAskSingle that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAskSingle(inputs, oracleSignature);\n    }\n\n    /**\n     * @notice Wrapper of takeAsk that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAsk(inputs, oracleSignature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Take a single ask\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     * @param tokenRecipient Address to receive the token transfer\n     */\n    function _takeAskSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.ASK, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.ASK,\n            listing.tokenId,\n            takerAmount,\n            tokenRecipient\n        );\n\n        /* Set the fulfillment of the order. */\n        unchecked {\n            amountTaken[order.trader][bytes32(order.salt)][listing.index] += takerAmount;\n        }\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* If there are insufficient funds to cover the price with the fees, revert. */\n        unchecked {\n            if (address(this).balance < totalPrice + takerFeeAmount) {\n                revert InsufficientFunds();\n            }\n        }\n\n        /* Execute ETH transfers. */\n        _transferETH(fees.protocolFee.recipient, protocolFeeAmount);\n        _transferETH(fees.takerFee.recipient, takerFeeAmount);\n        _transferETH(order.makerFee.recipient, makerFeeAmount);\n        unchecked {\n            _transferETH(order.trader, totalPrice - makerFeeAmount - protocolFeeAmount);\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take a single bid\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     */\n    function _takeBidSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.BID, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.BID,\n            exchange.taker.tokenId,\n            takerAmount,\n            msg.sender\n        );\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* Execute pool transfers and set the fulfillment of the order. */\n        address trader = order.trader;\n        _transferPool(trader, order.makerFee.recipient, makerFeeAmount);\n        _transferPool(trader, fees.takerFee.recipient, takerFeeAmount);\n        _transferPool(trader, fees.protocolFee.recipient, protocolFeeAmount);\n        unchecked {\n            _transferPool(trader, msg.sender, totalPrice - takerFeeAmount - protocolFeeAmount);\n\n            amountTaken[trader][bytes32(order.salt)][listing.index] += exchange.taker.amount;\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.BID);\n    }\n\n    /**\n     * @notice Take multiple asks; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     * @param tokenRecipient Address to receive the tokens purchased\n     */\n    function _takeAsk(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.ASK,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.ASK, tokenRecipient);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        uint256 remainingETH = address(this).balance;\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.ASK,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                bool inserted;\n                (remainingETH, inserted) = _insertExecutionAsk(\n                    executionBatch,\n                    fungibleTransfers,\n                    order,\n                    exchange,\n                    fees,\n                    remainingETH\n                );\n                if (inserted) {\n                    unchecked {\n                        pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                            .taker\n                            .amount;\n                    }\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take multiple bids; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     */\n    function _takeBid(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.BID,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.BID, msg.sender);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.BID,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                _insertExecutionBid(executionBatch, fungibleTransfers, order, exchange, fees);\n\n                /* Record the pending fulfillment. */\n                unchecked {\n                    pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                        .taker\n                        .amount;\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.BID);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Initialize the ExecutionBatch and FungibleTransfers objects for bulk execution\n     * @param exchangesLength Number of exchanges\n     * @param orderType Order type\n     * @param taker Order taker address\n     */\n    function _initializeBatch(\n        uint256 exchangesLength,\n        OrderType orderType,\n        address taker\n    )\n        internal\n        pure\n        returns (bytes memory executionBatch, FungibleTransfers memory fungibleTransfers)\n    {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size * exchangesLength + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), exchangesLength) // set the length of the transfers array\n        }\n\n        /* Initialize the fungible transfers object. */\n        AtomicExecution[] memory executions = new AtomicExecution[](exchangesLength);\n        address[] memory feeRecipients = new address[](exchangesLength);\n        address[] memory makers = new address[](exchangesLength);\n        uint256[] memory makerTransfers = new uint256[](exchangesLength);\n        uint256[] memory feeTransfers = new uint256[](exchangesLength);\n        fungibleTransfers = FungibleTransfers({\n            totalProtocolFee: 0,\n            totalSellerTransfer: 0,\n            totalTakerFee: 0,\n            feeRecipientId: 0,\n            feeRecipients: feeRecipients,\n            makerId: 0,\n            makers: makers,\n            feeTransfers: feeTransfers,\n            makerTransfers: makerTransfers,\n            executions: executions\n        });\n    }\n\n    /**\n     * @notice Initialize the ExecutionBatch object for a single execution\n     * @param order Order to take a Listing from\n     * @param orderType Order type\n     * @param tokenId Token id\n     * @param amount ERC721/ERC1155 amount\n     * @param taker Order taker address\n     */\n    function _initializeSingleExecution(\n        Order memory order,\n        OrderType orderType,\n        uint256 tokenId,\n        uint256 amount,\n        address taker\n    ) internal pure returns (bytes memory executionBatch) {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), 1) // set the length of the transfers array\n        }\n\n        /* Insert the transfer into the batch. */\n        _insertNonfungibleTransfer(executionBatch, order, tokenId, amount);\n    }\n}", 'modifiers': [None, None], 'stateMutability': 'payable', 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'BlurExchangeV2.takeBid', 'start_line': 1169, 'end_line': 1174, 'offset_start': 42572, 'offset_end': 42832, 'content': 'function takeBid(\n        TakeBid memory inputs,\n        bytes calldata oracleSignature\n    ) public verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBid(inputs.orders, inputs.exchanges, inputs.takerFee, inputs.signatures);\n    }', 'contract_name': 'BlurExchangeV2', 'contract_code': "{\n    address public governor;\n\n    // required by the OZ UUPS module\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    constructor(address delegate, address pool, address proxy) Executor(delegate, pool, proxy) {\n        _disableInitializers();\n    }\n\n    function initialize() external initializer {\n        __UUPSUpgradeable_init();\n        __Ownable_init();\n        __Reentrancy_init();\n        verifyDomain();\n    }\n\n    modifier onlyGovernor() {\n        if (msg.sender != governor) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    /**\n     * @notice Governor only function to set the protocol fee rate and recipient\n     * @param recipient Protocol fee recipient\n     * @param rate Protocol fee rate\n     */\n    function setProtocolFee(address recipient, uint16 rate) external onlyGovernor {\n        if (rate > _MAX_PROTOCOL_FEE_RATE) {\n            revert ProtocolFeeTooHigh();\n        }\n        protocolFee = FeeRate(recipient, rate);\n        emit NewProtocolFee(recipient, rate);\n    }\n\n    /**\n     * @notice Admin only function to set the governor of the exchange\n     * @param _governor Address of governor to set\n     */\n    function setGovernor(address _governor) external onlyOwner {\n        governor = _governor;\n        emit NewGovernor(_governor);\n    }\n\n    /**\n     * @notice Admin only function to grant or revoke the approval of an oracle\n     * @param oracle Address to set approval of\n     * @param approved If the oracle should be approved or not\n     */\n    function setOracle(address oracle, bool approved) external onlyOwner {\n        if (approved) {\n            oracles[oracle] = 1;\n        } else {\n            oracles[oracle] = 0;\n        }\n        emit SetOracle(oracle, approved);\n    }\n\n    /**\n     * @notice Admin only function to set the block range\n     * @param _blockRange Block range that oracle signatures are valid for\n     */\n    function setBlockRange(uint256 _blockRange) external onlyOwner {\n        blockRange = _blockRange;\n        emit NewBlockRange(_blockRange);\n    }\n\n    /**\n     * @notice Cancel listings by recording their fulfillment\n     * @param cancels List of cancels to execute\n     */\n    function cancelTrades(Cancel[] memory cancels) external {\n        uint256 cancelsLength = cancels.length;\n        for (uint256 i; i < cancelsLength; ) {\n            Cancel memory cancel = cancels[i];\n            amountTaken[msg.sender][cancel.hash][cancel.index] += cancel.amount;\n            emit CancelTrade(msg.sender, cancel.hash, cancel.index, cancel.amount);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Cancels all orders by incrementing caller nonce\n     */\n    function incrementNonce() external {\n        emit NonceIncremented(msg.sender, ++nonces[msg.sender]);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of _takeAsk that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAsk(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAsk(\n            inputs.orders,\n            inputs.exchanges,\n            inputs.takerFee,\n            inputs.signatures,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBid that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBid\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBid(\n        TakeBid memory inputs,\n        bytes calldata oracleSignature\n    ) public verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBid(inputs.orders, inputs.exchanges, inputs.takerFee, inputs.signatures);\n    }\n\n    /**\n     * @notice Wrapper of _takeAskSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAskSingle(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAskSingle(\n            inputs.order,\n            inputs.exchange,\n            inputs.takerFee,\n            inputs.signature,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBidSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBidSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBidSingle(\n        TakeBidSingle memory inputs,\n        bytes calldata oracleSignature\n    ) external verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBidSingle(inputs.order, inputs.exchange, inputs.takerFee, inputs.signature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of takeAskSingle that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAskSingle(inputs, oracleSignature);\n    }\n\n    /**\n     * @notice Wrapper of takeAsk that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAsk(inputs, oracleSignature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Take a single ask\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     * @param tokenRecipient Address to receive the token transfer\n     */\n    function _takeAskSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.ASK, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.ASK,\n            listing.tokenId,\n            takerAmount,\n            tokenRecipient\n        );\n\n        /* Set the fulfillment of the order. */\n        unchecked {\n            amountTaken[order.trader][bytes32(order.salt)][listing.index] += takerAmount;\n        }\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* If there are insufficient funds to cover the price with the fees, revert. */\n        unchecked {\n            if (address(this).balance < totalPrice + takerFeeAmount) {\n                revert InsufficientFunds();\n            }\n        }\n\n        /* Execute ETH transfers. */\n        _transferETH(fees.protocolFee.recipient, protocolFeeAmount);\n        _transferETH(fees.takerFee.recipient, takerFeeAmount);\n        _transferETH(order.makerFee.recipient, makerFeeAmount);\n        unchecked {\n            _transferETH(order.trader, totalPrice - makerFeeAmount - protocolFeeAmount);\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take a single bid\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     */\n    function _takeBidSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.BID, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.BID,\n            exchange.taker.tokenId,\n            takerAmount,\n            msg.sender\n        );\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* Execute pool transfers and set the fulfillment of the order. */\n        address trader = order.trader;\n        _transferPool(trader, order.makerFee.recipient, makerFeeAmount);\n        _transferPool(trader, fees.takerFee.recipient, takerFeeAmount);\n        _transferPool(trader, fees.protocolFee.recipient, protocolFeeAmount);\n        unchecked {\n            _transferPool(trader, msg.sender, totalPrice - takerFeeAmount - protocolFeeAmount);\n\n            amountTaken[trader][bytes32(order.salt)][listing.index] += exchange.taker.amount;\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.BID);\n    }\n\n    /**\n     * @notice Take multiple asks; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     * @param tokenRecipient Address to receive the tokens purchased\n     */\n    function _takeAsk(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.ASK,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.ASK, tokenRecipient);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        uint256 remainingETH = address(this).balance;\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.ASK,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                bool inserted;\n                (remainingETH, inserted) = _insertExecutionAsk(\n                    executionBatch,\n                    fungibleTransfers,\n                    order,\n                    exchange,\n                    fees,\n                    remainingETH\n                );\n                if (inserted) {\n                    unchecked {\n                        pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                            .taker\n                            .amount;\n                    }\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take multiple bids; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     */\n    function _takeBid(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.BID,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.BID, msg.sender);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.BID,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                _insertExecutionBid(executionBatch, fungibleTransfers, order, exchange, fees);\n\n                /* Record the pending fulfillment. */\n                unchecked {\n                    pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                        .taker\n                        .amount;\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.BID);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Initialize the ExecutionBatch and FungibleTransfers objects for bulk execution\n     * @param exchangesLength Number of exchanges\n     * @param orderType Order type\n     * @param taker Order taker address\n     */\n    function _initializeBatch(\n        uint256 exchangesLength,\n        OrderType orderType,\n        address taker\n    )\n        internal\n        pure\n        returns (bytes memory executionBatch, FungibleTransfers memory fungibleTransfers)\n    {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size * exchangesLength + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), exchangesLength) // set the length of the transfers array\n        }\n\n        /* Initialize the fungible transfers object. */\n        AtomicExecution[] memory executions = new AtomicExecution[](exchangesLength);\n        address[] memory feeRecipients = new address[](exchangesLength);\n        address[] memory makers = new address[](exchangesLength);\n        uint256[] memory makerTransfers = new uint256[](exchangesLength);\n        uint256[] memory feeTransfers = new uint256[](exchangesLength);\n        fungibleTransfers = FungibleTransfers({\n            totalProtocolFee: 0,\n            totalSellerTransfer: 0,\n            totalTakerFee: 0,\n            feeRecipientId: 0,\n            feeRecipients: feeRecipients,\n            makerId: 0,\n            makers: makers,\n            feeTransfers: feeTransfers,\n            makerTransfers: makerTransfers,\n            executions: executions\n        });\n    }\n\n    /**\n     * @notice Initialize the ExecutionBatch object for a single execution\n     * @param order Order to take a Listing from\n     * @param orderType Order type\n     * @param tokenId Token id\n     * @param amount ERC721/ERC1155 amount\n     * @param taker Order taker address\n     */\n    function _initializeSingleExecution(\n        Order memory order,\n        OrderType orderType,\n        uint256 tokenId,\n        uint256 amount,\n        address taker\n    ) internal pure returns (bytes memory executionBatch) {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), 1) // set the length of the transfers array\n        }\n\n        /* Insert the transfer into the batch. */\n        _insertNonfungibleTransfer(executionBatch, order, tokenId, amount);\n    }\n}", 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'BlurExchangeV2.takeAskSingle', 'start_line': 1181, 'end_line': 1197, 'offset_start': 43067, 'offset_end': 43492, 'content': 'function takeAskSingle(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAskSingle(\n            inputs.order,\n            inputs.exchange,\n            inputs.takerFee,\n            inputs.signature,\n            inputs.tokenRecipient\n        );\n    }', 'contract_name': 'BlurExchangeV2', 'contract_code': "{\n    address public governor;\n\n    // required by the OZ UUPS module\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    constructor(address delegate, address pool, address proxy) Executor(delegate, pool, proxy) {\n        _disableInitializers();\n    }\n\n    function initialize() external initializer {\n        __UUPSUpgradeable_init();\n        __Ownable_init();\n        __Reentrancy_init();\n        verifyDomain();\n    }\n\n    modifier onlyGovernor() {\n        if (msg.sender != governor) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    /**\n     * @notice Governor only function to set the protocol fee rate and recipient\n     * @param recipient Protocol fee recipient\n     * @param rate Protocol fee rate\n     */\n    function setProtocolFee(address recipient, uint16 rate) external onlyGovernor {\n        if (rate > _MAX_PROTOCOL_FEE_RATE) {\n            revert ProtocolFeeTooHigh();\n        }\n        protocolFee = FeeRate(recipient, rate);\n        emit NewProtocolFee(recipient, rate);\n    }\n\n    /**\n     * @notice Admin only function to set the governor of the exchange\n     * @param _governor Address of governor to set\n     */\n    function setGovernor(address _governor) external onlyOwner {\n        governor = _governor;\n        emit NewGovernor(_governor);\n    }\n\n    /**\n     * @notice Admin only function to grant or revoke the approval of an oracle\n     * @param oracle Address to set approval of\n     * @param approved If the oracle should be approved or not\n     */\n    function setOracle(address oracle, bool approved) external onlyOwner {\n        if (approved) {\n            oracles[oracle] = 1;\n        } else {\n            oracles[oracle] = 0;\n        }\n        emit SetOracle(oracle, approved);\n    }\n\n    /**\n     * @notice Admin only function to set the block range\n     * @param _blockRange Block range that oracle signatures are valid for\n     */\n    function setBlockRange(uint256 _blockRange) external onlyOwner {\n        blockRange = _blockRange;\n        emit NewBlockRange(_blockRange);\n    }\n\n    /**\n     * @notice Cancel listings by recording their fulfillment\n     * @param cancels List of cancels to execute\n     */\n    function cancelTrades(Cancel[] memory cancels) external {\n        uint256 cancelsLength = cancels.length;\n        for (uint256 i; i < cancelsLength; ) {\n            Cancel memory cancel = cancels[i];\n            amountTaken[msg.sender][cancel.hash][cancel.index] += cancel.amount;\n            emit CancelTrade(msg.sender, cancel.hash, cancel.index, cancel.amount);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Cancels all orders by incrementing caller nonce\n     */\n    function incrementNonce() external {\n        emit NonceIncremented(msg.sender, ++nonces[msg.sender]);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of _takeAsk that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAsk(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAsk(\n            inputs.orders,\n            inputs.exchanges,\n            inputs.takerFee,\n            inputs.signatures,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBid that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBid\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBid(\n        TakeBid memory inputs,\n        bytes calldata oracleSignature\n    ) public verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBid(inputs.orders, inputs.exchanges, inputs.takerFee, inputs.signatures);\n    }\n\n    /**\n     * @notice Wrapper of _takeAskSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAskSingle(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAskSingle(\n            inputs.order,\n            inputs.exchange,\n            inputs.takerFee,\n            inputs.signature,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBidSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBidSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBidSingle(\n        TakeBidSingle memory inputs,\n        bytes calldata oracleSignature\n    ) external verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBidSingle(inputs.order, inputs.exchange, inputs.takerFee, inputs.signature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of takeAskSingle that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAskSingle(inputs, oracleSignature);\n    }\n\n    /**\n     * @notice Wrapper of takeAsk that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAsk(inputs, oracleSignature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Take a single ask\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     * @param tokenRecipient Address to receive the token transfer\n     */\n    function _takeAskSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.ASK, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.ASK,\n            listing.tokenId,\n            takerAmount,\n            tokenRecipient\n        );\n\n        /* Set the fulfillment of the order. */\n        unchecked {\n            amountTaken[order.trader][bytes32(order.salt)][listing.index] += takerAmount;\n        }\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* If there are insufficient funds to cover the price with the fees, revert. */\n        unchecked {\n            if (address(this).balance < totalPrice + takerFeeAmount) {\n                revert InsufficientFunds();\n            }\n        }\n\n        /* Execute ETH transfers. */\n        _transferETH(fees.protocolFee.recipient, protocolFeeAmount);\n        _transferETH(fees.takerFee.recipient, takerFeeAmount);\n        _transferETH(order.makerFee.recipient, makerFeeAmount);\n        unchecked {\n            _transferETH(order.trader, totalPrice - makerFeeAmount - protocolFeeAmount);\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take a single bid\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     */\n    function _takeBidSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.BID, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.BID,\n            exchange.taker.tokenId,\n            takerAmount,\n            msg.sender\n        );\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* Execute pool transfers and set the fulfillment of the order. */\n        address trader = order.trader;\n        _transferPool(trader, order.makerFee.recipient, makerFeeAmount);\n        _transferPool(trader, fees.takerFee.recipient, takerFeeAmount);\n        _transferPool(trader, fees.protocolFee.recipient, protocolFeeAmount);\n        unchecked {\n            _transferPool(trader, msg.sender, totalPrice - takerFeeAmount - protocolFeeAmount);\n\n            amountTaken[trader][bytes32(order.salt)][listing.index] += exchange.taker.amount;\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.BID);\n    }\n\n    /**\n     * @notice Take multiple asks; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     * @param tokenRecipient Address to receive the tokens purchased\n     */\n    function _takeAsk(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.ASK,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.ASK, tokenRecipient);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        uint256 remainingETH = address(this).balance;\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.ASK,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                bool inserted;\n                (remainingETH, inserted) = _insertExecutionAsk(\n                    executionBatch,\n                    fungibleTransfers,\n                    order,\n                    exchange,\n                    fees,\n                    remainingETH\n                );\n                if (inserted) {\n                    unchecked {\n                        pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                            .taker\n                            .amount;\n                    }\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take multiple bids; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     */\n    function _takeBid(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.BID,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.BID, msg.sender);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.BID,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                _insertExecutionBid(executionBatch, fungibleTransfers, order, exchange, fees);\n\n                /* Record the pending fulfillment. */\n                unchecked {\n                    pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                        .taker\n                        .amount;\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.BID);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Initialize the ExecutionBatch and FungibleTransfers objects for bulk execution\n     * @param exchangesLength Number of exchanges\n     * @param orderType Order type\n     * @param taker Order taker address\n     */\n    function _initializeBatch(\n        uint256 exchangesLength,\n        OrderType orderType,\n        address taker\n    )\n        internal\n        pure\n        returns (bytes memory executionBatch, FungibleTransfers memory fungibleTransfers)\n    {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size * exchangesLength + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), exchangesLength) // set the length of the transfers array\n        }\n\n        /* Initialize the fungible transfers object. */\n        AtomicExecution[] memory executions = new AtomicExecution[](exchangesLength);\n        address[] memory feeRecipients = new address[](exchangesLength);\n        address[] memory makers = new address[](exchangesLength);\n        uint256[] memory makerTransfers = new uint256[](exchangesLength);\n        uint256[] memory feeTransfers = new uint256[](exchangesLength);\n        fungibleTransfers = FungibleTransfers({\n            totalProtocolFee: 0,\n            totalSellerTransfer: 0,\n            totalTakerFee: 0,\n            feeRecipientId: 0,\n            feeRecipients: feeRecipients,\n            makerId: 0,\n            makers: makers,\n            feeTransfers: feeTransfers,\n            makerTransfers: makerTransfers,\n            executions: executions\n        });\n    }\n\n    /**\n     * @notice Initialize the ExecutionBatch object for a single execution\n     * @param order Order to take a Listing from\n     * @param orderType Order type\n     * @param tokenId Token id\n     * @param amount ERC721/ERC1155 amount\n     * @param taker Order taker address\n     */\n    function _initializeSingleExecution(\n        Order memory order,\n        OrderType orderType,\n        uint256 tokenId,\n        uint256 amount,\n        address taker\n    ) internal pure returns (bytes memory executionBatch) {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), 1) // set the length of the transfers array\n        }\n\n        /* Insert the transfer into the batch. */\n        _insertNonfungibleTransfer(executionBatch, order, tokenId, amount);\n    }\n}", 'modifiers': [None, None], 'stateMutability': 'payable', 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'BlurExchangeV2.takeBidSingle', 'start_line': 1204, 'end_line': 1209, 'offset_start': 43727, 'offset_end': 44004, 'content': 'function takeBidSingle(\n        TakeBidSingle memory inputs,\n        bytes calldata oracleSignature\n    ) external verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBidSingle(inputs.order, inputs.exchange, inputs.takerFee, inputs.signature);\n    }', 'contract_name': 'BlurExchangeV2', 'contract_code': "{\n    address public governor;\n\n    // required by the OZ UUPS module\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    constructor(address delegate, address pool, address proxy) Executor(delegate, pool, proxy) {\n        _disableInitializers();\n    }\n\n    function initialize() external initializer {\n        __UUPSUpgradeable_init();\n        __Ownable_init();\n        __Reentrancy_init();\n        verifyDomain();\n    }\n\n    modifier onlyGovernor() {\n        if (msg.sender != governor) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    /**\n     * @notice Governor only function to set the protocol fee rate and recipient\n     * @param recipient Protocol fee recipient\n     * @param rate Protocol fee rate\n     */\n    function setProtocolFee(address recipient, uint16 rate) external onlyGovernor {\n        if (rate > _MAX_PROTOCOL_FEE_RATE) {\n            revert ProtocolFeeTooHigh();\n        }\n        protocolFee = FeeRate(recipient, rate);\n        emit NewProtocolFee(recipient, rate);\n    }\n\n    /**\n     * @notice Admin only function to set the governor of the exchange\n     * @param _governor Address of governor to set\n     */\n    function setGovernor(address _governor) external onlyOwner {\n        governor = _governor;\n        emit NewGovernor(_governor);\n    }\n\n    /**\n     * @notice Admin only function to grant or revoke the approval of an oracle\n     * @param oracle Address to set approval of\n     * @param approved If the oracle should be approved or not\n     */\n    function setOracle(address oracle, bool approved) external onlyOwner {\n        if (approved) {\n            oracles[oracle] = 1;\n        } else {\n            oracles[oracle] = 0;\n        }\n        emit SetOracle(oracle, approved);\n    }\n\n    /**\n     * @notice Admin only function to set the block range\n     * @param _blockRange Block range that oracle signatures are valid for\n     */\n    function setBlockRange(uint256 _blockRange) external onlyOwner {\n        blockRange = _blockRange;\n        emit NewBlockRange(_blockRange);\n    }\n\n    /**\n     * @notice Cancel listings by recording their fulfillment\n     * @param cancels List of cancels to execute\n     */\n    function cancelTrades(Cancel[] memory cancels) external {\n        uint256 cancelsLength = cancels.length;\n        for (uint256 i; i < cancelsLength; ) {\n            Cancel memory cancel = cancels[i];\n            amountTaken[msg.sender][cancel.hash][cancel.index] += cancel.amount;\n            emit CancelTrade(msg.sender, cancel.hash, cancel.index, cancel.amount);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Cancels all orders by incrementing caller nonce\n     */\n    function incrementNonce() external {\n        emit NonceIncremented(msg.sender, ++nonces[msg.sender]);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of _takeAsk that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAsk(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAsk(\n            inputs.orders,\n            inputs.exchanges,\n            inputs.takerFee,\n            inputs.signatures,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBid that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBid\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBid(\n        TakeBid memory inputs,\n        bytes calldata oracleSignature\n    ) public verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBid(inputs.orders, inputs.exchanges, inputs.takerFee, inputs.signatures);\n    }\n\n    /**\n     * @notice Wrapper of _takeAskSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAskSingle(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAskSingle(\n            inputs.order,\n            inputs.exchange,\n            inputs.takerFee,\n            inputs.signature,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBidSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBidSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBidSingle(\n        TakeBidSingle memory inputs,\n        bytes calldata oracleSignature\n    ) external verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBidSingle(inputs.order, inputs.exchange, inputs.takerFee, inputs.signature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of takeAskSingle that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAskSingle(inputs, oracleSignature);\n    }\n\n    /**\n     * @notice Wrapper of takeAsk that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAsk(inputs, oracleSignature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Take a single ask\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     * @param tokenRecipient Address to receive the token transfer\n     */\n    function _takeAskSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.ASK, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.ASK,\n            listing.tokenId,\n            takerAmount,\n            tokenRecipient\n        );\n\n        /* Set the fulfillment of the order. */\n        unchecked {\n            amountTaken[order.trader][bytes32(order.salt)][listing.index] += takerAmount;\n        }\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* If there are insufficient funds to cover the price with the fees, revert. */\n        unchecked {\n            if (address(this).balance < totalPrice + takerFeeAmount) {\n                revert InsufficientFunds();\n            }\n        }\n\n        /* Execute ETH transfers. */\n        _transferETH(fees.protocolFee.recipient, protocolFeeAmount);\n        _transferETH(fees.takerFee.recipient, takerFeeAmount);\n        _transferETH(order.makerFee.recipient, makerFeeAmount);\n        unchecked {\n            _transferETH(order.trader, totalPrice - makerFeeAmount - protocolFeeAmount);\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take a single bid\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     */\n    function _takeBidSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.BID, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.BID,\n            exchange.taker.tokenId,\n            takerAmount,\n            msg.sender\n        );\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* Execute pool transfers and set the fulfillment of the order. */\n        address trader = order.trader;\n        _transferPool(trader, order.makerFee.recipient, makerFeeAmount);\n        _transferPool(trader, fees.takerFee.recipient, takerFeeAmount);\n        _transferPool(trader, fees.protocolFee.recipient, protocolFeeAmount);\n        unchecked {\n            _transferPool(trader, msg.sender, totalPrice - takerFeeAmount - protocolFeeAmount);\n\n            amountTaken[trader][bytes32(order.salt)][listing.index] += exchange.taker.amount;\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.BID);\n    }\n\n    /**\n     * @notice Take multiple asks; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     * @param tokenRecipient Address to receive the tokens purchased\n     */\n    function _takeAsk(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.ASK,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.ASK, tokenRecipient);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        uint256 remainingETH = address(this).balance;\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.ASK,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                bool inserted;\n                (remainingETH, inserted) = _insertExecutionAsk(\n                    executionBatch,\n                    fungibleTransfers,\n                    order,\n                    exchange,\n                    fees,\n                    remainingETH\n                );\n                if (inserted) {\n                    unchecked {\n                        pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                            .taker\n                            .amount;\n                    }\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take multiple bids; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     */\n    function _takeBid(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.BID,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.BID, msg.sender);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.BID,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                _insertExecutionBid(executionBatch, fungibleTransfers, order, exchange, fees);\n\n                /* Record the pending fulfillment. */\n                unchecked {\n                    pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                        .taker\n                        .amount;\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.BID);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Initialize the ExecutionBatch and FungibleTransfers objects for bulk execution\n     * @param exchangesLength Number of exchanges\n     * @param orderType Order type\n     * @param taker Order taker address\n     */\n    function _initializeBatch(\n        uint256 exchangesLength,\n        OrderType orderType,\n        address taker\n    )\n        internal\n        pure\n        returns (bytes memory executionBatch, FungibleTransfers memory fungibleTransfers)\n    {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size * exchangesLength + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), exchangesLength) // set the length of the transfers array\n        }\n\n        /* Initialize the fungible transfers object. */\n        AtomicExecution[] memory executions = new AtomicExecution[](exchangesLength);\n        address[] memory feeRecipients = new address[](exchangesLength);\n        address[] memory makers = new address[](exchangesLength);\n        uint256[] memory makerTransfers = new uint256[](exchangesLength);\n        uint256[] memory feeTransfers = new uint256[](exchangesLength);\n        fungibleTransfers = FungibleTransfers({\n            totalProtocolFee: 0,\n            totalSellerTransfer: 0,\n            totalTakerFee: 0,\n            feeRecipientId: 0,\n            feeRecipients: feeRecipients,\n            makerId: 0,\n            makers: makers,\n            feeTransfers: feeTransfers,\n            makerTransfers: makerTransfers,\n            executions: executions\n        });\n    }\n\n    /**\n     * @notice Initialize the ExecutionBatch object for a single execution\n     * @param order Order to take a Listing from\n     * @param orderType Order type\n     * @param tokenId Token id\n     * @param amount ERC721/ERC1155 amount\n     * @param taker Order taker address\n     */\n    function _initializeSingleExecution(\n        Order memory order,\n        OrderType orderType,\n        uint256 tokenId,\n        uint256 amount,\n        address taker\n    ) internal pure returns (bytes memory executionBatch) {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), 1) // set the length of the transfers array\n        }\n\n        /* Insert the transfer into the batch. */\n        _insertNonfungibleTransfer(executionBatch, order, tokenId, amount);\n    }\n}", 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'BlurExchangeV2.takeAskSinglePool', 'start_line': 1221, 'end_line': 1229, 'offset_start': 44497, 'offset_end': 44770, 'content': 'function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAskSingle(inputs, oracleSignature);\n    }', 'contract_name': 'BlurExchangeV2', 'contract_code': "{\n    address public governor;\n\n    // required by the OZ UUPS module\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    constructor(address delegate, address pool, address proxy) Executor(delegate, pool, proxy) {\n        _disableInitializers();\n    }\n\n    function initialize() external initializer {\n        __UUPSUpgradeable_init();\n        __Ownable_init();\n        __Reentrancy_init();\n        verifyDomain();\n    }\n\n    modifier onlyGovernor() {\n        if (msg.sender != governor) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    /**\n     * @notice Governor only function to set the protocol fee rate and recipient\n     * @param recipient Protocol fee recipient\n     * @param rate Protocol fee rate\n     */\n    function setProtocolFee(address recipient, uint16 rate) external onlyGovernor {\n        if (rate > _MAX_PROTOCOL_FEE_RATE) {\n            revert ProtocolFeeTooHigh();\n        }\n        protocolFee = FeeRate(recipient, rate);\n        emit NewProtocolFee(recipient, rate);\n    }\n\n    /**\n     * @notice Admin only function to set the governor of the exchange\n     * @param _governor Address of governor to set\n     */\n    function setGovernor(address _governor) external onlyOwner {\n        governor = _governor;\n        emit NewGovernor(_governor);\n    }\n\n    /**\n     * @notice Admin only function to grant or revoke the approval of an oracle\n     * @param oracle Address to set approval of\n     * @param approved If the oracle should be approved or not\n     */\n    function setOracle(address oracle, bool approved) external onlyOwner {\n        if (approved) {\n            oracles[oracle] = 1;\n        } else {\n            oracles[oracle] = 0;\n        }\n        emit SetOracle(oracle, approved);\n    }\n\n    /**\n     * @notice Admin only function to set the block range\n     * @param _blockRange Block range that oracle signatures are valid for\n     */\n    function setBlockRange(uint256 _blockRange) external onlyOwner {\n        blockRange = _blockRange;\n        emit NewBlockRange(_blockRange);\n    }\n\n    /**\n     * @notice Cancel listings by recording their fulfillment\n     * @param cancels List of cancels to execute\n     */\n    function cancelTrades(Cancel[] memory cancels) external {\n        uint256 cancelsLength = cancels.length;\n        for (uint256 i; i < cancelsLength; ) {\n            Cancel memory cancel = cancels[i];\n            amountTaken[msg.sender][cancel.hash][cancel.index] += cancel.amount;\n            emit CancelTrade(msg.sender, cancel.hash, cancel.index, cancel.amount);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Cancels all orders by incrementing caller nonce\n     */\n    function incrementNonce() external {\n        emit NonceIncremented(msg.sender, ++nonces[msg.sender]);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of _takeAsk that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAsk(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAsk(\n            inputs.orders,\n            inputs.exchanges,\n            inputs.takerFee,\n            inputs.signatures,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBid that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBid\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBid(\n        TakeBid memory inputs,\n        bytes calldata oracleSignature\n    ) public verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBid(inputs.orders, inputs.exchanges, inputs.takerFee, inputs.signatures);\n    }\n\n    /**\n     * @notice Wrapper of _takeAskSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAskSingle(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAskSingle(\n            inputs.order,\n            inputs.exchange,\n            inputs.takerFee,\n            inputs.signature,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBidSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBidSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBidSingle(\n        TakeBidSingle memory inputs,\n        bytes calldata oracleSignature\n    ) external verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBidSingle(inputs.order, inputs.exchange, inputs.takerFee, inputs.signature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of takeAskSingle that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAskSingle(inputs, oracleSignature);\n    }\n\n    /**\n     * @notice Wrapper of takeAsk that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAsk(inputs, oracleSignature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Take a single ask\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     * @param tokenRecipient Address to receive the token transfer\n     */\n    function _takeAskSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.ASK, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.ASK,\n            listing.tokenId,\n            takerAmount,\n            tokenRecipient\n        );\n\n        /* Set the fulfillment of the order. */\n        unchecked {\n            amountTaken[order.trader][bytes32(order.salt)][listing.index] += takerAmount;\n        }\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* If there are insufficient funds to cover the price with the fees, revert. */\n        unchecked {\n            if (address(this).balance < totalPrice + takerFeeAmount) {\n                revert InsufficientFunds();\n            }\n        }\n\n        /* Execute ETH transfers. */\n        _transferETH(fees.protocolFee.recipient, protocolFeeAmount);\n        _transferETH(fees.takerFee.recipient, takerFeeAmount);\n        _transferETH(order.makerFee.recipient, makerFeeAmount);\n        unchecked {\n            _transferETH(order.trader, totalPrice - makerFeeAmount - protocolFeeAmount);\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take a single bid\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     */\n    function _takeBidSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.BID, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.BID,\n            exchange.taker.tokenId,\n            takerAmount,\n            msg.sender\n        );\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* Execute pool transfers and set the fulfillment of the order. */\n        address trader = order.trader;\n        _transferPool(trader, order.makerFee.recipient, makerFeeAmount);\n        _transferPool(trader, fees.takerFee.recipient, takerFeeAmount);\n        _transferPool(trader, fees.protocolFee.recipient, protocolFeeAmount);\n        unchecked {\n            _transferPool(trader, msg.sender, totalPrice - takerFeeAmount - protocolFeeAmount);\n\n            amountTaken[trader][bytes32(order.salt)][listing.index] += exchange.taker.amount;\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.BID);\n    }\n\n    /**\n     * @notice Take multiple asks; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     * @param tokenRecipient Address to receive the tokens purchased\n     */\n    function _takeAsk(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.ASK,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.ASK, tokenRecipient);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        uint256 remainingETH = address(this).balance;\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.ASK,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                bool inserted;\n                (remainingETH, inserted) = _insertExecutionAsk(\n                    executionBatch,\n                    fungibleTransfers,\n                    order,\n                    exchange,\n                    fees,\n                    remainingETH\n                );\n                if (inserted) {\n                    unchecked {\n                        pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                            .taker\n                            .amount;\n                    }\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take multiple bids; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     */\n    function _takeBid(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.BID,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.BID, msg.sender);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.BID,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                _insertExecutionBid(executionBatch, fungibleTransfers, order, exchange, fees);\n\n                /* Record the pending fulfillment. */\n                unchecked {\n                    pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                        .taker\n                        .amount;\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.BID);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Initialize the ExecutionBatch and FungibleTransfers objects for bulk execution\n     * @param exchangesLength Number of exchanges\n     * @param orderType Order type\n     * @param taker Order taker address\n     */\n    function _initializeBatch(\n        uint256 exchangesLength,\n        OrderType orderType,\n        address taker\n    )\n        internal\n        pure\n        returns (bytes memory executionBatch, FungibleTransfers memory fungibleTransfers)\n    {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size * exchangesLength + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), exchangesLength) // set the length of the transfers array\n        }\n\n        /* Initialize the fungible transfers object. */\n        AtomicExecution[] memory executions = new AtomicExecution[](exchangesLength);\n        address[] memory feeRecipients = new address[](exchangesLength);\n        address[] memory makers = new address[](exchangesLength);\n        uint256[] memory makerTransfers = new uint256[](exchangesLength);\n        uint256[] memory feeTransfers = new uint256[](exchangesLength);\n        fungibleTransfers = FungibleTransfers({\n            totalProtocolFee: 0,\n            totalSellerTransfer: 0,\n            totalTakerFee: 0,\n            feeRecipientId: 0,\n            feeRecipients: feeRecipients,\n            makerId: 0,\n            makers: makers,\n            feeTransfers: feeTransfers,\n            makerTransfers: makerTransfers,\n            executions: executions\n        });\n    }\n\n    /**\n     * @notice Initialize the ExecutionBatch object for a single execution\n     * @param order Order to take a Listing from\n     * @param orderType Order type\n     * @param tokenId Token id\n     * @param amount ERC721/ERC1155 amount\n     * @param taker Order taker address\n     */\n    function _initializeSingleExecution(\n        Order memory order,\n        OrderType orderType,\n        uint256 tokenId,\n        uint256 amount,\n        address taker\n    ) internal pure returns (bytes memory executionBatch) {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), 1) // set the length of the transfers array\n        }\n\n        /* Insert the transfer into the batch. */\n        _insertNonfungibleTransfer(executionBatch, order, tokenId, amount);\n    }\n}", 'modifiers': [], 'stateMutability': 'payable', 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'BlurExchangeV2.takeAskPool', 'start_line': 1237, 'end_line': 1245, 'offset_start': 45064, 'offset_end': 45319, 'content': 'function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAsk(inputs, oracleSignature);\n    }', 'contract_name': 'BlurExchangeV2', 'contract_code': "{\n    address public governor;\n\n    // required by the OZ UUPS module\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    constructor(address delegate, address pool, address proxy) Executor(delegate, pool, proxy) {\n        _disableInitializers();\n    }\n\n    function initialize() external initializer {\n        __UUPSUpgradeable_init();\n        __Ownable_init();\n        __Reentrancy_init();\n        verifyDomain();\n    }\n\n    modifier onlyGovernor() {\n        if (msg.sender != governor) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    /**\n     * @notice Governor only function to set the protocol fee rate and recipient\n     * @param recipient Protocol fee recipient\n     * @param rate Protocol fee rate\n     */\n    function setProtocolFee(address recipient, uint16 rate) external onlyGovernor {\n        if (rate > _MAX_PROTOCOL_FEE_RATE) {\n            revert ProtocolFeeTooHigh();\n        }\n        protocolFee = FeeRate(recipient, rate);\n        emit NewProtocolFee(recipient, rate);\n    }\n\n    /**\n     * @notice Admin only function to set the governor of the exchange\n     * @param _governor Address of governor to set\n     */\n    function setGovernor(address _governor) external onlyOwner {\n        governor = _governor;\n        emit NewGovernor(_governor);\n    }\n\n    /**\n     * @notice Admin only function to grant or revoke the approval of an oracle\n     * @param oracle Address to set approval of\n     * @param approved If the oracle should be approved or not\n     */\n    function setOracle(address oracle, bool approved) external onlyOwner {\n        if (approved) {\n            oracles[oracle] = 1;\n        } else {\n            oracles[oracle] = 0;\n        }\n        emit SetOracle(oracle, approved);\n    }\n\n    /**\n     * @notice Admin only function to set the block range\n     * @param _blockRange Block range that oracle signatures are valid for\n     */\n    function setBlockRange(uint256 _blockRange) external onlyOwner {\n        blockRange = _blockRange;\n        emit NewBlockRange(_blockRange);\n    }\n\n    /**\n     * @notice Cancel listings by recording their fulfillment\n     * @param cancels List of cancels to execute\n     */\n    function cancelTrades(Cancel[] memory cancels) external {\n        uint256 cancelsLength = cancels.length;\n        for (uint256 i; i < cancelsLength; ) {\n            Cancel memory cancel = cancels[i];\n            amountTaken[msg.sender][cancel.hash][cancel.index] += cancel.amount;\n            emit CancelTrade(msg.sender, cancel.hash, cancel.index, cancel.amount);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Cancels all orders by incrementing caller nonce\n     */\n    function incrementNonce() external {\n        emit NonceIncremented(msg.sender, ++nonces[msg.sender]);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of _takeAsk that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAsk(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAsk(\n            inputs.orders,\n            inputs.exchanges,\n            inputs.takerFee,\n            inputs.signatures,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBid that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBid\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBid(\n        TakeBid memory inputs,\n        bytes calldata oracleSignature\n    ) public verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBid(inputs.orders, inputs.exchanges, inputs.takerFee, inputs.signatures);\n    }\n\n    /**\n     * @notice Wrapper of _takeAskSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAskSingle(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAskSingle(\n            inputs.order,\n            inputs.exchange,\n            inputs.takerFee,\n            inputs.signature,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBidSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBidSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBidSingle(\n        TakeBidSingle memory inputs,\n        bytes calldata oracleSignature\n    ) external verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBidSingle(inputs.order, inputs.exchange, inputs.takerFee, inputs.signature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of takeAskSingle that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAskSingle(inputs, oracleSignature);\n    }\n\n    /**\n     * @notice Wrapper of takeAsk that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAsk(inputs, oracleSignature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Take a single ask\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     * @param tokenRecipient Address to receive the token transfer\n     */\n    function _takeAskSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.ASK, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.ASK,\n            listing.tokenId,\n            takerAmount,\n            tokenRecipient\n        );\n\n        /* Set the fulfillment of the order. */\n        unchecked {\n            amountTaken[order.trader][bytes32(order.salt)][listing.index] += takerAmount;\n        }\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* If there are insufficient funds to cover the price with the fees, revert. */\n        unchecked {\n            if (address(this).balance < totalPrice + takerFeeAmount) {\n                revert InsufficientFunds();\n            }\n        }\n\n        /* Execute ETH transfers. */\n        _transferETH(fees.protocolFee.recipient, protocolFeeAmount);\n        _transferETH(fees.takerFee.recipient, takerFeeAmount);\n        _transferETH(order.makerFee.recipient, makerFeeAmount);\n        unchecked {\n            _transferETH(order.trader, totalPrice - makerFeeAmount - protocolFeeAmount);\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take a single bid\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     */\n    function _takeBidSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.BID, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.BID,\n            exchange.taker.tokenId,\n            takerAmount,\n            msg.sender\n        );\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* Execute pool transfers and set the fulfillment of the order. */\n        address trader = order.trader;\n        _transferPool(trader, order.makerFee.recipient, makerFeeAmount);\n        _transferPool(trader, fees.takerFee.recipient, takerFeeAmount);\n        _transferPool(trader, fees.protocolFee.recipient, protocolFeeAmount);\n        unchecked {\n            _transferPool(trader, msg.sender, totalPrice - takerFeeAmount - protocolFeeAmount);\n\n            amountTaken[trader][bytes32(order.salt)][listing.index] += exchange.taker.amount;\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.BID);\n    }\n\n    /**\n     * @notice Take multiple asks; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     * @param tokenRecipient Address to receive the tokens purchased\n     */\n    function _takeAsk(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.ASK,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.ASK, tokenRecipient);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        uint256 remainingETH = address(this).balance;\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.ASK,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                bool inserted;\n                (remainingETH, inserted) = _insertExecutionAsk(\n                    executionBatch,\n                    fungibleTransfers,\n                    order,\n                    exchange,\n                    fees,\n                    remainingETH\n                );\n                if (inserted) {\n                    unchecked {\n                        pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                            .taker\n                            .amount;\n                    }\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take multiple bids; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     */\n    function _takeBid(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.BID,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.BID, msg.sender);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.BID,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                _insertExecutionBid(executionBatch, fungibleTransfers, order, exchange, fees);\n\n                /* Record the pending fulfillment. */\n                unchecked {\n                    pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                        .taker\n                        .amount;\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.BID);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Initialize the ExecutionBatch and FungibleTransfers objects for bulk execution\n     * @param exchangesLength Number of exchanges\n     * @param orderType Order type\n     * @param taker Order taker address\n     */\n    function _initializeBatch(\n        uint256 exchangesLength,\n        OrderType orderType,\n        address taker\n    )\n        internal\n        pure\n        returns (bytes memory executionBatch, FungibleTransfers memory fungibleTransfers)\n    {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size * exchangesLength + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), exchangesLength) // set the length of the transfers array\n        }\n\n        /* Initialize the fungible transfers object. */\n        AtomicExecution[] memory executions = new AtomicExecution[](exchangesLength);\n        address[] memory feeRecipients = new address[](exchangesLength);\n        address[] memory makers = new address[](exchangesLength);\n        uint256[] memory makerTransfers = new uint256[](exchangesLength);\n        uint256[] memory feeTransfers = new uint256[](exchangesLength);\n        fungibleTransfers = FungibleTransfers({\n            totalProtocolFee: 0,\n            totalSellerTransfer: 0,\n            totalTakerFee: 0,\n            feeRecipientId: 0,\n            feeRecipients: feeRecipients,\n            makerId: 0,\n            makers: makers,\n            feeTransfers: feeTransfers,\n            makerTransfers: makerTransfers,\n            executions: executions\n        });\n    }\n\n    /**\n     * @notice Initialize the ExecutionBatch object for a single execution\n     * @param order Order to take a Listing from\n     * @param orderType Order type\n     * @param tokenId Token id\n     * @param amount ERC721/ERC1155 amount\n     * @param taker Order taker address\n     */\n    function _initializeSingleExecution(\n        Order memory order,\n        OrderType orderType,\n        uint256 tokenId,\n        uint256 amount,\n        address taker\n    ) internal pure returns (bytes memory executionBatch) {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), 1) // set the length of the transfers array\n        }\n\n        /* Insert the transfer into the batch. */\n        _insertNonfungibleTransfer(executionBatch, order, tokenId, amount);\n    }\n}", 'modifiers': [], 'stateMutability': 'payable', 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'BlurExchangeV2._takeAskSingle', 'start_line': 1259, 'end_line': 1323, 'offset_start': 45866, 'offset_end': 48176, 'content': 'function _takeAskSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.ASK, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.ASK,\n            listing.tokenId,\n            takerAmount,\n            tokenRecipient\n        );\n\n        /* Set the fulfillment of the order. */\n        unchecked {\n            amountTaken[order.trader][bytes32(order.salt)][listing.index] += takerAmount;\n        }\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* If there are insufficient funds to cover the price with the fees, revert. */\n        unchecked {\n            if (address(this).balance < totalPrice + takerFeeAmount) {\n                revert InsufficientFunds();\n            }\n        }\n\n        /* Execute ETH transfers. */\n        _transferETH(fees.protocolFee.recipient, protocolFeeAmount);\n        _transferETH(fees.takerFee.recipient, takerFeeAmount);\n        _transferETH(order.makerFee.recipient, makerFeeAmount);\n        unchecked {\n            _transferETH(order.trader, totalPrice - makerFeeAmount - protocolFeeAmount);\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }', 'contract_name': 'BlurExchangeV2', 'contract_code': "{\n    address public governor;\n\n    // required by the OZ UUPS module\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    constructor(address delegate, address pool, address proxy) Executor(delegate, pool, proxy) {\n        _disableInitializers();\n    }\n\n    function initialize() external initializer {\n        __UUPSUpgradeable_init();\n        __Ownable_init();\n        __Reentrancy_init();\n        verifyDomain();\n    }\n\n    modifier onlyGovernor() {\n        if (msg.sender != governor) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    /**\n     * @notice Governor only function to set the protocol fee rate and recipient\n     * @param recipient Protocol fee recipient\n     * @param rate Protocol fee rate\n     */\n    function setProtocolFee(address recipient, uint16 rate) external onlyGovernor {\n        if (rate > _MAX_PROTOCOL_FEE_RATE) {\n            revert ProtocolFeeTooHigh();\n        }\n        protocolFee = FeeRate(recipient, rate);\n        emit NewProtocolFee(recipient, rate);\n    }\n\n    /**\n     * @notice Admin only function to set the governor of the exchange\n     * @param _governor Address of governor to set\n     */\n    function setGovernor(address _governor) external onlyOwner {\n        governor = _governor;\n        emit NewGovernor(_governor);\n    }\n\n    /**\n     * @notice Admin only function to grant or revoke the approval of an oracle\n     * @param oracle Address to set approval of\n     * @param approved If the oracle should be approved or not\n     */\n    function setOracle(address oracle, bool approved) external onlyOwner {\n        if (approved) {\n            oracles[oracle] = 1;\n        } else {\n            oracles[oracle] = 0;\n        }\n        emit SetOracle(oracle, approved);\n    }\n\n    /**\n     * @notice Admin only function to set the block range\n     * @param _blockRange Block range that oracle signatures are valid for\n     */\n    function setBlockRange(uint256 _blockRange) external onlyOwner {\n        blockRange = _blockRange;\n        emit NewBlockRange(_blockRange);\n    }\n\n    /**\n     * @notice Cancel listings by recording their fulfillment\n     * @param cancels List of cancels to execute\n     */\n    function cancelTrades(Cancel[] memory cancels) external {\n        uint256 cancelsLength = cancels.length;\n        for (uint256 i; i < cancelsLength; ) {\n            Cancel memory cancel = cancels[i];\n            amountTaken[msg.sender][cancel.hash][cancel.index] += cancel.amount;\n            emit CancelTrade(msg.sender, cancel.hash, cancel.index, cancel.amount);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Cancels all orders by incrementing caller nonce\n     */\n    function incrementNonce() external {\n        emit NonceIncremented(msg.sender, ++nonces[msg.sender]);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of _takeAsk that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAsk(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAsk(\n            inputs.orders,\n            inputs.exchanges,\n            inputs.takerFee,\n            inputs.signatures,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBid that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBid\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBid(\n        TakeBid memory inputs,\n        bytes calldata oracleSignature\n    ) public verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBid(inputs.orders, inputs.exchanges, inputs.takerFee, inputs.signatures);\n    }\n\n    /**\n     * @notice Wrapper of _takeAskSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAskSingle(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAskSingle(\n            inputs.order,\n            inputs.exchange,\n            inputs.takerFee,\n            inputs.signature,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBidSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBidSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBidSingle(\n        TakeBidSingle memory inputs,\n        bytes calldata oracleSignature\n    ) external verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBidSingle(inputs.order, inputs.exchange, inputs.takerFee, inputs.signature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of takeAskSingle that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAskSingle(inputs, oracleSignature);\n    }\n\n    /**\n     * @notice Wrapper of takeAsk that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAsk(inputs, oracleSignature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Take a single ask\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     * @param tokenRecipient Address to receive the token transfer\n     */\n    function _takeAskSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.ASK, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.ASK,\n            listing.tokenId,\n            takerAmount,\n            tokenRecipient\n        );\n\n        /* Set the fulfillment of the order. */\n        unchecked {\n            amountTaken[order.trader][bytes32(order.salt)][listing.index] += takerAmount;\n        }\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* If there are insufficient funds to cover the price with the fees, revert. */\n        unchecked {\n            if (address(this).balance < totalPrice + takerFeeAmount) {\n                revert InsufficientFunds();\n            }\n        }\n\n        /* Execute ETH transfers. */\n        _transferETH(fees.protocolFee.recipient, protocolFeeAmount);\n        _transferETH(fees.takerFee.recipient, takerFeeAmount);\n        _transferETH(order.makerFee.recipient, makerFeeAmount);\n        unchecked {\n            _transferETH(order.trader, totalPrice - makerFeeAmount - protocolFeeAmount);\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take a single bid\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     */\n    function _takeBidSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.BID, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.BID,\n            exchange.taker.tokenId,\n            takerAmount,\n            msg.sender\n        );\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* Execute pool transfers and set the fulfillment of the order. */\n        address trader = order.trader;\n        _transferPool(trader, order.makerFee.recipient, makerFeeAmount);\n        _transferPool(trader, fees.takerFee.recipient, takerFeeAmount);\n        _transferPool(trader, fees.protocolFee.recipient, protocolFeeAmount);\n        unchecked {\n            _transferPool(trader, msg.sender, totalPrice - takerFeeAmount - protocolFeeAmount);\n\n            amountTaken[trader][bytes32(order.salt)][listing.index] += exchange.taker.amount;\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.BID);\n    }\n\n    /**\n     * @notice Take multiple asks; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     * @param tokenRecipient Address to receive the tokens purchased\n     */\n    function _takeAsk(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.ASK,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.ASK, tokenRecipient);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        uint256 remainingETH = address(this).balance;\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.ASK,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                bool inserted;\n                (remainingETH, inserted) = _insertExecutionAsk(\n                    executionBatch,\n                    fungibleTransfers,\n                    order,\n                    exchange,\n                    fees,\n                    remainingETH\n                );\n                if (inserted) {\n                    unchecked {\n                        pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                            .taker\n                            .amount;\n                    }\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take multiple bids; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     */\n    function _takeBid(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.BID,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.BID, msg.sender);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.BID,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                _insertExecutionBid(executionBatch, fungibleTransfers, order, exchange, fees);\n\n                /* Record the pending fulfillment. */\n                unchecked {\n                    pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                        .taker\n                        .amount;\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.BID);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Initialize the ExecutionBatch and FungibleTransfers objects for bulk execution\n     * @param exchangesLength Number of exchanges\n     * @param orderType Order type\n     * @param taker Order taker address\n     */\n    function _initializeBatch(\n        uint256 exchangesLength,\n        OrderType orderType,\n        address taker\n    )\n        internal\n        pure\n        returns (bytes memory executionBatch, FungibleTransfers memory fungibleTransfers)\n    {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size * exchangesLength + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), exchangesLength) // set the length of the transfers array\n        }\n\n        /* Initialize the fungible transfers object. */\n        AtomicExecution[] memory executions = new AtomicExecution[](exchangesLength);\n        address[] memory feeRecipients = new address[](exchangesLength);\n        address[] memory makers = new address[](exchangesLength);\n        uint256[] memory makerTransfers = new uint256[](exchangesLength);\n        uint256[] memory feeTransfers = new uint256[](exchangesLength);\n        fungibleTransfers = FungibleTransfers({\n            totalProtocolFee: 0,\n            totalSellerTransfer: 0,\n            totalTakerFee: 0,\n            feeRecipientId: 0,\n            feeRecipients: feeRecipients,\n            makerId: 0,\n            makers: makers,\n            feeTransfers: feeTransfers,\n            makerTransfers: makerTransfers,\n            executions: executions\n        });\n    }\n\n    /**\n     * @notice Initialize the ExecutionBatch object for a single execution\n     * @param order Order to take a Listing from\n     * @param orderType Order type\n     * @param tokenId Token id\n     * @param amount ERC721/ERC1155 amount\n     * @param taker Order taker address\n     */\n    function _initializeSingleExecution(\n        Order memory order,\n        OrderType orderType,\n        uint256 tokenId,\n        uint256 amount,\n        address taker\n    ) internal pure returns (bytes memory executionBatch) {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), 1) // set the length of the transfers array\n        }\n\n        /* Insert the transfer into the batch. */\n        _insertNonfungibleTransfer(executionBatch, order, tokenId, amount);\n    }\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'BlurExchangeV2._takeBidSingle', 'start_line': 1332, 'end_line': 1383, 'offset_start': 48471, 'offset_end': 50456, 'content': 'function _takeBidSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.BID, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.BID,\n            exchange.taker.tokenId,\n            takerAmount,\n            msg.sender\n        );\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* Execute pool transfers and set the fulfillment of the order. */\n        address trader = order.trader;\n        _transferPool(trader, order.makerFee.recipient, makerFeeAmount);\n        _transferPool(trader, fees.takerFee.recipient, takerFeeAmount);\n        _transferPool(trader, fees.protocolFee.recipient, protocolFeeAmount);\n        unchecked {\n            _transferPool(trader, msg.sender, totalPrice - takerFeeAmount - protocolFeeAmount);\n\n            amountTaken[trader][bytes32(order.salt)][listing.index] += exchange.taker.amount;\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.BID);\n    }', 'contract_name': 'BlurExchangeV2', 'contract_code': "{\n    address public governor;\n\n    // required by the OZ UUPS module\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    constructor(address delegate, address pool, address proxy) Executor(delegate, pool, proxy) {\n        _disableInitializers();\n    }\n\n    function initialize() external initializer {\n        __UUPSUpgradeable_init();\n        __Ownable_init();\n        __Reentrancy_init();\n        verifyDomain();\n    }\n\n    modifier onlyGovernor() {\n        if (msg.sender != governor) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    /**\n     * @notice Governor only function to set the protocol fee rate and recipient\n     * @param recipient Protocol fee recipient\n     * @param rate Protocol fee rate\n     */\n    function setProtocolFee(address recipient, uint16 rate) external onlyGovernor {\n        if (rate > _MAX_PROTOCOL_FEE_RATE) {\n            revert ProtocolFeeTooHigh();\n        }\n        protocolFee = FeeRate(recipient, rate);\n        emit NewProtocolFee(recipient, rate);\n    }\n\n    /**\n     * @notice Admin only function to set the governor of the exchange\n     * @param _governor Address of governor to set\n     */\n    function setGovernor(address _governor) external onlyOwner {\n        governor = _governor;\n        emit NewGovernor(_governor);\n    }\n\n    /**\n     * @notice Admin only function to grant or revoke the approval of an oracle\n     * @param oracle Address to set approval of\n     * @param approved If the oracle should be approved or not\n     */\n    function setOracle(address oracle, bool approved) external onlyOwner {\n        if (approved) {\n            oracles[oracle] = 1;\n        } else {\n            oracles[oracle] = 0;\n        }\n        emit SetOracle(oracle, approved);\n    }\n\n    /**\n     * @notice Admin only function to set the block range\n     * @param _blockRange Block range that oracle signatures are valid for\n     */\n    function setBlockRange(uint256 _blockRange) external onlyOwner {\n        blockRange = _blockRange;\n        emit NewBlockRange(_blockRange);\n    }\n\n    /**\n     * @notice Cancel listings by recording their fulfillment\n     * @param cancels List of cancels to execute\n     */\n    function cancelTrades(Cancel[] memory cancels) external {\n        uint256 cancelsLength = cancels.length;\n        for (uint256 i; i < cancelsLength; ) {\n            Cancel memory cancel = cancels[i];\n            amountTaken[msg.sender][cancel.hash][cancel.index] += cancel.amount;\n            emit CancelTrade(msg.sender, cancel.hash, cancel.index, cancel.amount);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Cancels all orders by incrementing caller nonce\n     */\n    function incrementNonce() external {\n        emit NonceIncremented(msg.sender, ++nonces[msg.sender]);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of _takeAsk that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAsk(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAsk(\n            inputs.orders,\n            inputs.exchanges,\n            inputs.takerFee,\n            inputs.signatures,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBid that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBid\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBid(\n        TakeBid memory inputs,\n        bytes calldata oracleSignature\n    ) public verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBid(inputs.orders, inputs.exchanges, inputs.takerFee, inputs.signatures);\n    }\n\n    /**\n     * @notice Wrapper of _takeAskSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAskSingle(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAskSingle(\n            inputs.order,\n            inputs.exchange,\n            inputs.takerFee,\n            inputs.signature,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBidSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBidSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBidSingle(\n        TakeBidSingle memory inputs,\n        bytes calldata oracleSignature\n    ) external verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBidSingle(inputs.order, inputs.exchange, inputs.takerFee, inputs.signature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of takeAskSingle that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAskSingle(inputs, oracleSignature);\n    }\n\n    /**\n     * @notice Wrapper of takeAsk that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAsk(inputs, oracleSignature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Take a single ask\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     * @param tokenRecipient Address to receive the token transfer\n     */\n    function _takeAskSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.ASK, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.ASK,\n            listing.tokenId,\n            takerAmount,\n            tokenRecipient\n        );\n\n        /* Set the fulfillment of the order. */\n        unchecked {\n            amountTaken[order.trader][bytes32(order.salt)][listing.index] += takerAmount;\n        }\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* If there are insufficient funds to cover the price with the fees, revert. */\n        unchecked {\n            if (address(this).balance < totalPrice + takerFeeAmount) {\n                revert InsufficientFunds();\n            }\n        }\n\n        /* Execute ETH transfers. */\n        _transferETH(fees.protocolFee.recipient, protocolFeeAmount);\n        _transferETH(fees.takerFee.recipient, takerFeeAmount);\n        _transferETH(order.makerFee.recipient, makerFeeAmount);\n        unchecked {\n            _transferETH(order.trader, totalPrice - makerFeeAmount - protocolFeeAmount);\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take a single bid\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     */\n    function _takeBidSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.BID, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.BID,\n            exchange.taker.tokenId,\n            takerAmount,\n            msg.sender\n        );\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* Execute pool transfers and set the fulfillment of the order. */\n        address trader = order.trader;\n        _transferPool(trader, order.makerFee.recipient, makerFeeAmount);\n        _transferPool(trader, fees.takerFee.recipient, takerFeeAmount);\n        _transferPool(trader, fees.protocolFee.recipient, protocolFeeAmount);\n        unchecked {\n            _transferPool(trader, msg.sender, totalPrice - takerFeeAmount - protocolFeeAmount);\n\n            amountTaken[trader][bytes32(order.salt)][listing.index] += exchange.taker.amount;\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.BID);\n    }\n\n    /**\n     * @notice Take multiple asks; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     * @param tokenRecipient Address to receive the tokens purchased\n     */\n    function _takeAsk(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.ASK,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.ASK, tokenRecipient);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        uint256 remainingETH = address(this).balance;\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.ASK,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                bool inserted;\n                (remainingETH, inserted) = _insertExecutionAsk(\n                    executionBatch,\n                    fungibleTransfers,\n                    order,\n                    exchange,\n                    fees,\n                    remainingETH\n                );\n                if (inserted) {\n                    unchecked {\n                        pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                            .taker\n                            .amount;\n                    }\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take multiple bids; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     */\n    function _takeBid(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.BID,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.BID, msg.sender);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.BID,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                _insertExecutionBid(executionBatch, fungibleTransfers, order, exchange, fees);\n\n                /* Record the pending fulfillment. */\n                unchecked {\n                    pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                        .taker\n                        .amount;\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.BID);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Initialize the ExecutionBatch and FungibleTransfers objects for bulk execution\n     * @param exchangesLength Number of exchanges\n     * @param orderType Order type\n     * @param taker Order taker address\n     */\n    function _initializeBatch(\n        uint256 exchangesLength,\n        OrderType orderType,\n        address taker\n    )\n        internal\n        pure\n        returns (bytes memory executionBatch, FungibleTransfers memory fungibleTransfers)\n    {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size * exchangesLength + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), exchangesLength) // set the length of the transfers array\n        }\n\n        /* Initialize the fungible transfers object. */\n        AtomicExecution[] memory executions = new AtomicExecution[](exchangesLength);\n        address[] memory feeRecipients = new address[](exchangesLength);\n        address[] memory makers = new address[](exchangesLength);\n        uint256[] memory makerTransfers = new uint256[](exchangesLength);\n        uint256[] memory feeTransfers = new uint256[](exchangesLength);\n        fungibleTransfers = FungibleTransfers({\n            totalProtocolFee: 0,\n            totalSellerTransfer: 0,\n            totalTakerFee: 0,\n            feeRecipientId: 0,\n            feeRecipients: feeRecipients,\n            makerId: 0,\n            makers: makers,\n            feeTransfers: feeTransfers,\n            makerTransfers: makerTransfers,\n            executions: executions\n        });\n    }\n\n    /**\n     * @notice Initialize the ExecutionBatch object for a single execution\n     * @param order Order to take a Listing from\n     * @param orderType Order type\n     * @param tokenId Token id\n     * @param amount ERC721/ERC1155 amount\n     * @param taker Order taker address\n     */\n    function _initializeSingleExecution(\n        Order memory order,\n        OrderType orderType,\n        uint256 tokenId,\n        uint256 amount,\n        address taker\n    ) internal pure returns (bytes memory executionBatch) {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), 1) // set the length of the transfers array\n        }\n\n        /* Insert the transfer into the batch. */\n        _insertNonfungibleTransfer(executionBatch, order, tokenId, amount);\n    }\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'BlurExchangeV2._takeAsk', 'start_line': 1393, 'end_line': 1468, 'offset_start': 50905, 'offset_end': 53351, 'content': 'function _takeAsk(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.ASK,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.ASK, tokenRecipient);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        uint256 remainingETH = address(this).balance;\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.ASK,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                bool inserted;\n                (remainingETH, inserted) = _insertExecutionAsk(\n                    executionBatch,\n                    fungibleTransfers,\n                    order,\n                    exchange,\n                    fees,\n                    remainingETH\n                );\n                if (inserted) {\n                    unchecked {\n                        pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                            .taker\n                            .amount;\n                    }\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }', 'contract_name': 'BlurExchangeV2', 'contract_code': "{\n    address public governor;\n\n    // required by the OZ UUPS module\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    constructor(address delegate, address pool, address proxy) Executor(delegate, pool, proxy) {\n        _disableInitializers();\n    }\n\n    function initialize() external initializer {\n        __UUPSUpgradeable_init();\n        __Ownable_init();\n        __Reentrancy_init();\n        verifyDomain();\n    }\n\n    modifier onlyGovernor() {\n        if (msg.sender != governor) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    /**\n     * @notice Governor only function to set the protocol fee rate and recipient\n     * @param recipient Protocol fee recipient\n     * @param rate Protocol fee rate\n     */\n    function setProtocolFee(address recipient, uint16 rate) external onlyGovernor {\n        if (rate > _MAX_PROTOCOL_FEE_RATE) {\n            revert ProtocolFeeTooHigh();\n        }\n        protocolFee = FeeRate(recipient, rate);\n        emit NewProtocolFee(recipient, rate);\n    }\n\n    /**\n     * @notice Admin only function to set the governor of the exchange\n     * @param _governor Address of governor to set\n     */\n    function setGovernor(address _governor) external onlyOwner {\n        governor = _governor;\n        emit NewGovernor(_governor);\n    }\n\n    /**\n     * @notice Admin only function to grant or revoke the approval of an oracle\n     * @param oracle Address to set approval of\n     * @param approved If the oracle should be approved or not\n     */\n    function setOracle(address oracle, bool approved) external onlyOwner {\n        if (approved) {\n            oracles[oracle] = 1;\n        } else {\n            oracles[oracle] = 0;\n        }\n        emit SetOracle(oracle, approved);\n    }\n\n    /**\n     * @notice Admin only function to set the block range\n     * @param _blockRange Block range that oracle signatures are valid for\n     */\n    function setBlockRange(uint256 _blockRange) external onlyOwner {\n        blockRange = _blockRange;\n        emit NewBlockRange(_blockRange);\n    }\n\n    /**\n     * @notice Cancel listings by recording their fulfillment\n     * @param cancels List of cancels to execute\n     */\n    function cancelTrades(Cancel[] memory cancels) external {\n        uint256 cancelsLength = cancels.length;\n        for (uint256 i; i < cancelsLength; ) {\n            Cancel memory cancel = cancels[i];\n            amountTaken[msg.sender][cancel.hash][cancel.index] += cancel.amount;\n            emit CancelTrade(msg.sender, cancel.hash, cancel.index, cancel.amount);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Cancels all orders by incrementing caller nonce\n     */\n    function incrementNonce() external {\n        emit NonceIncremented(msg.sender, ++nonces[msg.sender]);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of _takeAsk that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAsk(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAsk(\n            inputs.orders,\n            inputs.exchanges,\n            inputs.takerFee,\n            inputs.signatures,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBid that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBid\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBid(\n        TakeBid memory inputs,\n        bytes calldata oracleSignature\n    ) public verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBid(inputs.orders, inputs.exchanges, inputs.takerFee, inputs.signatures);\n    }\n\n    /**\n     * @notice Wrapper of _takeAskSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAskSingle(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAskSingle(\n            inputs.order,\n            inputs.exchange,\n            inputs.takerFee,\n            inputs.signature,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBidSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBidSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBidSingle(\n        TakeBidSingle memory inputs,\n        bytes calldata oracleSignature\n    ) external verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBidSingle(inputs.order, inputs.exchange, inputs.takerFee, inputs.signature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of takeAskSingle that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAskSingle(inputs, oracleSignature);\n    }\n\n    /**\n     * @notice Wrapper of takeAsk that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAsk(inputs, oracleSignature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Take a single ask\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     * @param tokenRecipient Address to receive the token transfer\n     */\n    function _takeAskSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.ASK, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.ASK,\n            listing.tokenId,\n            takerAmount,\n            tokenRecipient\n        );\n\n        /* Set the fulfillment of the order. */\n        unchecked {\n            amountTaken[order.trader][bytes32(order.salt)][listing.index] += takerAmount;\n        }\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* If there are insufficient funds to cover the price with the fees, revert. */\n        unchecked {\n            if (address(this).balance < totalPrice + takerFeeAmount) {\n                revert InsufficientFunds();\n            }\n        }\n\n        /* Execute ETH transfers. */\n        _transferETH(fees.protocolFee.recipient, protocolFeeAmount);\n        _transferETH(fees.takerFee.recipient, takerFeeAmount);\n        _transferETH(order.makerFee.recipient, makerFeeAmount);\n        unchecked {\n            _transferETH(order.trader, totalPrice - makerFeeAmount - protocolFeeAmount);\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take a single bid\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     */\n    function _takeBidSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.BID, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.BID,\n            exchange.taker.tokenId,\n            takerAmount,\n            msg.sender\n        );\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* Execute pool transfers and set the fulfillment of the order. */\n        address trader = order.trader;\n        _transferPool(trader, order.makerFee.recipient, makerFeeAmount);\n        _transferPool(trader, fees.takerFee.recipient, takerFeeAmount);\n        _transferPool(trader, fees.protocolFee.recipient, protocolFeeAmount);\n        unchecked {\n            _transferPool(trader, msg.sender, totalPrice - takerFeeAmount - protocolFeeAmount);\n\n            amountTaken[trader][bytes32(order.salt)][listing.index] += exchange.taker.amount;\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.BID);\n    }\n\n    /**\n     * @notice Take multiple asks; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     * @param tokenRecipient Address to receive the tokens purchased\n     */\n    function _takeAsk(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.ASK,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.ASK, tokenRecipient);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        uint256 remainingETH = address(this).balance;\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.ASK,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                bool inserted;\n                (remainingETH, inserted) = _insertExecutionAsk(\n                    executionBatch,\n                    fungibleTransfers,\n                    order,\n                    exchange,\n                    fees,\n                    remainingETH\n                );\n                if (inserted) {\n                    unchecked {\n                        pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                            .taker\n                            .amount;\n                    }\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take multiple bids; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     */\n    function _takeBid(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.BID,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.BID, msg.sender);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.BID,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                _insertExecutionBid(executionBatch, fungibleTransfers, order, exchange, fees);\n\n                /* Record the pending fulfillment. */\n                unchecked {\n                    pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                        .taker\n                        .amount;\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.BID);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Initialize the ExecutionBatch and FungibleTransfers objects for bulk execution\n     * @param exchangesLength Number of exchanges\n     * @param orderType Order type\n     * @param taker Order taker address\n     */\n    function _initializeBatch(\n        uint256 exchangesLength,\n        OrderType orderType,\n        address taker\n    )\n        internal\n        pure\n        returns (bytes memory executionBatch, FungibleTransfers memory fungibleTransfers)\n    {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size * exchangesLength + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), exchangesLength) // set the length of the transfers array\n        }\n\n        /* Initialize the fungible transfers object. */\n        AtomicExecution[] memory executions = new AtomicExecution[](exchangesLength);\n        address[] memory feeRecipients = new address[](exchangesLength);\n        address[] memory makers = new address[](exchangesLength);\n        uint256[] memory makerTransfers = new uint256[](exchangesLength);\n        uint256[] memory feeTransfers = new uint256[](exchangesLength);\n        fungibleTransfers = FungibleTransfers({\n            totalProtocolFee: 0,\n            totalSellerTransfer: 0,\n            totalTakerFee: 0,\n            feeRecipientId: 0,\n            feeRecipients: feeRecipients,\n            makerId: 0,\n            makers: makers,\n            feeTransfers: feeTransfers,\n            makerTransfers: makerTransfers,\n            executions: executions\n        });\n    }\n\n    /**\n     * @notice Initialize the ExecutionBatch object for a single execution\n     * @param order Order to take a Listing from\n     * @param orderType Order type\n     * @param tokenId Token id\n     * @param amount ERC721/ERC1155 amount\n     * @param taker Order taker address\n     */\n    function _initializeSingleExecution(\n        Order memory order,\n        OrderType orderType,\n        uint256 tokenId,\n        uint256 amount,\n        address taker\n    ) internal pure returns (bytes memory executionBatch) {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), 1) // set the length of the transfers array\n        }\n\n        /* Insert the transfer into the batch. */\n        _insertNonfungibleTransfer(executionBatch, order, tokenId, amount);\n    }\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'BlurExchangeV2._takeBid', 'start_line': 1477, 'end_line': 1539, 'offset_start': 53731, 'offset_end': 55777, 'content': 'function _takeBid(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.BID,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.BID, msg.sender);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.BID,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                _insertExecutionBid(executionBatch, fungibleTransfers, order, exchange, fees);\n\n                /* Record the pending fulfillment. */\n                unchecked {\n                    pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                        .taker\n                        .amount;\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.BID);\n    }', 'contract_name': 'BlurExchangeV2', 'contract_code': "{\n    address public governor;\n\n    // required by the OZ UUPS module\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    constructor(address delegate, address pool, address proxy) Executor(delegate, pool, proxy) {\n        _disableInitializers();\n    }\n\n    function initialize() external initializer {\n        __UUPSUpgradeable_init();\n        __Ownable_init();\n        __Reentrancy_init();\n        verifyDomain();\n    }\n\n    modifier onlyGovernor() {\n        if (msg.sender != governor) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    /**\n     * @notice Governor only function to set the protocol fee rate and recipient\n     * @param recipient Protocol fee recipient\n     * @param rate Protocol fee rate\n     */\n    function setProtocolFee(address recipient, uint16 rate) external onlyGovernor {\n        if (rate > _MAX_PROTOCOL_FEE_RATE) {\n            revert ProtocolFeeTooHigh();\n        }\n        protocolFee = FeeRate(recipient, rate);\n        emit NewProtocolFee(recipient, rate);\n    }\n\n    /**\n     * @notice Admin only function to set the governor of the exchange\n     * @param _governor Address of governor to set\n     */\n    function setGovernor(address _governor) external onlyOwner {\n        governor = _governor;\n        emit NewGovernor(_governor);\n    }\n\n    /**\n     * @notice Admin only function to grant or revoke the approval of an oracle\n     * @param oracle Address to set approval of\n     * @param approved If the oracle should be approved or not\n     */\n    function setOracle(address oracle, bool approved) external onlyOwner {\n        if (approved) {\n            oracles[oracle] = 1;\n        } else {\n            oracles[oracle] = 0;\n        }\n        emit SetOracle(oracle, approved);\n    }\n\n    /**\n     * @notice Admin only function to set the block range\n     * @param _blockRange Block range that oracle signatures are valid for\n     */\n    function setBlockRange(uint256 _blockRange) external onlyOwner {\n        blockRange = _blockRange;\n        emit NewBlockRange(_blockRange);\n    }\n\n    /**\n     * @notice Cancel listings by recording their fulfillment\n     * @param cancels List of cancels to execute\n     */\n    function cancelTrades(Cancel[] memory cancels) external {\n        uint256 cancelsLength = cancels.length;\n        for (uint256 i; i < cancelsLength; ) {\n            Cancel memory cancel = cancels[i];\n            amountTaken[msg.sender][cancel.hash][cancel.index] += cancel.amount;\n            emit CancelTrade(msg.sender, cancel.hash, cancel.index, cancel.amount);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Cancels all orders by incrementing caller nonce\n     */\n    function incrementNonce() external {\n        emit NonceIncremented(msg.sender, ++nonces[msg.sender]);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of _takeAsk that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAsk(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAsk(\n            inputs.orders,\n            inputs.exchanges,\n            inputs.takerFee,\n            inputs.signatures,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBid that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBid\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBid(\n        TakeBid memory inputs,\n        bytes calldata oracleSignature\n    ) public verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBid(inputs.orders, inputs.exchanges, inputs.takerFee, inputs.signatures);\n    }\n\n    /**\n     * @notice Wrapper of _takeAskSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAskSingle(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAskSingle(\n            inputs.order,\n            inputs.exchange,\n            inputs.takerFee,\n            inputs.signature,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBidSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBidSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBidSingle(\n        TakeBidSingle memory inputs,\n        bytes calldata oracleSignature\n    ) external verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBidSingle(inputs.order, inputs.exchange, inputs.takerFee, inputs.signature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of takeAskSingle that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAskSingle(inputs, oracleSignature);\n    }\n\n    /**\n     * @notice Wrapper of takeAsk that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAsk(inputs, oracleSignature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Take a single ask\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     * @param tokenRecipient Address to receive the token transfer\n     */\n    function _takeAskSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.ASK, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.ASK,\n            listing.tokenId,\n            takerAmount,\n            tokenRecipient\n        );\n\n        /* Set the fulfillment of the order. */\n        unchecked {\n            amountTaken[order.trader][bytes32(order.salt)][listing.index] += takerAmount;\n        }\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* If there are insufficient funds to cover the price with the fees, revert. */\n        unchecked {\n            if (address(this).balance < totalPrice + takerFeeAmount) {\n                revert InsufficientFunds();\n            }\n        }\n\n        /* Execute ETH transfers. */\n        _transferETH(fees.protocolFee.recipient, protocolFeeAmount);\n        _transferETH(fees.takerFee.recipient, takerFeeAmount);\n        _transferETH(order.makerFee.recipient, makerFeeAmount);\n        unchecked {\n            _transferETH(order.trader, totalPrice - makerFeeAmount - protocolFeeAmount);\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take a single bid\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     */\n    function _takeBidSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.BID, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.BID,\n            exchange.taker.tokenId,\n            takerAmount,\n            msg.sender\n        );\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* Execute pool transfers and set the fulfillment of the order. */\n        address trader = order.trader;\n        _transferPool(trader, order.makerFee.recipient, makerFeeAmount);\n        _transferPool(trader, fees.takerFee.recipient, takerFeeAmount);\n        _transferPool(trader, fees.protocolFee.recipient, protocolFeeAmount);\n        unchecked {\n            _transferPool(trader, msg.sender, totalPrice - takerFeeAmount - protocolFeeAmount);\n\n            amountTaken[trader][bytes32(order.salt)][listing.index] += exchange.taker.amount;\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.BID);\n    }\n\n    /**\n     * @notice Take multiple asks; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     * @param tokenRecipient Address to receive the tokens purchased\n     */\n    function _takeAsk(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.ASK,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.ASK, tokenRecipient);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        uint256 remainingETH = address(this).balance;\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.ASK,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                bool inserted;\n                (remainingETH, inserted) = _insertExecutionAsk(\n                    executionBatch,\n                    fungibleTransfers,\n                    order,\n                    exchange,\n                    fees,\n                    remainingETH\n                );\n                if (inserted) {\n                    unchecked {\n                        pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                            .taker\n                            .amount;\n                    }\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take multiple bids; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     */\n    function _takeBid(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.BID,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.BID, msg.sender);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.BID,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                _insertExecutionBid(executionBatch, fungibleTransfers, order, exchange, fees);\n\n                /* Record the pending fulfillment. */\n                unchecked {\n                    pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                        .taker\n                        .amount;\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.BID);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Initialize the ExecutionBatch and FungibleTransfers objects for bulk execution\n     * @param exchangesLength Number of exchanges\n     * @param orderType Order type\n     * @param taker Order taker address\n     */\n    function _initializeBatch(\n        uint256 exchangesLength,\n        OrderType orderType,\n        address taker\n    )\n        internal\n        pure\n        returns (bytes memory executionBatch, FungibleTransfers memory fungibleTransfers)\n    {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size * exchangesLength + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), exchangesLength) // set the length of the transfers array\n        }\n\n        /* Initialize the fungible transfers object. */\n        AtomicExecution[] memory executions = new AtomicExecution[](exchangesLength);\n        address[] memory feeRecipients = new address[](exchangesLength);\n        address[] memory makers = new address[](exchangesLength);\n        uint256[] memory makerTransfers = new uint256[](exchangesLength);\n        uint256[] memory feeTransfers = new uint256[](exchangesLength);\n        fungibleTransfers = FungibleTransfers({\n            totalProtocolFee: 0,\n            totalSellerTransfer: 0,\n            totalTakerFee: 0,\n            feeRecipientId: 0,\n            feeRecipients: feeRecipients,\n            makerId: 0,\n            makers: makers,\n            feeTransfers: feeTransfers,\n            makerTransfers: makerTransfers,\n            executions: executions\n        });\n    }\n\n    /**\n     * @notice Initialize the ExecutionBatch object for a single execution\n     * @param order Order to take a Listing from\n     * @param orderType Order type\n     * @param tokenId Token id\n     * @param amount ERC721/ERC1155 amount\n     * @param taker Order taker address\n     */\n    function _initializeSingleExecution(\n        Order memory order,\n        OrderType orderType,\n        uint256 tokenId,\n        uint256 amount,\n        address taker\n    ) internal pure returns (bytes memory executionBatch) {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), 1) // set the length of the transfers array\n        }\n\n        /* Insert the transfer into the batch. */\n        _insertNonfungibleTransfer(executionBatch, order, tokenId, amount);\n    }\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'BlurExchangeV2._initializeBatch', 'start_line': 1551, 'end_line': 1590, 'offset_start': 56202, 'offset_end': 58165, 'content': 'function _initializeBatch(\n        uint256 exchangesLength,\n        OrderType orderType,\n        address taker\n    )\n        internal\n        pure\n        returns (bytes memory executionBatch, FungibleTransfers memory fungibleTransfers)\n    {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size * exchangesLength + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), exchangesLength) // set the length of the transfers array\n        }\n\n        /* Initialize the fungible transfers object. */\n        AtomicExecution[] memory executions = new AtomicExecution[](exchangesLength);\n        address[] memory feeRecipients = new address[](exchangesLength);\n        address[] memory makers = new address[](exchangesLength);\n        uint256[] memory makerTransfers = new uint256[](exchangesLength);\n        uint256[] memory feeTransfers = new uint256[](exchangesLength);\n        fungibleTransfers = FungibleTransfers({\n            totalProtocolFee: 0,\n            totalSellerTransfer: 0,\n            totalTakerFee: 0,\n            feeRecipientId: 0,\n            feeRecipients: feeRecipients,\n            makerId: 0,\n            makers: makers,\n            feeTransfers: feeTransfers,\n            makerTransfers: makerTransfers,\n            executions: executions\n        });\n    }', 'contract_name': 'BlurExchangeV2', 'contract_code': "{\n    address public governor;\n\n    // required by the OZ UUPS module\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    constructor(address delegate, address pool, address proxy) Executor(delegate, pool, proxy) {\n        _disableInitializers();\n    }\n\n    function initialize() external initializer {\n        __UUPSUpgradeable_init();\n        __Ownable_init();\n        __Reentrancy_init();\n        verifyDomain();\n    }\n\n    modifier onlyGovernor() {\n        if (msg.sender != governor) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    /**\n     * @notice Governor only function to set the protocol fee rate and recipient\n     * @param recipient Protocol fee recipient\n     * @param rate Protocol fee rate\n     */\n    function setProtocolFee(address recipient, uint16 rate) external onlyGovernor {\n        if (rate > _MAX_PROTOCOL_FEE_RATE) {\n            revert ProtocolFeeTooHigh();\n        }\n        protocolFee = FeeRate(recipient, rate);\n        emit NewProtocolFee(recipient, rate);\n    }\n\n    /**\n     * @notice Admin only function to set the governor of the exchange\n     * @param _governor Address of governor to set\n     */\n    function setGovernor(address _governor) external onlyOwner {\n        governor = _governor;\n        emit NewGovernor(_governor);\n    }\n\n    /**\n     * @notice Admin only function to grant or revoke the approval of an oracle\n     * @param oracle Address to set approval of\n     * @param approved If the oracle should be approved or not\n     */\n    function setOracle(address oracle, bool approved) external onlyOwner {\n        if (approved) {\n            oracles[oracle] = 1;\n        } else {\n            oracles[oracle] = 0;\n        }\n        emit SetOracle(oracle, approved);\n    }\n\n    /**\n     * @notice Admin only function to set the block range\n     * @param _blockRange Block range that oracle signatures are valid for\n     */\n    function setBlockRange(uint256 _blockRange) external onlyOwner {\n        blockRange = _blockRange;\n        emit NewBlockRange(_blockRange);\n    }\n\n    /**\n     * @notice Cancel listings by recording their fulfillment\n     * @param cancels List of cancels to execute\n     */\n    function cancelTrades(Cancel[] memory cancels) external {\n        uint256 cancelsLength = cancels.length;\n        for (uint256 i; i < cancelsLength; ) {\n            Cancel memory cancel = cancels[i];\n            amountTaken[msg.sender][cancel.hash][cancel.index] += cancel.amount;\n            emit CancelTrade(msg.sender, cancel.hash, cancel.index, cancel.amount);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Cancels all orders by incrementing caller nonce\n     */\n    function incrementNonce() external {\n        emit NonceIncremented(msg.sender, ++nonces[msg.sender]);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of _takeAsk that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAsk(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAsk(\n            inputs.orders,\n            inputs.exchanges,\n            inputs.takerFee,\n            inputs.signatures,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBid that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBid\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBid(\n        TakeBid memory inputs,\n        bytes calldata oracleSignature\n    ) public verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBid(inputs.orders, inputs.exchanges, inputs.takerFee, inputs.signatures);\n    }\n\n    /**\n     * @notice Wrapper of _takeAskSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAskSingle(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAskSingle(\n            inputs.order,\n            inputs.exchange,\n            inputs.takerFee,\n            inputs.signature,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBidSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBidSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBidSingle(\n        TakeBidSingle memory inputs,\n        bytes calldata oracleSignature\n    ) external verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBidSingle(inputs.order, inputs.exchange, inputs.takerFee, inputs.signature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of takeAskSingle that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAskSingle(inputs, oracleSignature);\n    }\n\n    /**\n     * @notice Wrapper of takeAsk that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAsk(inputs, oracleSignature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Take a single ask\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     * @param tokenRecipient Address to receive the token transfer\n     */\n    function _takeAskSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.ASK, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.ASK,\n            listing.tokenId,\n            takerAmount,\n            tokenRecipient\n        );\n\n        /* Set the fulfillment of the order. */\n        unchecked {\n            amountTaken[order.trader][bytes32(order.salt)][listing.index] += takerAmount;\n        }\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* If there are insufficient funds to cover the price with the fees, revert. */\n        unchecked {\n            if (address(this).balance < totalPrice + takerFeeAmount) {\n                revert InsufficientFunds();\n            }\n        }\n\n        /* Execute ETH transfers. */\n        _transferETH(fees.protocolFee.recipient, protocolFeeAmount);\n        _transferETH(fees.takerFee.recipient, takerFeeAmount);\n        _transferETH(order.makerFee.recipient, makerFeeAmount);\n        unchecked {\n            _transferETH(order.trader, totalPrice - makerFeeAmount - protocolFeeAmount);\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take a single bid\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     */\n    function _takeBidSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.BID, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.BID,\n            exchange.taker.tokenId,\n            takerAmount,\n            msg.sender\n        );\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* Execute pool transfers and set the fulfillment of the order. */\n        address trader = order.trader;\n        _transferPool(trader, order.makerFee.recipient, makerFeeAmount);\n        _transferPool(trader, fees.takerFee.recipient, takerFeeAmount);\n        _transferPool(trader, fees.protocolFee.recipient, protocolFeeAmount);\n        unchecked {\n            _transferPool(trader, msg.sender, totalPrice - takerFeeAmount - protocolFeeAmount);\n\n            amountTaken[trader][bytes32(order.salt)][listing.index] += exchange.taker.amount;\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.BID);\n    }\n\n    /**\n     * @notice Take multiple asks; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     * @param tokenRecipient Address to receive the tokens purchased\n     */\n    function _takeAsk(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.ASK,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.ASK, tokenRecipient);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        uint256 remainingETH = address(this).balance;\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.ASK,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                bool inserted;\n                (remainingETH, inserted) = _insertExecutionAsk(\n                    executionBatch,\n                    fungibleTransfers,\n                    order,\n                    exchange,\n                    fees,\n                    remainingETH\n                );\n                if (inserted) {\n                    unchecked {\n                        pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                            .taker\n                            .amount;\n                    }\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take multiple bids; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     */\n    function _takeBid(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.BID,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.BID, msg.sender);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.BID,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                _insertExecutionBid(executionBatch, fungibleTransfers, order, exchange, fees);\n\n                /* Record the pending fulfillment. */\n                unchecked {\n                    pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                        .taker\n                        .amount;\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.BID);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Initialize the ExecutionBatch and FungibleTransfers objects for bulk execution\n     * @param exchangesLength Number of exchanges\n     * @param orderType Order type\n     * @param taker Order taker address\n     */\n    function _initializeBatch(\n        uint256 exchangesLength,\n        OrderType orderType,\n        address taker\n    )\n        internal\n        pure\n        returns (bytes memory executionBatch, FungibleTransfers memory fungibleTransfers)\n    {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size * exchangesLength + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), exchangesLength) // set the length of the transfers array\n        }\n\n        /* Initialize the fungible transfers object. */\n        AtomicExecution[] memory executions = new AtomicExecution[](exchangesLength);\n        address[] memory feeRecipients = new address[](exchangesLength);\n        address[] memory makers = new address[](exchangesLength);\n        uint256[] memory makerTransfers = new uint256[](exchangesLength);\n        uint256[] memory feeTransfers = new uint256[](exchangesLength);\n        fungibleTransfers = FungibleTransfers({\n            totalProtocolFee: 0,\n            totalSellerTransfer: 0,\n            totalTakerFee: 0,\n            feeRecipientId: 0,\n            feeRecipients: feeRecipients,\n            makerId: 0,\n            makers: makers,\n            feeTransfers: feeTransfers,\n            makerTransfers: makerTransfers,\n            executions: executions\n        });\n    }\n\n    /**\n     * @notice Initialize the ExecutionBatch object for a single execution\n     * @param order Order to take a Listing from\n     * @param orderType Order type\n     * @param tokenId Token id\n     * @param amount ERC721/ERC1155 amount\n     * @param taker Order taker address\n     */\n    function _initializeSingleExecution(\n        Order memory order,\n        OrderType orderType,\n        uint256 tokenId,\n        uint256 amount,\n        address taker\n    ) internal pure returns (bytes memory executionBatch) {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), 1) // set the length of the transfers array\n        }\n\n        /* Insert the transfer into the batch. */\n        _insertNonfungibleTransfer(executionBatch, order, tokenId, amount);\n    }\n}", 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'BlurExchangeV2._initializeSingleExecution', 'start_line': 1600, 'end_line': 1621, 'offset_start': 58461, 'offset_end': 59670, 'content': 'function _initializeSingleExecution(\n        Order memory order,\n        OrderType orderType,\n        uint256 tokenId,\n        uint256 amount,\n        address taker\n    ) internal pure returns (bytes memory executionBatch) {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), 1) // set the length of the transfers array\n        }\n\n        /* Insert the transfer into the batch. */\n        _insertNonfungibleTransfer(executionBatch, order, tokenId, amount);\n    }', 'contract_name': 'BlurExchangeV2', 'contract_code': "{\n    address public governor;\n\n    // required by the OZ UUPS module\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    constructor(address delegate, address pool, address proxy) Executor(delegate, pool, proxy) {\n        _disableInitializers();\n    }\n\n    function initialize() external initializer {\n        __UUPSUpgradeable_init();\n        __Ownable_init();\n        __Reentrancy_init();\n        verifyDomain();\n    }\n\n    modifier onlyGovernor() {\n        if (msg.sender != governor) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    /**\n     * @notice Governor only function to set the protocol fee rate and recipient\n     * @param recipient Protocol fee recipient\n     * @param rate Protocol fee rate\n     */\n    function setProtocolFee(address recipient, uint16 rate) external onlyGovernor {\n        if (rate > _MAX_PROTOCOL_FEE_RATE) {\n            revert ProtocolFeeTooHigh();\n        }\n        protocolFee = FeeRate(recipient, rate);\n        emit NewProtocolFee(recipient, rate);\n    }\n\n    /**\n     * @notice Admin only function to set the governor of the exchange\n     * @param _governor Address of governor to set\n     */\n    function setGovernor(address _governor) external onlyOwner {\n        governor = _governor;\n        emit NewGovernor(_governor);\n    }\n\n    /**\n     * @notice Admin only function to grant or revoke the approval of an oracle\n     * @param oracle Address to set approval of\n     * @param approved If the oracle should be approved or not\n     */\n    function setOracle(address oracle, bool approved) external onlyOwner {\n        if (approved) {\n            oracles[oracle] = 1;\n        } else {\n            oracles[oracle] = 0;\n        }\n        emit SetOracle(oracle, approved);\n    }\n\n    /**\n     * @notice Admin only function to set the block range\n     * @param _blockRange Block range that oracle signatures are valid for\n     */\n    function setBlockRange(uint256 _blockRange) external onlyOwner {\n        blockRange = _blockRange;\n        emit NewBlockRange(_blockRange);\n    }\n\n    /**\n     * @notice Cancel listings by recording their fulfillment\n     * @param cancels List of cancels to execute\n     */\n    function cancelTrades(Cancel[] memory cancels) external {\n        uint256 cancelsLength = cancels.length;\n        for (uint256 i; i < cancelsLength; ) {\n            Cancel memory cancel = cancels[i];\n            amountTaken[msg.sender][cancel.hash][cancel.index] += cancel.amount;\n            emit CancelTrade(msg.sender, cancel.hash, cancel.index, cancel.amount);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Cancels all orders by incrementing caller nonce\n     */\n    function incrementNonce() external {\n        emit NonceIncremented(msg.sender, ++nonces[msg.sender]);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of _takeAsk that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAsk(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAsk(\n            inputs.orders,\n            inputs.exchanges,\n            inputs.takerFee,\n            inputs.signatures,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBid that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBid\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBid(\n        TakeBid memory inputs,\n        bytes calldata oracleSignature\n    ) public verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBid(inputs.orders, inputs.exchanges, inputs.takerFee, inputs.signatures);\n    }\n\n    /**\n     * @notice Wrapper of _takeAskSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeAskSingle(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature\n    )\n        public\n        payable\n        nonReentrant\n        verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature)\n    {\n        _takeAskSingle(\n            inputs.order,\n            inputs.exchange,\n            inputs.takerFee,\n            inputs.signature,\n            inputs.tokenRecipient\n        );\n    }\n\n    /**\n     * @notice Wrapper of _takeBidSingle that verifies an oracle signature of the calldata before executing\n     * @param inputs Inputs for _takeBidSingle\n     * @param oracleSignature Oracle signature of inputs\n     */\n    function takeBidSingle(\n        TakeBidSingle memory inputs,\n        bytes calldata oracleSignature\n    ) external verifyOracleSignature(_hashCalldata(msg.sender), oracleSignature) {\n        _takeBidSingle(inputs.order, inputs.exchange, inputs.takerFee, inputs.signature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Wrapper of takeAskSingle that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAskSingle\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAskSingle(inputs, oracleSignature);\n    }\n\n    /**\n     * @notice Wrapper of takeAsk that withdraws ETH from the caller's pool balance prior to executing\n     * @param inputs Inputs for takeAsk\n     * @param oracleSignature Oracle signature of inputs\n     * @param amountToWithdraw Amount of ETH to withdraw from the pool\n     */\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable {\n        _withdrawFromPool(msg.sender, amountToWithdraw);\n\n        takeAsk(inputs, oracleSignature);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Take a single ask\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     * @param tokenRecipient Address to receive the token transfer\n     */\n    function _takeAskSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.ASK, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.ASK,\n            listing.tokenId,\n            takerAmount,\n            tokenRecipient\n        );\n\n        /* Set the fulfillment of the order. */\n        unchecked {\n            amountTaken[order.trader][bytes32(order.salt)][listing.index] += takerAmount;\n        }\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* If there are insufficient funds to cover the price with the fees, revert. */\n        unchecked {\n            if (address(this).balance < totalPrice + takerFeeAmount) {\n                revert InsufficientFunds();\n            }\n        }\n\n        /* Execute ETH transfers. */\n        _transferETH(fees.protocolFee.recipient, protocolFeeAmount);\n        _transferETH(fees.takerFee.recipient, takerFeeAmount);\n        _transferETH(order.makerFee.recipient, makerFeeAmount);\n        unchecked {\n            _transferETH(order.trader, totalPrice - makerFeeAmount - protocolFeeAmount);\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take a single bid\n     * @param order Order of listing to fulfill\n     * @param exchange Exchange struct indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken\n     * @param signature Order signature\n     */\n    function _takeBidSingle(\n        Order memory order,\n        Exchange memory exchange,\n        FeeRate memory takerFee,\n        bytes memory signature\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n        Listing memory listing = exchange.listing;\n        uint256 takerAmount = exchange.taker.amount;\n\n        /* Validate the order and listing, revert if not. */\n        if (!_validateOrderAndListing(order, OrderType.BID, exchange, signature, fees)) {\n            revert InvalidOrder();\n        }\n\n        /* Create single execution batch and insert the transfer. */\n        bytes memory executionBatch = _initializeSingleExecution(\n            order,\n            OrderType.BID,\n            exchange.taker.tokenId,\n            takerAmount,\n            msg.sender\n        );\n\n        /* Execute the token transfers, revert if not successful. */\n        {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(executionBatch, 1);\n            if (!successfulTransfers[0]) {\n                revert TokenTransferFailed();\n            }\n        }\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(listing.price, takerAmount, order.makerFee, fees);\n\n        /* Execute pool transfers and set the fulfillment of the order. */\n        address trader = order.trader;\n        _transferPool(trader, order.makerFee.recipient, makerFeeAmount);\n        _transferPool(trader, fees.takerFee.recipient, takerFeeAmount);\n        _transferPool(trader, fees.protocolFee.recipient, protocolFeeAmount);\n        unchecked {\n            _transferPool(trader, msg.sender, totalPrice - takerFeeAmount - protocolFeeAmount);\n\n            amountTaken[trader][bytes32(order.salt)][listing.index] += exchange.taker.amount;\n        }\n\n        _emitExecutionEvent(executionBatch, order, listing.index, totalPrice, fees, OrderType.BID);\n    }\n\n    /**\n     * @notice Take multiple asks; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     * @param tokenRecipient Address to receive the tokens purchased\n     */\n    function _takeAsk(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures,\n        address tokenRecipient\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.ASK,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.ASK, tokenRecipient);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        uint256 remainingETH = address(this).balance;\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.ASK,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                bool inserted;\n                (remainingETH, inserted) = _insertExecutionAsk(\n                    executionBatch,\n                    fungibleTransfers,\n                    order,\n                    exchange,\n                    fees,\n                    remainingETH\n                );\n                if (inserted) {\n                    unchecked {\n                        pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                            .taker\n                            .amount;\n                    }\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.ASK);\n\n        /* Return dust. */\n        _transferETH(msg.sender, address(this).balance);\n    }\n\n    /**\n     * @notice Take multiple bids; efficiently verifying and executing the transfers in bulk\n     * @param orders List of orders\n     * @param exchanges List of exchanges indicating the listing to take and the parameters to match it with\n     * @param takerFee Taker fee to be taken on each exchange\n     * @param signatures Bytes array of order signatures\n     */\n    function _takeBid(\n        Order[] memory orders,\n        Exchange[] memory exchanges,\n        FeeRate memory takerFee,\n        bytes memory signatures\n    ) internal {\n        Fees memory fees = Fees(protocolFee, takerFee);\n\n        /**\n         * Validate all the orders potentially used in the execution and\n         * initialize the arrays for pending fulfillments.\n         */\n        (bool[] memory validOrders, uint256[][] memory pendingAmountTaken) = _validateOrders(\n            orders,\n            OrderType.BID,\n            signatures,\n            fees\n        );\n\n        uint256 exchangesLength = exchanges.length;\n\n        /* Initialize the execution batch structs. */\n        (\n            bytes memory executionBatch,\n            FungibleTransfers memory fungibleTransfers\n        ) = _initializeBatch(exchangesLength, OrderType.BID, msg.sender);\n\n        Order memory order;\n        Exchange memory exchange;\n\n        for (uint256 i; i < exchangesLength; ) {\n            exchange = exchanges[i];\n            order = orders[exchange.index];\n\n            /* Check the listing and exchange is valid and its parent order has already been validated. */\n            if (\n                _validateListingFromBatch(\n                    order,\n                    OrderType.BID,\n                    exchange,\n                    validOrders,\n                    pendingAmountTaken\n                )\n            ) {\n                /* Insert the transfers into the batch. */\n                _insertExecutionBid(executionBatch, fungibleTransfers, order, exchange, fees);\n\n                /* Record the pending fulfillment. */\n                unchecked {\n                    pendingAmountTaken[exchange.index][exchange.listing.index] += exchange\n                        .taker\n                        .amount;\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        /* Execute all transfers. */\n        _executeBatchTransfer(executionBatch, fungibleTransfers, fees, OrderType.BID);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Initialize the ExecutionBatch and FungibleTransfers objects for bulk execution\n     * @param exchangesLength Number of exchanges\n     * @param orderType Order type\n     * @param taker Order taker address\n     */\n    function _initializeBatch(\n        uint256 exchangesLength,\n        OrderType orderType,\n        address taker\n    )\n        internal\n        pure\n        returns (bytes memory executionBatch, FungibleTransfers memory fungibleTransfers)\n    {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size * exchangesLength + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), exchangesLength) // set the length of the transfers array\n        }\n\n        /* Initialize the fungible transfers object. */\n        AtomicExecution[] memory executions = new AtomicExecution[](exchangesLength);\n        address[] memory feeRecipients = new address[](exchangesLength);\n        address[] memory makers = new address[](exchangesLength);\n        uint256[] memory makerTransfers = new uint256[](exchangesLength);\n        uint256[] memory feeTransfers = new uint256[](exchangesLength);\n        fungibleTransfers = FungibleTransfers({\n            totalProtocolFee: 0,\n            totalSellerTransfer: 0,\n            totalTakerFee: 0,\n            feeRecipientId: 0,\n            feeRecipients: feeRecipients,\n            makerId: 0,\n            makers: makers,\n            feeTransfers: feeTransfers,\n            makerTransfers: makerTransfers,\n            executions: executions\n        });\n    }\n\n    /**\n     * @notice Initialize the ExecutionBatch object for a single execution\n     * @param order Order to take a Listing from\n     * @param orderType Order type\n     * @param tokenId Token id\n     * @param amount ERC721/ERC1155 amount\n     * @param taker Order taker address\n     */\n    function _initializeSingleExecution(\n        Order memory order,\n        OrderType orderType,\n        uint256 tokenId,\n        uint256 amount,\n        address taker\n    ) internal pure returns (bytes memory executionBatch) {\n        /* Initialize the batch. Constructing it manually in calldata packing allows for cheaper delegate execution. */\n        uint256 arrayLength = Transfer_size + One_word;\n        uint256 executionBatchLength = ExecutionBatch_base_size + arrayLength;\n        executionBatch = new bytes(executionBatchLength);\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            mstore(add(calldataPointer, ExecutionBatch_taker_offset), taker)\n            mstore(add(calldataPointer, ExecutionBatch_orderType_offset), orderType)\n            mstore(add(calldataPointer, ExecutionBatch_transfers_pointer_offset), ExecutionBatch_transfers_offset) // set the transfers pointer\n            mstore(add(calldataPointer, ExecutionBatch_transfers_offset), 1) // set the length of the transfers array\n        }\n\n        /* Insert the transfer into the batch. */\n        _insertNonfungibleTransfer(executionBatch, order, tokenId, amount);\n    }\n}", 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Executor.tor', 'start_line': 1650, 'end_line': 1653, 'offset_start': 60272, 'offset_end': 60407, 'content': 'constructor(address delegate, address pool, address proxy) Validation(proxy) {\n        _DELEGATE = delegate;\n        _POOL = pool;\n    }', 'contract_name': 'Executor', 'contract_code': "{\n    address private immutable _DELEGATE;\n    address private immutable _POOL;\n\n    constructor(address delegate, address pool, address proxy) Validation(proxy) {\n        _DELEGATE = delegate;\n        _POOL = pool;\n    }\n\n    receive() external payable {\n        if (msg.sender != _POOL) {\n            revert Unauthorized();\n        }\n    }\n\n    /**\n     * @notice Insert a validated ask listing into the batch if there's sufficient ETH to fulfill\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing the listing to insert\n     * @param fees Protocol and taker fees\n     * @param remainingETH Available ETH remaining\n     * @return Available ETH remaining after insertion; if the listing was inserted in the batch\n     */\n    function _insertExecutionAsk(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees,\n        uint256 remainingETH\n    ) internal pure returns (uint256, bool) {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        /* Only insert the executions if there are sufficient funds to execute. */\n        if (remainingETH >= totalPrice + takerFeeAmount) {\n            unchecked {\n                remainingETH = remainingETH - totalPrice - takerFeeAmount;\n            }\n\n            _setAddresses(fungibleTransfers, order);\n\n            uint256 index = _insertNonfungibleTransfer(\n                executionBatch,\n                order,\n                exchange.listing.tokenId,\n                takerAmount\n            );\n\n            _insertFungibleTransfers(\n                fungibleTransfers,\n                takerAmount,\n                exchange.listing,\n                bytes32(order.salt),\n                index,\n                totalPrice,\n                protocolFeeAmount,\n                makerFeeAmount,\n                takerFeeAmount,\n                true\n            );\n\n            return (remainingETH, true);\n        } else {\n            return (remainingETH, false);\n        }\n    }\n\n    /**\n     * @notice Insert a validated bid listing into the batch\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing listing to insert\n     * @param fees Protocol and taker fees\n     */\n    function _insertExecutionBid(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees\n    ) internal pure {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        _setAddresses(fungibleTransfers, order);\n\n        uint256 index = _insertNonfungibleTransfer(\n            executionBatch,\n            order,\n            exchange.taker.tokenId,\n            takerAmount\n        );\n\n        _insertFungibleTransfers(\n            fungibleTransfers,\n            takerAmount,\n            exchange.listing,\n            bytes32(order.salt),\n            index,\n            totalPrice,\n            protocolFeeAmount,\n            makerFeeAmount,\n            takerFeeAmount,\n            false\n        );\n    }\n\n    /**\n     * @notice Insert the nonfungible transfer into the batch\n     * @param executionBatch Execution batch\n     * @param order Order\n     * @param tokenId Token id\n     * @param amount Number of token units\n     * @return transferIndex Index of the transfer\n     */\n    function _insertNonfungibleTransfer(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 tokenId,\n        uint256 amount\n    ) internal pure returns (uint256 transferIndex) {\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            transferIndex := mload(add(calldataPointer, ExecutionBatch_length_offset))\n\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            let transferPointer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n            mstore(\n                add(transferPointer, Transfer_trader_offset),\n                mload(add(order, Order_trader_offset))\n            ) // set the trader\n            mstore(add(transferPointer, Transfer_id_offset), tokenId) // set the token id\n            mstore(\n                add(transferPointer, Transfer_collection_offset),\n                mload(add(order, Order_collection_offset))\n            ) // set the collection\n            mstore(\n                add(transferPointer, Transfer_assetType_offset),\n                mload(add(order, Order_assetType_offset))\n            ) // set the asset type\n            mstore(add(calldataPointer, ExecutionBatch_length_offset), add(transferIndex, 1)) // increment the batch length\n\n            if eq(mload(add(order, Order_assetType_offset)), AssetType_ERC1155) {\n                mstore(add(transferPointer, Transfer_amount_offset), amount) // set the amount (don't need to set for ERC721's)\n            }\n        }\n    }\n\n    /**\n     * @notice Insert the fungible transfers that need to be executed atomically\n     * @param fungibleTransfers Fungible transfers struct\n     * @param takerAmount Amount of the listing being taken\n     * @param listing Listing to execute\n     * @param orderHash Order hash\n     * @param index Execution index\n     * @param totalPrice Total price of the purchased tokens\n     * @param protocolFeeAmount Computed protocol fee\n     * @param makerFeeAmount Computed maker fee\n     * @param takerFeeAmount Computed taker fee\n     * @param makerIsSeller Is the order maker the seller\n     */\n    function _insertFungibleTransfers(\n        FungibleTransfers memory fungibleTransfers,\n        uint256 takerAmount,\n        Listing memory listing,\n        bytes32 orderHash,\n        uint256 index,\n        uint256 totalPrice,\n        uint256 protocolFeeAmount,\n        uint256 makerFeeAmount,\n        uint256 takerFeeAmount,\n        bool makerIsSeller\n    ) internal pure {\n        uint256 makerId = fungibleTransfers.makerId;\n        fungibleTransfers.executions[index].makerId = makerId;\n        fungibleTransfers.executions[index].makerFeeRecipientId = fungibleTransfers.feeRecipientId;\n        fungibleTransfers.executions[index].stateUpdate = StateUpdate({\n            trader: fungibleTransfers.makers[makerId],\n            hash: orderHash,\n            index: listing.index,\n            value: takerAmount,\n            maxAmount: listing.amount\n        });\n        if (makerIsSeller) {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    makerFeeAmount;\n            }\n        } else {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    takerFeeAmount;\n            }\n        }\n        fungibleTransfers.executions[index].makerFeeAmount = makerFeeAmount;\n        fungibleTransfers.executions[index].takerFeeAmount = takerFeeAmount;\n        fungibleTransfers.executions[index].protocolFeeAmount = protocolFeeAmount;\n    }\n\n    /**\n     * @notice Set the addresses of the maker fee recipient and order maker if different than currently being batched\n     * @param fungibleTransfers Fungible transfers struct\n     * @param order Parent order of listing being added to the batch\n     */\n    function _setAddresses(\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order\n    ) internal pure {\n        address feeRecipient = order.makerFee.recipient;\n        uint256 feeRecipientId = fungibleTransfers.feeRecipientId;\n        address currentFeeRecipient = fungibleTransfers.feeRecipients[feeRecipientId];\n        if (feeRecipient != currentFeeRecipient) {\n            if (currentFeeRecipient == address(0)) {\n                fungibleTransfers.feeRecipients[feeRecipientId] = feeRecipient;\n            } else {\n                unchecked {\n                    fungibleTransfers.feeRecipients[++feeRecipientId] = feeRecipient;\n                }\n                fungibleTransfers.feeRecipientId = feeRecipientId;\n            }\n        }\n        address trader = order.trader;\n        uint256 makerId = fungibleTransfers.makerId;\n        address currentTrader = fungibleTransfers.makers[makerId];\n        if (trader != currentTrader) {\n            if (currentTrader == address(0)) {\n                fungibleTransfers.makers[makerId] = trader;\n            } else {\n                unchecked {\n                    fungibleTransfers.makers[++makerId] = trader;\n                }\n                fungibleTransfers.makerId = makerId;\n            }\n        }\n    }\n\n    /**\n     * @notice Compute all necessary fees to be taken\n     * @param pricePerToken Price per token unit\n     * @param takerAmount Number of token units taken (should only be greater than 1 for ERC1155)\n     * @param fees Protocol and taker fee set by the transaction\n     */\n    function _computeFees(\n        uint256 pricePerToken,\n        uint256 takerAmount,\n        FeeRate memory makerFee,\n        Fees memory fees\n    )\n        internal\n        pure\n        returns (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        )\n    {\n        totalPrice = pricePerToken * takerAmount;\n        makerFeeAmount = (totalPrice * makerFee.rate) / _BASIS_POINTS;\n        takerFeeAmount = (totalPrice * fees.takerFee.rate) / _BASIS_POINTS;\n        protocolFeeAmount = (totalPrice * fees.protocolFee.rate) / _BASIS_POINTS;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Execute the transfers by first attempting the nonfungible transfers, for the successful transfers sum the fungible transfers by the recipients and execute\n     * @param executionBatch Execution batch struct\n     * @param fungibleTransfers Fungible transfers struct\n     * @param fees Protocol, maker, taker fees (note: makerFee will be inaccurate at this point in execution)\n     * @param orderType Order type\n     */\n    function _executeBatchTransfer(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        uint256 batchLength;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            batchLength := mload(add(calldataPointer, ExecutionBatch_length_offset))\n        }\n        if (batchLength > 0) {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(\n                executionBatch,\n                batchLength\n            );\n\n            uint256 transfersLength = successfulTransfers.length;\n            for (uint256 i; i < transfersLength; ) {\n                if (successfulTransfers[i]) {\n                    AtomicExecution memory execution = fungibleTransfers.executions[i];\n                    FeeRate memory makerFee;\n                    uint256 price;\n                    unchecked {\n                        if (orderType == OrderType.ASK) {\n                            fungibleTransfers.makerTransfers[execution.makerId] += execution\n                                .sellerAmount; // amount that needs to be sent *to* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount;\n                        } else {\n                            fungibleTransfers.makerTransfers[execution.makerId] +=\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount +\n                                execution.takerFeeAmount +\n                                execution.sellerAmount; // amount that needs to be taken *from* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.takerFeeAmount;\n                        }\n                        fungibleTransfers.totalSellerTransfer += execution.sellerAmount; // only for bids\n                        fungibleTransfers.totalProtocolFee += execution.protocolFeeAmount;\n                        fungibleTransfers.totalTakerFee += execution.takerFeeAmount;\n                        fungibleTransfers.feeTransfers[execution.makerFeeRecipientId] += execution\n                            .makerFeeAmount;\n                        makerFee = FeeRate(\n                            fungibleTransfers.feeRecipients[execution.makerFeeRecipientId],\n                            uint16((execution.makerFeeAmount * _BASIS_POINTS) / price)\n                        );\n                    }\n\n                    /* Commit state updates. */\n                    StateUpdate memory stateUpdate = fungibleTransfers.executions[i].stateUpdate;\n                    {\n                        address trader = stateUpdate.trader;\n                        bytes32 hash = stateUpdate.hash;\n                        uint256 index = stateUpdate.index;\n                        uint256 _amountTaken = amountTaken[trader][hash][index];\n                        uint256 newAmountTaken = _amountTaken + stateUpdate.value;\n\n                        /* Overfulfilled Listings should be caught prior to inserting into the batch, but this check prevents any misuse. */\n                        if (newAmountTaken <= stateUpdate.maxAmount) {\n                            amountTaken[trader][hash][index] = newAmountTaken;\n                        } else {\n                            revert OrderFulfilled();\n                        }\n                    }\n\n                    _emitExecutionEventFromBatch(\n                        executionBatch,\n                        price,\n                        makerFee,\n                        fees,\n                        stateUpdate,\n                        orderType,\n                        i\n                    );\n                }\n\n                unchecked {\n                    ++i;\n                }\n            }\n\n            if (orderType == OrderType.ASK) {\n                /* Transfer the payments to the sellers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferETH(fungibleTransfers.makers[i], fungibleTransfers.makerTransfers[i]);\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferETH(\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferETH(fees.protocolFee.recipient, fungibleTransfers.totalProtocolFee);\n\n                /* Transfer the taker fees. */\n                _transferETH(fees.takerFee.recipient, fungibleTransfers.totalTakerFee);\n            } else {\n                /* Take the pool funds from the buyers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferPool(\n                        fungibleTransfers.makers[i],\n                        address(this),\n                        fungibleTransfers.makerTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the payment to the seller. */\n                _transferPool(address(this), msg.sender, fungibleTransfers.totalSellerTransfer);\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferPool(\n                        address(this),\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferPool(\n                    address(this),\n                    fees.protocolFee.recipient,\n                    fungibleTransfers.totalProtocolFee\n                );\n\n                /* Transfer the taker fees. */\n                _transferPool(\n                    address(this),\n                    fees.takerFee.recipient,\n                    fungibleTransfers.totalTakerFee\n                );\n            }\n        }\n    }\n\n    /**\n     * @notice Attempt to execute a series of nonfungible transfers through the delegate; reverts will be skipped\n     * @param executionBatch Execution batch struct\n     * @param batchIndex Current available transfer slot in the batch\n     * @return Array indicating which transfers were successful\n     */\n    function _executeNonfungibleTransfers(\n        bytes memory executionBatch,\n        uint256 batchIndex\n    ) internal returns (bool[] memory) {\n        address delegate = _DELEGATE;\n\n        /* Initialize the memory space for the successful transfers array returned from the Delegate call. */\n        uint256 successfulTransfersPointer;\n        assembly {\n            successfulTransfersPointer := mload(Memory_pointer)\n            /* Need to shift the free memory pointer ahead one word to account for the array pointer returned from the call. */\n            mstore(Memory_pointer, add(successfulTransfersPointer, One_word))\n        }\n\n        bool[] memory successfulTransfers = new bool[](batchIndex);\n        assembly {\n            let size := mload(executionBatch)\n            let selectorPointer := add(executionBatch, ExecutionBatch_selector_offset)\n            mstore(selectorPointer, shr(Bytes4_shift, Delegate_transfer_selector))\n            let success := call(\n                gas(),\n                delegate,\n                0,\n                add(selectorPointer, Delegate_transfer_calldata_offset),\n                sub(size, Delegate_transfer_calldata_offset),\n                successfulTransfersPointer,\n                add(0x40, mul(batchIndex, One_word))\n            )\n        }\n        return successfulTransfers;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        TRANSFER FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Transfer ETH\n     * @param to Recipient address\n     * @param amount Amount of ETH to send\n     */\n    function _transferETH(address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            assembly {\n                success := call(gas(), to, amount, 0, 0, 0, 0)\n            }\n            if (!success) {\n                revert ETHTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Transfer pool funds on behalf of a user\n     * @param from Sender address\n     * @param to Recipient address\n     * @param amount Amount to send\n     */\n    function _transferPool(address from, address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            address pool = _POOL;\n            assembly {\n                let x := mload(Memory_pointer)\n                mstore(x, ERC20_transferFrom_selector)\n                mstore(add(x, ERC20_transferFrom_from_offset), from)\n                mstore(add(x, ERC20_transferFrom_to_offset), to)\n                mstore(add(x, ERC20_transferFrom_amount_offset), amount)\n                success := call(gas(), pool, 0, x, ERC20_transferFrom_size, 0, 0)\n            }\n            if (!success) {\n                revert PoolTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Deposit ETH to user's pool funds\n     * @param to Recipient address\n     * @param amount Amount of ETH to deposit\n     */\n    function _depositPool(address to, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_deposit_selector)\n            mstore(add(x, Pool_deposit_user_offset), to)\n            success := call(gas(), pool, amount, x, Pool_deposit_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolDepositFailed();\n        }\n    }\n\n    /**\n     * @notice Withdraw ETH from user's pool funds\n     * @param from Address to withdraw from\n     * @param amount Amount of ETH to withdraw\n     */\n    function _withdrawFromPool(address from, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_withdrawFrom_selector)\n            mstore(add(x, Pool_withdrawFrom_from_offset), from)\n            mstore(add(x, Pool_withdrawFrom_to_offset), address())\n            mstore(add(x, Pool_withdrawFrom_amount_offset), amount)\n            success := call(gas(), pool, 0, x, Pool_withdrawFrom_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolWithdrawFromFailed();\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EVENT EMITTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param price Price of the token purchased\n     * @param fees Protocol, maker, and taker fees taken\n     * @param stateUpdate Fulfillment to be recorded with a successful execution\n     * @param orderType Order type\n     * @param transferIndex Index of the transfer corresponding to the execution\n     */\n    function _emitExecutionEventFromBatch(\n        bytes memory executionBatch,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        StateUpdate memory stateUpdate,\n        OrderType orderType,\n        uint256 transferIndex\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            stateUpdate.hash,\n            stateUpdate.index,\n            price,\n            makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    /**\n     * @notice Emit the Execution event that minimizes the number of bytes in the log\n     * @param transfer The nft transfer\n     * @param orderHash Order hash\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param makerFee Maker fees taken\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitOptimalExecutionEvent(\n        Transfer memory transfer,\n        bytes32 orderHash,\n        uint256 listingIndex,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        if (\n            // see _insertNonfungibleTransfer; ERC721 transfers don't set the transfer amount,\n            // so we can assume the transfer amount and not check it\n            transfer.assetType == AssetType.ERC721 &&\n            fees.protocolFee.rate == 0 &&\n            transfer.id < 1 << (11 * 8) &&\n            listingIndex < 1 << (1 * 8) &&\n            price < 1 << (11 * 8)\n        ) {\n            if (makerFee.rate == 0 && fees.takerFee.rate == 0) {\n                emit Execution721Packed(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection)\n                );\n                return;\n            } else if (makerFee.rate == 0) {\n                emit Execution721TakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(fees.takerFee)\n                );\n                return;\n            } else if (fees.takerFee.rate == 0) {\n                emit Execution721MakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(makerFee)\n                );\n                return;\n            }\n        }\n\n        emit Execution({\n            transfer: transfer,\n            orderHash: orderHash,\n            listingIndex: listingIndex,\n            price: price,\n            makerFee: makerFee,\n            fees: fees,\n            orderType: orderType\n        });\n    }\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param order Order being fulfilled\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitExecutionEvent(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 listingIndex,\n        uint256 price,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(calldataPointer, add(transfersOffset, One_word))\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            bytes32(order.salt),\n            listingIndex,\n            price,\n            order.makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    function packTokenIdListingIndexTrader(\n        uint256 tokenId,\n        uint256 listingIndex,\n        address trader\n    ) private pure returns (uint256) {\n        return (tokenId << (21 * 8)) | (listingIndex << (20 * 8)) | uint160(trader);\n    }\n\n    function packTypePriceCollection(\n        OrderType orderType,\n        uint256 price,\n        address collection\n    ) private pure returns (uint256) {\n        return (uint256(orderType) << (31 * 8)) | (price << (20 * 8)) | uint160(collection);\n    }\n\n    function packFee(FeeRate memory fee) private pure returns (uint256) {\n        return (uint256(fee.rate) << (20 * 8)) | uint160(fee.recipient);\n    }\n\n    uint256[50] private __gap;\n}", 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'default', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Executor.', 'start_line': 1655, 'end_line': 1659, 'offset_start': 60414, 'offset_end': 60527, 'content': 'receive() external payable {\n        if (msg.sender != _POOL) {\n            revert Unauthorized();\n        }\n    }', 'contract_name': 'Executor', 'contract_code': "{\n    address private immutable _DELEGATE;\n    address private immutable _POOL;\n\n    constructor(address delegate, address pool, address proxy) Validation(proxy) {\n        _DELEGATE = delegate;\n        _POOL = pool;\n    }\n\n    receive() external payable {\n        if (msg.sender != _POOL) {\n            revert Unauthorized();\n        }\n    }\n\n    /**\n     * @notice Insert a validated ask listing into the batch if there's sufficient ETH to fulfill\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing the listing to insert\n     * @param fees Protocol and taker fees\n     * @param remainingETH Available ETH remaining\n     * @return Available ETH remaining after insertion; if the listing was inserted in the batch\n     */\n    function _insertExecutionAsk(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees,\n        uint256 remainingETH\n    ) internal pure returns (uint256, bool) {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        /* Only insert the executions if there are sufficient funds to execute. */\n        if (remainingETH >= totalPrice + takerFeeAmount) {\n            unchecked {\n                remainingETH = remainingETH - totalPrice - takerFeeAmount;\n            }\n\n            _setAddresses(fungibleTransfers, order);\n\n            uint256 index = _insertNonfungibleTransfer(\n                executionBatch,\n                order,\n                exchange.listing.tokenId,\n                takerAmount\n            );\n\n            _insertFungibleTransfers(\n                fungibleTransfers,\n                takerAmount,\n                exchange.listing,\n                bytes32(order.salt),\n                index,\n                totalPrice,\n                protocolFeeAmount,\n                makerFeeAmount,\n                takerFeeAmount,\n                true\n            );\n\n            return (remainingETH, true);\n        } else {\n            return (remainingETH, false);\n        }\n    }\n\n    /**\n     * @notice Insert a validated bid listing into the batch\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing listing to insert\n     * @param fees Protocol and taker fees\n     */\n    function _insertExecutionBid(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees\n    ) internal pure {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        _setAddresses(fungibleTransfers, order);\n\n        uint256 index = _insertNonfungibleTransfer(\n            executionBatch,\n            order,\n            exchange.taker.tokenId,\n            takerAmount\n        );\n\n        _insertFungibleTransfers(\n            fungibleTransfers,\n            takerAmount,\n            exchange.listing,\n            bytes32(order.salt),\n            index,\n            totalPrice,\n            protocolFeeAmount,\n            makerFeeAmount,\n            takerFeeAmount,\n            false\n        );\n    }\n\n    /**\n     * @notice Insert the nonfungible transfer into the batch\n     * @param executionBatch Execution batch\n     * @param order Order\n     * @param tokenId Token id\n     * @param amount Number of token units\n     * @return transferIndex Index of the transfer\n     */\n    function _insertNonfungibleTransfer(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 tokenId,\n        uint256 amount\n    ) internal pure returns (uint256 transferIndex) {\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            transferIndex := mload(add(calldataPointer, ExecutionBatch_length_offset))\n\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            let transferPointer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n            mstore(\n                add(transferPointer, Transfer_trader_offset),\n                mload(add(order, Order_trader_offset))\n            ) // set the trader\n            mstore(add(transferPointer, Transfer_id_offset), tokenId) // set the token id\n            mstore(\n                add(transferPointer, Transfer_collection_offset),\n                mload(add(order, Order_collection_offset))\n            ) // set the collection\n            mstore(\n                add(transferPointer, Transfer_assetType_offset),\n                mload(add(order, Order_assetType_offset))\n            ) // set the asset type\n            mstore(add(calldataPointer, ExecutionBatch_length_offset), add(transferIndex, 1)) // increment the batch length\n\n            if eq(mload(add(order, Order_assetType_offset)), AssetType_ERC1155) {\n                mstore(add(transferPointer, Transfer_amount_offset), amount) // set the amount (don't need to set for ERC721's)\n            }\n        }\n    }\n\n    /**\n     * @notice Insert the fungible transfers that need to be executed atomically\n     * @param fungibleTransfers Fungible transfers struct\n     * @param takerAmount Amount of the listing being taken\n     * @param listing Listing to execute\n     * @param orderHash Order hash\n     * @param index Execution index\n     * @param totalPrice Total price of the purchased tokens\n     * @param protocolFeeAmount Computed protocol fee\n     * @param makerFeeAmount Computed maker fee\n     * @param takerFeeAmount Computed taker fee\n     * @param makerIsSeller Is the order maker the seller\n     */\n    function _insertFungibleTransfers(\n        FungibleTransfers memory fungibleTransfers,\n        uint256 takerAmount,\n        Listing memory listing,\n        bytes32 orderHash,\n        uint256 index,\n        uint256 totalPrice,\n        uint256 protocolFeeAmount,\n        uint256 makerFeeAmount,\n        uint256 takerFeeAmount,\n        bool makerIsSeller\n    ) internal pure {\n        uint256 makerId = fungibleTransfers.makerId;\n        fungibleTransfers.executions[index].makerId = makerId;\n        fungibleTransfers.executions[index].makerFeeRecipientId = fungibleTransfers.feeRecipientId;\n        fungibleTransfers.executions[index].stateUpdate = StateUpdate({\n            trader: fungibleTransfers.makers[makerId],\n            hash: orderHash,\n            index: listing.index,\n            value: takerAmount,\n            maxAmount: listing.amount\n        });\n        if (makerIsSeller) {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    makerFeeAmount;\n            }\n        } else {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    takerFeeAmount;\n            }\n        }\n        fungibleTransfers.executions[index].makerFeeAmount = makerFeeAmount;\n        fungibleTransfers.executions[index].takerFeeAmount = takerFeeAmount;\n        fungibleTransfers.executions[index].protocolFeeAmount = protocolFeeAmount;\n    }\n\n    /**\n     * @notice Set the addresses of the maker fee recipient and order maker if different than currently being batched\n     * @param fungibleTransfers Fungible transfers struct\n     * @param order Parent order of listing being added to the batch\n     */\n    function _setAddresses(\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order\n    ) internal pure {\n        address feeRecipient = order.makerFee.recipient;\n        uint256 feeRecipientId = fungibleTransfers.feeRecipientId;\n        address currentFeeRecipient = fungibleTransfers.feeRecipients[feeRecipientId];\n        if (feeRecipient != currentFeeRecipient) {\n            if (currentFeeRecipient == address(0)) {\n                fungibleTransfers.feeRecipients[feeRecipientId] = feeRecipient;\n            } else {\n                unchecked {\n                    fungibleTransfers.feeRecipients[++feeRecipientId] = feeRecipient;\n                }\n                fungibleTransfers.feeRecipientId = feeRecipientId;\n            }\n        }\n        address trader = order.trader;\n        uint256 makerId = fungibleTransfers.makerId;\n        address currentTrader = fungibleTransfers.makers[makerId];\n        if (trader != currentTrader) {\n            if (currentTrader == address(0)) {\n                fungibleTransfers.makers[makerId] = trader;\n            } else {\n                unchecked {\n                    fungibleTransfers.makers[++makerId] = trader;\n                }\n                fungibleTransfers.makerId = makerId;\n            }\n        }\n    }\n\n    /**\n     * @notice Compute all necessary fees to be taken\n     * @param pricePerToken Price per token unit\n     * @param takerAmount Number of token units taken (should only be greater than 1 for ERC1155)\n     * @param fees Protocol and taker fee set by the transaction\n     */\n    function _computeFees(\n        uint256 pricePerToken,\n        uint256 takerAmount,\n        FeeRate memory makerFee,\n        Fees memory fees\n    )\n        internal\n        pure\n        returns (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        )\n    {\n        totalPrice = pricePerToken * takerAmount;\n        makerFeeAmount = (totalPrice * makerFee.rate) / _BASIS_POINTS;\n        takerFeeAmount = (totalPrice * fees.takerFee.rate) / _BASIS_POINTS;\n        protocolFeeAmount = (totalPrice * fees.protocolFee.rate) / _BASIS_POINTS;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Execute the transfers by first attempting the nonfungible transfers, for the successful transfers sum the fungible transfers by the recipients and execute\n     * @param executionBatch Execution batch struct\n     * @param fungibleTransfers Fungible transfers struct\n     * @param fees Protocol, maker, taker fees (note: makerFee will be inaccurate at this point in execution)\n     * @param orderType Order type\n     */\n    function _executeBatchTransfer(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        uint256 batchLength;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            batchLength := mload(add(calldataPointer, ExecutionBatch_length_offset))\n        }\n        if (batchLength > 0) {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(\n                executionBatch,\n                batchLength\n            );\n\n            uint256 transfersLength = successfulTransfers.length;\n            for (uint256 i; i < transfersLength; ) {\n                if (successfulTransfers[i]) {\n                    AtomicExecution memory execution = fungibleTransfers.executions[i];\n                    FeeRate memory makerFee;\n                    uint256 price;\n                    unchecked {\n                        if (orderType == OrderType.ASK) {\n                            fungibleTransfers.makerTransfers[execution.makerId] += execution\n                                .sellerAmount; // amount that needs to be sent *to* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount;\n                        } else {\n                            fungibleTransfers.makerTransfers[execution.makerId] +=\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount +\n                                execution.takerFeeAmount +\n                                execution.sellerAmount; // amount that needs to be taken *from* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.takerFeeAmount;\n                        }\n                        fungibleTransfers.totalSellerTransfer += execution.sellerAmount; // only for bids\n                        fungibleTransfers.totalProtocolFee += execution.protocolFeeAmount;\n                        fungibleTransfers.totalTakerFee += execution.takerFeeAmount;\n                        fungibleTransfers.feeTransfers[execution.makerFeeRecipientId] += execution\n                            .makerFeeAmount;\n                        makerFee = FeeRate(\n                            fungibleTransfers.feeRecipients[execution.makerFeeRecipientId],\n                            uint16((execution.makerFeeAmount * _BASIS_POINTS) / price)\n                        );\n                    }\n\n                    /* Commit state updates. */\n                    StateUpdate memory stateUpdate = fungibleTransfers.executions[i].stateUpdate;\n                    {\n                        address trader = stateUpdate.trader;\n                        bytes32 hash = stateUpdate.hash;\n                        uint256 index = stateUpdate.index;\n                        uint256 _amountTaken = amountTaken[trader][hash][index];\n                        uint256 newAmountTaken = _amountTaken + stateUpdate.value;\n\n                        /* Overfulfilled Listings should be caught prior to inserting into the batch, but this check prevents any misuse. */\n                        if (newAmountTaken <= stateUpdate.maxAmount) {\n                            amountTaken[trader][hash][index] = newAmountTaken;\n                        } else {\n                            revert OrderFulfilled();\n                        }\n                    }\n\n                    _emitExecutionEventFromBatch(\n                        executionBatch,\n                        price,\n                        makerFee,\n                        fees,\n                        stateUpdate,\n                        orderType,\n                        i\n                    );\n                }\n\n                unchecked {\n                    ++i;\n                }\n            }\n\n            if (orderType == OrderType.ASK) {\n                /* Transfer the payments to the sellers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferETH(fungibleTransfers.makers[i], fungibleTransfers.makerTransfers[i]);\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferETH(\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferETH(fees.protocolFee.recipient, fungibleTransfers.totalProtocolFee);\n\n                /* Transfer the taker fees. */\n                _transferETH(fees.takerFee.recipient, fungibleTransfers.totalTakerFee);\n            } else {\n                /* Take the pool funds from the buyers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferPool(\n                        fungibleTransfers.makers[i],\n                        address(this),\n                        fungibleTransfers.makerTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the payment to the seller. */\n                _transferPool(address(this), msg.sender, fungibleTransfers.totalSellerTransfer);\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferPool(\n                        address(this),\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferPool(\n                    address(this),\n                    fees.protocolFee.recipient,\n                    fungibleTransfers.totalProtocolFee\n                );\n\n                /* Transfer the taker fees. */\n                _transferPool(\n                    address(this),\n                    fees.takerFee.recipient,\n                    fungibleTransfers.totalTakerFee\n                );\n            }\n        }\n    }\n\n    /**\n     * @notice Attempt to execute a series of nonfungible transfers through the delegate; reverts will be skipped\n     * @param executionBatch Execution batch struct\n     * @param batchIndex Current available transfer slot in the batch\n     * @return Array indicating which transfers were successful\n     */\n    function _executeNonfungibleTransfers(\n        bytes memory executionBatch,\n        uint256 batchIndex\n    ) internal returns (bool[] memory) {\n        address delegate = _DELEGATE;\n\n        /* Initialize the memory space for the successful transfers array returned from the Delegate call. */\n        uint256 successfulTransfersPointer;\n        assembly {\n            successfulTransfersPointer := mload(Memory_pointer)\n            /* Need to shift the free memory pointer ahead one word to account for the array pointer returned from the call. */\n            mstore(Memory_pointer, add(successfulTransfersPointer, One_word))\n        }\n\n        bool[] memory successfulTransfers = new bool[](batchIndex);\n        assembly {\n            let size := mload(executionBatch)\n            let selectorPointer := add(executionBatch, ExecutionBatch_selector_offset)\n            mstore(selectorPointer, shr(Bytes4_shift, Delegate_transfer_selector))\n            let success := call(\n                gas(),\n                delegate,\n                0,\n                add(selectorPointer, Delegate_transfer_calldata_offset),\n                sub(size, Delegate_transfer_calldata_offset),\n                successfulTransfersPointer,\n                add(0x40, mul(batchIndex, One_word))\n            )\n        }\n        return successfulTransfers;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        TRANSFER FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Transfer ETH\n     * @param to Recipient address\n     * @param amount Amount of ETH to send\n     */\n    function _transferETH(address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            assembly {\n                success := call(gas(), to, amount, 0, 0, 0, 0)\n            }\n            if (!success) {\n                revert ETHTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Transfer pool funds on behalf of a user\n     * @param from Sender address\n     * @param to Recipient address\n     * @param amount Amount to send\n     */\n    function _transferPool(address from, address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            address pool = _POOL;\n            assembly {\n                let x := mload(Memory_pointer)\n                mstore(x, ERC20_transferFrom_selector)\n                mstore(add(x, ERC20_transferFrom_from_offset), from)\n                mstore(add(x, ERC20_transferFrom_to_offset), to)\n                mstore(add(x, ERC20_transferFrom_amount_offset), amount)\n                success := call(gas(), pool, 0, x, ERC20_transferFrom_size, 0, 0)\n            }\n            if (!success) {\n                revert PoolTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Deposit ETH to user's pool funds\n     * @param to Recipient address\n     * @param amount Amount of ETH to deposit\n     */\n    function _depositPool(address to, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_deposit_selector)\n            mstore(add(x, Pool_deposit_user_offset), to)\n            success := call(gas(), pool, amount, x, Pool_deposit_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolDepositFailed();\n        }\n    }\n\n    /**\n     * @notice Withdraw ETH from user's pool funds\n     * @param from Address to withdraw from\n     * @param amount Amount of ETH to withdraw\n     */\n    function _withdrawFromPool(address from, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_withdrawFrom_selector)\n            mstore(add(x, Pool_withdrawFrom_from_offset), from)\n            mstore(add(x, Pool_withdrawFrom_to_offset), address())\n            mstore(add(x, Pool_withdrawFrom_amount_offset), amount)\n            success := call(gas(), pool, 0, x, Pool_withdrawFrom_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolWithdrawFromFailed();\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EVENT EMITTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param price Price of the token purchased\n     * @param fees Protocol, maker, and taker fees taken\n     * @param stateUpdate Fulfillment to be recorded with a successful execution\n     * @param orderType Order type\n     * @param transferIndex Index of the transfer corresponding to the execution\n     */\n    function _emitExecutionEventFromBatch(\n        bytes memory executionBatch,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        StateUpdate memory stateUpdate,\n        OrderType orderType,\n        uint256 transferIndex\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            stateUpdate.hash,\n            stateUpdate.index,\n            price,\n            makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    /**\n     * @notice Emit the Execution event that minimizes the number of bytes in the log\n     * @param transfer The nft transfer\n     * @param orderHash Order hash\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param makerFee Maker fees taken\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitOptimalExecutionEvent(\n        Transfer memory transfer,\n        bytes32 orderHash,\n        uint256 listingIndex,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        if (\n            // see _insertNonfungibleTransfer; ERC721 transfers don't set the transfer amount,\n            // so we can assume the transfer amount and not check it\n            transfer.assetType == AssetType.ERC721 &&\n            fees.protocolFee.rate == 0 &&\n            transfer.id < 1 << (11 * 8) &&\n            listingIndex < 1 << (1 * 8) &&\n            price < 1 << (11 * 8)\n        ) {\n            if (makerFee.rate == 0 && fees.takerFee.rate == 0) {\n                emit Execution721Packed(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection)\n                );\n                return;\n            } else if (makerFee.rate == 0) {\n                emit Execution721TakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(fees.takerFee)\n                );\n                return;\n            } else if (fees.takerFee.rate == 0) {\n                emit Execution721MakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(makerFee)\n                );\n                return;\n            }\n        }\n\n        emit Execution({\n            transfer: transfer,\n            orderHash: orderHash,\n            listingIndex: listingIndex,\n            price: price,\n            makerFee: makerFee,\n            fees: fees,\n            orderType: orderType\n        });\n    }\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param order Order being fulfilled\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitExecutionEvent(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 listingIndex,\n        uint256 price,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(calldataPointer, add(transfersOffset, One_word))\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            bytes32(order.salt),\n            listingIndex,\n            price,\n            order.makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    function packTokenIdListingIndexTrader(\n        uint256 tokenId,\n        uint256 listingIndex,\n        address trader\n    ) private pure returns (uint256) {\n        return (tokenId << (21 * 8)) | (listingIndex << (20 * 8)) | uint160(trader);\n    }\n\n    function packTypePriceCollection(\n        OrderType orderType,\n        uint256 price,\n        address collection\n    ) private pure returns (uint256) {\n        return (uint256(orderType) << (31 * 8)) | (price << (20 * 8)) | uint160(collection);\n    }\n\n    function packFee(FeeRate memory fee) private pure returns (uint256) {\n        return (uint256(fee.rate) << (20 * 8)) | uint160(fee.recipient);\n    }\n\n    uint256[50] private __gap;\n}", 'modifiers': [], 'stateMutability': 'payable', 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Executor._insertExecutionAsk', 'start_line': 1671, 'end_line': 1720, 'offset_start': 61051, 'offset_end': 62606, 'content': 'function _insertExecutionAsk(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees,\n        uint256 remainingETH\n    ) internal pure returns (uint256, bool) {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        /* Only insert the executions if there are sufficient funds to execute. */\n        if (remainingETH >= totalPrice + takerFeeAmount) {\n            unchecked {\n                remainingETH = remainingETH - totalPrice - takerFeeAmount;\n            }\n\n            _setAddresses(fungibleTransfers, order);\n\n            uint256 index = _insertNonfungibleTransfer(\n                executionBatch,\n                order,\n                exchange.listing.tokenId,\n                takerAmount\n            );\n\n            _insertFungibleTransfers(\n                fungibleTransfers,\n                takerAmount,\n                exchange.listing,\n                bytes32(order.salt),\n                index,\n                totalPrice,\n                protocolFeeAmount,\n                makerFeeAmount,\n                takerFeeAmount,\n                true\n            );\n\n            return (remainingETH, true);\n        } else {\n            return (remainingETH, false);\n        }\n    }', 'contract_name': 'Executor', 'contract_code': "{\n    address private immutable _DELEGATE;\n    address private immutable _POOL;\n\n    constructor(address delegate, address pool, address proxy) Validation(proxy) {\n        _DELEGATE = delegate;\n        _POOL = pool;\n    }\n\n    receive() external payable {\n        if (msg.sender != _POOL) {\n            revert Unauthorized();\n        }\n    }\n\n    /**\n     * @notice Insert a validated ask listing into the batch if there's sufficient ETH to fulfill\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing the listing to insert\n     * @param fees Protocol and taker fees\n     * @param remainingETH Available ETH remaining\n     * @return Available ETH remaining after insertion; if the listing was inserted in the batch\n     */\n    function _insertExecutionAsk(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees,\n        uint256 remainingETH\n    ) internal pure returns (uint256, bool) {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        /* Only insert the executions if there are sufficient funds to execute. */\n        if (remainingETH >= totalPrice + takerFeeAmount) {\n            unchecked {\n                remainingETH = remainingETH - totalPrice - takerFeeAmount;\n            }\n\n            _setAddresses(fungibleTransfers, order);\n\n            uint256 index = _insertNonfungibleTransfer(\n                executionBatch,\n                order,\n                exchange.listing.tokenId,\n                takerAmount\n            );\n\n            _insertFungibleTransfers(\n                fungibleTransfers,\n                takerAmount,\n                exchange.listing,\n                bytes32(order.salt),\n                index,\n                totalPrice,\n                protocolFeeAmount,\n                makerFeeAmount,\n                takerFeeAmount,\n                true\n            );\n\n            return (remainingETH, true);\n        } else {\n            return (remainingETH, false);\n        }\n    }\n\n    /**\n     * @notice Insert a validated bid listing into the batch\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing listing to insert\n     * @param fees Protocol and taker fees\n     */\n    function _insertExecutionBid(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees\n    ) internal pure {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        _setAddresses(fungibleTransfers, order);\n\n        uint256 index = _insertNonfungibleTransfer(\n            executionBatch,\n            order,\n            exchange.taker.tokenId,\n            takerAmount\n        );\n\n        _insertFungibleTransfers(\n            fungibleTransfers,\n            takerAmount,\n            exchange.listing,\n            bytes32(order.salt),\n            index,\n            totalPrice,\n            protocolFeeAmount,\n            makerFeeAmount,\n            takerFeeAmount,\n            false\n        );\n    }\n\n    /**\n     * @notice Insert the nonfungible transfer into the batch\n     * @param executionBatch Execution batch\n     * @param order Order\n     * @param tokenId Token id\n     * @param amount Number of token units\n     * @return transferIndex Index of the transfer\n     */\n    function _insertNonfungibleTransfer(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 tokenId,\n        uint256 amount\n    ) internal pure returns (uint256 transferIndex) {\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            transferIndex := mload(add(calldataPointer, ExecutionBatch_length_offset))\n\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            let transferPointer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n            mstore(\n                add(transferPointer, Transfer_trader_offset),\n                mload(add(order, Order_trader_offset))\n            ) // set the trader\n            mstore(add(transferPointer, Transfer_id_offset), tokenId) // set the token id\n            mstore(\n                add(transferPointer, Transfer_collection_offset),\n                mload(add(order, Order_collection_offset))\n            ) // set the collection\n            mstore(\n                add(transferPointer, Transfer_assetType_offset),\n                mload(add(order, Order_assetType_offset))\n            ) // set the asset type\n            mstore(add(calldataPointer, ExecutionBatch_length_offset), add(transferIndex, 1)) // increment the batch length\n\n            if eq(mload(add(order, Order_assetType_offset)), AssetType_ERC1155) {\n                mstore(add(transferPointer, Transfer_amount_offset), amount) // set the amount (don't need to set for ERC721's)\n            }\n        }\n    }\n\n    /**\n     * @notice Insert the fungible transfers that need to be executed atomically\n     * @param fungibleTransfers Fungible transfers struct\n     * @param takerAmount Amount of the listing being taken\n     * @param listing Listing to execute\n     * @param orderHash Order hash\n     * @param index Execution index\n     * @param totalPrice Total price of the purchased tokens\n     * @param protocolFeeAmount Computed protocol fee\n     * @param makerFeeAmount Computed maker fee\n     * @param takerFeeAmount Computed taker fee\n     * @param makerIsSeller Is the order maker the seller\n     */\n    function _insertFungibleTransfers(\n        FungibleTransfers memory fungibleTransfers,\n        uint256 takerAmount,\n        Listing memory listing,\n        bytes32 orderHash,\n        uint256 index,\n        uint256 totalPrice,\n        uint256 protocolFeeAmount,\n        uint256 makerFeeAmount,\n        uint256 takerFeeAmount,\n        bool makerIsSeller\n    ) internal pure {\n        uint256 makerId = fungibleTransfers.makerId;\n        fungibleTransfers.executions[index].makerId = makerId;\n        fungibleTransfers.executions[index].makerFeeRecipientId = fungibleTransfers.feeRecipientId;\n        fungibleTransfers.executions[index].stateUpdate = StateUpdate({\n            trader: fungibleTransfers.makers[makerId],\n            hash: orderHash,\n            index: listing.index,\n            value: takerAmount,\n            maxAmount: listing.amount\n        });\n        if (makerIsSeller) {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    makerFeeAmount;\n            }\n        } else {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    takerFeeAmount;\n            }\n        }\n        fungibleTransfers.executions[index].makerFeeAmount = makerFeeAmount;\n        fungibleTransfers.executions[index].takerFeeAmount = takerFeeAmount;\n        fungibleTransfers.executions[index].protocolFeeAmount = protocolFeeAmount;\n    }\n\n    /**\n     * @notice Set the addresses of the maker fee recipient and order maker if different than currently being batched\n     * @param fungibleTransfers Fungible transfers struct\n     * @param order Parent order of listing being added to the batch\n     */\n    function _setAddresses(\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order\n    ) internal pure {\n        address feeRecipient = order.makerFee.recipient;\n        uint256 feeRecipientId = fungibleTransfers.feeRecipientId;\n        address currentFeeRecipient = fungibleTransfers.feeRecipients[feeRecipientId];\n        if (feeRecipient != currentFeeRecipient) {\n            if (currentFeeRecipient == address(0)) {\n                fungibleTransfers.feeRecipients[feeRecipientId] = feeRecipient;\n            } else {\n                unchecked {\n                    fungibleTransfers.feeRecipients[++feeRecipientId] = feeRecipient;\n                }\n                fungibleTransfers.feeRecipientId = feeRecipientId;\n            }\n        }\n        address trader = order.trader;\n        uint256 makerId = fungibleTransfers.makerId;\n        address currentTrader = fungibleTransfers.makers[makerId];\n        if (trader != currentTrader) {\n            if (currentTrader == address(0)) {\n                fungibleTransfers.makers[makerId] = trader;\n            } else {\n                unchecked {\n                    fungibleTransfers.makers[++makerId] = trader;\n                }\n                fungibleTransfers.makerId = makerId;\n            }\n        }\n    }\n\n    /**\n     * @notice Compute all necessary fees to be taken\n     * @param pricePerToken Price per token unit\n     * @param takerAmount Number of token units taken (should only be greater than 1 for ERC1155)\n     * @param fees Protocol and taker fee set by the transaction\n     */\n    function _computeFees(\n        uint256 pricePerToken,\n        uint256 takerAmount,\n        FeeRate memory makerFee,\n        Fees memory fees\n    )\n        internal\n        pure\n        returns (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        )\n    {\n        totalPrice = pricePerToken * takerAmount;\n        makerFeeAmount = (totalPrice * makerFee.rate) / _BASIS_POINTS;\n        takerFeeAmount = (totalPrice * fees.takerFee.rate) / _BASIS_POINTS;\n        protocolFeeAmount = (totalPrice * fees.protocolFee.rate) / _BASIS_POINTS;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Execute the transfers by first attempting the nonfungible transfers, for the successful transfers sum the fungible transfers by the recipients and execute\n     * @param executionBatch Execution batch struct\n     * @param fungibleTransfers Fungible transfers struct\n     * @param fees Protocol, maker, taker fees (note: makerFee will be inaccurate at this point in execution)\n     * @param orderType Order type\n     */\n    function _executeBatchTransfer(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        uint256 batchLength;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            batchLength := mload(add(calldataPointer, ExecutionBatch_length_offset))\n        }\n        if (batchLength > 0) {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(\n                executionBatch,\n                batchLength\n            );\n\n            uint256 transfersLength = successfulTransfers.length;\n            for (uint256 i; i < transfersLength; ) {\n                if (successfulTransfers[i]) {\n                    AtomicExecution memory execution = fungibleTransfers.executions[i];\n                    FeeRate memory makerFee;\n                    uint256 price;\n                    unchecked {\n                        if (orderType == OrderType.ASK) {\n                            fungibleTransfers.makerTransfers[execution.makerId] += execution\n                                .sellerAmount; // amount that needs to be sent *to* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount;\n                        } else {\n                            fungibleTransfers.makerTransfers[execution.makerId] +=\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount +\n                                execution.takerFeeAmount +\n                                execution.sellerAmount; // amount that needs to be taken *from* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.takerFeeAmount;\n                        }\n                        fungibleTransfers.totalSellerTransfer += execution.sellerAmount; // only for bids\n                        fungibleTransfers.totalProtocolFee += execution.protocolFeeAmount;\n                        fungibleTransfers.totalTakerFee += execution.takerFeeAmount;\n                        fungibleTransfers.feeTransfers[execution.makerFeeRecipientId] += execution\n                            .makerFeeAmount;\n                        makerFee = FeeRate(\n                            fungibleTransfers.feeRecipients[execution.makerFeeRecipientId],\n                            uint16((execution.makerFeeAmount * _BASIS_POINTS) / price)\n                        );\n                    }\n\n                    /* Commit state updates. */\n                    StateUpdate memory stateUpdate = fungibleTransfers.executions[i].stateUpdate;\n                    {\n                        address trader = stateUpdate.trader;\n                        bytes32 hash = stateUpdate.hash;\n                        uint256 index = stateUpdate.index;\n                        uint256 _amountTaken = amountTaken[trader][hash][index];\n                        uint256 newAmountTaken = _amountTaken + stateUpdate.value;\n\n                        /* Overfulfilled Listings should be caught prior to inserting into the batch, but this check prevents any misuse. */\n                        if (newAmountTaken <= stateUpdate.maxAmount) {\n                            amountTaken[trader][hash][index] = newAmountTaken;\n                        } else {\n                            revert OrderFulfilled();\n                        }\n                    }\n\n                    _emitExecutionEventFromBatch(\n                        executionBatch,\n                        price,\n                        makerFee,\n                        fees,\n                        stateUpdate,\n                        orderType,\n                        i\n                    );\n                }\n\n                unchecked {\n                    ++i;\n                }\n            }\n\n            if (orderType == OrderType.ASK) {\n                /* Transfer the payments to the sellers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferETH(fungibleTransfers.makers[i], fungibleTransfers.makerTransfers[i]);\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferETH(\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferETH(fees.protocolFee.recipient, fungibleTransfers.totalProtocolFee);\n\n                /* Transfer the taker fees. */\n                _transferETH(fees.takerFee.recipient, fungibleTransfers.totalTakerFee);\n            } else {\n                /* Take the pool funds from the buyers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferPool(\n                        fungibleTransfers.makers[i],\n                        address(this),\n                        fungibleTransfers.makerTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the payment to the seller. */\n                _transferPool(address(this), msg.sender, fungibleTransfers.totalSellerTransfer);\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferPool(\n                        address(this),\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferPool(\n                    address(this),\n                    fees.protocolFee.recipient,\n                    fungibleTransfers.totalProtocolFee\n                );\n\n                /* Transfer the taker fees. */\n                _transferPool(\n                    address(this),\n                    fees.takerFee.recipient,\n                    fungibleTransfers.totalTakerFee\n                );\n            }\n        }\n    }\n\n    /**\n     * @notice Attempt to execute a series of nonfungible transfers through the delegate; reverts will be skipped\n     * @param executionBatch Execution batch struct\n     * @param batchIndex Current available transfer slot in the batch\n     * @return Array indicating which transfers were successful\n     */\n    function _executeNonfungibleTransfers(\n        bytes memory executionBatch,\n        uint256 batchIndex\n    ) internal returns (bool[] memory) {\n        address delegate = _DELEGATE;\n\n        /* Initialize the memory space for the successful transfers array returned from the Delegate call. */\n        uint256 successfulTransfersPointer;\n        assembly {\n            successfulTransfersPointer := mload(Memory_pointer)\n            /* Need to shift the free memory pointer ahead one word to account for the array pointer returned from the call. */\n            mstore(Memory_pointer, add(successfulTransfersPointer, One_word))\n        }\n\n        bool[] memory successfulTransfers = new bool[](batchIndex);\n        assembly {\n            let size := mload(executionBatch)\n            let selectorPointer := add(executionBatch, ExecutionBatch_selector_offset)\n            mstore(selectorPointer, shr(Bytes4_shift, Delegate_transfer_selector))\n            let success := call(\n                gas(),\n                delegate,\n                0,\n                add(selectorPointer, Delegate_transfer_calldata_offset),\n                sub(size, Delegate_transfer_calldata_offset),\n                successfulTransfersPointer,\n                add(0x40, mul(batchIndex, One_word))\n            )\n        }\n        return successfulTransfers;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        TRANSFER FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Transfer ETH\n     * @param to Recipient address\n     * @param amount Amount of ETH to send\n     */\n    function _transferETH(address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            assembly {\n                success := call(gas(), to, amount, 0, 0, 0, 0)\n            }\n            if (!success) {\n                revert ETHTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Transfer pool funds on behalf of a user\n     * @param from Sender address\n     * @param to Recipient address\n     * @param amount Amount to send\n     */\n    function _transferPool(address from, address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            address pool = _POOL;\n            assembly {\n                let x := mload(Memory_pointer)\n                mstore(x, ERC20_transferFrom_selector)\n                mstore(add(x, ERC20_transferFrom_from_offset), from)\n                mstore(add(x, ERC20_transferFrom_to_offset), to)\n                mstore(add(x, ERC20_transferFrom_amount_offset), amount)\n                success := call(gas(), pool, 0, x, ERC20_transferFrom_size, 0, 0)\n            }\n            if (!success) {\n                revert PoolTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Deposit ETH to user's pool funds\n     * @param to Recipient address\n     * @param amount Amount of ETH to deposit\n     */\n    function _depositPool(address to, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_deposit_selector)\n            mstore(add(x, Pool_deposit_user_offset), to)\n            success := call(gas(), pool, amount, x, Pool_deposit_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolDepositFailed();\n        }\n    }\n\n    /**\n     * @notice Withdraw ETH from user's pool funds\n     * @param from Address to withdraw from\n     * @param amount Amount of ETH to withdraw\n     */\n    function _withdrawFromPool(address from, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_withdrawFrom_selector)\n            mstore(add(x, Pool_withdrawFrom_from_offset), from)\n            mstore(add(x, Pool_withdrawFrom_to_offset), address())\n            mstore(add(x, Pool_withdrawFrom_amount_offset), amount)\n            success := call(gas(), pool, 0, x, Pool_withdrawFrom_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolWithdrawFromFailed();\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EVENT EMITTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param price Price of the token purchased\n     * @param fees Protocol, maker, and taker fees taken\n     * @param stateUpdate Fulfillment to be recorded with a successful execution\n     * @param orderType Order type\n     * @param transferIndex Index of the transfer corresponding to the execution\n     */\n    function _emitExecutionEventFromBatch(\n        bytes memory executionBatch,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        StateUpdate memory stateUpdate,\n        OrderType orderType,\n        uint256 transferIndex\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            stateUpdate.hash,\n            stateUpdate.index,\n            price,\n            makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    /**\n     * @notice Emit the Execution event that minimizes the number of bytes in the log\n     * @param transfer The nft transfer\n     * @param orderHash Order hash\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param makerFee Maker fees taken\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitOptimalExecutionEvent(\n        Transfer memory transfer,\n        bytes32 orderHash,\n        uint256 listingIndex,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        if (\n            // see _insertNonfungibleTransfer; ERC721 transfers don't set the transfer amount,\n            // so we can assume the transfer amount and not check it\n            transfer.assetType == AssetType.ERC721 &&\n            fees.protocolFee.rate == 0 &&\n            transfer.id < 1 << (11 * 8) &&\n            listingIndex < 1 << (1 * 8) &&\n            price < 1 << (11 * 8)\n        ) {\n            if (makerFee.rate == 0 && fees.takerFee.rate == 0) {\n                emit Execution721Packed(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection)\n                );\n                return;\n            } else if (makerFee.rate == 0) {\n                emit Execution721TakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(fees.takerFee)\n                );\n                return;\n            } else if (fees.takerFee.rate == 0) {\n                emit Execution721MakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(makerFee)\n                );\n                return;\n            }\n        }\n\n        emit Execution({\n            transfer: transfer,\n            orderHash: orderHash,\n            listingIndex: listingIndex,\n            price: price,\n            makerFee: makerFee,\n            fees: fees,\n            orderType: orderType\n        });\n    }\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param order Order being fulfilled\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitExecutionEvent(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 listingIndex,\n        uint256 price,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(calldataPointer, add(transfersOffset, One_word))\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            bytes32(order.salt),\n            listingIndex,\n            price,\n            order.makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    function packTokenIdListingIndexTrader(\n        uint256 tokenId,\n        uint256 listingIndex,\n        address trader\n    ) private pure returns (uint256) {\n        return (tokenId << (21 * 8)) | (listingIndex << (20 * 8)) | uint160(trader);\n    }\n\n    function packTypePriceCollection(\n        OrderType orderType,\n        uint256 price,\n        address collection\n    ) private pure returns (uint256) {\n        return (uint256(orderType) << (31 * 8)) | (price << (20 * 8)) | uint160(collection);\n    }\n\n    function packFee(FeeRate memory fee) private pure returns (uint256) {\n        return (uint256(fee.rate) << (20 * 8)) | uint160(fee.recipient);\n    }\n\n    uint256[50] private __gap;\n}", 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Executor._insertExecutionBid', 'start_line': 1730, 'end_line': 1767, 'offset_start': 62941, 'offset_end': 63998, 'content': 'function _insertExecutionBid(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees\n    ) internal pure {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        _setAddresses(fungibleTransfers, order);\n\n        uint256 index = _insertNonfungibleTransfer(\n            executionBatch,\n            order,\n            exchange.taker.tokenId,\n            takerAmount\n        );\n\n        _insertFungibleTransfers(\n            fungibleTransfers,\n            takerAmount,\n            exchange.listing,\n            bytes32(order.salt),\n            index,\n            totalPrice,\n            protocolFeeAmount,\n            makerFeeAmount,\n            takerFeeAmount,\n            false\n        );\n    }', 'contract_name': 'Executor', 'contract_code': "{\n    address private immutable _DELEGATE;\n    address private immutable _POOL;\n\n    constructor(address delegate, address pool, address proxy) Validation(proxy) {\n        _DELEGATE = delegate;\n        _POOL = pool;\n    }\n\n    receive() external payable {\n        if (msg.sender != _POOL) {\n            revert Unauthorized();\n        }\n    }\n\n    /**\n     * @notice Insert a validated ask listing into the batch if there's sufficient ETH to fulfill\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing the listing to insert\n     * @param fees Protocol and taker fees\n     * @param remainingETH Available ETH remaining\n     * @return Available ETH remaining after insertion; if the listing was inserted in the batch\n     */\n    function _insertExecutionAsk(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees,\n        uint256 remainingETH\n    ) internal pure returns (uint256, bool) {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        /* Only insert the executions if there are sufficient funds to execute. */\n        if (remainingETH >= totalPrice + takerFeeAmount) {\n            unchecked {\n                remainingETH = remainingETH - totalPrice - takerFeeAmount;\n            }\n\n            _setAddresses(fungibleTransfers, order);\n\n            uint256 index = _insertNonfungibleTransfer(\n                executionBatch,\n                order,\n                exchange.listing.tokenId,\n                takerAmount\n            );\n\n            _insertFungibleTransfers(\n                fungibleTransfers,\n                takerAmount,\n                exchange.listing,\n                bytes32(order.salt),\n                index,\n                totalPrice,\n                protocolFeeAmount,\n                makerFeeAmount,\n                takerFeeAmount,\n                true\n            );\n\n            return (remainingETH, true);\n        } else {\n            return (remainingETH, false);\n        }\n    }\n\n    /**\n     * @notice Insert a validated bid listing into the batch\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing listing to insert\n     * @param fees Protocol and taker fees\n     */\n    function _insertExecutionBid(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees\n    ) internal pure {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        _setAddresses(fungibleTransfers, order);\n\n        uint256 index = _insertNonfungibleTransfer(\n            executionBatch,\n            order,\n            exchange.taker.tokenId,\n            takerAmount\n        );\n\n        _insertFungibleTransfers(\n            fungibleTransfers,\n            takerAmount,\n            exchange.listing,\n            bytes32(order.salt),\n            index,\n            totalPrice,\n            protocolFeeAmount,\n            makerFeeAmount,\n            takerFeeAmount,\n            false\n        );\n    }\n\n    /**\n     * @notice Insert the nonfungible transfer into the batch\n     * @param executionBatch Execution batch\n     * @param order Order\n     * @param tokenId Token id\n     * @param amount Number of token units\n     * @return transferIndex Index of the transfer\n     */\n    function _insertNonfungibleTransfer(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 tokenId,\n        uint256 amount\n    ) internal pure returns (uint256 transferIndex) {\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            transferIndex := mload(add(calldataPointer, ExecutionBatch_length_offset))\n\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            let transferPointer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n            mstore(\n                add(transferPointer, Transfer_trader_offset),\n                mload(add(order, Order_trader_offset))\n            ) // set the trader\n            mstore(add(transferPointer, Transfer_id_offset), tokenId) // set the token id\n            mstore(\n                add(transferPointer, Transfer_collection_offset),\n                mload(add(order, Order_collection_offset))\n            ) // set the collection\n            mstore(\n                add(transferPointer, Transfer_assetType_offset),\n                mload(add(order, Order_assetType_offset))\n            ) // set the asset type\n            mstore(add(calldataPointer, ExecutionBatch_length_offset), add(transferIndex, 1)) // increment the batch length\n\n            if eq(mload(add(order, Order_assetType_offset)), AssetType_ERC1155) {\n                mstore(add(transferPointer, Transfer_amount_offset), amount) // set the amount (don't need to set for ERC721's)\n            }\n        }\n    }\n\n    /**\n     * @notice Insert the fungible transfers that need to be executed atomically\n     * @param fungibleTransfers Fungible transfers struct\n     * @param takerAmount Amount of the listing being taken\n     * @param listing Listing to execute\n     * @param orderHash Order hash\n     * @param index Execution index\n     * @param totalPrice Total price of the purchased tokens\n     * @param protocolFeeAmount Computed protocol fee\n     * @param makerFeeAmount Computed maker fee\n     * @param takerFeeAmount Computed taker fee\n     * @param makerIsSeller Is the order maker the seller\n     */\n    function _insertFungibleTransfers(\n        FungibleTransfers memory fungibleTransfers,\n        uint256 takerAmount,\n        Listing memory listing,\n        bytes32 orderHash,\n        uint256 index,\n        uint256 totalPrice,\n        uint256 protocolFeeAmount,\n        uint256 makerFeeAmount,\n        uint256 takerFeeAmount,\n        bool makerIsSeller\n    ) internal pure {\n        uint256 makerId = fungibleTransfers.makerId;\n        fungibleTransfers.executions[index].makerId = makerId;\n        fungibleTransfers.executions[index].makerFeeRecipientId = fungibleTransfers.feeRecipientId;\n        fungibleTransfers.executions[index].stateUpdate = StateUpdate({\n            trader: fungibleTransfers.makers[makerId],\n            hash: orderHash,\n            index: listing.index,\n            value: takerAmount,\n            maxAmount: listing.amount\n        });\n        if (makerIsSeller) {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    makerFeeAmount;\n            }\n        } else {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    takerFeeAmount;\n            }\n        }\n        fungibleTransfers.executions[index].makerFeeAmount = makerFeeAmount;\n        fungibleTransfers.executions[index].takerFeeAmount = takerFeeAmount;\n        fungibleTransfers.executions[index].protocolFeeAmount = protocolFeeAmount;\n    }\n\n    /**\n     * @notice Set the addresses of the maker fee recipient and order maker if different than currently being batched\n     * @param fungibleTransfers Fungible transfers struct\n     * @param order Parent order of listing being added to the batch\n     */\n    function _setAddresses(\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order\n    ) internal pure {\n        address feeRecipient = order.makerFee.recipient;\n        uint256 feeRecipientId = fungibleTransfers.feeRecipientId;\n        address currentFeeRecipient = fungibleTransfers.feeRecipients[feeRecipientId];\n        if (feeRecipient != currentFeeRecipient) {\n            if (currentFeeRecipient == address(0)) {\n                fungibleTransfers.feeRecipients[feeRecipientId] = feeRecipient;\n            } else {\n                unchecked {\n                    fungibleTransfers.feeRecipients[++feeRecipientId] = feeRecipient;\n                }\n                fungibleTransfers.feeRecipientId = feeRecipientId;\n            }\n        }\n        address trader = order.trader;\n        uint256 makerId = fungibleTransfers.makerId;\n        address currentTrader = fungibleTransfers.makers[makerId];\n        if (trader != currentTrader) {\n            if (currentTrader == address(0)) {\n                fungibleTransfers.makers[makerId] = trader;\n            } else {\n                unchecked {\n                    fungibleTransfers.makers[++makerId] = trader;\n                }\n                fungibleTransfers.makerId = makerId;\n            }\n        }\n    }\n\n    /**\n     * @notice Compute all necessary fees to be taken\n     * @param pricePerToken Price per token unit\n     * @param takerAmount Number of token units taken (should only be greater than 1 for ERC1155)\n     * @param fees Protocol and taker fee set by the transaction\n     */\n    function _computeFees(\n        uint256 pricePerToken,\n        uint256 takerAmount,\n        FeeRate memory makerFee,\n        Fees memory fees\n    )\n        internal\n        pure\n        returns (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        )\n    {\n        totalPrice = pricePerToken * takerAmount;\n        makerFeeAmount = (totalPrice * makerFee.rate) / _BASIS_POINTS;\n        takerFeeAmount = (totalPrice * fees.takerFee.rate) / _BASIS_POINTS;\n        protocolFeeAmount = (totalPrice * fees.protocolFee.rate) / _BASIS_POINTS;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Execute the transfers by first attempting the nonfungible transfers, for the successful transfers sum the fungible transfers by the recipients and execute\n     * @param executionBatch Execution batch struct\n     * @param fungibleTransfers Fungible transfers struct\n     * @param fees Protocol, maker, taker fees (note: makerFee will be inaccurate at this point in execution)\n     * @param orderType Order type\n     */\n    function _executeBatchTransfer(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        uint256 batchLength;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            batchLength := mload(add(calldataPointer, ExecutionBatch_length_offset))\n        }\n        if (batchLength > 0) {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(\n                executionBatch,\n                batchLength\n            );\n\n            uint256 transfersLength = successfulTransfers.length;\n            for (uint256 i; i < transfersLength; ) {\n                if (successfulTransfers[i]) {\n                    AtomicExecution memory execution = fungibleTransfers.executions[i];\n                    FeeRate memory makerFee;\n                    uint256 price;\n                    unchecked {\n                        if (orderType == OrderType.ASK) {\n                            fungibleTransfers.makerTransfers[execution.makerId] += execution\n                                .sellerAmount; // amount that needs to be sent *to* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount;\n                        } else {\n                            fungibleTransfers.makerTransfers[execution.makerId] +=\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount +\n                                execution.takerFeeAmount +\n                                execution.sellerAmount; // amount that needs to be taken *from* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.takerFeeAmount;\n                        }\n                        fungibleTransfers.totalSellerTransfer += execution.sellerAmount; // only for bids\n                        fungibleTransfers.totalProtocolFee += execution.protocolFeeAmount;\n                        fungibleTransfers.totalTakerFee += execution.takerFeeAmount;\n                        fungibleTransfers.feeTransfers[execution.makerFeeRecipientId] += execution\n                            .makerFeeAmount;\n                        makerFee = FeeRate(\n                            fungibleTransfers.feeRecipients[execution.makerFeeRecipientId],\n                            uint16((execution.makerFeeAmount * _BASIS_POINTS) / price)\n                        );\n                    }\n\n                    /* Commit state updates. */\n                    StateUpdate memory stateUpdate = fungibleTransfers.executions[i].stateUpdate;\n                    {\n                        address trader = stateUpdate.trader;\n                        bytes32 hash = stateUpdate.hash;\n                        uint256 index = stateUpdate.index;\n                        uint256 _amountTaken = amountTaken[trader][hash][index];\n                        uint256 newAmountTaken = _amountTaken + stateUpdate.value;\n\n                        /* Overfulfilled Listings should be caught prior to inserting into the batch, but this check prevents any misuse. */\n                        if (newAmountTaken <= stateUpdate.maxAmount) {\n                            amountTaken[trader][hash][index] = newAmountTaken;\n                        } else {\n                            revert OrderFulfilled();\n                        }\n                    }\n\n                    _emitExecutionEventFromBatch(\n                        executionBatch,\n                        price,\n                        makerFee,\n                        fees,\n                        stateUpdate,\n                        orderType,\n                        i\n                    );\n                }\n\n                unchecked {\n                    ++i;\n                }\n            }\n\n            if (orderType == OrderType.ASK) {\n                /* Transfer the payments to the sellers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferETH(fungibleTransfers.makers[i], fungibleTransfers.makerTransfers[i]);\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferETH(\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferETH(fees.protocolFee.recipient, fungibleTransfers.totalProtocolFee);\n\n                /* Transfer the taker fees. */\n                _transferETH(fees.takerFee.recipient, fungibleTransfers.totalTakerFee);\n            } else {\n                /* Take the pool funds from the buyers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferPool(\n                        fungibleTransfers.makers[i],\n                        address(this),\n                        fungibleTransfers.makerTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the payment to the seller. */\n                _transferPool(address(this), msg.sender, fungibleTransfers.totalSellerTransfer);\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferPool(\n                        address(this),\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferPool(\n                    address(this),\n                    fees.protocolFee.recipient,\n                    fungibleTransfers.totalProtocolFee\n                );\n\n                /* Transfer the taker fees. */\n                _transferPool(\n                    address(this),\n                    fees.takerFee.recipient,\n                    fungibleTransfers.totalTakerFee\n                );\n            }\n        }\n    }\n\n    /**\n     * @notice Attempt to execute a series of nonfungible transfers through the delegate; reverts will be skipped\n     * @param executionBatch Execution batch struct\n     * @param batchIndex Current available transfer slot in the batch\n     * @return Array indicating which transfers were successful\n     */\n    function _executeNonfungibleTransfers(\n        bytes memory executionBatch,\n        uint256 batchIndex\n    ) internal returns (bool[] memory) {\n        address delegate = _DELEGATE;\n\n        /* Initialize the memory space for the successful transfers array returned from the Delegate call. */\n        uint256 successfulTransfersPointer;\n        assembly {\n            successfulTransfersPointer := mload(Memory_pointer)\n            /* Need to shift the free memory pointer ahead one word to account for the array pointer returned from the call. */\n            mstore(Memory_pointer, add(successfulTransfersPointer, One_word))\n        }\n\n        bool[] memory successfulTransfers = new bool[](batchIndex);\n        assembly {\n            let size := mload(executionBatch)\n            let selectorPointer := add(executionBatch, ExecutionBatch_selector_offset)\n            mstore(selectorPointer, shr(Bytes4_shift, Delegate_transfer_selector))\n            let success := call(\n                gas(),\n                delegate,\n                0,\n                add(selectorPointer, Delegate_transfer_calldata_offset),\n                sub(size, Delegate_transfer_calldata_offset),\n                successfulTransfersPointer,\n                add(0x40, mul(batchIndex, One_word))\n            )\n        }\n        return successfulTransfers;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        TRANSFER FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Transfer ETH\n     * @param to Recipient address\n     * @param amount Amount of ETH to send\n     */\n    function _transferETH(address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            assembly {\n                success := call(gas(), to, amount, 0, 0, 0, 0)\n            }\n            if (!success) {\n                revert ETHTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Transfer pool funds on behalf of a user\n     * @param from Sender address\n     * @param to Recipient address\n     * @param amount Amount to send\n     */\n    function _transferPool(address from, address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            address pool = _POOL;\n            assembly {\n                let x := mload(Memory_pointer)\n                mstore(x, ERC20_transferFrom_selector)\n                mstore(add(x, ERC20_transferFrom_from_offset), from)\n                mstore(add(x, ERC20_transferFrom_to_offset), to)\n                mstore(add(x, ERC20_transferFrom_amount_offset), amount)\n                success := call(gas(), pool, 0, x, ERC20_transferFrom_size, 0, 0)\n            }\n            if (!success) {\n                revert PoolTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Deposit ETH to user's pool funds\n     * @param to Recipient address\n     * @param amount Amount of ETH to deposit\n     */\n    function _depositPool(address to, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_deposit_selector)\n            mstore(add(x, Pool_deposit_user_offset), to)\n            success := call(gas(), pool, amount, x, Pool_deposit_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolDepositFailed();\n        }\n    }\n\n    /**\n     * @notice Withdraw ETH from user's pool funds\n     * @param from Address to withdraw from\n     * @param amount Amount of ETH to withdraw\n     */\n    function _withdrawFromPool(address from, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_withdrawFrom_selector)\n            mstore(add(x, Pool_withdrawFrom_from_offset), from)\n            mstore(add(x, Pool_withdrawFrom_to_offset), address())\n            mstore(add(x, Pool_withdrawFrom_amount_offset), amount)\n            success := call(gas(), pool, 0, x, Pool_withdrawFrom_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolWithdrawFromFailed();\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EVENT EMITTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param price Price of the token purchased\n     * @param fees Protocol, maker, and taker fees taken\n     * @param stateUpdate Fulfillment to be recorded with a successful execution\n     * @param orderType Order type\n     * @param transferIndex Index of the transfer corresponding to the execution\n     */\n    function _emitExecutionEventFromBatch(\n        bytes memory executionBatch,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        StateUpdate memory stateUpdate,\n        OrderType orderType,\n        uint256 transferIndex\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            stateUpdate.hash,\n            stateUpdate.index,\n            price,\n            makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    /**\n     * @notice Emit the Execution event that minimizes the number of bytes in the log\n     * @param transfer The nft transfer\n     * @param orderHash Order hash\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param makerFee Maker fees taken\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitOptimalExecutionEvent(\n        Transfer memory transfer,\n        bytes32 orderHash,\n        uint256 listingIndex,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        if (\n            // see _insertNonfungibleTransfer; ERC721 transfers don't set the transfer amount,\n            // so we can assume the transfer amount and not check it\n            transfer.assetType == AssetType.ERC721 &&\n            fees.protocolFee.rate == 0 &&\n            transfer.id < 1 << (11 * 8) &&\n            listingIndex < 1 << (1 * 8) &&\n            price < 1 << (11 * 8)\n        ) {\n            if (makerFee.rate == 0 && fees.takerFee.rate == 0) {\n                emit Execution721Packed(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection)\n                );\n                return;\n            } else if (makerFee.rate == 0) {\n                emit Execution721TakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(fees.takerFee)\n                );\n                return;\n            } else if (fees.takerFee.rate == 0) {\n                emit Execution721MakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(makerFee)\n                );\n                return;\n            }\n        }\n\n        emit Execution({\n            transfer: transfer,\n            orderHash: orderHash,\n            listingIndex: listingIndex,\n            price: price,\n            makerFee: makerFee,\n            fees: fees,\n            orderType: orderType\n        });\n    }\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param order Order being fulfilled\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitExecutionEvent(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 listingIndex,\n        uint256 price,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(calldataPointer, add(transfersOffset, One_word))\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            bytes32(order.salt),\n            listingIndex,\n            price,\n            order.makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    function packTokenIdListingIndexTrader(\n        uint256 tokenId,\n        uint256 listingIndex,\n        address trader\n    ) private pure returns (uint256) {\n        return (tokenId << (21 * 8)) | (listingIndex << (20 * 8)) | uint160(trader);\n    }\n\n    function packTypePriceCollection(\n        OrderType orderType,\n        uint256 price,\n        address collection\n    ) private pure returns (uint256) {\n        return (uint256(orderType) << (31 * 8)) | (price << (20 * 8)) | uint160(collection);\n    }\n\n    function packFee(FeeRate memory fee) private pure returns (uint256) {\n        return (uint256(fee.rate) << (20 * 8)) | uint160(fee.recipient);\n    }\n\n    uint256[50] private __gap;\n}", 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Executor._insertNonfungibleTransfer', 'start_line': 1777, 'end_line': 1811, 'offset_start': 64279, 'offset_end': 65937, 'content': "function _insertNonfungibleTransfer(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 tokenId,\n        uint256 amount\n    ) internal pure returns (uint256 transferIndex) {\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            transferIndex := mload(add(calldataPointer, ExecutionBatch_length_offset))\n\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            let transferPointer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n            mstore(\n                add(transferPointer, Transfer_trader_offset),\n                mload(add(order, Order_trader_offset))\n            ) // set the trader\n            mstore(add(transferPointer, Transfer_id_offset), tokenId) // set the token id\n            mstore(\n                add(transferPointer, Transfer_collection_offset),\n                mload(add(order, Order_collection_offset))\n            ) // set the collection\n            mstore(\n                add(transferPointer, Transfer_assetType_offset),\n                mload(add(order, Order_assetType_offset))\n            ) // set the asset type\n            mstore(add(calldataPointer, ExecutionBatch_length_offset), add(transferIndex, 1)) // increment the batch length\n\n            if eq(mload(add(order, Order_assetType_offset)), AssetType_ERC1155) {\n                mstore(add(transferPointer, Transfer_amount_offset), amount) // set the amount (don't need to set for ERC721's)\n            }\n        }\n    }", 'contract_name': 'Executor', 'contract_code': "{\n    address private immutable _DELEGATE;\n    address private immutable _POOL;\n\n    constructor(address delegate, address pool, address proxy) Validation(proxy) {\n        _DELEGATE = delegate;\n        _POOL = pool;\n    }\n\n    receive() external payable {\n        if (msg.sender != _POOL) {\n            revert Unauthorized();\n        }\n    }\n\n    /**\n     * @notice Insert a validated ask listing into the batch if there's sufficient ETH to fulfill\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing the listing to insert\n     * @param fees Protocol and taker fees\n     * @param remainingETH Available ETH remaining\n     * @return Available ETH remaining after insertion; if the listing was inserted in the batch\n     */\n    function _insertExecutionAsk(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees,\n        uint256 remainingETH\n    ) internal pure returns (uint256, bool) {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        /* Only insert the executions if there are sufficient funds to execute. */\n        if (remainingETH >= totalPrice + takerFeeAmount) {\n            unchecked {\n                remainingETH = remainingETH - totalPrice - takerFeeAmount;\n            }\n\n            _setAddresses(fungibleTransfers, order);\n\n            uint256 index = _insertNonfungibleTransfer(\n                executionBatch,\n                order,\n                exchange.listing.tokenId,\n                takerAmount\n            );\n\n            _insertFungibleTransfers(\n                fungibleTransfers,\n                takerAmount,\n                exchange.listing,\n                bytes32(order.salt),\n                index,\n                totalPrice,\n                protocolFeeAmount,\n                makerFeeAmount,\n                takerFeeAmount,\n                true\n            );\n\n            return (remainingETH, true);\n        } else {\n            return (remainingETH, false);\n        }\n    }\n\n    /**\n     * @notice Insert a validated bid listing into the batch\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing listing to insert\n     * @param fees Protocol and taker fees\n     */\n    function _insertExecutionBid(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees\n    ) internal pure {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        _setAddresses(fungibleTransfers, order);\n\n        uint256 index = _insertNonfungibleTransfer(\n            executionBatch,\n            order,\n            exchange.taker.tokenId,\n            takerAmount\n        );\n\n        _insertFungibleTransfers(\n            fungibleTransfers,\n            takerAmount,\n            exchange.listing,\n            bytes32(order.salt),\n            index,\n            totalPrice,\n            protocolFeeAmount,\n            makerFeeAmount,\n            takerFeeAmount,\n            false\n        );\n    }\n\n    /**\n     * @notice Insert the nonfungible transfer into the batch\n     * @param executionBatch Execution batch\n     * @param order Order\n     * @param tokenId Token id\n     * @param amount Number of token units\n     * @return transferIndex Index of the transfer\n     */\n    function _insertNonfungibleTransfer(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 tokenId,\n        uint256 amount\n    ) internal pure returns (uint256 transferIndex) {\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            transferIndex := mload(add(calldataPointer, ExecutionBatch_length_offset))\n\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            let transferPointer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n            mstore(\n                add(transferPointer, Transfer_trader_offset),\n                mload(add(order, Order_trader_offset))\n            ) // set the trader\n            mstore(add(transferPointer, Transfer_id_offset), tokenId) // set the token id\n            mstore(\n                add(transferPointer, Transfer_collection_offset),\n                mload(add(order, Order_collection_offset))\n            ) // set the collection\n            mstore(\n                add(transferPointer, Transfer_assetType_offset),\n                mload(add(order, Order_assetType_offset))\n            ) // set the asset type\n            mstore(add(calldataPointer, ExecutionBatch_length_offset), add(transferIndex, 1)) // increment the batch length\n\n            if eq(mload(add(order, Order_assetType_offset)), AssetType_ERC1155) {\n                mstore(add(transferPointer, Transfer_amount_offset), amount) // set the amount (don't need to set for ERC721's)\n            }\n        }\n    }\n\n    /**\n     * @notice Insert the fungible transfers that need to be executed atomically\n     * @param fungibleTransfers Fungible transfers struct\n     * @param takerAmount Amount of the listing being taken\n     * @param listing Listing to execute\n     * @param orderHash Order hash\n     * @param index Execution index\n     * @param totalPrice Total price of the purchased tokens\n     * @param protocolFeeAmount Computed protocol fee\n     * @param makerFeeAmount Computed maker fee\n     * @param takerFeeAmount Computed taker fee\n     * @param makerIsSeller Is the order maker the seller\n     */\n    function _insertFungibleTransfers(\n        FungibleTransfers memory fungibleTransfers,\n        uint256 takerAmount,\n        Listing memory listing,\n        bytes32 orderHash,\n        uint256 index,\n        uint256 totalPrice,\n        uint256 protocolFeeAmount,\n        uint256 makerFeeAmount,\n        uint256 takerFeeAmount,\n        bool makerIsSeller\n    ) internal pure {\n        uint256 makerId = fungibleTransfers.makerId;\n        fungibleTransfers.executions[index].makerId = makerId;\n        fungibleTransfers.executions[index].makerFeeRecipientId = fungibleTransfers.feeRecipientId;\n        fungibleTransfers.executions[index].stateUpdate = StateUpdate({\n            trader: fungibleTransfers.makers[makerId],\n            hash: orderHash,\n            index: listing.index,\n            value: takerAmount,\n            maxAmount: listing.amount\n        });\n        if (makerIsSeller) {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    makerFeeAmount;\n            }\n        } else {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    takerFeeAmount;\n            }\n        }\n        fungibleTransfers.executions[index].makerFeeAmount = makerFeeAmount;\n        fungibleTransfers.executions[index].takerFeeAmount = takerFeeAmount;\n        fungibleTransfers.executions[index].protocolFeeAmount = protocolFeeAmount;\n    }\n\n    /**\n     * @notice Set the addresses of the maker fee recipient and order maker if different than currently being batched\n     * @param fungibleTransfers Fungible transfers struct\n     * @param order Parent order of listing being added to the batch\n     */\n    function _setAddresses(\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order\n    ) internal pure {\n        address feeRecipient = order.makerFee.recipient;\n        uint256 feeRecipientId = fungibleTransfers.feeRecipientId;\n        address currentFeeRecipient = fungibleTransfers.feeRecipients[feeRecipientId];\n        if (feeRecipient != currentFeeRecipient) {\n            if (currentFeeRecipient == address(0)) {\n                fungibleTransfers.feeRecipients[feeRecipientId] = feeRecipient;\n            } else {\n                unchecked {\n                    fungibleTransfers.feeRecipients[++feeRecipientId] = feeRecipient;\n                }\n                fungibleTransfers.feeRecipientId = feeRecipientId;\n            }\n        }\n        address trader = order.trader;\n        uint256 makerId = fungibleTransfers.makerId;\n        address currentTrader = fungibleTransfers.makers[makerId];\n        if (trader != currentTrader) {\n            if (currentTrader == address(0)) {\n                fungibleTransfers.makers[makerId] = trader;\n            } else {\n                unchecked {\n                    fungibleTransfers.makers[++makerId] = trader;\n                }\n                fungibleTransfers.makerId = makerId;\n            }\n        }\n    }\n\n    /**\n     * @notice Compute all necessary fees to be taken\n     * @param pricePerToken Price per token unit\n     * @param takerAmount Number of token units taken (should only be greater than 1 for ERC1155)\n     * @param fees Protocol and taker fee set by the transaction\n     */\n    function _computeFees(\n        uint256 pricePerToken,\n        uint256 takerAmount,\n        FeeRate memory makerFee,\n        Fees memory fees\n    )\n        internal\n        pure\n        returns (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        )\n    {\n        totalPrice = pricePerToken * takerAmount;\n        makerFeeAmount = (totalPrice * makerFee.rate) / _BASIS_POINTS;\n        takerFeeAmount = (totalPrice * fees.takerFee.rate) / _BASIS_POINTS;\n        protocolFeeAmount = (totalPrice * fees.protocolFee.rate) / _BASIS_POINTS;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Execute the transfers by first attempting the nonfungible transfers, for the successful transfers sum the fungible transfers by the recipients and execute\n     * @param executionBatch Execution batch struct\n     * @param fungibleTransfers Fungible transfers struct\n     * @param fees Protocol, maker, taker fees (note: makerFee will be inaccurate at this point in execution)\n     * @param orderType Order type\n     */\n    function _executeBatchTransfer(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        uint256 batchLength;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            batchLength := mload(add(calldataPointer, ExecutionBatch_length_offset))\n        }\n        if (batchLength > 0) {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(\n                executionBatch,\n                batchLength\n            );\n\n            uint256 transfersLength = successfulTransfers.length;\n            for (uint256 i; i < transfersLength; ) {\n                if (successfulTransfers[i]) {\n                    AtomicExecution memory execution = fungibleTransfers.executions[i];\n                    FeeRate memory makerFee;\n                    uint256 price;\n                    unchecked {\n                        if (orderType == OrderType.ASK) {\n                            fungibleTransfers.makerTransfers[execution.makerId] += execution\n                                .sellerAmount; // amount that needs to be sent *to* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount;\n                        } else {\n                            fungibleTransfers.makerTransfers[execution.makerId] +=\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount +\n                                execution.takerFeeAmount +\n                                execution.sellerAmount; // amount that needs to be taken *from* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.takerFeeAmount;\n                        }\n                        fungibleTransfers.totalSellerTransfer += execution.sellerAmount; // only for bids\n                        fungibleTransfers.totalProtocolFee += execution.protocolFeeAmount;\n                        fungibleTransfers.totalTakerFee += execution.takerFeeAmount;\n                        fungibleTransfers.feeTransfers[execution.makerFeeRecipientId] += execution\n                            .makerFeeAmount;\n                        makerFee = FeeRate(\n                            fungibleTransfers.feeRecipients[execution.makerFeeRecipientId],\n                            uint16((execution.makerFeeAmount * _BASIS_POINTS) / price)\n                        );\n                    }\n\n                    /* Commit state updates. */\n                    StateUpdate memory stateUpdate = fungibleTransfers.executions[i].stateUpdate;\n                    {\n                        address trader = stateUpdate.trader;\n                        bytes32 hash = stateUpdate.hash;\n                        uint256 index = stateUpdate.index;\n                        uint256 _amountTaken = amountTaken[trader][hash][index];\n                        uint256 newAmountTaken = _amountTaken + stateUpdate.value;\n\n                        /* Overfulfilled Listings should be caught prior to inserting into the batch, but this check prevents any misuse. */\n                        if (newAmountTaken <= stateUpdate.maxAmount) {\n                            amountTaken[trader][hash][index] = newAmountTaken;\n                        } else {\n                            revert OrderFulfilled();\n                        }\n                    }\n\n                    _emitExecutionEventFromBatch(\n                        executionBatch,\n                        price,\n                        makerFee,\n                        fees,\n                        stateUpdate,\n                        orderType,\n                        i\n                    );\n                }\n\n                unchecked {\n                    ++i;\n                }\n            }\n\n            if (orderType == OrderType.ASK) {\n                /* Transfer the payments to the sellers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferETH(fungibleTransfers.makers[i], fungibleTransfers.makerTransfers[i]);\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferETH(\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferETH(fees.protocolFee.recipient, fungibleTransfers.totalProtocolFee);\n\n                /* Transfer the taker fees. */\n                _transferETH(fees.takerFee.recipient, fungibleTransfers.totalTakerFee);\n            } else {\n                /* Take the pool funds from the buyers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferPool(\n                        fungibleTransfers.makers[i],\n                        address(this),\n                        fungibleTransfers.makerTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the payment to the seller. */\n                _transferPool(address(this), msg.sender, fungibleTransfers.totalSellerTransfer);\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferPool(\n                        address(this),\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferPool(\n                    address(this),\n                    fees.protocolFee.recipient,\n                    fungibleTransfers.totalProtocolFee\n                );\n\n                /* Transfer the taker fees. */\n                _transferPool(\n                    address(this),\n                    fees.takerFee.recipient,\n                    fungibleTransfers.totalTakerFee\n                );\n            }\n        }\n    }\n\n    /**\n     * @notice Attempt to execute a series of nonfungible transfers through the delegate; reverts will be skipped\n     * @param executionBatch Execution batch struct\n     * @param batchIndex Current available transfer slot in the batch\n     * @return Array indicating which transfers were successful\n     */\n    function _executeNonfungibleTransfers(\n        bytes memory executionBatch,\n        uint256 batchIndex\n    ) internal returns (bool[] memory) {\n        address delegate = _DELEGATE;\n\n        /* Initialize the memory space for the successful transfers array returned from the Delegate call. */\n        uint256 successfulTransfersPointer;\n        assembly {\n            successfulTransfersPointer := mload(Memory_pointer)\n            /* Need to shift the free memory pointer ahead one word to account for the array pointer returned from the call. */\n            mstore(Memory_pointer, add(successfulTransfersPointer, One_word))\n        }\n\n        bool[] memory successfulTransfers = new bool[](batchIndex);\n        assembly {\n            let size := mload(executionBatch)\n            let selectorPointer := add(executionBatch, ExecutionBatch_selector_offset)\n            mstore(selectorPointer, shr(Bytes4_shift, Delegate_transfer_selector))\n            let success := call(\n                gas(),\n                delegate,\n                0,\n                add(selectorPointer, Delegate_transfer_calldata_offset),\n                sub(size, Delegate_transfer_calldata_offset),\n                successfulTransfersPointer,\n                add(0x40, mul(batchIndex, One_word))\n            )\n        }\n        return successfulTransfers;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        TRANSFER FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Transfer ETH\n     * @param to Recipient address\n     * @param amount Amount of ETH to send\n     */\n    function _transferETH(address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            assembly {\n                success := call(gas(), to, amount, 0, 0, 0, 0)\n            }\n            if (!success) {\n                revert ETHTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Transfer pool funds on behalf of a user\n     * @param from Sender address\n     * @param to Recipient address\n     * @param amount Amount to send\n     */\n    function _transferPool(address from, address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            address pool = _POOL;\n            assembly {\n                let x := mload(Memory_pointer)\n                mstore(x, ERC20_transferFrom_selector)\n                mstore(add(x, ERC20_transferFrom_from_offset), from)\n                mstore(add(x, ERC20_transferFrom_to_offset), to)\n                mstore(add(x, ERC20_transferFrom_amount_offset), amount)\n                success := call(gas(), pool, 0, x, ERC20_transferFrom_size, 0, 0)\n            }\n            if (!success) {\n                revert PoolTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Deposit ETH to user's pool funds\n     * @param to Recipient address\n     * @param amount Amount of ETH to deposit\n     */\n    function _depositPool(address to, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_deposit_selector)\n            mstore(add(x, Pool_deposit_user_offset), to)\n            success := call(gas(), pool, amount, x, Pool_deposit_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolDepositFailed();\n        }\n    }\n\n    /**\n     * @notice Withdraw ETH from user's pool funds\n     * @param from Address to withdraw from\n     * @param amount Amount of ETH to withdraw\n     */\n    function _withdrawFromPool(address from, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_withdrawFrom_selector)\n            mstore(add(x, Pool_withdrawFrom_from_offset), from)\n            mstore(add(x, Pool_withdrawFrom_to_offset), address())\n            mstore(add(x, Pool_withdrawFrom_amount_offset), amount)\n            success := call(gas(), pool, 0, x, Pool_withdrawFrom_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolWithdrawFromFailed();\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EVENT EMITTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param price Price of the token purchased\n     * @param fees Protocol, maker, and taker fees taken\n     * @param stateUpdate Fulfillment to be recorded with a successful execution\n     * @param orderType Order type\n     * @param transferIndex Index of the transfer corresponding to the execution\n     */\n    function _emitExecutionEventFromBatch(\n        bytes memory executionBatch,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        StateUpdate memory stateUpdate,\n        OrderType orderType,\n        uint256 transferIndex\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            stateUpdate.hash,\n            stateUpdate.index,\n            price,\n            makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    /**\n     * @notice Emit the Execution event that minimizes the number of bytes in the log\n     * @param transfer The nft transfer\n     * @param orderHash Order hash\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param makerFee Maker fees taken\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitOptimalExecutionEvent(\n        Transfer memory transfer,\n        bytes32 orderHash,\n        uint256 listingIndex,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        if (\n            // see _insertNonfungibleTransfer; ERC721 transfers don't set the transfer amount,\n            // so we can assume the transfer amount and not check it\n            transfer.assetType == AssetType.ERC721 &&\n            fees.protocolFee.rate == 0 &&\n            transfer.id < 1 << (11 * 8) &&\n            listingIndex < 1 << (1 * 8) &&\n            price < 1 << (11 * 8)\n        ) {\n            if (makerFee.rate == 0 && fees.takerFee.rate == 0) {\n                emit Execution721Packed(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection)\n                );\n                return;\n            } else if (makerFee.rate == 0) {\n                emit Execution721TakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(fees.takerFee)\n                );\n                return;\n            } else if (fees.takerFee.rate == 0) {\n                emit Execution721MakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(makerFee)\n                );\n                return;\n            }\n        }\n\n        emit Execution({\n            transfer: transfer,\n            orderHash: orderHash,\n            listingIndex: listingIndex,\n            price: price,\n            makerFee: makerFee,\n            fees: fees,\n            orderType: orderType\n        });\n    }\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param order Order being fulfilled\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitExecutionEvent(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 listingIndex,\n        uint256 price,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(calldataPointer, add(transfersOffset, One_word))\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            bytes32(order.salt),\n            listingIndex,\n            price,\n            order.makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    function packTokenIdListingIndexTrader(\n        uint256 tokenId,\n        uint256 listingIndex,\n        address trader\n    ) private pure returns (uint256) {\n        return (tokenId << (21 * 8)) | (listingIndex << (20 * 8)) | uint160(trader);\n    }\n\n    function packTypePriceCollection(\n        OrderType orderType,\n        uint256 price,\n        address collection\n    ) private pure returns (uint256) {\n        return (uint256(orderType) << (31 * 8)) | (price << (20 * 8)) | uint160(collection);\n    }\n\n    function packFee(FeeRate memory fee) private pure returns (uint256) {\n        return (uint256(fee.rate) << (20 * 8)) | uint160(fee.recipient);\n    }\n\n    uint256[50] private __gap;\n}", 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Executor._insertFungibleTransfers', 'start_line': 1826, 'end_line': 1866, 'offset_start': 66540, 'offset_end': 68127, 'content': 'function _insertFungibleTransfers(\n        FungibleTransfers memory fungibleTransfers,\n        uint256 takerAmount,\n        Listing memory listing,\n        bytes32 orderHash,\n        uint256 index,\n        uint256 totalPrice,\n        uint256 protocolFeeAmount,\n        uint256 makerFeeAmount,\n        uint256 takerFeeAmount,\n        bool makerIsSeller\n    ) internal pure {\n        uint256 makerId = fungibleTransfers.makerId;\n        fungibleTransfers.executions[index].makerId = makerId;\n        fungibleTransfers.executions[index].makerFeeRecipientId = fungibleTransfers.feeRecipientId;\n        fungibleTransfers.executions[index].stateUpdate = StateUpdate({\n            trader: fungibleTransfers.makers[makerId],\n            hash: orderHash,\n            index: listing.index,\n            value: takerAmount,\n            maxAmount: listing.amount\n        });\n        if (makerIsSeller) {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    makerFeeAmount;\n            }\n        } else {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    takerFeeAmount;\n            }\n        }\n        fungibleTransfers.executions[index].makerFeeAmount = makerFeeAmount;\n        fungibleTransfers.executions[index].takerFeeAmount = takerFeeAmount;\n        fungibleTransfers.executions[index].protocolFeeAmount = protocolFeeAmount;\n    }', 'contract_name': 'Executor', 'contract_code': "{\n    address private immutable _DELEGATE;\n    address private immutable _POOL;\n\n    constructor(address delegate, address pool, address proxy) Validation(proxy) {\n        _DELEGATE = delegate;\n        _POOL = pool;\n    }\n\n    receive() external payable {\n        if (msg.sender != _POOL) {\n            revert Unauthorized();\n        }\n    }\n\n    /**\n     * @notice Insert a validated ask listing into the batch if there's sufficient ETH to fulfill\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing the listing to insert\n     * @param fees Protocol and taker fees\n     * @param remainingETH Available ETH remaining\n     * @return Available ETH remaining after insertion; if the listing was inserted in the batch\n     */\n    function _insertExecutionAsk(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees,\n        uint256 remainingETH\n    ) internal pure returns (uint256, bool) {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        /* Only insert the executions if there are sufficient funds to execute. */\n        if (remainingETH >= totalPrice + takerFeeAmount) {\n            unchecked {\n                remainingETH = remainingETH - totalPrice - takerFeeAmount;\n            }\n\n            _setAddresses(fungibleTransfers, order);\n\n            uint256 index = _insertNonfungibleTransfer(\n                executionBatch,\n                order,\n                exchange.listing.tokenId,\n                takerAmount\n            );\n\n            _insertFungibleTransfers(\n                fungibleTransfers,\n                takerAmount,\n                exchange.listing,\n                bytes32(order.salt),\n                index,\n                totalPrice,\n                protocolFeeAmount,\n                makerFeeAmount,\n                takerFeeAmount,\n                true\n            );\n\n            return (remainingETH, true);\n        } else {\n            return (remainingETH, false);\n        }\n    }\n\n    /**\n     * @notice Insert a validated bid listing into the batch\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing listing to insert\n     * @param fees Protocol and taker fees\n     */\n    function _insertExecutionBid(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees\n    ) internal pure {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        _setAddresses(fungibleTransfers, order);\n\n        uint256 index = _insertNonfungibleTransfer(\n            executionBatch,\n            order,\n            exchange.taker.tokenId,\n            takerAmount\n        );\n\n        _insertFungibleTransfers(\n            fungibleTransfers,\n            takerAmount,\n            exchange.listing,\n            bytes32(order.salt),\n            index,\n            totalPrice,\n            protocolFeeAmount,\n            makerFeeAmount,\n            takerFeeAmount,\n            false\n        );\n    }\n\n    /**\n     * @notice Insert the nonfungible transfer into the batch\n     * @param executionBatch Execution batch\n     * @param order Order\n     * @param tokenId Token id\n     * @param amount Number of token units\n     * @return transferIndex Index of the transfer\n     */\n    function _insertNonfungibleTransfer(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 tokenId,\n        uint256 amount\n    ) internal pure returns (uint256 transferIndex) {\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            transferIndex := mload(add(calldataPointer, ExecutionBatch_length_offset))\n\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            let transferPointer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n            mstore(\n                add(transferPointer, Transfer_trader_offset),\n                mload(add(order, Order_trader_offset))\n            ) // set the trader\n            mstore(add(transferPointer, Transfer_id_offset), tokenId) // set the token id\n            mstore(\n                add(transferPointer, Transfer_collection_offset),\n                mload(add(order, Order_collection_offset))\n            ) // set the collection\n            mstore(\n                add(transferPointer, Transfer_assetType_offset),\n                mload(add(order, Order_assetType_offset))\n            ) // set the asset type\n            mstore(add(calldataPointer, ExecutionBatch_length_offset), add(transferIndex, 1)) // increment the batch length\n\n            if eq(mload(add(order, Order_assetType_offset)), AssetType_ERC1155) {\n                mstore(add(transferPointer, Transfer_amount_offset), amount) // set the amount (don't need to set for ERC721's)\n            }\n        }\n    }\n\n    /**\n     * @notice Insert the fungible transfers that need to be executed atomically\n     * @param fungibleTransfers Fungible transfers struct\n     * @param takerAmount Amount of the listing being taken\n     * @param listing Listing to execute\n     * @param orderHash Order hash\n     * @param index Execution index\n     * @param totalPrice Total price of the purchased tokens\n     * @param protocolFeeAmount Computed protocol fee\n     * @param makerFeeAmount Computed maker fee\n     * @param takerFeeAmount Computed taker fee\n     * @param makerIsSeller Is the order maker the seller\n     */\n    function _insertFungibleTransfers(\n        FungibleTransfers memory fungibleTransfers,\n        uint256 takerAmount,\n        Listing memory listing,\n        bytes32 orderHash,\n        uint256 index,\n        uint256 totalPrice,\n        uint256 protocolFeeAmount,\n        uint256 makerFeeAmount,\n        uint256 takerFeeAmount,\n        bool makerIsSeller\n    ) internal pure {\n        uint256 makerId = fungibleTransfers.makerId;\n        fungibleTransfers.executions[index].makerId = makerId;\n        fungibleTransfers.executions[index].makerFeeRecipientId = fungibleTransfers.feeRecipientId;\n        fungibleTransfers.executions[index].stateUpdate = StateUpdate({\n            trader: fungibleTransfers.makers[makerId],\n            hash: orderHash,\n            index: listing.index,\n            value: takerAmount,\n            maxAmount: listing.amount\n        });\n        if (makerIsSeller) {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    makerFeeAmount;\n            }\n        } else {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    takerFeeAmount;\n            }\n        }\n        fungibleTransfers.executions[index].makerFeeAmount = makerFeeAmount;\n        fungibleTransfers.executions[index].takerFeeAmount = takerFeeAmount;\n        fungibleTransfers.executions[index].protocolFeeAmount = protocolFeeAmount;\n    }\n\n    /**\n     * @notice Set the addresses of the maker fee recipient and order maker if different than currently being batched\n     * @param fungibleTransfers Fungible transfers struct\n     * @param order Parent order of listing being added to the batch\n     */\n    function _setAddresses(\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order\n    ) internal pure {\n        address feeRecipient = order.makerFee.recipient;\n        uint256 feeRecipientId = fungibleTransfers.feeRecipientId;\n        address currentFeeRecipient = fungibleTransfers.feeRecipients[feeRecipientId];\n        if (feeRecipient != currentFeeRecipient) {\n            if (currentFeeRecipient == address(0)) {\n                fungibleTransfers.feeRecipients[feeRecipientId] = feeRecipient;\n            } else {\n                unchecked {\n                    fungibleTransfers.feeRecipients[++feeRecipientId] = feeRecipient;\n                }\n                fungibleTransfers.feeRecipientId = feeRecipientId;\n            }\n        }\n        address trader = order.trader;\n        uint256 makerId = fungibleTransfers.makerId;\n        address currentTrader = fungibleTransfers.makers[makerId];\n        if (trader != currentTrader) {\n            if (currentTrader == address(0)) {\n                fungibleTransfers.makers[makerId] = trader;\n            } else {\n                unchecked {\n                    fungibleTransfers.makers[++makerId] = trader;\n                }\n                fungibleTransfers.makerId = makerId;\n            }\n        }\n    }\n\n    /**\n     * @notice Compute all necessary fees to be taken\n     * @param pricePerToken Price per token unit\n     * @param takerAmount Number of token units taken (should only be greater than 1 for ERC1155)\n     * @param fees Protocol and taker fee set by the transaction\n     */\n    function _computeFees(\n        uint256 pricePerToken,\n        uint256 takerAmount,\n        FeeRate memory makerFee,\n        Fees memory fees\n    )\n        internal\n        pure\n        returns (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        )\n    {\n        totalPrice = pricePerToken * takerAmount;\n        makerFeeAmount = (totalPrice * makerFee.rate) / _BASIS_POINTS;\n        takerFeeAmount = (totalPrice * fees.takerFee.rate) / _BASIS_POINTS;\n        protocolFeeAmount = (totalPrice * fees.protocolFee.rate) / _BASIS_POINTS;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Execute the transfers by first attempting the nonfungible transfers, for the successful transfers sum the fungible transfers by the recipients and execute\n     * @param executionBatch Execution batch struct\n     * @param fungibleTransfers Fungible transfers struct\n     * @param fees Protocol, maker, taker fees (note: makerFee will be inaccurate at this point in execution)\n     * @param orderType Order type\n     */\n    function _executeBatchTransfer(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        uint256 batchLength;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            batchLength := mload(add(calldataPointer, ExecutionBatch_length_offset))\n        }\n        if (batchLength > 0) {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(\n                executionBatch,\n                batchLength\n            );\n\n            uint256 transfersLength = successfulTransfers.length;\n            for (uint256 i; i < transfersLength; ) {\n                if (successfulTransfers[i]) {\n                    AtomicExecution memory execution = fungibleTransfers.executions[i];\n                    FeeRate memory makerFee;\n                    uint256 price;\n                    unchecked {\n                        if (orderType == OrderType.ASK) {\n                            fungibleTransfers.makerTransfers[execution.makerId] += execution\n                                .sellerAmount; // amount that needs to be sent *to* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount;\n                        } else {\n                            fungibleTransfers.makerTransfers[execution.makerId] +=\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount +\n                                execution.takerFeeAmount +\n                                execution.sellerAmount; // amount that needs to be taken *from* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.takerFeeAmount;\n                        }\n                        fungibleTransfers.totalSellerTransfer += execution.sellerAmount; // only for bids\n                        fungibleTransfers.totalProtocolFee += execution.protocolFeeAmount;\n                        fungibleTransfers.totalTakerFee += execution.takerFeeAmount;\n                        fungibleTransfers.feeTransfers[execution.makerFeeRecipientId] += execution\n                            .makerFeeAmount;\n                        makerFee = FeeRate(\n                            fungibleTransfers.feeRecipients[execution.makerFeeRecipientId],\n                            uint16((execution.makerFeeAmount * _BASIS_POINTS) / price)\n                        );\n                    }\n\n                    /* Commit state updates. */\n                    StateUpdate memory stateUpdate = fungibleTransfers.executions[i].stateUpdate;\n                    {\n                        address trader = stateUpdate.trader;\n                        bytes32 hash = stateUpdate.hash;\n                        uint256 index = stateUpdate.index;\n                        uint256 _amountTaken = amountTaken[trader][hash][index];\n                        uint256 newAmountTaken = _amountTaken + stateUpdate.value;\n\n                        /* Overfulfilled Listings should be caught prior to inserting into the batch, but this check prevents any misuse. */\n                        if (newAmountTaken <= stateUpdate.maxAmount) {\n                            amountTaken[trader][hash][index] = newAmountTaken;\n                        } else {\n                            revert OrderFulfilled();\n                        }\n                    }\n\n                    _emitExecutionEventFromBatch(\n                        executionBatch,\n                        price,\n                        makerFee,\n                        fees,\n                        stateUpdate,\n                        orderType,\n                        i\n                    );\n                }\n\n                unchecked {\n                    ++i;\n                }\n            }\n\n            if (orderType == OrderType.ASK) {\n                /* Transfer the payments to the sellers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferETH(fungibleTransfers.makers[i], fungibleTransfers.makerTransfers[i]);\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferETH(\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferETH(fees.protocolFee.recipient, fungibleTransfers.totalProtocolFee);\n\n                /* Transfer the taker fees. */\n                _transferETH(fees.takerFee.recipient, fungibleTransfers.totalTakerFee);\n            } else {\n                /* Take the pool funds from the buyers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferPool(\n                        fungibleTransfers.makers[i],\n                        address(this),\n                        fungibleTransfers.makerTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the payment to the seller. */\n                _transferPool(address(this), msg.sender, fungibleTransfers.totalSellerTransfer);\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferPool(\n                        address(this),\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferPool(\n                    address(this),\n                    fees.protocolFee.recipient,\n                    fungibleTransfers.totalProtocolFee\n                );\n\n                /* Transfer the taker fees. */\n                _transferPool(\n                    address(this),\n                    fees.takerFee.recipient,\n                    fungibleTransfers.totalTakerFee\n                );\n            }\n        }\n    }\n\n    /**\n     * @notice Attempt to execute a series of nonfungible transfers through the delegate; reverts will be skipped\n     * @param executionBatch Execution batch struct\n     * @param batchIndex Current available transfer slot in the batch\n     * @return Array indicating which transfers were successful\n     */\n    function _executeNonfungibleTransfers(\n        bytes memory executionBatch,\n        uint256 batchIndex\n    ) internal returns (bool[] memory) {\n        address delegate = _DELEGATE;\n\n        /* Initialize the memory space for the successful transfers array returned from the Delegate call. */\n        uint256 successfulTransfersPointer;\n        assembly {\n            successfulTransfersPointer := mload(Memory_pointer)\n            /* Need to shift the free memory pointer ahead one word to account for the array pointer returned from the call. */\n            mstore(Memory_pointer, add(successfulTransfersPointer, One_word))\n        }\n\n        bool[] memory successfulTransfers = new bool[](batchIndex);\n        assembly {\n            let size := mload(executionBatch)\n            let selectorPointer := add(executionBatch, ExecutionBatch_selector_offset)\n            mstore(selectorPointer, shr(Bytes4_shift, Delegate_transfer_selector))\n            let success := call(\n                gas(),\n                delegate,\n                0,\n                add(selectorPointer, Delegate_transfer_calldata_offset),\n                sub(size, Delegate_transfer_calldata_offset),\n                successfulTransfersPointer,\n                add(0x40, mul(batchIndex, One_word))\n            )\n        }\n        return successfulTransfers;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        TRANSFER FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Transfer ETH\n     * @param to Recipient address\n     * @param amount Amount of ETH to send\n     */\n    function _transferETH(address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            assembly {\n                success := call(gas(), to, amount, 0, 0, 0, 0)\n            }\n            if (!success) {\n                revert ETHTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Transfer pool funds on behalf of a user\n     * @param from Sender address\n     * @param to Recipient address\n     * @param amount Amount to send\n     */\n    function _transferPool(address from, address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            address pool = _POOL;\n            assembly {\n                let x := mload(Memory_pointer)\n                mstore(x, ERC20_transferFrom_selector)\n                mstore(add(x, ERC20_transferFrom_from_offset), from)\n                mstore(add(x, ERC20_transferFrom_to_offset), to)\n                mstore(add(x, ERC20_transferFrom_amount_offset), amount)\n                success := call(gas(), pool, 0, x, ERC20_transferFrom_size, 0, 0)\n            }\n            if (!success) {\n                revert PoolTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Deposit ETH to user's pool funds\n     * @param to Recipient address\n     * @param amount Amount of ETH to deposit\n     */\n    function _depositPool(address to, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_deposit_selector)\n            mstore(add(x, Pool_deposit_user_offset), to)\n            success := call(gas(), pool, amount, x, Pool_deposit_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolDepositFailed();\n        }\n    }\n\n    /**\n     * @notice Withdraw ETH from user's pool funds\n     * @param from Address to withdraw from\n     * @param amount Amount of ETH to withdraw\n     */\n    function _withdrawFromPool(address from, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_withdrawFrom_selector)\n            mstore(add(x, Pool_withdrawFrom_from_offset), from)\n            mstore(add(x, Pool_withdrawFrom_to_offset), address())\n            mstore(add(x, Pool_withdrawFrom_amount_offset), amount)\n            success := call(gas(), pool, 0, x, Pool_withdrawFrom_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolWithdrawFromFailed();\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EVENT EMITTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param price Price of the token purchased\n     * @param fees Protocol, maker, and taker fees taken\n     * @param stateUpdate Fulfillment to be recorded with a successful execution\n     * @param orderType Order type\n     * @param transferIndex Index of the transfer corresponding to the execution\n     */\n    function _emitExecutionEventFromBatch(\n        bytes memory executionBatch,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        StateUpdate memory stateUpdate,\n        OrderType orderType,\n        uint256 transferIndex\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            stateUpdate.hash,\n            stateUpdate.index,\n            price,\n            makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    /**\n     * @notice Emit the Execution event that minimizes the number of bytes in the log\n     * @param transfer The nft transfer\n     * @param orderHash Order hash\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param makerFee Maker fees taken\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitOptimalExecutionEvent(\n        Transfer memory transfer,\n        bytes32 orderHash,\n        uint256 listingIndex,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        if (\n            // see _insertNonfungibleTransfer; ERC721 transfers don't set the transfer amount,\n            // so we can assume the transfer amount and not check it\n            transfer.assetType == AssetType.ERC721 &&\n            fees.protocolFee.rate == 0 &&\n            transfer.id < 1 << (11 * 8) &&\n            listingIndex < 1 << (1 * 8) &&\n            price < 1 << (11 * 8)\n        ) {\n            if (makerFee.rate == 0 && fees.takerFee.rate == 0) {\n                emit Execution721Packed(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection)\n                );\n                return;\n            } else if (makerFee.rate == 0) {\n                emit Execution721TakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(fees.takerFee)\n                );\n                return;\n            } else if (fees.takerFee.rate == 0) {\n                emit Execution721MakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(makerFee)\n                );\n                return;\n            }\n        }\n\n        emit Execution({\n            transfer: transfer,\n            orderHash: orderHash,\n            listingIndex: listingIndex,\n            price: price,\n            makerFee: makerFee,\n            fees: fees,\n            orderType: orderType\n        });\n    }\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param order Order being fulfilled\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitExecutionEvent(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 listingIndex,\n        uint256 price,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(calldataPointer, add(transfersOffset, One_word))\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            bytes32(order.salt),\n            listingIndex,\n            price,\n            order.makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    function packTokenIdListingIndexTrader(\n        uint256 tokenId,\n        uint256 listingIndex,\n        address trader\n    ) private pure returns (uint256) {\n        return (tokenId << (21 * 8)) | (listingIndex << (20 * 8)) | uint160(trader);\n    }\n\n    function packTypePriceCollection(\n        OrderType orderType,\n        uint256 price,\n        address collection\n    ) private pure returns (uint256) {\n        return (uint256(orderType) << (31 * 8)) | (price << (20 * 8)) | uint160(collection);\n    }\n\n    function packFee(FeeRate memory fee) private pure returns (uint256) {\n        return (uint256(fee.rate) << (20 * 8)) | uint160(fee.recipient);\n    }\n\n    uint256[50] private __gap;\n}", 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Executor._setAddresses', 'start_line': 1873, 'end_line': 1903, 'offset_start': 68395, 'offset_end': 69678, 'content': 'function _setAddresses(\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order\n    ) internal pure {\n        address feeRecipient = order.makerFee.recipient;\n        uint256 feeRecipientId = fungibleTransfers.feeRecipientId;\n        address currentFeeRecipient = fungibleTransfers.feeRecipients[feeRecipientId];\n        if (feeRecipient != currentFeeRecipient) {\n            if (currentFeeRecipient == address(0)) {\n                fungibleTransfers.feeRecipients[feeRecipientId] = feeRecipient;\n            } else {\n                unchecked {\n                    fungibleTransfers.feeRecipients[++feeRecipientId] = feeRecipient;\n                }\n                fungibleTransfers.feeRecipientId = feeRecipientId;\n            }\n        }\n        address trader = order.trader;\n        uint256 makerId = fungibleTransfers.makerId;\n        address currentTrader = fungibleTransfers.makers[makerId];\n        if (trader != currentTrader) {\n            if (currentTrader == address(0)) {\n                fungibleTransfers.makers[makerId] = trader;\n            } else {\n                unchecked {\n                    fungibleTransfers.makers[++makerId] = trader;\n                }\n                fungibleTransfers.makerId = makerId;\n            }\n        }\n    }', 'contract_name': 'Executor', 'contract_code': "{\n    address private immutable _DELEGATE;\n    address private immutable _POOL;\n\n    constructor(address delegate, address pool, address proxy) Validation(proxy) {\n        _DELEGATE = delegate;\n        _POOL = pool;\n    }\n\n    receive() external payable {\n        if (msg.sender != _POOL) {\n            revert Unauthorized();\n        }\n    }\n\n    /**\n     * @notice Insert a validated ask listing into the batch if there's sufficient ETH to fulfill\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing the listing to insert\n     * @param fees Protocol and taker fees\n     * @param remainingETH Available ETH remaining\n     * @return Available ETH remaining after insertion; if the listing was inserted in the batch\n     */\n    function _insertExecutionAsk(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees,\n        uint256 remainingETH\n    ) internal pure returns (uint256, bool) {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        /* Only insert the executions if there are sufficient funds to execute. */\n        if (remainingETH >= totalPrice + takerFeeAmount) {\n            unchecked {\n                remainingETH = remainingETH - totalPrice - takerFeeAmount;\n            }\n\n            _setAddresses(fungibleTransfers, order);\n\n            uint256 index = _insertNonfungibleTransfer(\n                executionBatch,\n                order,\n                exchange.listing.tokenId,\n                takerAmount\n            );\n\n            _insertFungibleTransfers(\n                fungibleTransfers,\n                takerAmount,\n                exchange.listing,\n                bytes32(order.salt),\n                index,\n                totalPrice,\n                protocolFeeAmount,\n                makerFeeAmount,\n                takerFeeAmount,\n                true\n            );\n\n            return (remainingETH, true);\n        } else {\n            return (remainingETH, false);\n        }\n    }\n\n    /**\n     * @notice Insert a validated bid listing into the batch\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing listing to insert\n     * @param fees Protocol and taker fees\n     */\n    function _insertExecutionBid(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees\n    ) internal pure {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        _setAddresses(fungibleTransfers, order);\n\n        uint256 index = _insertNonfungibleTransfer(\n            executionBatch,\n            order,\n            exchange.taker.tokenId,\n            takerAmount\n        );\n\n        _insertFungibleTransfers(\n            fungibleTransfers,\n            takerAmount,\n            exchange.listing,\n            bytes32(order.salt),\n            index,\n            totalPrice,\n            protocolFeeAmount,\n            makerFeeAmount,\n            takerFeeAmount,\n            false\n        );\n    }\n\n    /**\n     * @notice Insert the nonfungible transfer into the batch\n     * @param executionBatch Execution batch\n     * @param order Order\n     * @param tokenId Token id\n     * @param amount Number of token units\n     * @return transferIndex Index of the transfer\n     */\n    function _insertNonfungibleTransfer(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 tokenId,\n        uint256 amount\n    ) internal pure returns (uint256 transferIndex) {\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            transferIndex := mload(add(calldataPointer, ExecutionBatch_length_offset))\n\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            let transferPointer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n            mstore(\n                add(transferPointer, Transfer_trader_offset),\n                mload(add(order, Order_trader_offset))\n            ) // set the trader\n            mstore(add(transferPointer, Transfer_id_offset), tokenId) // set the token id\n            mstore(\n                add(transferPointer, Transfer_collection_offset),\n                mload(add(order, Order_collection_offset))\n            ) // set the collection\n            mstore(\n                add(transferPointer, Transfer_assetType_offset),\n                mload(add(order, Order_assetType_offset))\n            ) // set the asset type\n            mstore(add(calldataPointer, ExecutionBatch_length_offset), add(transferIndex, 1)) // increment the batch length\n\n            if eq(mload(add(order, Order_assetType_offset)), AssetType_ERC1155) {\n                mstore(add(transferPointer, Transfer_amount_offset), amount) // set the amount (don't need to set for ERC721's)\n            }\n        }\n    }\n\n    /**\n     * @notice Insert the fungible transfers that need to be executed atomically\n     * @param fungibleTransfers Fungible transfers struct\n     * @param takerAmount Amount of the listing being taken\n     * @param listing Listing to execute\n     * @param orderHash Order hash\n     * @param index Execution index\n     * @param totalPrice Total price of the purchased tokens\n     * @param protocolFeeAmount Computed protocol fee\n     * @param makerFeeAmount Computed maker fee\n     * @param takerFeeAmount Computed taker fee\n     * @param makerIsSeller Is the order maker the seller\n     */\n    function _insertFungibleTransfers(\n        FungibleTransfers memory fungibleTransfers,\n        uint256 takerAmount,\n        Listing memory listing,\n        bytes32 orderHash,\n        uint256 index,\n        uint256 totalPrice,\n        uint256 protocolFeeAmount,\n        uint256 makerFeeAmount,\n        uint256 takerFeeAmount,\n        bool makerIsSeller\n    ) internal pure {\n        uint256 makerId = fungibleTransfers.makerId;\n        fungibleTransfers.executions[index].makerId = makerId;\n        fungibleTransfers.executions[index].makerFeeRecipientId = fungibleTransfers.feeRecipientId;\n        fungibleTransfers.executions[index].stateUpdate = StateUpdate({\n            trader: fungibleTransfers.makers[makerId],\n            hash: orderHash,\n            index: listing.index,\n            value: takerAmount,\n            maxAmount: listing.amount\n        });\n        if (makerIsSeller) {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    makerFeeAmount;\n            }\n        } else {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    takerFeeAmount;\n            }\n        }\n        fungibleTransfers.executions[index].makerFeeAmount = makerFeeAmount;\n        fungibleTransfers.executions[index].takerFeeAmount = takerFeeAmount;\n        fungibleTransfers.executions[index].protocolFeeAmount = protocolFeeAmount;\n    }\n\n    /**\n     * @notice Set the addresses of the maker fee recipient and order maker if different than currently being batched\n     * @param fungibleTransfers Fungible transfers struct\n     * @param order Parent order of listing being added to the batch\n     */\n    function _setAddresses(\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order\n    ) internal pure {\n        address feeRecipient = order.makerFee.recipient;\n        uint256 feeRecipientId = fungibleTransfers.feeRecipientId;\n        address currentFeeRecipient = fungibleTransfers.feeRecipients[feeRecipientId];\n        if (feeRecipient != currentFeeRecipient) {\n            if (currentFeeRecipient == address(0)) {\n                fungibleTransfers.feeRecipients[feeRecipientId] = feeRecipient;\n            } else {\n                unchecked {\n                    fungibleTransfers.feeRecipients[++feeRecipientId] = feeRecipient;\n                }\n                fungibleTransfers.feeRecipientId = feeRecipientId;\n            }\n        }\n        address trader = order.trader;\n        uint256 makerId = fungibleTransfers.makerId;\n        address currentTrader = fungibleTransfers.makers[makerId];\n        if (trader != currentTrader) {\n            if (currentTrader == address(0)) {\n                fungibleTransfers.makers[makerId] = trader;\n            } else {\n                unchecked {\n                    fungibleTransfers.makers[++makerId] = trader;\n                }\n                fungibleTransfers.makerId = makerId;\n            }\n        }\n    }\n\n    /**\n     * @notice Compute all necessary fees to be taken\n     * @param pricePerToken Price per token unit\n     * @param takerAmount Number of token units taken (should only be greater than 1 for ERC1155)\n     * @param fees Protocol and taker fee set by the transaction\n     */\n    function _computeFees(\n        uint256 pricePerToken,\n        uint256 takerAmount,\n        FeeRate memory makerFee,\n        Fees memory fees\n    )\n        internal\n        pure\n        returns (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        )\n    {\n        totalPrice = pricePerToken * takerAmount;\n        makerFeeAmount = (totalPrice * makerFee.rate) / _BASIS_POINTS;\n        takerFeeAmount = (totalPrice * fees.takerFee.rate) / _BASIS_POINTS;\n        protocolFeeAmount = (totalPrice * fees.protocolFee.rate) / _BASIS_POINTS;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Execute the transfers by first attempting the nonfungible transfers, for the successful transfers sum the fungible transfers by the recipients and execute\n     * @param executionBatch Execution batch struct\n     * @param fungibleTransfers Fungible transfers struct\n     * @param fees Protocol, maker, taker fees (note: makerFee will be inaccurate at this point in execution)\n     * @param orderType Order type\n     */\n    function _executeBatchTransfer(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        uint256 batchLength;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            batchLength := mload(add(calldataPointer, ExecutionBatch_length_offset))\n        }\n        if (batchLength > 0) {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(\n                executionBatch,\n                batchLength\n            );\n\n            uint256 transfersLength = successfulTransfers.length;\n            for (uint256 i; i < transfersLength; ) {\n                if (successfulTransfers[i]) {\n                    AtomicExecution memory execution = fungibleTransfers.executions[i];\n                    FeeRate memory makerFee;\n                    uint256 price;\n                    unchecked {\n                        if (orderType == OrderType.ASK) {\n                            fungibleTransfers.makerTransfers[execution.makerId] += execution\n                                .sellerAmount; // amount that needs to be sent *to* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount;\n                        } else {\n                            fungibleTransfers.makerTransfers[execution.makerId] +=\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount +\n                                execution.takerFeeAmount +\n                                execution.sellerAmount; // amount that needs to be taken *from* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.takerFeeAmount;\n                        }\n                        fungibleTransfers.totalSellerTransfer += execution.sellerAmount; // only for bids\n                        fungibleTransfers.totalProtocolFee += execution.protocolFeeAmount;\n                        fungibleTransfers.totalTakerFee += execution.takerFeeAmount;\n                        fungibleTransfers.feeTransfers[execution.makerFeeRecipientId] += execution\n                            .makerFeeAmount;\n                        makerFee = FeeRate(\n                            fungibleTransfers.feeRecipients[execution.makerFeeRecipientId],\n                            uint16((execution.makerFeeAmount * _BASIS_POINTS) / price)\n                        );\n                    }\n\n                    /* Commit state updates. */\n                    StateUpdate memory stateUpdate = fungibleTransfers.executions[i].stateUpdate;\n                    {\n                        address trader = stateUpdate.trader;\n                        bytes32 hash = stateUpdate.hash;\n                        uint256 index = stateUpdate.index;\n                        uint256 _amountTaken = amountTaken[trader][hash][index];\n                        uint256 newAmountTaken = _amountTaken + stateUpdate.value;\n\n                        /* Overfulfilled Listings should be caught prior to inserting into the batch, but this check prevents any misuse. */\n                        if (newAmountTaken <= stateUpdate.maxAmount) {\n                            amountTaken[trader][hash][index] = newAmountTaken;\n                        } else {\n                            revert OrderFulfilled();\n                        }\n                    }\n\n                    _emitExecutionEventFromBatch(\n                        executionBatch,\n                        price,\n                        makerFee,\n                        fees,\n                        stateUpdate,\n                        orderType,\n                        i\n                    );\n                }\n\n                unchecked {\n                    ++i;\n                }\n            }\n\n            if (orderType == OrderType.ASK) {\n                /* Transfer the payments to the sellers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferETH(fungibleTransfers.makers[i], fungibleTransfers.makerTransfers[i]);\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferETH(\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferETH(fees.protocolFee.recipient, fungibleTransfers.totalProtocolFee);\n\n                /* Transfer the taker fees. */\n                _transferETH(fees.takerFee.recipient, fungibleTransfers.totalTakerFee);\n            } else {\n                /* Take the pool funds from the buyers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferPool(\n                        fungibleTransfers.makers[i],\n                        address(this),\n                        fungibleTransfers.makerTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the payment to the seller. */\n                _transferPool(address(this), msg.sender, fungibleTransfers.totalSellerTransfer);\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferPool(\n                        address(this),\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferPool(\n                    address(this),\n                    fees.protocolFee.recipient,\n                    fungibleTransfers.totalProtocolFee\n                );\n\n                /* Transfer the taker fees. */\n                _transferPool(\n                    address(this),\n                    fees.takerFee.recipient,\n                    fungibleTransfers.totalTakerFee\n                );\n            }\n        }\n    }\n\n    /**\n     * @notice Attempt to execute a series of nonfungible transfers through the delegate; reverts will be skipped\n     * @param executionBatch Execution batch struct\n     * @param batchIndex Current available transfer slot in the batch\n     * @return Array indicating which transfers were successful\n     */\n    function _executeNonfungibleTransfers(\n        bytes memory executionBatch,\n        uint256 batchIndex\n    ) internal returns (bool[] memory) {\n        address delegate = _DELEGATE;\n\n        /* Initialize the memory space for the successful transfers array returned from the Delegate call. */\n        uint256 successfulTransfersPointer;\n        assembly {\n            successfulTransfersPointer := mload(Memory_pointer)\n            /* Need to shift the free memory pointer ahead one word to account for the array pointer returned from the call. */\n            mstore(Memory_pointer, add(successfulTransfersPointer, One_word))\n        }\n\n        bool[] memory successfulTransfers = new bool[](batchIndex);\n        assembly {\n            let size := mload(executionBatch)\n            let selectorPointer := add(executionBatch, ExecutionBatch_selector_offset)\n            mstore(selectorPointer, shr(Bytes4_shift, Delegate_transfer_selector))\n            let success := call(\n                gas(),\n                delegate,\n                0,\n                add(selectorPointer, Delegate_transfer_calldata_offset),\n                sub(size, Delegate_transfer_calldata_offset),\n                successfulTransfersPointer,\n                add(0x40, mul(batchIndex, One_word))\n            )\n        }\n        return successfulTransfers;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        TRANSFER FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Transfer ETH\n     * @param to Recipient address\n     * @param amount Amount of ETH to send\n     */\n    function _transferETH(address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            assembly {\n                success := call(gas(), to, amount, 0, 0, 0, 0)\n            }\n            if (!success) {\n                revert ETHTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Transfer pool funds on behalf of a user\n     * @param from Sender address\n     * @param to Recipient address\n     * @param amount Amount to send\n     */\n    function _transferPool(address from, address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            address pool = _POOL;\n            assembly {\n                let x := mload(Memory_pointer)\n                mstore(x, ERC20_transferFrom_selector)\n                mstore(add(x, ERC20_transferFrom_from_offset), from)\n                mstore(add(x, ERC20_transferFrom_to_offset), to)\n                mstore(add(x, ERC20_transferFrom_amount_offset), amount)\n                success := call(gas(), pool, 0, x, ERC20_transferFrom_size, 0, 0)\n            }\n            if (!success) {\n                revert PoolTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Deposit ETH to user's pool funds\n     * @param to Recipient address\n     * @param amount Amount of ETH to deposit\n     */\n    function _depositPool(address to, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_deposit_selector)\n            mstore(add(x, Pool_deposit_user_offset), to)\n            success := call(gas(), pool, amount, x, Pool_deposit_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolDepositFailed();\n        }\n    }\n\n    /**\n     * @notice Withdraw ETH from user's pool funds\n     * @param from Address to withdraw from\n     * @param amount Amount of ETH to withdraw\n     */\n    function _withdrawFromPool(address from, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_withdrawFrom_selector)\n            mstore(add(x, Pool_withdrawFrom_from_offset), from)\n            mstore(add(x, Pool_withdrawFrom_to_offset), address())\n            mstore(add(x, Pool_withdrawFrom_amount_offset), amount)\n            success := call(gas(), pool, 0, x, Pool_withdrawFrom_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolWithdrawFromFailed();\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EVENT EMITTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param price Price of the token purchased\n     * @param fees Protocol, maker, and taker fees taken\n     * @param stateUpdate Fulfillment to be recorded with a successful execution\n     * @param orderType Order type\n     * @param transferIndex Index of the transfer corresponding to the execution\n     */\n    function _emitExecutionEventFromBatch(\n        bytes memory executionBatch,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        StateUpdate memory stateUpdate,\n        OrderType orderType,\n        uint256 transferIndex\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            stateUpdate.hash,\n            stateUpdate.index,\n            price,\n            makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    /**\n     * @notice Emit the Execution event that minimizes the number of bytes in the log\n     * @param transfer The nft transfer\n     * @param orderHash Order hash\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param makerFee Maker fees taken\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitOptimalExecutionEvent(\n        Transfer memory transfer,\n        bytes32 orderHash,\n        uint256 listingIndex,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        if (\n            // see _insertNonfungibleTransfer; ERC721 transfers don't set the transfer amount,\n            // so we can assume the transfer amount and not check it\n            transfer.assetType == AssetType.ERC721 &&\n            fees.protocolFee.rate == 0 &&\n            transfer.id < 1 << (11 * 8) &&\n            listingIndex < 1 << (1 * 8) &&\n            price < 1 << (11 * 8)\n        ) {\n            if (makerFee.rate == 0 && fees.takerFee.rate == 0) {\n                emit Execution721Packed(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection)\n                );\n                return;\n            } else if (makerFee.rate == 0) {\n                emit Execution721TakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(fees.takerFee)\n                );\n                return;\n            } else if (fees.takerFee.rate == 0) {\n                emit Execution721MakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(makerFee)\n                );\n                return;\n            }\n        }\n\n        emit Execution({\n            transfer: transfer,\n            orderHash: orderHash,\n            listingIndex: listingIndex,\n            price: price,\n            makerFee: makerFee,\n            fees: fees,\n            orderType: orderType\n        });\n    }\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param order Order being fulfilled\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitExecutionEvent(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 listingIndex,\n        uint256 price,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(calldataPointer, add(transfersOffset, One_word))\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            bytes32(order.salt),\n            listingIndex,\n            price,\n            order.makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    function packTokenIdListingIndexTrader(\n        uint256 tokenId,\n        uint256 listingIndex,\n        address trader\n    ) private pure returns (uint256) {\n        return (tokenId << (21 * 8)) | (listingIndex << (20 * 8)) | uint160(trader);\n    }\n\n    function packTypePriceCollection(\n        OrderType orderType,\n        uint256 price,\n        address collection\n    ) private pure returns (uint256) {\n        return (uint256(orderType) << (31 * 8)) | (price << (20 * 8)) | uint160(collection);\n    }\n\n    function packFee(FeeRate memory fee) private pure returns (uint256) {\n        return (uint256(fee.rate) << (20 * 8)) | uint160(fee.recipient);\n    }\n\n    uint256[50] private __gap;\n}", 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Executor._computeFees', 'start_line': 1911, 'end_line': 1930, 'offset_start': 69967, 'offset_end': 70603, 'content': 'function _computeFees(\n        uint256 pricePerToken,\n        uint256 takerAmount,\n        FeeRate memory makerFee,\n        Fees memory fees\n    )\n        internal\n        pure\n        returns (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        )\n    {\n        totalPrice = pricePerToken * takerAmount;\n        makerFeeAmount = (totalPrice * makerFee.rate) / _BASIS_POINTS;\n        takerFeeAmount = (totalPrice * fees.takerFee.rate) / _BASIS_POINTS;\n        protocolFeeAmount = (totalPrice * fees.protocolFee.rate) / _BASIS_POINTS;\n    }', 'contract_name': 'Executor', 'contract_code': "{\n    address private immutable _DELEGATE;\n    address private immutable _POOL;\n\n    constructor(address delegate, address pool, address proxy) Validation(proxy) {\n        _DELEGATE = delegate;\n        _POOL = pool;\n    }\n\n    receive() external payable {\n        if (msg.sender != _POOL) {\n            revert Unauthorized();\n        }\n    }\n\n    /**\n     * @notice Insert a validated ask listing into the batch if there's sufficient ETH to fulfill\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing the listing to insert\n     * @param fees Protocol and taker fees\n     * @param remainingETH Available ETH remaining\n     * @return Available ETH remaining after insertion; if the listing was inserted in the batch\n     */\n    function _insertExecutionAsk(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees,\n        uint256 remainingETH\n    ) internal pure returns (uint256, bool) {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        /* Only insert the executions if there are sufficient funds to execute. */\n        if (remainingETH >= totalPrice + takerFeeAmount) {\n            unchecked {\n                remainingETH = remainingETH - totalPrice - takerFeeAmount;\n            }\n\n            _setAddresses(fungibleTransfers, order);\n\n            uint256 index = _insertNonfungibleTransfer(\n                executionBatch,\n                order,\n                exchange.listing.tokenId,\n                takerAmount\n            );\n\n            _insertFungibleTransfers(\n                fungibleTransfers,\n                takerAmount,\n                exchange.listing,\n                bytes32(order.salt),\n                index,\n                totalPrice,\n                protocolFeeAmount,\n                makerFeeAmount,\n                takerFeeAmount,\n                true\n            );\n\n            return (remainingETH, true);\n        } else {\n            return (remainingETH, false);\n        }\n    }\n\n    /**\n     * @notice Insert a validated bid listing into the batch\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing listing to insert\n     * @param fees Protocol and taker fees\n     */\n    function _insertExecutionBid(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees\n    ) internal pure {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        _setAddresses(fungibleTransfers, order);\n\n        uint256 index = _insertNonfungibleTransfer(\n            executionBatch,\n            order,\n            exchange.taker.tokenId,\n            takerAmount\n        );\n\n        _insertFungibleTransfers(\n            fungibleTransfers,\n            takerAmount,\n            exchange.listing,\n            bytes32(order.salt),\n            index,\n            totalPrice,\n            protocolFeeAmount,\n            makerFeeAmount,\n            takerFeeAmount,\n            false\n        );\n    }\n\n    /**\n     * @notice Insert the nonfungible transfer into the batch\n     * @param executionBatch Execution batch\n     * @param order Order\n     * @param tokenId Token id\n     * @param amount Number of token units\n     * @return transferIndex Index of the transfer\n     */\n    function _insertNonfungibleTransfer(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 tokenId,\n        uint256 amount\n    ) internal pure returns (uint256 transferIndex) {\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            transferIndex := mload(add(calldataPointer, ExecutionBatch_length_offset))\n\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            let transferPointer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n            mstore(\n                add(transferPointer, Transfer_trader_offset),\n                mload(add(order, Order_trader_offset))\n            ) // set the trader\n            mstore(add(transferPointer, Transfer_id_offset), tokenId) // set the token id\n            mstore(\n                add(transferPointer, Transfer_collection_offset),\n                mload(add(order, Order_collection_offset))\n            ) // set the collection\n            mstore(\n                add(transferPointer, Transfer_assetType_offset),\n                mload(add(order, Order_assetType_offset))\n            ) // set the asset type\n            mstore(add(calldataPointer, ExecutionBatch_length_offset), add(transferIndex, 1)) // increment the batch length\n\n            if eq(mload(add(order, Order_assetType_offset)), AssetType_ERC1155) {\n                mstore(add(transferPointer, Transfer_amount_offset), amount) // set the amount (don't need to set for ERC721's)\n            }\n        }\n    }\n\n    /**\n     * @notice Insert the fungible transfers that need to be executed atomically\n     * @param fungibleTransfers Fungible transfers struct\n     * @param takerAmount Amount of the listing being taken\n     * @param listing Listing to execute\n     * @param orderHash Order hash\n     * @param index Execution index\n     * @param totalPrice Total price of the purchased tokens\n     * @param protocolFeeAmount Computed protocol fee\n     * @param makerFeeAmount Computed maker fee\n     * @param takerFeeAmount Computed taker fee\n     * @param makerIsSeller Is the order maker the seller\n     */\n    function _insertFungibleTransfers(\n        FungibleTransfers memory fungibleTransfers,\n        uint256 takerAmount,\n        Listing memory listing,\n        bytes32 orderHash,\n        uint256 index,\n        uint256 totalPrice,\n        uint256 protocolFeeAmount,\n        uint256 makerFeeAmount,\n        uint256 takerFeeAmount,\n        bool makerIsSeller\n    ) internal pure {\n        uint256 makerId = fungibleTransfers.makerId;\n        fungibleTransfers.executions[index].makerId = makerId;\n        fungibleTransfers.executions[index].makerFeeRecipientId = fungibleTransfers.feeRecipientId;\n        fungibleTransfers.executions[index].stateUpdate = StateUpdate({\n            trader: fungibleTransfers.makers[makerId],\n            hash: orderHash,\n            index: listing.index,\n            value: takerAmount,\n            maxAmount: listing.amount\n        });\n        if (makerIsSeller) {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    makerFeeAmount;\n            }\n        } else {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    takerFeeAmount;\n            }\n        }\n        fungibleTransfers.executions[index].makerFeeAmount = makerFeeAmount;\n        fungibleTransfers.executions[index].takerFeeAmount = takerFeeAmount;\n        fungibleTransfers.executions[index].protocolFeeAmount = protocolFeeAmount;\n    }\n\n    /**\n     * @notice Set the addresses of the maker fee recipient and order maker if different than currently being batched\n     * @param fungibleTransfers Fungible transfers struct\n     * @param order Parent order of listing being added to the batch\n     */\n    function _setAddresses(\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order\n    ) internal pure {\n        address feeRecipient = order.makerFee.recipient;\n        uint256 feeRecipientId = fungibleTransfers.feeRecipientId;\n        address currentFeeRecipient = fungibleTransfers.feeRecipients[feeRecipientId];\n        if (feeRecipient != currentFeeRecipient) {\n            if (currentFeeRecipient == address(0)) {\n                fungibleTransfers.feeRecipients[feeRecipientId] = feeRecipient;\n            } else {\n                unchecked {\n                    fungibleTransfers.feeRecipients[++feeRecipientId] = feeRecipient;\n                }\n                fungibleTransfers.feeRecipientId = feeRecipientId;\n            }\n        }\n        address trader = order.trader;\n        uint256 makerId = fungibleTransfers.makerId;\n        address currentTrader = fungibleTransfers.makers[makerId];\n        if (trader != currentTrader) {\n            if (currentTrader == address(0)) {\n                fungibleTransfers.makers[makerId] = trader;\n            } else {\n                unchecked {\n                    fungibleTransfers.makers[++makerId] = trader;\n                }\n                fungibleTransfers.makerId = makerId;\n            }\n        }\n    }\n\n    /**\n     * @notice Compute all necessary fees to be taken\n     * @param pricePerToken Price per token unit\n     * @param takerAmount Number of token units taken (should only be greater than 1 for ERC1155)\n     * @param fees Protocol and taker fee set by the transaction\n     */\n    function _computeFees(\n        uint256 pricePerToken,\n        uint256 takerAmount,\n        FeeRate memory makerFee,\n        Fees memory fees\n    )\n        internal\n        pure\n        returns (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        )\n    {\n        totalPrice = pricePerToken * takerAmount;\n        makerFeeAmount = (totalPrice * makerFee.rate) / _BASIS_POINTS;\n        takerFeeAmount = (totalPrice * fees.takerFee.rate) / _BASIS_POINTS;\n        protocolFeeAmount = (totalPrice * fees.protocolFee.rate) / _BASIS_POINTS;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Execute the transfers by first attempting the nonfungible transfers, for the successful transfers sum the fungible transfers by the recipients and execute\n     * @param executionBatch Execution batch struct\n     * @param fungibleTransfers Fungible transfers struct\n     * @param fees Protocol, maker, taker fees (note: makerFee will be inaccurate at this point in execution)\n     * @param orderType Order type\n     */\n    function _executeBatchTransfer(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        uint256 batchLength;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            batchLength := mload(add(calldataPointer, ExecutionBatch_length_offset))\n        }\n        if (batchLength > 0) {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(\n                executionBatch,\n                batchLength\n            );\n\n            uint256 transfersLength = successfulTransfers.length;\n            for (uint256 i; i < transfersLength; ) {\n                if (successfulTransfers[i]) {\n                    AtomicExecution memory execution = fungibleTransfers.executions[i];\n                    FeeRate memory makerFee;\n                    uint256 price;\n                    unchecked {\n                        if (orderType == OrderType.ASK) {\n                            fungibleTransfers.makerTransfers[execution.makerId] += execution\n                                .sellerAmount; // amount that needs to be sent *to* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount;\n                        } else {\n                            fungibleTransfers.makerTransfers[execution.makerId] +=\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount +\n                                execution.takerFeeAmount +\n                                execution.sellerAmount; // amount that needs to be taken *from* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.takerFeeAmount;\n                        }\n                        fungibleTransfers.totalSellerTransfer += execution.sellerAmount; // only for bids\n                        fungibleTransfers.totalProtocolFee += execution.protocolFeeAmount;\n                        fungibleTransfers.totalTakerFee += execution.takerFeeAmount;\n                        fungibleTransfers.feeTransfers[execution.makerFeeRecipientId] += execution\n                            .makerFeeAmount;\n                        makerFee = FeeRate(\n                            fungibleTransfers.feeRecipients[execution.makerFeeRecipientId],\n                            uint16((execution.makerFeeAmount * _BASIS_POINTS) / price)\n                        );\n                    }\n\n                    /* Commit state updates. */\n                    StateUpdate memory stateUpdate = fungibleTransfers.executions[i].stateUpdate;\n                    {\n                        address trader = stateUpdate.trader;\n                        bytes32 hash = stateUpdate.hash;\n                        uint256 index = stateUpdate.index;\n                        uint256 _amountTaken = amountTaken[trader][hash][index];\n                        uint256 newAmountTaken = _amountTaken + stateUpdate.value;\n\n                        /* Overfulfilled Listings should be caught prior to inserting into the batch, but this check prevents any misuse. */\n                        if (newAmountTaken <= stateUpdate.maxAmount) {\n                            amountTaken[trader][hash][index] = newAmountTaken;\n                        } else {\n                            revert OrderFulfilled();\n                        }\n                    }\n\n                    _emitExecutionEventFromBatch(\n                        executionBatch,\n                        price,\n                        makerFee,\n                        fees,\n                        stateUpdate,\n                        orderType,\n                        i\n                    );\n                }\n\n                unchecked {\n                    ++i;\n                }\n            }\n\n            if (orderType == OrderType.ASK) {\n                /* Transfer the payments to the sellers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferETH(fungibleTransfers.makers[i], fungibleTransfers.makerTransfers[i]);\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferETH(\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferETH(fees.protocolFee.recipient, fungibleTransfers.totalProtocolFee);\n\n                /* Transfer the taker fees. */\n                _transferETH(fees.takerFee.recipient, fungibleTransfers.totalTakerFee);\n            } else {\n                /* Take the pool funds from the buyers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferPool(\n                        fungibleTransfers.makers[i],\n                        address(this),\n                        fungibleTransfers.makerTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the payment to the seller. */\n                _transferPool(address(this), msg.sender, fungibleTransfers.totalSellerTransfer);\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferPool(\n                        address(this),\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferPool(\n                    address(this),\n                    fees.protocolFee.recipient,\n                    fungibleTransfers.totalProtocolFee\n                );\n\n                /* Transfer the taker fees. */\n                _transferPool(\n                    address(this),\n                    fees.takerFee.recipient,\n                    fungibleTransfers.totalTakerFee\n                );\n            }\n        }\n    }\n\n    /**\n     * @notice Attempt to execute a series of nonfungible transfers through the delegate; reverts will be skipped\n     * @param executionBatch Execution batch struct\n     * @param batchIndex Current available transfer slot in the batch\n     * @return Array indicating which transfers were successful\n     */\n    function _executeNonfungibleTransfers(\n        bytes memory executionBatch,\n        uint256 batchIndex\n    ) internal returns (bool[] memory) {\n        address delegate = _DELEGATE;\n\n        /* Initialize the memory space for the successful transfers array returned from the Delegate call. */\n        uint256 successfulTransfersPointer;\n        assembly {\n            successfulTransfersPointer := mload(Memory_pointer)\n            /* Need to shift the free memory pointer ahead one word to account for the array pointer returned from the call. */\n            mstore(Memory_pointer, add(successfulTransfersPointer, One_word))\n        }\n\n        bool[] memory successfulTransfers = new bool[](batchIndex);\n        assembly {\n            let size := mload(executionBatch)\n            let selectorPointer := add(executionBatch, ExecutionBatch_selector_offset)\n            mstore(selectorPointer, shr(Bytes4_shift, Delegate_transfer_selector))\n            let success := call(\n                gas(),\n                delegate,\n                0,\n                add(selectorPointer, Delegate_transfer_calldata_offset),\n                sub(size, Delegate_transfer_calldata_offset),\n                successfulTransfersPointer,\n                add(0x40, mul(batchIndex, One_word))\n            )\n        }\n        return successfulTransfers;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        TRANSFER FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Transfer ETH\n     * @param to Recipient address\n     * @param amount Amount of ETH to send\n     */\n    function _transferETH(address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            assembly {\n                success := call(gas(), to, amount, 0, 0, 0, 0)\n            }\n            if (!success) {\n                revert ETHTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Transfer pool funds on behalf of a user\n     * @param from Sender address\n     * @param to Recipient address\n     * @param amount Amount to send\n     */\n    function _transferPool(address from, address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            address pool = _POOL;\n            assembly {\n                let x := mload(Memory_pointer)\n                mstore(x, ERC20_transferFrom_selector)\n                mstore(add(x, ERC20_transferFrom_from_offset), from)\n                mstore(add(x, ERC20_transferFrom_to_offset), to)\n                mstore(add(x, ERC20_transferFrom_amount_offset), amount)\n                success := call(gas(), pool, 0, x, ERC20_transferFrom_size, 0, 0)\n            }\n            if (!success) {\n                revert PoolTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Deposit ETH to user's pool funds\n     * @param to Recipient address\n     * @param amount Amount of ETH to deposit\n     */\n    function _depositPool(address to, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_deposit_selector)\n            mstore(add(x, Pool_deposit_user_offset), to)\n            success := call(gas(), pool, amount, x, Pool_deposit_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolDepositFailed();\n        }\n    }\n\n    /**\n     * @notice Withdraw ETH from user's pool funds\n     * @param from Address to withdraw from\n     * @param amount Amount of ETH to withdraw\n     */\n    function _withdrawFromPool(address from, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_withdrawFrom_selector)\n            mstore(add(x, Pool_withdrawFrom_from_offset), from)\n            mstore(add(x, Pool_withdrawFrom_to_offset), address())\n            mstore(add(x, Pool_withdrawFrom_amount_offset), amount)\n            success := call(gas(), pool, 0, x, Pool_withdrawFrom_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolWithdrawFromFailed();\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EVENT EMITTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param price Price of the token purchased\n     * @param fees Protocol, maker, and taker fees taken\n     * @param stateUpdate Fulfillment to be recorded with a successful execution\n     * @param orderType Order type\n     * @param transferIndex Index of the transfer corresponding to the execution\n     */\n    function _emitExecutionEventFromBatch(\n        bytes memory executionBatch,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        StateUpdate memory stateUpdate,\n        OrderType orderType,\n        uint256 transferIndex\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            stateUpdate.hash,\n            stateUpdate.index,\n            price,\n            makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    /**\n     * @notice Emit the Execution event that minimizes the number of bytes in the log\n     * @param transfer The nft transfer\n     * @param orderHash Order hash\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param makerFee Maker fees taken\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitOptimalExecutionEvent(\n        Transfer memory transfer,\n        bytes32 orderHash,\n        uint256 listingIndex,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        if (\n            // see _insertNonfungibleTransfer; ERC721 transfers don't set the transfer amount,\n            // so we can assume the transfer amount and not check it\n            transfer.assetType == AssetType.ERC721 &&\n            fees.protocolFee.rate == 0 &&\n            transfer.id < 1 << (11 * 8) &&\n            listingIndex < 1 << (1 * 8) &&\n            price < 1 << (11 * 8)\n        ) {\n            if (makerFee.rate == 0 && fees.takerFee.rate == 0) {\n                emit Execution721Packed(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection)\n                );\n                return;\n            } else if (makerFee.rate == 0) {\n                emit Execution721TakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(fees.takerFee)\n                );\n                return;\n            } else if (fees.takerFee.rate == 0) {\n                emit Execution721MakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(makerFee)\n                );\n                return;\n            }\n        }\n\n        emit Execution({\n            transfer: transfer,\n            orderHash: orderHash,\n            listingIndex: listingIndex,\n            price: price,\n            makerFee: makerFee,\n            fees: fees,\n            orderType: orderType\n        });\n    }\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param order Order being fulfilled\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitExecutionEvent(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 listingIndex,\n        uint256 price,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(calldataPointer, add(transfersOffset, One_word))\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            bytes32(order.salt),\n            listingIndex,\n            price,\n            order.makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    function packTokenIdListingIndexTrader(\n        uint256 tokenId,\n        uint256 listingIndex,\n        address trader\n    ) private pure returns (uint256) {\n        return (tokenId << (21 * 8)) | (listingIndex << (20 * 8)) | uint160(trader);\n    }\n\n    function packTypePriceCollection(\n        OrderType orderType,\n        uint256 price,\n        address collection\n    ) private pure returns (uint256) {\n        return (uint256(orderType) << (31 * 8)) | (price << (20 * 8)) | uint160(collection);\n    }\n\n    function packFee(FeeRate memory fee) private pure returns (uint256) {\n        return (uint256(fee.rate) << (20 * 8)) | uint160(fee.recipient);\n    }\n\n    uint256[50] private __gap;\n}", 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Executor._executeBatchTransfer', 'start_line': 1943, 'end_line': 2101, 'offset_start': 71234, 'offset_end': 78217, 'content': 'function _executeBatchTransfer(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        uint256 batchLength;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            batchLength := mload(add(calldataPointer, ExecutionBatch_length_offset))\n        }\n        if (batchLength > 0) {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(\n                executionBatch,\n                batchLength\n            );\n\n            uint256 transfersLength = successfulTransfers.length;\n            for (uint256 i; i < transfersLength; ) {\n                if (successfulTransfers[i]) {\n                    AtomicExecution memory execution = fungibleTransfers.executions[i];\n                    FeeRate memory makerFee;\n                    uint256 price;\n                    unchecked {\n                        if (orderType == OrderType.ASK) {\n                            fungibleTransfers.makerTransfers[execution.makerId] += execution\n                                .sellerAmount; // amount that needs to be sent *to* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount;\n                        } else {\n                            fungibleTransfers.makerTransfers[execution.makerId] +=\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount +\n                                execution.takerFeeAmount +\n                                execution.sellerAmount; // amount that needs to be taken *from* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.takerFeeAmount;\n                        }\n                        fungibleTransfers.totalSellerTransfer += execution.sellerAmount; // only for bids\n                        fungibleTransfers.totalProtocolFee += execution.protocolFeeAmount;\n                        fungibleTransfers.totalTakerFee += execution.takerFeeAmount;\n                        fungibleTransfers.feeTransfers[execution.makerFeeRecipientId] += execution\n                            .makerFeeAmount;\n                        makerFee = FeeRate(\n                            fungibleTransfers.feeRecipients[execution.makerFeeRecipientId],\n                            uint16((execution.makerFeeAmount * _BASIS_POINTS) / price)\n                        );\n                    }\n\n                    /* Commit state updates. */\n                    StateUpdate memory stateUpdate = fungibleTransfers.executions[i].stateUpdate;\n                    {\n                        address trader = stateUpdate.trader;\n                        bytes32 hash = stateUpdate.hash;\n                        uint256 index = stateUpdate.index;\n                        uint256 _amountTaken = amountTaken[trader][hash][index];\n                        uint256 newAmountTaken = _amountTaken + stateUpdate.value;\n\n                        /* Overfulfilled Listings should be caught prior to inserting into the batch, but this check prevents any misuse. */\n                        if (newAmountTaken <= stateUpdate.maxAmount) {\n                            amountTaken[trader][hash][index] = newAmountTaken;\n                        } else {\n                            revert OrderFulfilled();\n                        }\n                    }\n\n                    _emitExecutionEventFromBatch(\n                        executionBatch,\n                        price,\n                        makerFee,\n                        fees,\n                        stateUpdate,\n                        orderType,\n                        i\n                    );\n                }\n\n                unchecked {\n                    ++i;\n                }\n            }\n\n            if (orderType == OrderType.ASK) {\n                /* Transfer the payments to the sellers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferETH(fungibleTransfers.makers[i], fungibleTransfers.makerTransfers[i]);\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferETH(\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferETH(fees.protocolFee.recipient, fungibleTransfers.totalProtocolFee);\n\n                /* Transfer the taker fees. */\n                _transferETH(fees.takerFee.recipient, fungibleTransfers.totalTakerFee);\n            } else {\n                /* Take the pool funds from the buyers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferPool(\n                        fungibleTransfers.makers[i],\n                        address(this),\n                        fungibleTransfers.makerTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the payment to the seller. */\n                _transferPool(address(this), msg.sender, fungibleTransfers.totalSellerTransfer);\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferPool(\n                        address(this),\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferPool(\n                    address(this),\n                    fees.protocolFee.recipient,\n                    fungibleTransfers.totalProtocolFee\n                );\n\n                /* Transfer the taker fees. */\n                _transferPool(\n                    address(this),\n                    fees.takerFee.recipient,\n                    fungibleTransfers.totalTakerFee\n                );\n            }\n        }\n    }', 'contract_name': 'Executor', 'contract_code': "{\n    address private immutable _DELEGATE;\n    address private immutable _POOL;\n\n    constructor(address delegate, address pool, address proxy) Validation(proxy) {\n        _DELEGATE = delegate;\n        _POOL = pool;\n    }\n\n    receive() external payable {\n        if (msg.sender != _POOL) {\n            revert Unauthorized();\n        }\n    }\n\n    /**\n     * @notice Insert a validated ask listing into the batch if there's sufficient ETH to fulfill\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing the listing to insert\n     * @param fees Protocol and taker fees\n     * @param remainingETH Available ETH remaining\n     * @return Available ETH remaining after insertion; if the listing was inserted in the batch\n     */\n    function _insertExecutionAsk(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees,\n        uint256 remainingETH\n    ) internal pure returns (uint256, bool) {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        /* Only insert the executions if there are sufficient funds to execute. */\n        if (remainingETH >= totalPrice + takerFeeAmount) {\n            unchecked {\n                remainingETH = remainingETH - totalPrice - takerFeeAmount;\n            }\n\n            _setAddresses(fungibleTransfers, order);\n\n            uint256 index = _insertNonfungibleTransfer(\n                executionBatch,\n                order,\n                exchange.listing.tokenId,\n                takerAmount\n            );\n\n            _insertFungibleTransfers(\n                fungibleTransfers,\n                takerAmount,\n                exchange.listing,\n                bytes32(order.salt),\n                index,\n                totalPrice,\n                protocolFeeAmount,\n                makerFeeAmount,\n                takerFeeAmount,\n                true\n            );\n\n            return (remainingETH, true);\n        } else {\n            return (remainingETH, false);\n        }\n    }\n\n    /**\n     * @notice Insert a validated bid listing into the batch\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing listing to insert\n     * @param fees Protocol and taker fees\n     */\n    function _insertExecutionBid(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees\n    ) internal pure {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        _setAddresses(fungibleTransfers, order);\n\n        uint256 index = _insertNonfungibleTransfer(\n            executionBatch,\n            order,\n            exchange.taker.tokenId,\n            takerAmount\n        );\n\n        _insertFungibleTransfers(\n            fungibleTransfers,\n            takerAmount,\n            exchange.listing,\n            bytes32(order.salt),\n            index,\n            totalPrice,\n            protocolFeeAmount,\n            makerFeeAmount,\n            takerFeeAmount,\n            false\n        );\n    }\n\n    /**\n     * @notice Insert the nonfungible transfer into the batch\n     * @param executionBatch Execution batch\n     * @param order Order\n     * @param tokenId Token id\n     * @param amount Number of token units\n     * @return transferIndex Index of the transfer\n     */\n    function _insertNonfungibleTransfer(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 tokenId,\n        uint256 amount\n    ) internal pure returns (uint256 transferIndex) {\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            transferIndex := mload(add(calldataPointer, ExecutionBatch_length_offset))\n\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            let transferPointer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n            mstore(\n                add(transferPointer, Transfer_trader_offset),\n                mload(add(order, Order_trader_offset))\n            ) // set the trader\n            mstore(add(transferPointer, Transfer_id_offset), tokenId) // set the token id\n            mstore(\n                add(transferPointer, Transfer_collection_offset),\n                mload(add(order, Order_collection_offset))\n            ) // set the collection\n            mstore(\n                add(transferPointer, Transfer_assetType_offset),\n                mload(add(order, Order_assetType_offset))\n            ) // set the asset type\n            mstore(add(calldataPointer, ExecutionBatch_length_offset), add(transferIndex, 1)) // increment the batch length\n\n            if eq(mload(add(order, Order_assetType_offset)), AssetType_ERC1155) {\n                mstore(add(transferPointer, Transfer_amount_offset), amount) // set the amount (don't need to set for ERC721's)\n            }\n        }\n    }\n\n    /**\n     * @notice Insert the fungible transfers that need to be executed atomically\n     * @param fungibleTransfers Fungible transfers struct\n     * @param takerAmount Amount of the listing being taken\n     * @param listing Listing to execute\n     * @param orderHash Order hash\n     * @param index Execution index\n     * @param totalPrice Total price of the purchased tokens\n     * @param protocolFeeAmount Computed protocol fee\n     * @param makerFeeAmount Computed maker fee\n     * @param takerFeeAmount Computed taker fee\n     * @param makerIsSeller Is the order maker the seller\n     */\n    function _insertFungibleTransfers(\n        FungibleTransfers memory fungibleTransfers,\n        uint256 takerAmount,\n        Listing memory listing,\n        bytes32 orderHash,\n        uint256 index,\n        uint256 totalPrice,\n        uint256 protocolFeeAmount,\n        uint256 makerFeeAmount,\n        uint256 takerFeeAmount,\n        bool makerIsSeller\n    ) internal pure {\n        uint256 makerId = fungibleTransfers.makerId;\n        fungibleTransfers.executions[index].makerId = makerId;\n        fungibleTransfers.executions[index].makerFeeRecipientId = fungibleTransfers.feeRecipientId;\n        fungibleTransfers.executions[index].stateUpdate = StateUpdate({\n            trader: fungibleTransfers.makers[makerId],\n            hash: orderHash,\n            index: listing.index,\n            value: takerAmount,\n            maxAmount: listing.amount\n        });\n        if (makerIsSeller) {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    makerFeeAmount;\n            }\n        } else {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    takerFeeAmount;\n            }\n        }\n        fungibleTransfers.executions[index].makerFeeAmount = makerFeeAmount;\n        fungibleTransfers.executions[index].takerFeeAmount = takerFeeAmount;\n        fungibleTransfers.executions[index].protocolFeeAmount = protocolFeeAmount;\n    }\n\n    /**\n     * @notice Set the addresses of the maker fee recipient and order maker if different than currently being batched\n     * @param fungibleTransfers Fungible transfers struct\n     * @param order Parent order of listing being added to the batch\n     */\n    function _setAddresses(\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order\n    ) internal pure {\n        address feeRecipient = order.makerFee.recipient;\n        uint256 feeRecipientId = fungibleTransfers.feeRecipientId;\n        address currentFeeRecipient = fungibleTransfers.feeRecipients[feeRecipientId];\n        if (feeRecipient != currentFeeRecipient) {\n            if (currentFeeRecipient == address(0)) {\n                fungibleTransfers.feeRecipients[feeRecipientId] = feeRecipient;\n            } else {\n                unchecked {\n                    fungibleTransfers.feeRecipients[++feeRecipientId] = feeRecipient;\n                }\n                fungibleTransfers.feeRecipientId = feeRecipientId;\n            }\n        }\n        address trader = order.trader;\n        uint256 makerId = fungibleTransfers.makerId;\n        address currentTrader = fungibleTransfers.makers[makerId];\n        if (trader != currentTrader) {\n            if (currentTrader == address(0)) {\n                fungibleTransfers.makers[makerId] = trader;\n            } else {\n                unchecked {\n                    fungibleTransfers.makers[++makerId] = trader;\n                }\n                fungibleTransfers.makerId = makerId;\n            }\n        }\n    }\n\n    /**\n     * @notice Compute all necessary fees to be taken\n     * @param pricePerToken Price per token unit\n     * @param takerAmount Number of token units taken (should only be greater than 1 for ERC1155)\n     * @param fees Protocol and taker fee set by the transaction\n     */\n    function _computeFees(\n        uint256 pricePerToken,\n        uint256 takerAmount,\n        FeeRate memory makerFee,\n        Fees memory fees\n    )\n        internal\n        pure\n        returns (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        )\n    {\n        totalPrice = pricePerToken * takerAmount;\n        makerFeeAmount = (totalPrice * makerFee.rate) / _BASIS_POINTS;\n        takerFeeAmount = (totalPrice * fees.takerFee.rate) / _BASIS_POINTS;\n        protocolFeeAmount = (totalPrice * fees.protocolFee.rate) / _BASIS_POINTS;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Execute the transfers by first attempting the nonfungible transfers, for the successful transfers sum the fungible transfers by the recipients and execute\n     * @param executionBatch Execution batch struct\n     * @param fungibleTransfers Fungible transfers struct\n     * @param fees Protocol, maker, taker fees (note: makerFee will be inaccurate at this point in execution)\n     * @param orderType Order type\n     */\n    function _executeBatchTransfer(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        uint256 batchLength;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            batchLength := mload(add(calldataPointer, ExecutionBatch_length_offset))\n        }\n        if (batchLength > 0) {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(\n                executionBatch,\n                batchLength\n            );\n\n            uint256 transfersLength = successfulTransfers.length;\n            for (uint256 i; i < transfersLength; ) {\n                if (successfulTransfers[i]) {\n                    AtomicExecution memory execution = fungibleTransfers.executions[i];\n                    FeeRate memory makerFee;\n                    uint256 price;\n                    unchecked {\n                        if (orderType == OrderType.ASK) {\n                            fungibleTransfers.makerTransfers[execution.makerId] += execution\n                                .sellerAmount; // amount that needs to be sent *to* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount;\n                        } else {\n                            fungibleTransfers.makerTransfers[execution.makerId] +=\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount +\n                                execution.takerFeeAmount +\n                                execution.sellerAmount; // amount that needs to be taken *from* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.takerFeeAmount;\n                        }\n                        fungibleTransfers.totalSellerTransfer += execution.sellerAmount; // only for bids\n                        fungibleTransfers.totalProtocolFee += execution.protocolFeeAmount;\n                        fungibleTransfers.totalTakerFee += execution.takerFeeAmount;\n                        fungibleTransfers.feeTransfers[execution.makerFeeRecipientId] += execution\n                            .makerFeeAmount;\n                        makerFee = FeeRate(\n                            fungibleTransfers.feeRecipients[execution.makerFeeRecipientId],\n                            uint16((execution.makerFeeAmount * _BASIS_POINTS) / price)\n                        );\n                    }\n\n                    /* Commit state updates. */\n                    StateUpdate memory stateUpdate = fungibleTransfers.executions[i].stateUpdate;\n                    {\n                        address trader = stateUpdate.trader;\n                        bytes32 hash = stateUpdate.hash;\n                        uint256 index = stateUpdate.index;\n                        uint256 _amountTaken = amountTaken[trader][hash][index];\n                        uint256 newAmountTaken = _amountTaken + stateUpdate.value;\n\n                        /* Overfulfilled Listings should be caught prior to inserting into the batch, but this check prevents any misuse. */\n                        if (newAmountTaken <= stateUpdate.maxAmount) {\n                            amountTaken[trader][hash][index] = newAmountTaken;\n                        } else {\n                            revert OrderFulfilled();\n                        }\n                    }\n\n                    _emitExecutionEventFromBatch(\n                        executionBatch,\n                        price,\n                        makerFee,\n                        fees,\n                        stateUpdate,\n                        orderType,\n                        i\n                    );\n                }\n\n                unchecked {\n                    ++i;\n                }\n            }\n\n            if (orderType == OrderType.ASK) {\n                /* Transfer the payments to the sellers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferETH(fungibleTransfers.makers[i], fungibleTransfers.makerTransfers[i]);\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferETH(\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferETH(fees.protocolFee.recipient, fungibleTransfers.totalProtocolFee);\n\n                /* Transfer the taker fees. */\n                _transferETH(fees.takerFee.recipient, fungibleTransfers.totalTakerFee);\n            } else {\n                /* Take the pool funds from the buyers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferPool(\n                        fungibleTransfers.makers[i],\n                        address(this),\n                        fungibleTransfers.makerTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the payment to the seller. */\n                _transferPool(address(this), msg.sender, fungibleTransfers.totalSellerTransfer);\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferPool(\n                        address(this),\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferPool(\n                    address(this),\n                    fees.protocolFee.recipient,\n                    fungibleTransfers.totalProtocolFee\n                );\n\n                /* Transfer the taker fees. */\n                _transferPool(\n                    address(this),\n                    fees.takerFee.recipient,\n                    fungibleTransfers.totalTakerFee\n                );\n            }\n        }\n    }\n\n    /**\n     * @notice Attempt to execute a series of nonfungible transfers through the delegate; reverts will be skipped\n     * @param executionBatch Execution batch struct\n     * @param batchIndex Current available transfer slot in the batch\n     * @return Array indicating which transfers were successful\n     */\n    function _executeNonfungibleTransfers(\n        bytes memory executionBatch,\n        uint256 batchIndex\n    ) internal returns (bool[] memory) {\n        address delegate = _DELEGATE;\n\n        /* Initialize the memory space for the successful transfers array returned from the Delegate call. */\n        uint256 successfulTransfersPointer;\n        assembly {\n            successfulTransfersPointer := mload(Memory_pointer)\n            /* Need to shift the free memory pointer ahead one word to account for the array pointer returned from the call. */\n            mstore(Memory_pointer, add(successfulTransfersPointer, One_word))\n        }\n\n        bool[] memory successfulTransfers = new bool[](batchIndex);\n        assembly {\n            let size := mload(executionBatch)\n            let selectorPointer := add(executionBatch, ExecutionBatch_selector_offset)\n            mstore(selectorPointer, shr(Bytes4_shift, Delegate_transfer_selector))\n            let success := call(\n                gas(),\n                delegate,\n                0,\n                add(selectorPointer, Delegate_transfer_calldata_offset),\n                sub(size, Delegate_transfer_calldata_offset),\n                successfulTransfersPointer,\n                add(0x40, mul(batchIndex, One_word))\n            )\n        }\n        return successfulTransfers;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        TRANSFER FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Transfer ETH\n     * @param to Recipient address\n     * @param amount Amount of ETH to send\n     */\n    function _transferETH(address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            assembly {\n                success := call(gas(), to, amount, 0, 0, 0, 0)\n            }\n            if (!success) {\n                revert ETHTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Transfer pool funds on behalf of a user\n     * @param from Sender address\n     * @param to Recipient address\n     * @param amount Amount to send\n     */\n    function _transferPool(address from, address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            address pool = _POOL;\n            assembly {\n                let x := mload(Memory_pointer)\n                mstore(x, ERC20_transferFrom_selector)\n                mstore(add(x, ERC20_transferFrom_from_offset), from)\n                mstore(add(x, ERC20_transferFrom_to_offset), to)\n                mstore(add(x, ERC20_transferFrom_amount_offset), amount)\n                success := call(gas(), pool, 0, x, ERC20_transferFrom_size, 0, 0)\n            }\n            if (!success) {\n                revert PoolTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Deposit ETH to user's pool funds\n     * @param to Recipient address\n     * @param amount Amount of ETH to deposit\n     */\n    function _depositPool(address to, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_deposit_selector)\n            mstore(add(x, Pool_deposit_user_offset), to)\n            success := call(gas(), pool, amount, x, Pool_deposit_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolDepositFailed();\n        }\n    }\n\n    /**\n     * @notice Withdraw ETH from user's pool funds\n     * @param from Address to withdraw from\n     * @param amount Amount of ETH to withdraw\n     */\n    function _withdrawFromPool(address from, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_withdrawFrom_selector)\n            mstore(add(x, Pool_withdrawFrom_from_offset), from)\n            mstore(add(x, Pool_withdrawFrom_to_offset), address())\n            mstore(add(x, Pool_withdrawFrom_amount_offset), amount)\n            success := call(gas(), pool, 0, x, Pool_withdrawFrom_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolWithdrawFromFailed();\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EVENT EMITTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param price Price of the token purchased\n     * @param fees Protocol, maker, and taker fees taken\n     * @param stateUpdate Fulfillment to be recorded with a successful execution\n     * @param orderType Order type\n     * @param transferIndex Index of the transfer corresponding to the execution\n     */\n    function _emitExecutionEventFromBatch(\n        bytes memory executionBatch,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        StateUpdate memory stateUpdate,\n        OrderType orderType,\n        uint256 transferIndex\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            stateUpdate.hash,\n            stateUpdate.index,\n            price,\n            makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    /**\n     * @notice Emit the Execution event that minimizes the number of bytes in the log\n     * @param transfer The nft transfer\n     * @param orderHash Order hash\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param makerFee Maker fees taken\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitOptimalExecutionEvent(\n        Transfer memory transfer,\n        bytes32 orderHash,\n        uint256 listingIndex,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        if (\n            // see _insertNonfungibleTransfer; ERC721 transfers don't set the transfer amount,\n            // so we can assume the transfer amount and not check it\n            transfer.assetType == AssetType.ERC721 &&\n            fees.protocolFee.rate == 0 &&\n            transfer.id < 1 << (11 * 8) &&\n            listingIndex < 1 << (1 * 8) &&\n            price < 1 << (11 * 8)\n        ) {\n            if (makerFee.rate == 0 && fees.takerFee.rate == 0) {\n                emit Execution721Packed(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection)\n                );\n                return;\n            } else if (makerFee.rate == 0) {\n                emit Execution721TakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(fees.takerFee)\n                );\n                return;\n            } else if (fees.takerFee.rate == 0) {\n                emit Execution721MakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(makerFee)\n                );\n                return;\n            }\n        }\n\n        emit Execution({\n            transfer: transfer,\n            orderHash: orderHash,\n            listingIndex: listingIndex,\n            price: price,\n            makerFee: makerFee,\n            fees: fees,\n            orderType: orderType\n        });\n    }\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param order Order being fulfilled\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitExecutionEvent(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 listingIndex,\n        uint256 price,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(calldataPointer, add(transfersOffset, One_word))\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            bytes32(order.salt),\n            listingIndex,\n            price,\n            order.makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    function packTokenIdListingIndexTrader(\n        uint256 tokenId,\n        uint256 listingIndex,\n        address trader\n    ) private pure returns (uint256) {\n        return (tokenId << (21 * 8)) | (listingIndex << (20 * 8)) | uint160(trader);\n    }\n\n    function packTypePriceCollection(\n        OrderType orderType,\n        uint256 price,\n        address collection\n    ) private pure returns (uint256) {\n        return (uint256(orderType) << (31 * 8)) | (price << (20 * 8)) | uint160(collection);\n    }\n\n    function packFee(FeeRate memory fee) private pure returns (uint256) {\n        return (uint256(fee.rate) << (20 * 8)) | uint160(fee.recipient);\n    }\n\n    uint256[50] private __gap;\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Executor._executeNonfungibleTransfers', 'start_line': 2109, 'end_line': 2139, 'offset_start': 78540, 'offset_end': 79877, 'content': 'function _executeNonfungibleTransfers(\n        bytes memory executionBatch,\n        uint256 batchIndex\n    ) internal returns (bool[] memory) {\n        address delegate = _DELEGATE;\n\n        /* Initialize the memory space for the successful transfers array returned from the Delegate call. */\n        uint256 successfulTransfersPointer;\n        assembly {\n            successfulTransfersPointer := mload(Memory_pointer)\n            /* Need to shift the free memory pointer ahead one word to account for the array pointer returned from the call. */\n            mstore(Memory_pointer, add(successfulTransfersPointer, One_word))\n        }\n\n        bool[] memory successfulTransfers = new bool[](batchIndex);\n        assembly {\n            let size := mload(executionBatch)\n            let selectorPointer := add(executionBatch, ExecutionBatch_selector_offset)\n            mstore(selectorPointer, shr(Bytes4_shift, Delegate_transfer_selector))\n            let success := call(\n                gas(),\n                delegate,\n                0,\n                add(selectorPointer, Delegate_transfer_calldata_offset),\n                sub(size, Delegate_transfer_calldata_offset),\n                successfulTransfersPointer,\n                add(0x40, mul(batchIndex, One_word))\n            )\n        }\n        return successfulTransfers;\n    }', 'contract_name': 'Executor', 'contract_code': "{\n    address private immutable _DELEGATE;\n    address private immutable _POOL;\n\n    constructor(address delegate, address pool, address proxy) Validation(proxy) {\n        _DELEGATE = delegate;\n        _POOL = pool;\n    }\n\n    receive() external payable {\n        if (msg.sender != _POOL) {\n            revert Unauthorized();\n        }\n    }\n\n    /**\n     * @notice Insert a validated ask listing into the batch if there's sufficient ETH to fulfill\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing the listing to insert\n     * @param fees Protocol and taker fees\n     * @param remainingETH Available ETH remaining\n     * @return Available ETH remaining after insertion; if the listing was inserted in the batch\n     */\n    function _insertExecutionAsk(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees,\n        uint256 remainingETH\n    ) internal pure returns (uint256, bool) {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        /* Only insert the executions if there are sufficient funds to execute. */\n        if (remainingETH >= totalPrice + takerFeeAmount) {\n            unchecked {\n                remainingETH = remainingETH - totalPrice - takerFeeAmount;\n            }\n\n            _setAddresses(fungibleTransfers, order);\n\n            uint256 index = _insertNonfungibleTransfer(\n                executionBatch,\n                order,\n                exchange.listing.tokenId,\n                takerAmount\n            );\n\n            _insertFungibleTransfers(\n                fungibleTransfers,\n                takerAmount,\n                exchange.listing,\n                bytes32(order.salt),\n                index,\n                totalPrice,\n                protocolFeeAmount,\n                makerFeeAmount,\n                takerFeeAmount,\n                true\n            );\n\n            return (remainingETH, true);\n        } else {\n            return (remainingETH, false);\n        }\n    }\n\n    /**\n     * @notice Insert a validated bid listing into the batch\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing listing to insert\n     * @param fees Protocol and taker fees\n     */\n    function _insertExecutionBid(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees\n    ) internal pure {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        _setAddresses(fungibleTransfers, order);\n\n        uint256 index = _insertNonfungibleTransfer(\n            executionBatch,\n            order,\n            exchange.taker.tokenId,\n            takerAmount\n        );\n\n        _insertFungibleTransfers(\n            fungibleTransfers,\n            takerAmount,\n            exchange.listing,\n            bytes32(order.salt),\n            index,\n            totalPrice,\n            protocolFeeAmount,\n            makerFeeAmount,\n            takerFeeAmount,\n            false\n        );\n    }\n\n    /**\n     * @notice Insert the nonfungible transfer into the batch\n     * @param executionBatch Execution batch\n     * @param order Order\n     * @param tokenId Token id\n     * @param amount Number of token units\n     * @return transferIndex Index of the transfer\n     */\n    function _insertNonfungibleTransfer(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 tokenId,\n        uint256 amount\n    ) internal pure returns (uint256 transferIndex) {\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            transferIndex := mload(add(calldataPointer, ExecutionBatch_length_offset))\n\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            let transferPointer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n            mstore(\n                add(transferPointer, Transfer_trader_offset),\n                mload(add(order, Order_trader_offset))\n            ) // set the trader\n            mstore(add(transferPointer, Transfer_id_offset), tokenId) // set the token id\n            mstore(\n                add(transferPointer, Transfer_collection_offset),\n                mload(add(order, Order_collection_offset))\n            ) // set the collection\n            mstore(\n                add(transferPointer, Transfer_assetType_offset),\n                mload(add(order, Order_assetType_offset))\n            ) // set the asset type\n            mstore(add(calldataPointer, ExecutionBatch_length_offset), add(transferIndex, 1)) // increment the batch length\n\n            if eq(mload(add(order, Order_assetType_offset)), AssetType_ERC1155) {\n                mstore(add(transferPointer, Transfer_amount_offset), amount) // set the amount (don't need to set for ERC721's)\n            }\n        }\n    }\n\n    /**\n     * @notice Insert the fungible transfers that need to be executed atomically\n     * @param fungibleTransfers Fungible transfers struct\n     * @param takerAmount Amount of the listing being taken\n     * @param listing Listing to execute\n     * @param orderHash Order hash\n     * @param index Execution index\n     * @param totalPrice Total price of the purchased tokens\n     * @param protocolFeeAmount Computed protocol fee\n     * @param makerFeeAmount Computed maker fee\n     * @param takerFeeAmount Computed taker fee\n     * @param makerIsSeller Is the order maker the seller\n     */\n    function _insertFungibleTransfers(\n        FungibleTransfers memory fungibleTransfers,\n        uint256 takerAmount,\n        Listing memory listing,\n        bytes32 orderHash,\n        uint256 index,\n        uint256 totalPrice,\n        uint256 protocolFeeAmount,\n        uint256 makerFeeAmount,\n        uint256 takerFeeAmount,\n        bool makerIsSeller\n    ) internal pure {\n        uint256 makerId = fungibleTransfers.makerId;\n        fungibleTransfers.executions[index].makerId = makerId;\n        fungibleTransfers.executions[index].makerFeeRecipientId = fungibleTransfers.feeRecipientId;\n        fungibleTransfers.executions[index].stateUpdate = StateUpdate({\n            trader: fungibleTransfers.makers[makerId],\n            hash: orderHash,\n            index: listing.index,\n            value: takerAmount,\n            maxAmount: listing.amount\n        });\n        if (makerIsSeller) {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    makerFeeAmount;\n            }\n        } else {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    takerFeeAmount;\n            }\n        }\n        fungibleTransfers.executions[index].makerFeeAmount = makerFeeAmount;\n        fungibleTransfers.executions[index].takerFeeAmount = takerFeeAmount;\n        fungibleTransfers.executions[index].protocolFeeAmount = protocolFeeAmount;\n    }\n\n    /**\n     * @notice Set the addresses of the maker fee recipient and order maker if different than currently being batched\n     * @param fungibleTransfers Fungible transfers struct\n     * @param order Parent order of listing being added to the batch\n     */\n    function _setAddresses(\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order\n    ) internal pure {\n        address feeRecipient = order.makerFee.recipient;\n        uint256 feeRecipientId = fungibleTransfers.feeRecipientId;\n        address currentFeeRecipient = fungibleTransfers.feeRecipients[feeRecipientId];\n        if (feeRecipient != currentFeeRecipient) {\n            if (currentFeeRecipient == address(0)) {\n                fungibleTransfers.feeRecipients[feeRecipientId] = feeRecipient;\n            } else {\n                unchecked {\n                    fungibleTransfers.feeRecipients[++feeRecipientId] = feeRecipient;\n                }\n                fungibleTransfers.feeRecipientId = feeRecipientId;\n            }\n        }\n        address trader = order.trader;\n        uint256 makerId = fungibleTransfers.makerId;\n        address currentTrader = fungibleTransfers.makers[makerId];\n        if (trader != currentTrader) {\n            if (currentTrader == address(0)) {\n                fungibleTransfers.makers[makerId] = trader;\n            } else {\n                unchecked {\n                    fungibleTransfers.makers[++makerId] = trader;\n                }\n                fungibleTransfers.makerId = makerId;\n            }\n        }\n    }\n\n    /**\n     * @notice Compute all necessary fees to be taken\n     * @param pricePerToken Price per token unit\n     * @param takerAmount Number of token units taken (should only be greater than 1 for ERC1155)\n     * @param fees Protocol and taker fee set by the transaction\n     */\n    function _computeFees(\n        uint256 pricePerToken,\n        uint256 takerAmount,\n        FeeRate memory makerFee,\n        Fees memory fees\n    )\n        internal\n        pure\n        returns (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        )\n    {\n        totalPrice = pricePerToken * takerAmount;\n        makerFeeAmount = (totalPrice * makerFee.rate) / _BASIS_POINTS;\n        takerFeeAmount = (totalPrice * fees.takerFee.rate) / _BASIS_POINTS;\n        protocolFeeAmount = (totalPrice * fees.protocolFee.rate) / _BASIS_POINTS;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Execute the transfers by first attempting the nonfungible transfers, for the successful transfers sum the fungible transfers by the recipients and execute\n     * @param executionBatch Execution batch struct\n     * @param fungibleTransfers Fungible transfers struct\n     * @param fees Protocol, maker, taker fees (note: makerFee will be inaccurate at this point in execution)\n     * @param orderType Order type\n     */\n    function _executeBatchTransfer(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        uint256 batchLength;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            batchLength := mload(add(calldataPointer, ExecutionBatch_length_offset))\n        }\n        if (batchLength > 0) {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(\n                executionBatch,\n                batchLength\n            );\n\n            uint256 transfersLength = successfulTransfers.length;\n            for (uint256 i; i < transfersLength; ) {\n                if (successfulTransfers[i]) {\n                    AtomicExecution memory execution = fungibleTransfers.executions[i];\n                    FeeRate memory makerFee;\n                    uint256 price;\n                    unchecked {\n                        if (orderType == OrderType.ASK) {\n                            fungibleTransfers.makerTransfers[execution.makerId] += execution\n                                .sellerAmount; // amount that needs to be sent *to* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount;\n                        } else {\n                            fungibleTransfers.makerTransfers[execution.makerId] +=\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount +\n                                execution.takerFeeAmount +\n                                execution.sellerAmount; // amount that needs to be taken *from* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.takerFeeAmount;\n                        }\n                        fungibleTransfers.totalSellerTransfer += execution.sellerAmount; // only for bids\n                        fungibleTransfers.totalProtocolFee += execution.protocolFeeAmount;\n                        fungibleTransfers.totalTakerFee += execution.takerFeeAmount;\n                        fungibleTransfers.feeTransfers[execution.makerFeeRecipientId] += execution\n                            .makerFeeAmount;\n                        makerFee = FeeRate(\n                            fungibleTransfers.feeRecipients[execution.makerFeeRecipientId],\n                            uint16((execution.makerFeeAmount * _BASIS_POINTS) / price)\n                        );\n                    }\n\n                    /* Commit state updates. */\n                    StateUpdate memory stateUpdate = fungibleTransfers.executions[i].stateUpdate;\n                    {\n                        address trader = stateUpdate.trader;\n                        bytes32 hash = stateUpdate.hash;\n                        uint256 index = stateUpdate.index;\n                        uint256 _amountTaken = amountTaken[trader][hash][index];\n                        uint256 newAmountTaken = _amountTaken + stateUpdate.value;\n\n                        /* Overfulfilled Listings should be caught prior to inserting into the batch, but this check prevents any misuse. */\n                        if (newAmountTaken <= stateUpdate.maxAmount) {\n                            amountTaken[trader][hash][index] = newAmountTaken;\n                        } else {\n                            revert OrderFulfilled();\n                        }\n                    }\n\n                    _emitExecutionEventFromBatch(\n                        executionBatch,\n                        price,\n                        makerFee,\n                        fees,\n                        stateUpdate,\n                        orderType,\n                        i\n                    );\n                }\n\n                unchecked {\n                    ++i;\n                }\n            }\n\n            if (orderType == OrderType.ASK) {\n                /* Transfer the payments to the sellers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferETH(fungibleTransfers.makers[i], fungibleTransfers.makerTransfers[i]);\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferETH(\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferETH(fees.protocolFee.recipient, fungibleTransfers.totalProtocolFee);\n\n                /* Transfer the taker fees. */\n                _transferETH(fees.takerFee.recipient, fungibleTransfers.totalTakerFee);\n            } else {\n                /* Take the pool funds from the buyers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferPool(\n                        fungibleTransfers.makers[i],\n                        address(this),\n                        fungibleTransfers.makerTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the payment to the seller. */\n                _transferPool(address(this), msg.sender, fungibleTransfers.totalSellerTransfer);\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferPool(\n                        address(this),\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferPool(\n                    address(this),\n                    fees.protocolFee.recipient,\n                    fungibleTransfers.totalProtocolFee\n                );\n\n                /* Transfer the taker fees. */\n                _transferPool(\n                    address(this),\n                    fees.takerFee.recipient,\n                    fungibleTransfers.totalTakerFee\n                );\n            }\n        }\n    }\n\n    /**\n     * @notice Attempt to execute a series of nonfungible transfers through the delegate; reverts will be skipped\n     * @param executionBatch Execution batch struct\n     * @param batchIndex Current available transfer slot in the batch\n     * @return Array indicating which transfers were successful\n     */\n    function _executeNonfungibleTransfers(\n        bytes memory executionBatch,\n        uint256 batchIndex\n    ) internal returns (bool[] memory) {\n        address delegate = _DELEGATE;\n\n        /* Initialize the memory space for the successful transfers array returned from the Delegate call. */\n        uint256 successfulTransfersPointer;\n        assembly {\n            successfulTransfersPointer := mload(Memory_pointer)\n            /* Need to shift the free memory pointer ahead one word to account for the array pointer returned from the call. */\n            mstore(Memory_pointer, add(successfulTransfersPointer, One_word))\n        }\n\n        bool[] memory successfulTransfers = new bool[](batchIndex);\n        assembly {\n            let size := mload(executionBatch)\n            let selectorPointer := add(executionBatch, ExecutionBatch_selector_offset)\n            mstore(selectorPointer, shr(Bytes4_shift, Delegate_transfer_selector))\n            let success := call(\n                gas(),\n                delegate,\n                0,\n                add(selectorPointer, Delegate_transfer_calldata_offset),\n                sub(size, Delegate_transfer_calldata_offset),\n                successfulTransfersPointer,\n                add(0x40, mul(batchIndex, One_word))\n            )\n        }\n        return successfulTransfers;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        TRANSFER FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Transfer ETH\n     * @param to Recipient address\n     * @param amount Amount of ETH to send\n     */\n    function _transferETH(address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            assembly {\n                success := call(gas(), to, amount, 0, 0, 0, 0)\n            }\n            if (!success) {\n                revert ETHTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Transfer pool funds on behalf of a user\n     * @param from Sender address\n     * @param to Recipient address\n     * @param amount Amount to send\n     */\n    function _transferPool(address from, address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            address pool = _POOL;\n            assembly {\n                let x := mload(Memory_pointer)\n                mstore(x, ERC20_transferFrom_selector)\n                mstore(add(x, ERC20_transferFrom_from_offset), from)\n                mstore(add(x, ERC20_transferFrom_to_offset), to)\n                mstore(add(x, ERC20_transferFrom_amount_offset), amount)\n                success := call(gas(), pool, 0, x, ERC20_transferFrom_size, 0, 0)\n            }\n            if (!success) {\n                revert PoolTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Deposit ETH to user's pool funds\n     * @param to Recipient address\n     * @param amount Amount of ETH to deposit\n     */\n    function _depositPool(address to, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_deposit_selector)\n            mstore(add(x, Pool_deposit_user_offset), to)\n            success := call(gas(), pool, amount, x, Pool_deposit_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolDepositFailed();\n        }\n    }\n\n    /**\n     * @notice Withdraw ETH from user's pool funds\n     * @param from Address to withdraw from\n     * @param amount Amount of ETH to withdraw\n     */\n    function _withdrawFromPool(address from, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_withdrawFrom_selector)\n            mstore(add(x, Pool_withdrawFrom_from_offset), from)\n            mstore(add(x, Pool_withdrawFrom_to_offset), address())\n            mstore(add(x, Pool_withdrawFrom_amount_offset), amount)\n            success := call(gas(), pool, 0, x, Pool_withdrawFrom_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolWithdrawFromFailed();\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EVENT EMITTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param price Price of the token purchased\n     * @param fees Protocol, maker, and taker fees taken\n     * @param stateUpdate Fulfillment to be recorded with a successful execution\n     * @param orderType Order type\n     * @param transferIndex Index of the transfer corresponding to the execution\n     */\n    function _emitExecutionEventFromBatch(\n        bytes memory executionBatch,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        StateUpdate memory stateUpdate,\n        OrderType orderType,\n        uint256 transferIndex\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            stateUpdate.hash,\n            stateUpdate.index,\n            price,\n            makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    /**\n     * @notice Emit the Execution event that minimizes the number of bytes in the log\n     * @param transfer The nft transfer\n     * @param orderHash Order hash\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param makerFee Maker fees taken\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitOptimalExecutionEvent(\n        Transfer memory transfer,\n        bytes32 orderHash,\n        uint256 listingIndex,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        if (\n            // see _insertNonfungibleTransfer; ERC721 transfers don't set the transfer amount,\n            // so we can assume the transfer amount and not check it\n            transfer.assetType == AssetType.ERC721 &&\n            fees.protocolFee.rate == 0 &&\n            transfer.id < 1 << (11 * 8) &&\n            listingIndex < 1 << (1 * 8) &&\n            price < 1 << (11 * 8)\n        ) {\n            if (makerFee.rate == 0 && fees.takerFee.rate == 0) {\n                emit Execution721Packed(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection)\n                );\n                return;\n            } else if (makerFee.rate == 0) {\n                emit Execution721TakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(fees.takerFee)\n                );\n                return;\n            } else if (fees.takerFee.rate == 0) {\n                emit Execution721MakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(makerFee)\n                );\n                return;\n            }\n        }\n\n        emit Execution({\n            transfer: transfer,\n            orderHash: orderHash,\n            listingIndex: listingIndex,\n            price: price,\n            makerFee: makerFee,\n            fees: fees,\n            orderType: orderType\n        });\n    }\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param order Order being fulfilled\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitExecutionEvent(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 listingIndex,\n        uint256 price,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(calldataPointer, add(transfersOffset, One_word))\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            bytes32(order.salt),\n            listingIndex,\n            price,\n            order.makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    function packTokenIdListingIndexTrader(\n        uint256 tokenId,\n        uint256 listingIndex,\n        address trader\n    ) private pure returns (uint256) {\n        return (tokenId << (21 * 8)) | (listingIndex << (20 * 8)) | uint160(trader);\n    }\n\n    function packTypePriceCollection(\n        OrderType orderType,\n        uint256 price,\n        address collection\n    ) private pure returns (uint256) {\n        return (uint256(orderType) << (31 * 8)) | (price << (20 * 8)) | uint160(collection);\n    }\n\n    function packFee(FeeRate memory fee) private pure returns (uint256) {\n        return (uint256(fee.rate) << (20 * 8)) | uint160(fee.recipient);\n    }\n\n    uint256[50] private __gap;\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Executor._transferETH', 'start_line': 2150, 'end_line': 2160, 'offset_start': 80188, 'offset_end': 80501, 'content': 'function _transferETH(address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            assembly {\n                success := call(gas(), to, amount, 0, 0, 0, 0)\n            }\n            if (!success) {\n                revert ETHTransferFailed();\n            }\n        }\n    }', 'contract_name': 'Executor', 'contract_code': "{\n    address private immutable _DELEGATE;\n    address private immutable _POOL;\n\n    constructor(address delegate, address pool, address proxy) Validation(proxy) {\n        _DELEGATE = delegate;\n        _POOL = pool;\n    }\n\n    receive() external payable {\n        if (msg.sender != _POOL) {\n            revert Unauthorized();\n        }\n    }\n\n    /**\n     * @notice Insert a validated ask listing into the batch if there's sufficient ETH to fulfill\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing the listing to insert\n     * @param fees Protocol and taker fees\n     * @param remainingETH Available ETH remaining\n     * @return Available ETH remaining after insertion; if the listing was inserted in the batch\n     */\n    function _insertExecutionAsk(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees,\n        uint256 remainingETH\n    ) internal pure returns (uint256, bool) {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        /* Only insert the executions if there are sufficient funds to execute. */\n        if (remainingETH >= totalPrice + takerFeeAmount) {\n            unchecked {\n                remainingETH = remainingETH - totalPrice - takerFeeAmount;\n            }\n\n            _setAddresses(fungibleTransfers, order);\n\n            uint256 index = _insertNonfungibleTransfer(\n                executionBatch,\n                order,\n                exchange.listing.tokenId,\n                takerAmount\n            );\n\n            _insertFungibleTransfers(\n                fungibleTransfers,\n                takerAmount,\n                exchange.listing,\n                bytes32(order.salt),\n                index,\n                totalPrice,\n                protocolFeeAmount,\n                makerFeeAmount,\n                takerFeeAmount,\n                true\n            );\n\n            return (remainingETH, true);\n        } else {\n            return (remainingETH, false);\n        }\n    }\n\n    /**\n     * @notice Insert a validated bid listing into the batch\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing listing to insert\n     * @param fees Protocol and taker fees\n     */\n    function _insertExecutionBid(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees\n    ) internal pure {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        _setAddresses(fungibleTransfers, order);\n\n        uint256 index = _insertNonfungibleTransfer(\n            executionBatch,\n            order,\n            exchange.taker.tokenId,\n            takerAmount\n        );\n\n        _insertFungibleTransfers(\n            fungibleTransfers,\n            takerAmount,\n            exchange.listing,\n            bytes32(order.salt),\n            index,\n            totalPrice,\n            protocolFeeAmount,\n            makerFeeAmount,\n            takerFeeAmount,\n            false\n        );\n    }\n\n    /**\n     * @notice Insert the nonfungible transfer into the batch\n     * @param executionBatch Execution batch\n     * @param order Order\n     * @param tokenId Token id\n     * @param amount Number of token units\n     * @return transferIndex Index of the transfer\n     */\n    function _insertNonfungibleTransfer(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 tokenId,\n        uint256 amount\n    ) internal pure returns (uint256 transferIndex) {\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            transferIndex := mload(add(calldataPointer, ExecutionBatch_length_offset))\n\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            let transferPointer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n            mstore(\n                add(transferPointer, Transfer_trader_offset),\n                mload(add(order, Order_trader_offset))\n            ) // set the trader\n            mstore(add(transferPointer, Transfer_id_offset), tokenId) // set the token id\n            mstore(\n                add(transferPointer, Transfer_collection_offset),\n                mload(add(order, Order_collection_offset))\n            ) // set the collection\n            mstore(\n                add(transferPointer, Transfer_assetType_offset),\n                mload(add(order, Order_assetType_offset))\n            ) // set the asset type\n            mstore(add(calldataPointer, ExecutionBatch_length_offset), add(transferIndex, 1)) // increment the batch length\n\n            if eq(mload(add(order, Order_assetType_offset)), AssetType_ERC1155) {\n                mstore(add(transferPointer, Transfer_amount_offset), amount) // set the amount (don't need to set for ERC721's)\n            }\n        }\n    }\n\n    /**\n     * @notice Insert the fungible transfers that need to be executed atomically\n     * @param fungibleTransfers Fungible transfers struct\n     * @param takerAmount Amount of the listing being taken\n     * @param listing Listing to execute\n     * @param orderHash Order hash\n     * @param index Execution index\n     * @param totalPrice Total price of the purchased tokens\n     * @param protocolFeeAmount Computed protocol fee\n     * @param makerFeeAmount Computed maker fee\n     * @param takerFeeAmount Computed taker fee\n     * @param makerIsSeller Is the order maker the seller\n     */\n    function _insertFungibleTransfers(\n        FungibleTransfers memory fungibleTransfers,\n        uint256 takerAmount,\n        Listing memory listing,\n        bytes32 orderHash,\n        uint256 index,\n        uint256 totalPrice,\n        uint256 protocolFeeAmount,\n        uint256 makerFeeAmount,\n        uint256 takerFeeAmount,\n        bool makerIsSeller\n    ) internal pure {\n        uint256 makerId = fungibleTransfers.makerId;\n        fungibleTransfers.executions[index].makerId = makerId;\n        fungibleTransfers.executions[index].makerFeeRecipientId = fungibleTransfers.feeRecipientId;\n        fungibleTransfers.executions[index].stateUpdate = StateUpdate({\n            trader: fungibleTransfers.makers[makerId],\n            hash: orderHash,\n            index: listing.index,\n            value: takerAmount,\n            maxAmount: listing.amount\n        });\n        if (makerIsSeller) {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    makerFeeAmount;\n            }\n        } else {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    takerFeeAmount;\n            }\n        }\n        fungibleTransfers.executions[index].makerFeeAmount = makerFeeAmount;\n        fungibleTransfers.executions[index].takerFeeAmount = takerFeeAmount;\n        fungibleTransfers.executions[index].protocolFeeAmount = protocolFeeAmount;\n    }\n\n    /**\n     * @notice Set the addresses of the maker fee recipient and order maker if different than currently being batched\n     * @param fungibleTransfers Fungible transfers struct\n     * @param order Parent order of listing being added to the batch\n     */\n    function _setAddresses(\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order\n    ) internal pure {\n        address feeRecipient = order.makerFee.recipient;\n        uint256 feeRecipientId = fungibleTransfers.feeRecipientId;\n        address currentFeeRecipient = fungibleTransfers.feeRecipients[feeRecipientId];\n        if (feeRecipient != currentFeeRecipient) {\n            if (currentFeeRecipient == address(0)) {\n                fungibleTransfers.feeRecipients[feeRecipientId] = feeRecipient;\n            } else {\n                unchecked {\n                    fungibleTransfers.feeRecipients[++feeRecipientId] = feeRecipient;\n                }\n                fungibleTransfers.feeRecipientId = feeRecipientId;\n            }\n        }\n        address trader = order.trader;\n        uint256 makerId = fungibleTransfers.makerId;\n        address currentTrader = fungibleTransfers.makers[makerId];\n        if (trader != currentTrader) {\n            if (currentTrader == address(0)) {\n                fungibleTransfers.makers[makerId] = trader;\n            } else {\n                unchecked {\n                    fungibleTransfers.makers[++makerId] = trader;\n                }\n                fungibleTransfers.makerId = makerId;\n            }\n        }\n    }\n\n    /**\n     * @notice Compute all necessary fees to be taken\n     * @param pricePerToken Price per token unit\n     * @param takerAmount Number of token units taken (should only be greater than 1 for ERC1155)\n     * @param fees Protocol and taker fee set by the transaction\n     */\n    function _computeFees(\n        uint256 pricePerToken,\n        uint256 takerAmount,\n        FeeRate memory makerFee,\n        Fees memory fees\n    )\n        internal\n        pure\n        returns (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        )\n    {\n        totalPrice = pricePerToken * takerAmount;\n        makerFeeAmount = (totalPrice * makerFee.rate) / _BASIS_POINTS;\n        takerFeeAmount = (totalPrice * fees.takerFee.rate) / _BASIS_POINTS;\n        protocolFeeAmount = (totalPrice * fees.protocolFee.rate) / _BASIS_POINTS;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Execute the transfers by first attempting the nonfungible transfers, for the successful transfers sum the fungible transfers by the recipients and execute\n     * @param executionBatch Execution batch struct\n     * @param fungibleTransfers Fungible transfers struct\n     * @param fees Protocol, maker, taker fees (note: makerFee will be inaccurate at this point in execution)\n     * @param orderType Order type\n     */\n    function _executeBatchTransfer(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        uint256 batchLength;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            batchLength := mload(add(calldataPointer, ExecutionBatch_length_offset))\n        }\n        if (batchLength > 0) {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(\n                executionBatch,\n                batchLength\n            );\n\n            uint256 transfersLength = successfulTransfers.length;\n            for (uint256 i; i < transfersLength; ) {\n                if (successfulTransfers[i]) {\n                    AtomicExecution memory execution = fungibleTransfers.executions[i];\n                    FeeRate memory makerFee;\n                    uint256 price;\n                    unchecked {\n                        if (orderType == OrderType.ASK) {\n                            fungibleTransfers.makerTransfers[execution.makerId] += execution\n                                .sellerAmount; // amount that needs to be sent *to* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount;\n                        } else {\n                            fungibleTransfers.makerTransfers[execution.makerId] +=\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount +\n                                execution.takerFeeAmount +\n                                execution.sellerAmount; // amount that needs to be taken *from* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.takerFeeAmount;\n                        }\n                        fungibleTransfers.totalSellerTransfer += execution.sellerAmount; // only for bids\n                        fungibleTransfers.totalProtocolFee += execution.protocolFeeAmount;\n                        fungibleTransfers.totalTakerFee += execution.takerFeeAmount;\n                        fungibleTransfers.feeTransfers[execution.makerFeeRecipientId] += execution\n                            .makerFeeAmount;\n                        makerFee = FeeRate(\n                            fungibleTransfers.feeRecipients[execution.makerFeeRecipientId],\n                            uint16((execution.makerFeeAmount * _BASIS_POINTS) / price)\n                        );\n                    }\n\n                    /* Commit state updates. */\n                    StateUpdate memory stateUpdate = fungibleTransfers.executions[i].stateUpdate;\n                    {\n                        address trader = stateUpdate.trader;\n                        bytes32 hash = stateUpdate.hash;\n                        uint256 index = stateUpdate.index;\n                        uint256 _amountTaken = amountTaken[trader][hash][index];\n                        uint256 newAmountTaken = _amountTaken + stateUpdate.value;\n\n                        /* Overfulfilled Listings should be caught prior to inserting into the batch, but this check prevents any misuse. */\n                        if (newAmountTaken <= stateUpdate.maxAmount) {\n                            amountTaken[trader][hash][index] = newAmountTaken;\n                        } else {\n                            revert OrderFulfilled();\n                        }\n                    }\n\n                    _emitExecutionEventFromBatch(\n                        executionBatch,\n                        price,\n                        makerFee,\n                        fees,\n                        stateUpdate,\n                        orderType,\n                        i\n                    );\n                }\n\n                unchecked {\n                    ++i;\n                }\n            }\n\n            if (orderType == OrderType.ASK) {\n                /* Transfer the payments to the sellers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferETH(fungibleTransfers.makers[i], fungibleTransfers.makerTransfers[i]);\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferETH(\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferETH(fees.protocolFee.recipient, fungibleTransfers.totalProtocolFee);\n\n                /* Transfer the taker fees. */\n                _transferETH(fees.takerFee.recipient, fungibleTransfers.totalTakerFee);\n            } else {\n                /* Take the pool funds from the buyers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferPool(\n                        fungibleTransfers.makers[i],\n                        address(this),\n                        fungibleTransfers.makerTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the payment to the seller. */\n                _transferPool(address(this), msg.sender, fungibleTransfers.totalSellerTransfer);\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferPool(\n                        address(this),\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferPool(\n                    address(this),\n                    fees.protocolFee.recipient,\n                    fungibleTransfers.totalProtocolFee\n                );\n\n                /* Transfer the taker fees. */\n                _transferPool(\n                    address(this),\n                    fees.takerFee.recipient,\n                    fungibleTransfers.totalTakerFee\n                );\n            }\n        }\n    }\n\n    /**\n     * @notice Attempt to execute a series of nonfungible transfers through the delegate; reverts will be skipped\n     * @param executionBatch Execution batch struct\n     * @param batchIndex Current available transfer slot in the batch\n     * @return Array indicating which transfers were successful\n     */\n    function _executeNonfungibleTransfers(\n        bytes memory executionBatch,\n        uint256 batchIndex\n    ) internal returns (bool[] memory) {\n        address delegate = _DELEGATE;\n\n        /* Initialize the memory space for the successful transfers array returned from the Delegate call. */\n        uint256 successfulTransfersPointer;\n        assembly {\n            successfulTransfersPointer := mload(Memory_pointer)\n            /* Need to shift the free memory pointer ahead one word to account for the array pointer returned from the call. */\n            mstore(Memory_pointer, add(successfulTransfersPointer, One_word))\n        }\n\n        bool[] memory successfulTransfers = new bool[](batchIndex);\n        assembly {\n            let size := mload(executionBatch)\n            let selectorPointer := add(executionBatch, ExecutionBatch_selector_offset)\n            mstore(selectorPointer, shr(Bytes4_shift, Delegate_transfer_selector))\n            let success := call(\n                gas(),\n                delegate,\n                0,\n                add(selectorPointer, Delegate_transfer_calldata_offset),\n                sub(size, Delegate_transfer_calldata_offset),\n                successfulTransfersPointer,\n                add(0x40, mul(batchIndex, One_word))\n            )\n        }\n        return successfulTransfers;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        TRANSFER FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Transfer ETH\n     * @param to Recipient address\n     * @param amount Amount of ETH to send\n     */\n    function _transferETH(address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            assembly {\n                success := call(gas(), to, amount, 0, 0, 0, 0)\n            }\n            if (!success) {\n                revert ETHTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Transfer pool funds on behalf of a user\n     * @param from Sender address\n     * @param to Recipient address\n     * @param amount Amount to send\n     */\n    function _transferPool(address from, address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            address pool = _POOL;\n            assembly {\n                let x := mload(Memory_pointer)\n                mstore(x, ERC20_transferFrom_selector)\n                mstore(add(x, ERC20_transferFrom_from_offset), from)\n                mstore(add(x, ERC20_transferFrom_to_offset), to)\n                mstore(add(x, ERC20_transferFrom_amount_offset), amount)\n                success := call(gas(), pool, 0, x, ERC20_transferFrom_size, 0, 0)\n            }\n            if (!success) {\n                revert PoolTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Deposit ETH to user's pool funds\n     * @param to Recipient address\n     * @param amount Amount of ETH to deposit\n     */\n    function _depositPool(address to, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_deposit_selector)\n            mstore(add(x, Pool_deposit_user_offset), to)\n            success := call(gas(), pool, amount, x, Pool_deposit_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolDepositFailed();\n        }\n    }\n\n    /**\n     * @notice Withdraw ETH from user's pool funds\n     * @param from Address to withdraw from\n     * @param amount Amount of ETH to withdraw\n     */\n    function _withdrawFromPool(address from, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_withdrawFrom_selector)\n            mstore(add(x, Pool_withdrawFrom_from_offset), from)\n            mstore(add(x, Pool_withdrawFrom_to_offset), address())\n            mstore(add(x, Pool_withdrawFrom_amount_offset), amount)\n            success := call(gas(), pool, 0, x, Pool_withdrawFrom_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolWithdrawFromFailed();\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EVENT EMITTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param price Price of the token purchased\n     * @param fees Protocol, maker, and taker fees taken\n     * @param stateUpdate Fulfillment to be recorded with a successful execution\n     * @param orderType Order type\n     * @param transferIndex Index of the transfer corresponding to the execution\n     */\n    function _emitExecutionEventFromBatch(\n        bytes memory executionBatch,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        StateUpdate memory stateUpdate,\n        OrderType orderType,\n        uint256 transferIndex\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            stateUpdate.hash,\n            stateUpdate.index,\n            price,\n            makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    /**\n     * @notice Emit the Execution event that minimizes the number of bytes in the log\n     * @param transfer The nft transfer\n     * @param orderHash Order hash\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param makerFee Maker fees taken\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitOptimalExecutionEvent(\n        Transfer memory transfer,\n        bytes32 orderHash,\n        uint256 listingIndex,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        if (\n            // see _insertNonfungibleTransfer; ERC721 transfers don't set the transfer amount,\n            // so we can assume the transfer amount and not check it\n            transfer.assetType == AssetType.ERC721 &&\n            fees.protocolFee.rate == 0 &&\n            transfer.id < 1 << (11 * 8) &&\n            listingIndex < 1 << (1 * 8) &&\n            price < 1 << (11 * 8)\n        ) {\n            if (makerFee.rate == 0 && fees.takerFee.rate == 0) {\n                emit Execution721Packed(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection)\n                );\n                return;\n            } else if (makerFee.rate == 0) {\n                emit Execution721TakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(fees.takerFee)\n                );\n                return;\n            } else if (fees.takerFee.rate == 0) {\n                emit Execution721MakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(makerFee)\n                );\n                return;\n            }\n        }\n\n        emit Execution({\n            transfer: transfer,\n            orderHash: orderHash,\n            listingIndex: listingIndex,\n            price: price,\n            makerFee: makerFee,\n            fees: fees,\n            orderType: orderType\n        });\n    }\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param order Order being fulfilled\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitExecutionEvent(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 listingIndex,\n        uint256 price,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(calldataPointer, add(transfersOffset, One_word))\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            bytes32(order.salt),\n            listingIndex,\n            price,\n            order.makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    function packTokenIdListingIndexTrader(\n        uint256 tokenId,\n        uint256 listingIndex,\n        address trader\n    ) private pure returns (uint256) {\n        return (tokenId << (21 * 8)) | (listingIndex << (20 * 8)) | uint160(trader);\n    }\n\n    function packTypePriceCollection(\n        OrderType orderType,\n        uint256 price,\n        address collection\n    ) private pure returns (uint256) {\n        return (uint256(orderType) << (31 * 8)) | (price << (20 * 8)) | uint160(collection);\n    }\n\n    function packFee(FeeRate memory fee) private pure returns (uint256) {\n        return (uint256(fee.rate) << (20 * 8)) | uint160(fee.recipient);\n    }\n\n    uint256[50] private __gap;\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Executor._transferPool', 'start_line': 2168, 'end_line': 2184, 'offset_start': 80684, 'offset_end': 81375, 'content': 'function _transferPool(address from, address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            address pool = _POOL;\n            assembly {\n                let x := mload(Memory_pointer)\n                mstore(x, ERC20_transferFrom_selector)\n                mstore(add(x, ERC20_transferFrom_from_offset), from)\n                mstore(add(x, ERC20_transferFrom_to_offset), to)\n                mstore(add(x, ERC20_transferFrom_amount_offset), amount)\n                success := call(gas(), pool, 0, x, ERC20_transferFrom_size, 0, 0)\n            }\n            if (!success) {\n                revert PoolTransferFailed();\n            }\n        }\n    }', 'contract_name': 'Executor', 'contract_code': "{\n    address private immutable _DELEGATE;\n    address private immutable _POOL;\n\n    constructor(address delegate, address pool, address proxy) Validation(proxy) {\n        _DELEGATE = delegate;\n        _POOL = pool;\n    }\n\n    receive() external payable {\n        if (msg.sender != _POOL) {\n            revert Unauthorized();\n        }\n    }\n\n    /**\n     * @notice Insert a validated ask listing into the batch if there's sufficient ETH to fulfill\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing the listing to insert\n     * @param fees Protocol and taker fees\n     * @param remainingETH Available ETH remaining\n     * @return Available ETH remaining after insertion; if the listing was inserted in the batch\n     */\n    function _insertExecutionAsk(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees,\n        uint256 remainingETH\n    ) internal pure returns (uint256, bool) {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        /* Only insert the executions if there are sufficient funds to execute. */\n        if (remainingETH >= totalPrice + takerFeeAmount) {\n            unchecked {\n                remainingETH = remainingETH - totalPrice - takerFeeAmount;\n            }\n\n            _setAddresses(fungibleTransfers, order);\n\n            uint256 index = _insertNonfungibleTransfer(\n                executionBatch,\n                order,\n                exchange.listing.tokenId,\n                takerAmount\n            );\n\n            _insertFungibleTransfers(\n                fungibleTransfers,\n                takerAmount,\n                exchange.listing,\n                bytes32(order.salt),\n                index,\n                totalPrice,\n                protocolFeeAmount,\n                makerFeeAmount,\n                takerFeeAmount,\n                true\n            );\n\n            return (remainingETH, true);\n        } else {\n            return (remainingETH, false);\n        }\n    }\n\n    /**\n     * @notice Insert a validated bid listing into the batch\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing listing to insert\n     * @param fees Protocol and taker fees\n     */\n    function _insertExecutionBid(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees\n    ) internal pure {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        _setAddresses(fungibleTransfers, order);\n\n        uint256 index = _insertNonfungibleTransfer(\n            executionBatch,\n            order,\n            exchange.taker.tokenId,\n            takerAmount\n        );\n\n        _insertFungibleTransfers(\n            fungibleTransfers,\n            takerAmount,\n            exchange.listing,\n            bytes32(order.salt),\n            index,\n            totalPrice,\n            protocolFeeAmount,\n            makerFeeAmount,\n            takerFeeAmount,\n            false\n        );\n    }\n\n    /**\n     * @notice Insert the nonfungible transfer into the batch\n     * @param executionBatch Execution batch\n     * @param order Order\n     * @param tokenId Token id\n     * @param amount Number of token units\n     * @return transferIndex Index of the transfer\n     */\n    function _insertNonfungibleTransfer(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 tokenId,\n        uint256 amount\n    ) internal pure returns (uint256 transferIndex) {\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            transferIndex := mload(add(calldataPointer, ExecutionBatch_length_offset))\n\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            let transferPointer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n            mstore(\n                add(transferPointer, Transfer_trader_offset),\n                mload(add(order, Order_trader_offset))\n            ) // set the trader\n            mstore(add(transferPointer, Transfer_id_offset), tokenId) // set the token id\n            mstore(\n                add(transferPointer, Transfer_collection_offset),\n                mload(add(order, Order_collection_offset))\n            ) // set the collection\n            mstore(\n                add(transferPointer, Transfer_assetType_offset),\n                mload(add(order, Order_assetType_offset))\n            ) // set the asset type\n            mstore(add(calldataPointer, ExecutionBatch_length_offset), add(transferIndex, 1)) // increment the batch length\n\n            if eq(mload(add(order, Order_assetType_offset)), AssetType_ERC1155) {\n                mstore(add(transferPointer, Transfer_amount_offset), amount) // set the amount (don't need to set for ERC721's)\n            }\n        }\n    }\n\n    /**\n     * @notice Insert the fungible transfers that need to be executed atomically\n     * @param fungibleTransfers Fungible transfers struct\n     * @param takerAmount Amount of the listing being taken\n     * @param listing Listing to execute\n     * @param orderHash Order hash\n     * @param index Execution index\n     * @param totalPrice Total price of the purchased tokens\n     * @param protocolFeeAmount Computed protocol fee\n     * @param makerFeeAmount Computed maker fee\n     * @param takerFeeAmount Computed taker fee\n     * @param makerIsSeller Is the order maker the seller\n     */\n    function _insertFungibleTransfers(\n        FungibleTransfers memory fungibleTransfers,\n        uint256 takerAmount,\n        Listing memory listing,\n        bytes32 orderHash,\n        uint256 index,\n        uint256 totalPrice,\n        uint256 protocolFeeAmount,\n        uint256 makerFeeAmount,\n        uint256 takerFeeAmount,\n        bool makerIsSeller\n    ) internal pure {\n        uint256 makerId = fungibleTransfers.makerId;\n        fungibleTransfers.executions[index].makerId = makerId;\n        fungibleTransfers.executions[index].makerFeeRecipientId = fungibleTransfers.feeRecipientId;\n        fungibleTransfers.executions[index].stateUpdate = StateUpdate({\n            trader: fungibleTransfers.makers[makerId],\n            hash: orderHash,\n            index: listing.index,\n            value: takerAmount,\n            maxAmount: listing.amount\n        });\n        if (makerIsSeller) {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    makerFeeAmount;\n            }\n        } else {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    takerFeeAmount;\n            }\n        }\n        fungibleTransfers.executions[index].makerFeeAmount = makerFeeAmount;\n        fungibleTransfers.executions[index].takerFeeAmount = takerFeeAmount;\n        fungibleTransfers.executions[index].protocolFeeAmount = protocolFeeAmount;\n    }\n\n    /**\n     * @notice Set the addresses of the maker fee recipient and order maker if different than currently being batched\n     * @param fungibleTransfers Fungible transfers struct\n     * @param order Parent order of listing being added to the batch\n     */\n    function _setAddresses(\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order\n    ) internal pure {\n        address feeRecipient = order.makerFee.recipient;\n        uint256 feeRecipientId = fungibleTransfers.feeRecipientId;\n        address currentFeeRecipient = fungibleTransfers.feeRecipients[feeRecipientId];\n        if (feeRecipient != currentFeeRecipient) {\n            if (currentFeeRecipient == address(0)) {\n                fungibleTransfers.feeRecipients[feeRecipientId] = feeRecipient;\n            } else {\n                unchecked {\n                    fungibleTransfers.feeRecipients[++feeRecipientId] = feeRecipient;\n                }\n                fungibleTransfers.feeRecipientId = feeRecipientId;\n            }\n        }\n        address trader = order.trader;\n        uint256 makerId = fungibleTransfers.makerId;\n        address currentTrader = fungibleTransfers.makers[makerId];\n        if (trader != currentTrader) {\n            if (currentTrader == address(0)) {\n                fungibleTransfers.makers[makerId] = trader;\n            } else {\n                unchecked {\n                    fungibleTransfers.makers[++makerId] = trader;\n                }\n                fungibleTransfers.makerId = makerId;\n            }\n        }\n    }\n\n    /**\n     * @notice Compute all necessary fees to be taken\n     * @param pricePerToken Price per token unit\n     * @param takerAmount Number of token units taken (should only be greater than 1 for ERC1155)\n     * @param fees Protocol and taker fee set by the transaction\n     */\n    function _computeFees(\n        uint256 pricePerToken,\n        uint256 takerAmount,\n        FeeRate memory makerFee,\n        Fees memory fees\n    )\n        internal\n        pure\n        returns (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        )\n    {\n        totalPrice = pricePerToken * takerAmount;\n        makerFeeAmount = (totalPrice * makerFee.rate) / _BASIS_POINTS;\n        takerFeeAmount = (totalPrice * fees.takerFee.rate) / _BASIS_POINTS;\n        protocolFeeAmount = (totalPrice * fees.protocolFee.rate) / _BASIS_POINTS;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Execute the transfers by first attempting the nonfungible transfers, for the successful transfers sum the fungible transfers by the recipients and execute\n     * @param executionBatch Execution batch struct\n     * @param fungibleTransfers Fungible transfers struct\n     * @param fees Protocol, maker, taker fees (note: makerFee will be inaccurate at this point in execution)\n     * @param orderType Order type\n     */\n    function _executeBatchTransfer(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        uint256 batchLength;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            batchLength := mload(add(calldataPointer, ExecutionBatch_length_offset))\n        }\n        if (batchLength > 0) {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(\n                executionBatch,\n                batchLength\n            );\n\n            uint256 transfersLength = successfulTransfers.length;\n            for (uint256 i; i < transfersLength; ) {\n                if (successfulTransfers[i]) {\n                    AtomicExecution memory execution = fungibleTransfers.executions[i];\n                    FeeRate memory makerFee;\n                    uint256 price;\n                    unchecked {\n                        if (orderType == OrderType.ASK) {\n                            fungibleTransfers.makerTransfers[execution.makerId] += execution\n                                .sellerAmount; // amount that needs to be sent *to* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount;\n                        } else {\n                            fungibleTransfers.makerTransfers[execution.makerId] +=\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount +\n                                execution.takerFeeAmount +\n                                execution.sellerAmount; // amount that needs to be taken *from* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.takerFeeAmount;\n                        }\n                        fungibleTransfers.totalSellerTransfer += execution.sellerAmount; // only for bids\n                        fungibleTransfers.totalProtocolFee += execution.protocolFeeAmount;\n                        fungibleTransfers.totalTakerFee += execution.takerFeeAmount;\n                        fungibleTransfers.feeTransfers[execution.makerFeeRecipientId] += execution\n                            .makerFeeAmount;\n                        makerFee = FeeRate(\n                            fungibleTransfers.feeRecipients[execution.makerFeeRecipientId],\n                            uint16((execution.makerFeeAmount * _BASIS_POINTS) / price)\n                        );\n                    }\n\n                    /* Commit state updates. */\n                    StateUpdate memory stateUpdate = fungibleTransfers.executions[i].stateUpdate;\n                    {\n                        address trader = stateUpdate.trader;\n                        bytes32 hash = stateUpdate.hash;\n                        uint256 index = stateUpdate.index;\n                        uint256 _amountTaken = amountTaken[trader][hash][index];\n                        uint256 newAmountTaken = _amountTaken + stateUpdate.value;\n\n                        /* Overfulfilled Listings should be caught prior to inserting into the batch, but this check prevents any misuse. */\n                        if (newAmountTaken <= stateUpdate.maxAmount) {\n                            amountTaken[trader][hash][index] = newAmountTaken;\n                        } else {\n                            revert OrderFulfilled();\n                        }\n                    }\n\n                    _emitExecutionEventFromBatch(\n                        executionBatch,\n                        price,\n                        makerFee,\n                        fees,\n                        stateUpdate,\n                        orderType,\n                        i\n                    );\n                }\n\n                unchecked {\n                    ++i;\n                }\n            }\n\n            if (orderType == OrderType.ASK) {\n                /* Transfer the payments to the sellers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferETH(fungibleTransfers.makers[i], fungibleTransfers.makerTransfers[i]);\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferETH(\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferETH(fees.protocolFee.recipient, fungibleTransfers.totalProtocolFee);\n\n                /* Transfer the taker fees. */\n                _transferETH(fees.takerFee.recipient, fungibleTransfers.totalTakerFee);\n            } else {\n                /* Take the pool funds from the buyers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferPool(\n                        fungibleTransfers.makers[i],\n                        address(this),\n                        fungibleTransfers.makerTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the payment to the seller. */\n                _transferPool(address(this), msg.sender, fungibleTransfers.totalSellerTransfer);\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferPool(\n                        address(this),\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferPool(\n                    address(this),\n                    fees.protocolFee.recipient,\n                    fungibleTransfers.totalProtocolFee\n                );\n\n                /* Transfer the taker fees. */\n                _transferPool(\n                    address(this),\n                    fees.takerFee.recipient,\n                    fungibleTransfers.totalTakerFee\n                );\n            }\n        }\n    }\n\n    /**\n     * @notice Attempt to execute a series of nonfungible transfers through the delegate; reverts will be skipped\n     * @param executionBatch Execution batch struct\n     * @param batchIndex Current available transfer slot in the batch\n     * @return Array indicating which transfers were successful\n     */\n    function _executeNonfungibleTransfers(\n        bytes memory executionBatch,\n        uint256 batchIndex\n    ) internal returns (bool[] memory) {\n        address delegate = _DELEGATE;\n\n        /* Initialize the memory space for the successful transfers array returned from the Delegate call. */\n        uint256 successfulTransfersPointer;\n        assembly {\n            successfulTransfersPointer := mload(Memory_pointer)\n            /* Need to shift the free memory pointer ahead one word to account for the array pointer returned from the call. */\n            mstore(Memory_pointer, add(successfulTransfersPointer, One_word))\n        }\n\n        bool[] memory successfulTransfers = new bool[](batchIndex);\n        assembly {\n            let size := mload(executionBatch)\n            let selectorPointer := add(executionBatch, ExecutionBatch_selector_offset)\n            mstore(selectorPointer, shr(Bytes4_shift, Delegate_transfer_selector))\n            let success := call(\n                gas(),\n                delegate,\n                0,\n                add(selectorPointer, Delegate_transfer_calldata_offset),\n                sub(size, Delegate_transfer_calldata_offset),\n                successfulTransfersPointer,\n                add(0x40, mul(batchIndex, One_word))\n            )\n        }\n        return successfulTransfers;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        TRANSFER FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Transfer ETH\n     * @param to Recipient address\n     * @param amount Amount of ETH to send\n     */\n    function _transferETH(address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            assembly {\n                success := call(gas(), to, amount, 0, 0, 0, 0)\n            }\n            if (!success) {\n                revert ETHTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Transfer pool funds on behalf of a user\n     * @param from Sender address\n     * @param to Recipient address\n     * @param amount Amount to send\n     */\n    function _transferPool(address from, address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            address pool = _POOL;\n            assembly {\n                let x := mload(Memory_pointer)\n                mstore(x, ERC20_transferFrom_selector)\n                mstore(add(x, ERC20_transferFrom_from_offset), from)\n                mstore(add(x, ERC20_transferFrom_to_offset), to)\n                mstore(add(x, ERC20_transferFrom_amount_offset), amount)\n                success := call(gas(), pool, 0, x, ERC20_transferFrom_size, 0, 0)\n            }\n            if (!success) {\n                revert PoolTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Deposit ETH to user's pool funds\n     * @param to Recipient address\n     * @param amount Amount of ETH to deposit\n     */\n    function _depositPool(address to, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_deposit_selector)\n            mstore(add(x, Pool_deposit_user_offset), to)\n            success := call(gas(), pool, amount, x, Pool_deposit_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolDepositFailed();\n        }\n    }\n\n    /**\n     * @notice Withdraw ETH from user's pool funds\n     * @param from Address to withdraw from\n     * @param amount Amount of ETH to withdraw\n     */\n    function _withdrawFromPool(address from, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_withdrawFrom_selector)\n            mstore(add(x, Pool_withdrawFrom_from_offset), from)\n            mstore(add(x, Pool_withdrawFrom_to_offset), address())\n            mstore(add(x, Pool_withdrawFrom_amount_offset), amount)\n            success := call(gas(), pool, 0, x, Pool_withdrawFrom_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolWithdrawFromFailed();\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EVENT EMITTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param price Price of the token purchased\n     * @param fees Protocol, maker, and taker fees taken\n     * @param stateUpdate Fulfillment to be recorded with a successful execution\n     * @param orderType Order type\n     * @param transferIndex Index of the transfer corresponding to the execution\n     */\n    function _emitExecutionEventFromBatch(\n        bytes memory executionBatch,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        StateUpdate memory stateUpdate,\n        OrderType orderType,\n        uint256 transferIndex\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            stateUpdate.hash,\n            stateUpdate.index,\n            price,\n            makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    /**\n     * @notice Emit the Execution event that minimizes the number of bytes in the log\n     * @param transfer The nft transfer\n     * @param orderHash Order hash\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param makerFee Maker fees taken\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitOptimalExecutionEvent(\n        Transfer memory transfer,\n        bytes32 orderHash,\n        uint256 listingIndex,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        if (\n            // see _insertNonfungibleTransfer; ERC721 transfers don't set the transfer amount,\n            // so we can assume the transfer amount and not check it\n            transfer.assetType == AssetType.ERC721 &&\n            fees.protocolFee.rate == 0 &&\n            transfer.id < 1 << (11 * 8) &&\n            listingIndex < 1 << (1 * 8) &&\n            price < 1 << (11 * 8)\n        ) {\n            if (makerFee.rate == 0 && fees.takerFee.rate == 0) {\n                emit Execution721Packed(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection)\n                );\n                return;\n            } else if (makerFee.rate == 0) {\n                emit Execution721TakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(fees.takerFee)\n                );\n                return;\n            } else if (fees.takerFee.rate == 0) {\n                emit Execution721MakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(makerFee)\n                );\n                return;\n            }\n        }\n\n        emit Execution({\n            transfer: transfer,\n            orderHash: orderHash,\n            listingIndex: listingIndex,\n            price: price,\n            makerFee: makerFee,\n            fees: fees,\n            orderType: orderType\n        });\n    }\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param order Order being fulfilled\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitExecutionEvent(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 listingIndex,\n        uint256 price,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(calldataPointer, add(transfersOffset, One_word))\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            bytes32(order.salt),\n            listingIndex,\n            price,\n            order.makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    function packTokenIdListingIndexTrader(\n        uint256 tokenId,\n        uint256 listingIndex,\n        address trader\n    ) private pure returns (uint256) {\n        return (tokenId << (21 * 8)) | (listingIndex << (20 * 8)) | uint160(trader);\n    }\n\n    function packTypePriceCollection(\n        OrderType orderType,\n        uint256 price,\n        address collection\n    ) private pure returns (uint256) {\n        return (uint256(orderType) << (31 * 8)) | (price << (20 * 8)) | uint160(collection);\n    }\n\n    function packFee(FeeRate memory fee) private pure returns (uint256) {\n        return (uint256(fee.rate) << (20 * 8)) | uint160(fee.recipient);\n    }\n\n    uint256[50] private __gap;\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Executor._depositPool', 'start_line': 2191, 'end_line': 2203, 'offset_start': 81527, 'offset_end': 81969, 'content': 'function _depositPool(address to, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_deposit_selector)\n            mstore(add(x, Pool_deposit_user_offset), to)\n            success := call(gas(), pool, amount, x, Pool_deposit_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolDepositFailed();\n        }\n    }', 'contract_name': 'Executor', 'contract_code': "{\n    address private immutable _DELEGATE;\n    address private immutable _POOL;\n\n    constructor(address delegate, address pool, address proxy) Validation(proxy) {\n        _DELEGATE = delegate;\n        _POOL = pool;\n    }\n\n    receive() external payable {\n        if (msg.sender != _POOL) {\n            revert Unauthorized();\n        }\n    }\n\n    /**\n     * @notice Insert a validated ask listing into the batch if there's sufficient ETH to fulfill\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing the listing to insert\n     * @param fees Protocol and taker fees\n     * @param remainingETH Available ETH remaining\n     * @return Available ETH remaining after insertion; if the listing was inserted in the batch\n     */\n    function _insertExecutionAsk(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees,\n        uint256 remainingETH\n    ) internal pure returns (uint256, bool) {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        /* Only insert the executions if there are sufficient funds to execute. */\n        if (remainingETH >= totalPrice + takerFeeAmount) {\n            unchecked {\n                remainingETH = remainingETH - totalPrice - takerFeeAmount;\n            }\n\n            _setAddresses(fungibleTransfers, order);\n\n            uint256 index = _insertNonfungibleTransfer(\n                executionBatch,\n                order,\n                exchange.listing.tokenId,\n                takerAmount\n            );\n\n            _insertFungibleTransfers(\n                fungibleTransfers,\n                takerAmount,\n                exchange.listing,\n                bytes32(order.salt),\n                index,\n                totalPrice,\n                protocolFeeAmount,\n                makerFeeAmount,\n                takerFeeAmount,\n                true\n            );\n\n            return (remainingETH, true);\n        } else {\n            return (remainingETH, false);\n        }\n    }\n\n    /**\n     * @notice Insert a validated bid listing into the batch\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing listing to insert\n     * @param fees Protocol and taker fees\n     */\n    function _insertExecutionBid(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees\n    ) internal pure {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        _setAddresses(fungibleTransfers, order);\n\n        uint256 index = _insertNonfungibleTransfer(\n            executionBatch,\n            order,\n            exchange.taker.tokenId,\n            takerAmount\n        );\n\n        _insertFungibleTransfers(\n            fungibleTransfers,\n            takerAmount,\n            exchange.listing,\n            bytes32(order.salt),\n            index,\n            totalPrice,\n            protocolFeeAmount,\n            makerFeeAmount,\n            takerFeeAmount,\n            false\n        );\n    }\n\n    /**\n     * @notice Insert the nonfungible transfer into the batch\n     * @param executionBatch Execution batch\n     * @param order Order\n     * @param tokenId Token id\n     * @param amount Number of token units\n     * @return transferIndex Index of the transfer\n     */\n    function _insertNonfungibleTransfer(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 tokenId,\n        uint256 amount\n    ) internal pure returns (uint256 transferIndex) {\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            transferIndex := mload(add(calldataPointer, ExecutionBatch_length_offset))\n\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            let transferPointer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n            mstore(\n                add(transferPointer, Transfer_trader_offset),\n                mload(add(order, Order_trader_offset))\n            ) // set the trader\n            mstore(add(transferPointer, Transfer_id_offset), tokenId) // set the token id\n            mstore(\n                add(transferPointer, Transfer_collection_offset),\n                mload(add(order, Order_collection_offset))\n            ) // set the collection\n            mstore(\n                add(transferPointer, Transfer_assetType_offset),\n                mload(add(order, Order_assetType_offset))\n            ) // set the asset type\n            mstore(add(calldataPointer, ExecutionBatch_length_offset), add(transferIndex, 1)) // increment the batch length\n\n            if eq(mload(add(order, Order_assetType_offset)), AssetType_ERC1155) {\n                mstore(add(transferPointer, Transfer_amount_offset), amount) // set the amount (don't need to set for ERC721's)\n            }\n        }\n    }\n\n    /**\n     * @notice Insert the fungible transfers that need to be executed atomically\n     * @param fungibleTransfers Fungible transfers struct\n     * @param takerAmount Amount of the listing being taken\n     * @param listing Listing to execute\n     * @param orderHash Order hash\n     * @param index Execution index\n     * @param totalPrice Total price of the purchased tokens\n     * @param protocolFeeAmount Computed protocol fee\n     * @param makerFeeAmount Computed maker fee\n     * @param takerFeeAmount Computed taker fee\n     * @param makerIsSeller Is the order maker the seller\n     */\n    function _insertFungibleTransfers(\n        FungibleTransfers memory fungibleTransfers,\n        uint256 takerAmount,\n        Listing memory listing,\n        bytes32 orderHash,\n        uint256 index,\n        uint256 totalPrice,\n        uint256 protocolFeeAmount,\n        uint256 makerFeeAmount,\n        uint256 takerFeeAmount,\n        bool makerIsSeller\n    ) internal pure {\n        uint256 makerId = fungibleTransfers.makerId;\n        fungibleTransfers.executions[index].makerId = makerId;\n        fungibleTransfers.executions[index].makerFeeRecipientId = fungibleTransfers.feeRecipientId;\n        fungibleTransfers.executions[index].stateUpdate = StateUpdate({\n            trader: fungibleTransfers.makers[makerId],\n            hash: orderHash,\n            index: listing.index,\n            value: takerAmount,\n            maxAmount: listing.amount\n        });\n        if (makerIsSeller) {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    makerFeeAmount;\n            }\n        } else {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    takerFeeAmount;\n            }\n        }\n        fungibleTransfers.executions[index].makerFeeAmount = makerFeeAmount;\n        fungibleTransfers.executions[index].takerFeeAmount = takerFeeAmount;\n        fungibleTransfers.executions[index].protocolFeeAmount = protocolFeeAmount;\n    }\n\n    /**\n     * @notice Set the addresses of the maker fee recipient and order maker if different than currently being batched\n     * @param fungibleTransfers Fungible transfers struct\n     * @param order Parent order of listing being added to the batch\n     */\n    function _setAddresses(\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order\n    ) internal pure {\n        address feeRecipient = order.makerFee.recipient;\n        uint256 feeRecipientId = fungibleTransfers.feeRecipientId;\n        address currentFeeRecipient = fungibleTransfers.feeRecipients[feeRecipientId];\n        if (feeRecipient != currentFeeRecipient) {\n            if (currentFeeRecipient == address(0)) {\n                fungibleTransfers.feeRecipients[feeRecipientId] = feeRecipient;\n            } else {\n                unchecked {\n                    fungibleTransfers.feeRecipients[++feeRecipientId] = feeRecipient;\n                }\n                fungibleTransfers.feeRecipientId = feeRecipientId;\n            }\n        }\n        address trader = order.trader;\n        uint256 makerId = fungibleTransfers.makerId;\n        address currentTrader = fungibleTransfers.makers[makerId];\n        if (trader != currentTrader) {\n            if (currentTrader == address(0)) {\n                fungibleTransfers.makers[makerId] = trader;\n            } else {\n                unchecked {\n                    fungibleTransfers.makers[++makerId] = trader;\n                }\n                fungibleTransfers.makerId = makerId;\n            }\n        }\n    }\n\n    /**\n     * @notice Compute all necessary fees to be taken\n     * @param pricePerToken Price per token unit\n     * @param takerAmount Number of token units taken (should only be greater than 1 for ERC1155)\n     * @param fees Protocol and taker fee set by the transaction\n     */\n    function _computeFees(\n        uint256 pricePerToken,\n        uint256 takerAmount,\n        FeeRate memory makerFee,\n        Fees memory fees\n    )\n        internal\n        pure\n        returns (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        )\n    {\n        totalPrice = pricePerToken * takerAmount;\n        makerFeeAmount = (totalPrice * makerFee.rate) / _BASIS_POINTS;\n        takerFeeAmount = (totalPrice * fees.takerFee.rate) / _BASIS_POINTS;\n        protocolFeeAmount = (totalPrice * fees.protocolFee.rate) / _BASIS_POINTS;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Execute the transfers by first attempting the nonfungible transfers, for the successful transfers sum the fungible transfers by the recipients and execute\n     * @param executionBatch Execution batch struct\n     * @param fungibleTransfers Fungible transfers struct\n     * @param fees Protocol, maker, taker fees (note: makerFee will be inaccurate at this point in execution)\n     * @param orderType Order type\n     */\n    function _executeBatchTransfer(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        uint256 batchLength;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            batchLength := mload(add(calldataPointer, ExecutionBatch_length_offset))\n        }\n        if (batchLength > 0) {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(\n                executionBatch,\n                batchLength\n            );\n\n            uint256 transfersLength = successfulTransfers.length;\n            for (uint256 i; i < transfersLength; ) {\n                if (successfulTransfers[i]) {\n                    AtomicExecution memory execution = fungibleTransfers.executions[i];\n                    FeeRate memory makerFee;\n                    uint256 price;\n                    unchecked {\n                        if (orderType == OrderType.ASK) {\n                            fungibleTransfers.makerTransfers[execution.makerId] += execution\n                                .sellerAmount; // amount that needs to be sent *to* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount;\n                        } else {\n                            fungibleTransfers.makerTransfers[execution.makerId] +=\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount +\n                                execution.takerFeeAmount +\n                                execution.sellerAmount; // amount that needs to be taken *from* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.takerFeeAmount;\n                        }\n                        fungibleTransfers.totalSellerTransfer += execution.sellerAmount; // only for bids\n                        fungibleTransfers.totalProtocolFee += execution.protocolFeeAmount;\n                        fungibleTransfers.totalTakerFee += execution.takerFeeAmount;\n                        fungibleTransfers.feeTransfers[execution.makerFeeRecipientId] += execution\n                            .makerFeeAmount;\n                        makerFee = FeeRate(\n                            fungibleTransfers.feeRecipients[execution.makerFeeRecipientId],\n                            uint16((execution.makerFeeAmount * _BASIS_POINTS) / price)\n                        );\n                    }\n\n                    /* Commit state updates. */\n                    StateUpdate memory stateUpdate = fungibleTransfers.executions[i].stateUpdate;\n                    {\n                        address trader = stateUpdate.trader;\n                        bytes32 hash = stateUpdate.hash;\n                        uint256 index = stateUpdate.index;\n                        uint256 _amountTaken = amountTaken[trader][hash][index];\n                        uint256 newAmountTaken = _amountTaken + stateUpdate.value;\n\n                        /* Overfulfilled Listings should be caught prior to inserting into the batch, but this check prevents any misuse. */\n                        if (newAmountTaken <= stateUpdate.maxAmount) {\n                            amountTaken[trader][hash][index] = newAmountTaken;\n                        } else {\n                            revert OrderFulfilled();\n                        }\n                    }\n\n                    _emitExecutionEventFromBatch(\n                        executionBatch,\n                        price,\n                        makerFee,\n                        fees,\n                        stateUpdate,\n                        orderType,\n                        i\n                    );\n                }\n\n                unchecked {\n                    ++i;\n                }\n            }\n\n            if (orderType == OrderType.ASK) {\n                /* Transfer the payments to the sellers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferETH(fungibleTransfers.makers[i], fungibleTransfers.makerTransfers[i]);\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferETH(\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferETH(fees.protocolFee.recipient, fungibleTransfers.totalProtocolFee);\n\n                /* Transfer the taker fees. */\n                _transferETH(fees.takerFee.recipient, fungibleTransfers.totalTakerFee);\n            } else {\n                /* Take the pool funds from the buyers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferPool(\n                        fungibleTransfers.makers[i],\n                        address(this),\n                        fungibleTransfers.makerTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the payment to the seller. */\n                _transferPool(address(this), msg.sender, fungibleTransfers.totalSellerTransfer);\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferPool(\n                        address(this),\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferPool(\n                    address(this),\n                    fees.protocolFee.recipient,\n                    fungibleTransfers.totalProtocolFee\n                );\n\n                /* Transfer the taker fees. */\n                _transferPool(\n                    address(this),\n                    fees.takerFee.recipient,\n                    fungibleTransfers.totalTakerFee\n                );\n            }\n        }\n    }\n\n    /**\n     * @notice Attempt to execute a series of nonfungible transfers through the delegate; reverts will be skipped\n     * @param executionBatch Execution batch struct\n     * @param batchIndex Current available transfer slot in the batch\n     * @return Array indicating which transfers were successful\n     */\n    function _executeNonfungibleTransfers(\n        bytes memory executionBatch,\n        uint256 batchIndex\n    ) internal returns (bool[] memory) {\n        address delegate = _DELEGATE;\n\n        /* Initialize the memory space for the successful transfers array returned from the Delegate call. */\n        uint256 successfulTransfersPointer;\n        assembly {\n            successfulTransfersPointer := mload(Memory_pointer)\n            /* Need to shift the free memory pointer ahead one word to account for the array pointer returned from the call. */\n            mstore(Memory_pointer, add(successfulTransfersPointer, One_word))\n        }\n\n        bool[] memory successfulTransfers = new bool[](batchIndex);\n        assembly {\n            let size := mload(executionBatch)\n            let selectorPointer := add(executionBatch, ExecutionBatch_selector_offset)\n            mstore(selectorPointer, shr(Bytes4_shift, Delegate_transfer_selector))\n            let success := call(\n                gas(),\n                delegate,\n                0,\n                add(selectorPointer, Delegate_transfer_calldata_offset),\n                sub(size, Delegate_transfer_calldata_offset),\n                successfulTransfersPointer,\n                add(0x40, mul(batchIndex, One_word))\n            )\n        }\n        return successfulTransfers;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        TRANSFER FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Transfer ETH\n     * @param to Recipient address\n     * @param amount Amount of ETH to send\n     */\n    function _transferETH(address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            assembly {\n                success := call(gas(), to, amount, 0, 0, 0, 0)\n            }\n            if (!success) {\n                revert ETHTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Transfer pool funds on behalf of a user\n     * @param from Sender address\n     * @param to Recipient address\n     * @param amount Amount to send\n     */\n    function _transferPool(address from, address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            address pool = _POOL;\n            assembly {\n                let x := mload(Memory_pointer)\n                mstore(x, ERC20_transferFrom_selector)\n                mstore(add(x, ERC20_transferFrom_from_offset), from)\n                mstore(add(x, ERC20_transferFrom_to_offset), to)\n                mstore(add(x, ERC20_transferFrom_amount_offset), amount)\n                success := call(gas(), pool, 0, x, ERC20_transferFrom_size, 0, 0)\n            }\n            if (!success) {\n                revert PoolTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Deposit ETH to user's pool funds\n     * @param to Recipient address\n     * @param amount Amount of ETH to deposit\n     */\n    function _depositPool(address to, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_deposit_selector)\n            mstore(add(x, Pool_deposit_user_offset), to)\n            success := call(gas(), pool, amount, x, Pool_deposit_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolDepositFailed();\n        }\n    }\n\n    /**\n     * @notice Withdraw ETH from user's pool funds\n     * @param from Address to withdraw from\n     * @param amount Amount of ETH to withdraw\n     */\n    function _withdrawFromPool(address from, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_withdrawFrom_selector)\n            mstore(add(x, Pool_withdrawFrom_from_offset), from)\n            mstore(add(x, Pool_withdrawFrom_to_offset), address())\n            mstore(add(x, Pool_withdrawFrom_amount_offset), amount)\n            success := call(gas(), pool, 0, x, Pool_withdrawFrom_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolWithdrawFromFailed();\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EVENT EMITTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param price Price of the token purchased\n     * @param fees Protocol, maker, and taker fees taken\n     * @param stateUpdate Fulfillment to be recorded with a successful execution\n     * @param orderType Order type\n     * @param transferIndex Index of the transfer corresponding to the execution\n     */\n    function _emitExecutionEventFromBatch(\n        bytes memory executionBatch,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        StateUpdate memory stateUpdate,\n        OrderType orderType,\n        uint256 transferIndex\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            stateUpdate.hash,\n            stateUpdate.index,\n            price,\n            makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    /**\n     * @notice Emit the Execution event that minimizes the number of bytes in the log\n     * @param transfer The nft transfer\n     * @param orderHash Order hash\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param makerFee Maker fees taken\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitOptimalExecutionEvent(\n        Transfer memory transfer,\n        bytes32 orderHash,\n        uint256 listingIndex,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        if (\n            // see _insertNonfungibleTransfer; ERC721 transfers don't set the transfer amount,\n            // so we can assume the transfer amount and not check it\n            transfer.assetType == AssetType.ERC721 &&\n            fees.protocolFee.rate == 0 &&\n            transfer.id < 1 << (11 * 8) &&\n            listingIndex < 1 << (1 * 8) &&\n            price < 1 << (11 * 8)\n        ) {\n            if (makerFee.rate == 0 && fees.takerFee.rate == 0) {\n                emit Execution721Packed(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection)\n                );\n                return;\n            } else if (makerFee.rate == 0) {\n                emit Execution721TakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(fees.takerFee)\n                );\n                return;\n            } else if (fees.takerFee.rate == 0) {\n                emit Execution721MakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(makerFee)\n                );\n                return;\n            }\n        }\n\n        emit Execution({\n            transfer: transfer,\n            orderHash: orderHash,\n            listingIndex: listingIndex,\n            price: price,\n            makerFee: makerFee,\n            fees: fees,\n            orderType: orderType\n        });\n    }\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param order Order being fulfilled\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitExecutionEvent(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 listingIndex,\n        uint256 price,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(calldataPointer, add(transfersOffset, One_word))\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            bytes32(order.salt),\n            listingIndex,\n            price,\n            order.makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    function packTokenIdListingIndexTrader(\n        uint256 tokenId,\n        uint256 listingIndex,\n        address trader\n    ) private pure returns (uint256) {\n        return (tokenId << (21 * 8)) | (listingIndex << (20 * 8)) | uint160(trader);\n    }\n\n    function packTypePriceCollection(\n        OrderType orderType,\n        uint256 price,\n        address collection\n    ) private pure returns (uint256) {\n        return (uint256(orderType) << (31 * 8)) | (price << (20 * 8)) | uint160(collection);\n    }\n\n    function packFee(FeeRate memory fee) private pure returns (uint256) {\n        return (uint256(fee.rate) << (20 * 8)) | uint160(fee.recipient);\n    }\n\n    uint256[50] private __gap;\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Executor._withdrawFromPool', 'start_line': 2210, 'end_line': 2224, 'offset_start': 82134, 'offset_end': 82735, 'content': 'function _withdrawFromPool(address from, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_withdrawFrom_selector)\n            mstore(add(x, Pool_withdrawFrom_from_offset), from)\n            mstore(add(x, Pool_withdrawFrom_to_offset), address())\n            mstore(add(x, Pool_withdrawFrom_amount_offset), amount)\n            success := call(gas(), pool, 0, x, Pool_withdrawFrom_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolWithdrawFromFailed();\n        }\n    }', 'contract_name': 'Executor', 'contract_code': "{\n    address private immutable _DELEGATE;\n    address private immutable _POOL;\n\n    constructor(address delegate, address pool, address proxy) Validation(proxy) {\n        _DELEGATE = delegate;\n        _POOL = pool;\n    }\n\n    receive() external payable {\n        if (msg.sender != _POOL) {\n            revert Unauthorized();\n        }\n    }\n\n    /**\n     * @notice Insert a validated ask listing into the batch if there's sufficient ETH to fulfill\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing the listing to insert\n     * @param fees Protocol and taker fees\n     * @param remainingETH Available ETH remaining\n     * @return Available ETH remaining after insertion; if the listing was inserted in the batch\n     */\n    function _insertExecutionAsk(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees,\n        uint256 remainingETH\n    ) internal pure returns (uint256, bool) {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        /* Only insert the executions if there are sufficient funds to execute. */\n        if (remainingETH >= totalPrice + takerFeeAmount) {\n            unchecked {\n                remainingETH = remainingETH - totalPrice - takerFeeAmount;\n            }\n\n            _setAddresses(fungibleTransfers, order);\n\n            uint256 index = _insertNonfungibleTransfer(\n                executionBatch,\n                order,\n                exchange.listing.tokenId,\n                takerAmount\n            );\n\n            _insertFungibleTransfers(\n                fungibleTransfers,\n                takerAmount,\n                exchange.listing,\n                bytes32(order.salt),\n                index,\n                totalPrice,\n                protocolFeeAmount,\n                makerFeeAmount,\n                takerFeeAmount,\n                true\n            );\n\n            return (remainingETH, true);\n        } else {\n            return (remainingETH, false);\n        }\n    }\n\n    /**\n     * @notice Insert a validated bid listing into the batch\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing listing to insert\n     * @param fees Protocol and taker fees\n     */\n    function _insertExecutionBid(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees\n    ) internal pure {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        _setAddresses(fungibleTransfers, order);\n\n        uint256 index = _insertNonfungibleTransfer(\n            executionBatch,\n            order,\n            exchange.taker.tokenId,\n            takerAmount\n        );\n\n        _insertFungibleTransfers(\n            fungibleTransfers,\n            takerAmount,\n            exchange.listing,\n            bytes32(order.salt),\n            index,\n            totalPrice,\n            protocolFeeAmount,\n            makerFeeAmount,\n            takerFeeAmount,\n            false\n        );\n    }\n\n    /**\n     * @notice Insert the nonfungible transfer into the batch\n     * @param executionBatch Execution batch\n     * @param order Order\n     * @param tokenId Token id\n     * @param amount Number of token units\n     * @return transferIndex Index of the transfer\n     */\n    function _insertNonfungibleTransfer(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 tokenId,\n        uint256 amount\n    ) internal pure returns (uint256 transferIndex) {\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            transferIndex := mload(add(calldataPointer, ExecutionBatch_length_offset))\n\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            let transferPointer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n            mstore(\n                add(transferPointer, Transfer_trader_offset),\n                mload(add(order, Order_trader_offset))\n            ) // set the trader\n            mstore(add(transferPointer, Transfer_id_offset), tokenId) // set the token id\n            mstore(\n                add(transferPointer, Transfer_collection_offset),\n                mload(add(order, Order_collection_offset))\n            ) // set the collection\n            mstore(\n                add(transferPointer, Transfer_assetType_offset),\n                mload(add(order, Order_assetType_offset))\n            ) // set the asset type\n            mstore(add(calldataPointer, ExecutionBatch_length_offset), add(transferIndex, 1)) // increment the batch length\n\n            if eq(mload(add(order, Order_assetType_offset)), AssetType_ERC1155) {\n                mstore(add(transferPointer, Transfer_amount_offset), amount) // set the amount (don't need to set for ERC721's)\n            }\n        }\n    }\n\n    /**\n     * @notice Insert the fungible transfers that need to be executed atomically\n     * @param fungibleTransfers Fungible transfers struct\n     * @param takerAmount Amount of the listing being taken\n     * @param listing Listing to execute\n     * @param orderHash Order hash\n     * @param index Execution index\n     * @param totalPrice Total price of the purchased tokens\n     * @param protocolFeeAmount Computed protocol fee\n     * @param makerFeeAmount Computed maker fee\n     * @param takerFeeAmount Computed taker fee\n     * @param makerIsSeller Is the order maker the seller\n     */\n    function _insertFungibleTransfers(\n        FungibleTransfers memory fungibleTransfers,\n        uint256 takerAmount,\n        Listing memory listing,\n        bytes32 orderHash,\n        uint256 index,\n        uint256 totalPrice,\n        uint256 protocolFeeAmount,\n        uint256 makerFeeAmount,\n        uint256 takerFeeAmount,\n        bool makerIsSeller\n    ) internal pure {\n        uint256 makerId = fungibleTransfers.makerId;\n        fungibleTransfers.executions[index].makerId = makerId;\n        fungibleTransfers.executions[index].makerFeeRecipientId = fungibleTransfers.feeRecipientId;\n        fungibleTransfers.executions[index].stateUpdate = StateUpdate({\n            trader: fungibleTransfers.makers[makerId],\n            hash: orderHash,\n            index: listing.index,\n            value: takerAmount,\n            maxAmount: listing.amount\n        });\n        if (makerIsSeller) {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    makerFeeAmount;\n            }\n        } else {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    takerFeeAmount;\n            }\n        }\n        fungibleTransfers.executions[index].makerFeeAmount = makerFeeAmount;\n        fungibleTransfers.executions[index].takerFeeAmount = takerFeeAmount;\n        fungibleTransfers.executions[index].protocolFeeAmount = protocolFeeAmount;\n    }\n\n    /**\n     * @notice Set the addresses of the maker fee recipient and order maker if different than currently being batched\n     * @param fungibleTransfers Fungible transfers struct\n     * @param order Parent order of listing being added to the batch\n     */\n    function _setAddresses(\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order\n    ) internal pure {\n        address feeRecipient = order.makerFee.recipient;\n        uint256 feeRecipientId = fungibleTransfers.feeRecipientId;\n        address currentFeeRecipient = fungibleTransfers.feeRecipients[feeRecipientId];\n        if (feeRecipient != currentFeeRecipient) {\n            if (currentFeeRecipient == address(0)) {\n                fungibleTransfers.feeRecipients[feeRecipientId] = feeRecipient;\n            } else {\n                unchecked {\n                    fungibleTransfers.feeRecipients[++feeRecipientId] = feeRecipient;\n                }\n                fungibleTransfers.feeRecipientId = feeRecipientId;\n            }\n        }\n        address trader = order.trader;\n        uint256 makerId = fungibleTransfers.makerId;\n        address currentTrader = fungibleTransfers.makers[makerId];\n        if (trader != currentTrader) {\n            if (currentTrader == address(0)) {\n                fungibleTransfers.makers[makerId] = trader;\n            } else {\n                unchecked {\n                    fungibleTransfers.makers[++makerId] = trader;\n                }\n                fungibleTransfers.makerId = makerId;\n            }\n        }\n    }\n\n    /**\n     * @notice Compute all necessary fees to be taken\n     * @param pricePerToken Price per token unit\n     * @param takerAmount Number of token units taken (should only be greater than 1 for ERC1155)\n     * @param fees Protocol and taker fee set by the transaction\n     */\n    function _computeFees(\n        uint256 pricePerToken,\n        uint256 takerAmount,\n        FeeRate memory makerFee,\n        Fees memory fees\n    )\n        internal\n        pure\n        returns (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        )\n    {\n        totalPrice = pricePerToken * takerAmount;\n        makerFeeAmount = (totalPrice * makerFee.rate) / _BASIS_POINTS;\n        takerFeeAmount = (totalPrice * fees.takerFee.rate) / _BASIS_POINTS;\n        protocolFeeAmount = (totalPrice * fees.protocolFee.rate) / _BASIS_POINTS;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Execute the transfers by first attempting the nonfungible transfers, for the successful transfers sum the fungible transfers by the recipients and execute\n     * @param executionBatch Execution batch struct\n     * @param fungibleTransfers Fungible transfers struct\n     * @param fees Protocol, maker, taker fees (note: makerFee will be inaccurate at this point in execution)\n     * @param orderType Order type\n     */\n    function _executeBatchTransfer(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        uint256 batchLength;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            batchLength := mload(add(calldataPointer, ExecutionBatch_length_offset))\n        }\n        if (batchLength > 0) {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(\n                executionBatch,\n                batchLength\n            );\n\n            uint256 transfersLength = successfulTransfers.length;\n            for (uint256 i; i < transfersLength; ) {\n                if (successfulTransfers[i]) {\n                    AtomicExecution memory execution = fungibleTransfers.executions[i];\n                    FeeRate memory makerFee;\n                    uint256 price;\n                    unchecked {\n                        if (orderType == OrderType.ASK) {\n                            fungibleTransfers.makerTransfers[execution.makerId] += execution\n                                .sellerAmount; // amount that needs to be sent *to* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount;\n                        } else {\n                            fungibleTransfers.makerTransfers[execution.makerId] +=\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount +\n                                execution.takerFeeAmount +\n                                execution.sellerAmount; // amount that needs to be taken *from* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.takerFeeAmount;\n                        }\n                        fungibleTransfers.totalSellerTransfer += execution.sellerAmount; // only for bids\n                        fungibleTransfers.totalProtocolFee += execution.protocolFeeAmount;\n                        fungibleTransfers.totalTakerFee += execution.takerFeeAmount;\n                        fungibleTransfers.feeTransfers[execution.makerFeeRecipientId] += execution\n                            .makerFeeAmount;\n                        makerFee = FeeRate(\n                            fungibleTransfers.feeRecipients[execution.makerFeeRecipientId],\n                            uint16((execution.makerFeeAmount * _BASIS_POINTS) / price)\n                        );\n                    }\n\n                    /* Commit state updates. */\n                    StateUpdate memory stateUpdate = fungibleTransfers.executions[i].stateUpdate;\n                    {\n                        address trader = stateUpdate.trader;\n                        bytes32 hash = stateUpdate.hash;\n                        uint256 index = stateUpdate.index;\n                        uint256 _amountTaken = amountTaken[trader][hash][index];\n                        uint256 newAmountTaken = _amountTaken + stateUpdate.value;\n\n                        /* Overfulfilled Listings should be caught prior to inserting into the batch, but this check prevents any misuse. */\n                        if (newAmountTaken <= stateUpdate.maxAmount) {\n                            amountTaken[trader][hash][index] = newAmountTaken;\n                        } else {\n                            revert OrderFulfilled();\n                        }\n                    }\n\n                    _emitExecutionEventFromBatch(\n                        executionBatch,\n                        price,\n                        makerFee,\n                        fees,\n                        stateUpdate,\n                        orderType,\n                        i\n                    );\n                }\n\n                unchecked {\n                    ++i;\n                }\n            }\n\n            if (orderType == OrderType.ASK) {\n                /* Transfer the payments to the sellers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferETH(fungibleTransfers.makers[i], fungibleTransfers.makerTransfers[i]);\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferETH(\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferETH(fees.protocolFee.recipient, fungibleTransfers.totalProtocolFee);\n\n                /* Transfer the taker fees. */\n                _transferETH(fees.takerFee.recipient, fungibleTransfers.totalTakerFee);\n            } else {\n                /* Take the pool funds from the buyers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferPool(\n                        fungibleTransfers.makers[i],\n                        address(this),\n                        fungibleTransfers.makerTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the payment to the seller. */\n                _transferPool(address(this), msg.sender, fungibleTransfers.totalSellerTransfer);\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferPool(\n                        address(this),\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferPool(\n                    address(this),\n                    fees.protocolFee.recipient,\n                    fungibleTransfers.totalProtocolFee\n                );\n\n                /* Transfer the taker fees. */\n                _transferPool(\n                    address(this),\n                    fees.takerFee.recipient,\n                    fungibleTransfers.totalTakerFee\n                );\n            }\n        }\n    }\n\n    /**\n     * @notice Attempt to execute a series of nonfungible transfers through the delegate; reverts will be skipped\n     * @param executionBatch Execution batch struct\n     * @param batchIndex Current available transfer slot in the batch\n     * @return Array indicating which transfers were successful\n     */\n    function _executeNonfungibleTransfers(\n        bytes memory executionBatch,\n        uint256 batchIndex\n    ) internal returns (bool[] memory) {\n        address delegate = _DELEGATE;\n\n        /* Initialize the memory space for the successful transfers array returned from the Delegate call. */\n        uint256 successfulTransfersPointer;\n        assembly {\n            successfulTransfersPointer := mload(Memory_pointer)\n            /* Need to shift the free memory pointer ahead one word to account for the array pointer returned from the call. */\n            mstore(Memory_pointer, add(successfulTransfersPointer, One_word))\n        }\n\n        bool[] memory successfulTransfers = new bool[](batchIndex);\n        assembly {\n            let size := mload(executionBatch)\n            let selectorPointer := add(executionBatch, ExecutionBatch_selector_offset)\n            mstore(selectorPointer, shr(Bytes4_shift, Delegate_transfer_selector))\n            let success := call(\n                gas(),\n                delegate,\n                0,\n                add(selectorPointer, Delegate_transfer_calldata_offset),\n                sub(size, Delegate_transfer_calldata_offset),\n                successfulTransfersPointer,\n                add(0x40, mul(batchIndex, One_word))\n            )\n        }\n        return successfulTransfers;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        TRANSFER FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Transfer ETH\n     * @param to Recipient address\n     * @param amount Amount of ETH to send\n     */\n    function _transferETH(address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            assembly {\n                success := call(gas(), to, amount, 0, 0, 0, 0)\n            }\n            if (!success) {\n                revert ETHTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Transfer pool funds on behalf of a user\n     * @param from Sender address\n     * @param to Recipient address\n     * @param amount Amount to send\n     */\n    function _transferPool(address from, address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            address pool = _POOL;\n            assembly {\n                let x := mload(Memory_pointer)\n                mstore(x, ERC20_transferFrom_selector)\n                mstore(add(x, ERC20_transferFrom_from_offset), from)\n                mstore(add(x, ERC20_transferFrom_to_offset), to)\n                mstore(add(x, ERC20_transferFrom_amount_offset), amount)\n                success := call(gas(), pool, 0, x, ERC20_transferFrom_size, 0, 0)\n            }\n            if (!success) {\n                revert PoolTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Deposit ETH to user's pool funds\n     * @param to Recipient address\n     * @param amount Amount of ETH to deposit\n     */\n    function _depositPool(address to, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_deposit_selector)\n            mstore(add(x, Pool_deposit_user_offset), to)\n            success := call(gas(), pool, amount, x, Pool_deposit_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolDepositFailed();\n        }\n    }\n\n    /**\n     * @notice Withdraw ETH from user's pool funds\n     * @param from Address to withdraw from\n     * @param amount Amount of ETH to withdraw\n     */\n    function _withdrawFromPool(address from, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_withdrawFrom_selector)\n            mstore(add(x, Pool_withdrawFrom_from_offset), from)\n            mstore(add(x, Pool_withdrawFrom_to_offset), address())\n            mstore(add(x, Pool_withdrawFrom_amount_offset), amount)\n            success := call(gas(), pool, 0, x, Pool_withdrawFrom_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolWithdrawFromFailed();\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EVENT EMITTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param price Price of the token purchased\n     * @param fees Protocol, maker, and taker fees taken\n     * @param stateUpdate Fulfillment to be recorded with a successful execution\n     * @param orderType Order type\n     * @param transferIndex Index of the transfer corresponding to the execution\n     */\n    function _emitExecutionEventFromBatch(\n        bytes memory executionBatch,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        StateUpdate memory stateUpdate,\n        OrderType orderType,\n        uint256 transferIndex\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            stateUpdate.hash,\n            stateUpdate.index,\n            price,\n            makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    /**\n     * @notice Emit the Execution event that minimizes the number of bytes in the log\n     * @param transfer The nft transfer\n     * @param orderHash Order hash\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param makerFee Maker fees taken\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitOptimalExecutionEvent(\n        Transfer memory transfer,\n        bytes32 orderHash,\n        uint256 listingIndex,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        if (\n            // see _insertNonfungibleTransfer; ERC721 transfers don't set the transfer amount,\n            // so we can assume the transfer amount and not check it\n            transfer.assetType == AssetType.ERC721 &&\n            fees.protocolFee.rate == 0 &&\n            transfer.id < 1 << (11 * 8) &&\n            listingIndex < 1 << (1 * 8) &&\n            price < 1 << (11 * 8)\n        ) {\n            if (makerFee.rate == 0 && fees.takerFee.rate == 0) {\n                emit Execution721Packed(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection)\n                );\n                return;\n            } else if (makerFee.rate == 0) {\n                emit Execution721TakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(fees.takerFee)\n                );\n                return;\n            } else if (fees.takerFee.rate == 0) {\n                emit Execution721MakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(makerFee)\n                );\n                return;\n            }\n        }\n\n        emit Execution({\n            transfer: transfer,\n            orderHash: orderHash,\n            listingIndex: listingIndex,\n            price: price,\n            makerFee: makerFee,\n            fees: fees,\n            orderType: orderType\n        });\n    }\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param order Order being fulfilled\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitExecutionEvent(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 listingIndex,\n        uint256 price,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(calldataPointer, add(transfersOffset, One_word))\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            bytes32(order.salt),\n            listingIndex,\n            price,\n            order.makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    function packTokenIdListingIndexTrader(\n        uint256 tokenId,\n        uint256 listingIndex,\n        address trader\n    ) private pure returns (uint256) {\n        return (tokenId << (21 * 8)) | (listingIndex << (20 * 8)) | uint160(trader);\n    }\n\n    function packTypePriceCollection(\n        OrderType orderType,\n        uint256 price,\n        address collection\n    ) private pure returns (uint256) {\n        return (uint256(orderType) << (31 * 8)) | (price << (20 * 8)) | uint160(collection);\n    }\n\n    function packFee(FeeRate memory fee) private pure returns (uint256) {\n        return (uint256(fee.rate) << (20 * 8)) | uint160(fee.recipient);\n    }\n\n    uint256[50] private __gap;\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Executor._emitExecutionEventFromBatch', 'start_line': 2239, 'end_line': 2267, 'offset_start': 83353, 'offset_end': 84260, 'content': 'function _emitExecutionEventFromBatch(\n        bytes memory executionBatch,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        StateUpdate memory stateUpdate,\n        OrderType orderType,\n        uint256 transferIndex\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            stateUpdate.hash,\n            stateUpdate.index,\n            price,\n            makerFee,\n            fees,\n            orderType\n        );\n    }', 'contract_name': 'Executor', 'contract_code': "{\n    address private immutable _DELEGATE;\n    address private immutable _POOL;\n\n    constructor(address delegate, address pool, address proxy) Validation(proxy) {\n        _DELEGATE = delegate;\n        _POOL = pool;\n    }\n\n    receive() external payable {\n        if (msg.sender != _POOL) {\n            revert Unauthorized();\n        }\n    }\n\n    /**\n     * @notice Insert a validated ask listing into the batch if there's sufficient ETH to fulfill\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing the listing to insert\n     * @param fees Protocol and taker fees\n     * @param remainingETH Available ETH remaining\n     * @return Available ETH remaining after insertion; if the listing was inserted in the batch\n     */\n    function _insertExecutionAsk(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees,\n        uint256 remainingETH\n    ) internal pure returns (uint256, bool) {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        /* Only insert the executions if there are sufficient funds to execute. */\n        if (remainingETH >= totalPrice + takerFeeAmount) {\n            unchecked {\n                remainingETH = remainingETH - totalPrice - takerFeeAmount;\n            }\n\n            _setAddresses(fungibleTransfers, order);\n\n            uint256 index = _insertNonfungibleTransfer(\n                executionBatch,\n                order,\n                exchange.listing.tokenId,\n                takerAmount\n            );\n\n            _insertFungibleTransfers(\n                fungibleTransfers,\n                takerAmount,\n                exchange.listing,\n                bytes32(order.salt),\n                index,\n                totalPrice,\n                protocolFeeAmount,\n                makerFeeAmount,\n                takerFeeAmount,\n                true\n            );\n\n            return (remainingETH, true);\n        } else {\n            return (remainingETH, false);\n        }\n    }\n\n    /**\n     * @notice Insert a validated bid listing into the batch\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing listing to insert\n     * @param fees Protocol and taker fees\n     */\n    function _insertExecutionBid(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees\n    ) internal pure {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        _setAddresses(fungibleTransfers, order);\n\n        uint256 index = _insertNonfungibleTransfer(\n            executionBatch,\n            order,\n            exchange.taker.tokenId,\n            takerAmount\n        );\n\n        _insertFungibleTransfers(\n            fungibleTransfers,\n            takerAmount,\n            exchange.listing,\n            bytes32(order.salt),\n            index,\n            totalPrice,\n            protocolFeeAmount,\n            makerFeeAmount,\n            takerFeeAmount,\n            false\n        );\n    }\n\n    /**\n     * @notice Insert the nonfungible transfer into the batch\n     * @param executionBatch Execution batch\n     * @param order Order\n     * @param tokenId Token id\n     * @param amount Number of token units\n     * @return transferIndex Index of the transfer\n     */\n    function _insertNonfungibleTransfer(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 tokenId,\n        uint256 amount\n    ) internal pure returns (uint256 transferIndex) {\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            transferIndex := mload(add(calldataPointer, ExecutionBatch_length_offset))\n\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            let transferPointer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n            mstore(\n                add(transferPointer, Transfer_trader_offset),\n                mload(add(order, Order_trader_offset))\n            ) // set the trader\n            mstore(add(transferPointer, Transfer_id_offset), tokenId) // set the token id\n            mstore(\n                add(transferPointer, Transfer_collection_offset),\n                mload(add(order, Order_collection_offset))\n            ) // set the collection\n            mstore(\n                add(transferPointer, Transfer_assetType_offset),\n                mload(add(order, Order_assetType_offset))\n            ) // set the asset type\n            mstore(add(calldataPointer, ExecutionBatch_length_offset), add(transferIndex, 1)) // increment the batch length\n\n            if eq(mload(add(order, Order_assetType_offset)), AssetType_ERC1155) {\n                mstore(add(transferPointer, Transfer_amount_offset), amount) // set the amount (don't need to set for ERC721's)\n            }\n        }\n    }\n\n    /**\n     * @notice Insert the fungible transfers that need to be executed atomically\n     * @param fungibleTransfers Fungible transfers struct\n     * @param takerAmount Amount of the listing being taken\n     * @param listing Listing to execute\n     * @param orderHash Order hash\n     * @param index Execution index\n     * @param totalPrice Total price of the purchased tokens\n     * @param protocolFeeAmount Computed protocol fee\n     * @param makerFeeAmount Computed maker fee\n     * @param takerFeeAmount Computed taker fee\n     * @param makerIsSeller Is the order maker the seller\n     */\n    function _insertFungibleTransfers(\n        FungibleTransfers memory fungibleTransfers,\n        uint256 takerAmount,\n        Listing memory listing,\n        bytes32 orderHash,\n        uint256 index,\n        uint256 totalPrice,\n        uint256 protocolFeeAmount,\n        uint256 makerFeeAmount,\n        uint256 takerFeeAmount,\n        bool makerIsSeller\n    ) internal pure {\n        uint256 makerId = fungibleTransfers.makerId;\n        fungibleTransfers.executions[index].makerId = makerId;\n        fungibleTransfers.executions[index].makerFeeRecipientId = fungibleTransfers.feeRecipientId;\n        fungibleTransfers.executions[index].stateUpdate = StateUpdate({\n            trader: fungibleTransfers.makers[makerId],\n            hash: orderHash,\n            index: listing.index,\n            value: takerAmount,\n            maxAmount: listing.amount\n        });\n        if (makerIsSeller) {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    makerFeeAmount;\n            }\n        } else {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    takerFeeAmount;\n            }\n        }\n        fungibleTransfers.executions[index].makerFeeAmount = makerFeeAmount;\n        fungibleTransfers.executions[index].takerFeeAmount = takerFeeAmount;\n        fungibleTransfers.executions[index].protocolFeeAmount = protocolFeeAmount;\n    }\n\n    /**\n     * @notice Set the addresses of the maker fee recipient and order maker if different than currently being batched\n     * @param fungibleTransfers Fungible transfers struct\n     * @param order Parent order of listing being added to the batch\n     */\n    function _setAddresses(\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order\n    ) internal pure {\n        address feeRecipient = order.makerFee.recipient;\n        uint256 feeRecipientId = fungibleTransfers.feeRecipientId;\n        address currentFeeRecipient = fungibleTransfers.feeRecipients[feeRecipientId];\n        if (feeRecipient != currentFeeRecipient) {\n            if (currentFeeRecipient == address(0)) {\n                fungibleTransfers.feeRecipients[feeRecipientId] = feeRecipient;\n            } else {\n                unchecked {\n                    fungibleTransfers.feeRecipients[++feeRecipientId] = feeRecipient;\n                }\n                fungibleTransfers.feeRecipientId = feeRecipientId;\n            }\n        }\n        address trader = order.trader;\n        uint256 makerId = fungibleTransfers.makerId;\n        address currentTrader = fungibleTransfers.makers[makerId];\n        if (trader != currentTrader) {\n            if (currentTrader == address(0)) {\n                fungibleTransfers.makers[makerId] = trader;\n            } else {\n                unchecked {\n                    fungibleTransfers.makers[++makerId] = trader;\n                }\n                fungibleTransfers.makerId = makerId;\n            }\n        }\n    }\n\n    /**\n     * @notice Compute all necessary fees to be taken\n     * @param pricePerToken Price per token unit\n     * @param takerAmount Number of token units taken (should only be greater than 1 for ERC1155)\n     * @param fees Protocol and taker fee set by the transaction\n     */\n    function _computeFees(\n        uint256 pricePerToken,\n        uint256 takerAmount,\n        FeeRate memory makerFee,\n        Fees memory fees\n    )\n        internal\n        pure\n        returns (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        )\n    {\n        totalPrice = pricePerToken * takerAmount;\n        makerFeeAmount = (totalPrice * makerFee.rate) / _BASIS_POINTS;\n        takerFeeAmount = (totalPrice * fees.takerFee.rate) / _BASIS_POINTS;\n        protocolFeeAmount = (totalPrice * fees.protocolFee.rate) / _BASIS_POINTS;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Execute the transfers by first attempting the nonfungible transfers, for the successful transfers sum the fungible transfers by the recipients and execute\n     * @param executionBatch Execution batch struct\n     * @param fungibleTransfers Fungible transfers struct\n     * @param fees Protocol, maker, taker fees (note: makerFee will be inaccurate at this point in execution)\n     * @param orderType Order type\n     */\n    function _executeBatchTransfer(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        uint256 batchLength;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            batchLength := mload(add(calldataPointer, ExecutionBatch_length_offset))\n        }\n        if (batchLength > 0) {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(\n                executionBatch,\n                batchLength\n            );\n\n            uint256 transfersLength = successfulTransfers.length;\n            for (uint256 i; i < transfersLength; ) {\n                if (successfulTransfers[i]) {\n                    AtomicExecution memory execution = fungibleTransfers.executions[i];\n                    FeeRate memory makerFee;\n                    uint256 price;\n                    unchecked {\n                        if (orderType == OrderType.ASK) {\n                            fungibleTransfers.makerTransfers[execution.makerId] += execution\n                                .sellerAmount; // amount that needs to be sent *to* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount;\n                        } else {\n                            fungibleTransfers.makerTransfers[execution.makerId] +=\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount +\n                                execution.takerFeeAmount +\n                                execution.sellerAmount; // amount that needs to be taken *from* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.takerFeeAmount;\n                        }\n                        fungibleTransfers.totalSellerTransfer += execution.sellerAmount; // only for bids\n                        fungibleTransfers.totalProtocolFee += execution.protocolFeeAmount;\n                        fungibleTransfers.totalTakerFee += execution.takerFeeAmount;\n                        fungibleTransfers.feeTransfers[execution.makerFeeRecipientId] += execution\n                            .makerFeeAmount;\n                        makerFee = FeeRate(\n                            fungibleTransfers.feeRecipients[execution.makerFeeRecipientId],\n                            uint16((execution.makerFeeAmount * _BASIS_POINTS) / price)\n                        );\n                    }\n\n                    /* Commit state updates. */\n                    StateUpdate memory stateUpdate = fungibleTransfers.executions[i].stateUpdate;\n                    {\n                        address trader = stateUpdate.trader;\n                        bytes32 hash = stateUpdate.hash;\n                        uint256 index = stateUpdate.index;\n                        uint256 _amountTaken = amountTaken[trader][hash][index];\n                        uint256 newAmountTaken = _amountTaken + stateUpdate.value;\n\n                        /* Overfulfilled Listings should be caught prior to inserting into the batch, but this check prevents any misuse. */\n                        if (newAmountTaken <= stateUpdate.maxAmount) {\n                            amountTaken[trader][hash][index] = newAmountTaken;\n                        } else {\n                            revert OrderFulfilled();\n                        }\n                    }\n\n                    _emitExecutionEventFromBatch(\n                        executionBatch,\n                        price,\n                        makerFee,\n                        fees,\n                        stateUpdate,\n                        orderType,\n                        i\n                    );\n                }\n\n                unchecked {\n                    ++i;\n                }\n            }\n\n            if (orderType == OrderType.ASK) {\n                /* Transfer the payments to the sellers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferETH(fungibleTransfers.makers[i], fungibleTransfers.makerTransfers[i]);\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferETH(\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferETH(fees.protocolFee.recipient, fungibleTransfers.totalProtocolFee);\n\n                /* Transfer the taker fees. */\n                _transferETH(fees.takerFee.recipient, fungibleTransfers.totalTakerFee);\n            } else {\n                /* Take the pool funds from the buyers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferPool(\n                        fungibleTransfers.makers[i],\n                        address(this),\n                        fungibleTransfers.makerTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the payment to the seller. */\n                _transferPool(address(this), msg.sender, fungibleTransfers.totalSellerTransfer);\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferPool(\n                        address(this),\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferPool(\n                    address(this),\n                    fees.protocolFee.recipient,\n                    fungibleTransfers.totalProtocolFee\n                );\n\n                /* Transfer the taker fees. */\n                _transferPool(\n                    address(this),\n                    fees.takerFee.recipient,\n                    fungibleTransfers.totalTakerFee\n                );\n            }\n        }\n    }\n\n    /**\n     * @notice Attempt to execute a series of nonfungible transfers through the delegate; reverts will be skipped\n     * @param executionBatch Execution batch struct\n     * @param batchIndex Current available transfer slot in the batch\n     * @return Array indicating which transfers were successful\n     */\n    function _executeNonfungibleTransfers(\n        bytes memory executionBatch,\n        uint256 batchIndex\n    ) internal returns (bool[] memory) {\n        address delegate = _DELEGATE;\n\n        /* Initialize the memory space for the successful transfers array returned from the Delegate call. */\n        uint256 successfulTransfersPointer;\n        assembly {\n            successfulTransfersPointer := mload(Memory_pointer)\n            /* Need to shift the free memory pointer ahead one word to account for the array pointer returned from the call. */\n            mstore(Memory_pointer, add(successfulTransfersPointer, One_word))\n        }\n\n        bool[] memory successfulTransfers = new bool[](batchIndex);\n        assembly {\n            let size := mload(executionBatch)\n            let selectorPointer := add(executionBatch, ExecutionBatch_selector_offset)\n            mstore(selectorPointer, shr(Bytes4_shift, Delegate_transfer_selector))\n            let success := call(\n                gas(),\n                delegate,\n                0,\n                add(selectorPointer, Delegate_transfer_calldata_offset),\n                sub(size, Delegate_transfer_calldata_offset),\n                successfulTransfersPointer,\n                add(0x40, mul(batchIndex, One_word))\n            )\n        }\n        return successfulTransfers;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        TRANSFER FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Transfer ETH\n     * @param to Recipient address\n     * @param amount Amount of ETH to send\n     */\n    function _transferETH(address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            assembly {\n                success := call(gas(), to, amount, 0, 0, 0, 0)\n            }\n            if (!success) {\n                revert ETHTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Transfer pool funds on behalf of a user\n     * @param from Sender address\n     * @param to Recipient address\n     * @param amount Amount to send\n     */\n    function _transferPool(address from, address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            address pool = _POOL;\n            assembly {\n                let x := mload(Memory_pointer)\n                mstore(x, ERC20_transferFrom_selector)\n                mstore(add(x, ERC20_transferFrom_from_offset), from)\n                mstore(add(x, ERC20_transferFrom_to_offset), to)\n                mstore(add(x, ERC20_transferFrom_amount_offset), amount)\n                success := call(gas(), pool, 0, x, ERC20_transferFrom_size, 0, 0)\n            }\n            if (!success) {\n                revert PoolTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Deposit ETH to user's pool funds\n     * @param to Recipient address\n     * @param amount Amount of ETH to deposit\n     */\n    function _depositPool(address to, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_deposit_selector)\n            mstore(add(x, Pool_deposit_user_offset), to)\n            success := call(gas(), pool, amount, x, Pool_deposit_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolDepositFailed();\n        }\n    }\n\n    /**\n     * @notice Withdraw ETH from user's pool funds\n     * @param from Address to withdraw from\n     * @param amount Amount of ETH to withdraw\n     */\n    function _withdrawFromPool(address from, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_withdrawFrom_selector)\n            mstore(add(x, Pool_withdrawFrom_from_offset), from)\n            mstore(add(x, Pool_withdrawFrom_to_offset), address())\n            mstore(add(x, Pool_withdrawFrom_amount_offset), amount)\n            success := call(gas(), pool, 0, x, Pool_withdrawFrom_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolWithdrawFromFailed();\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EVENT EMITTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param price Price of the token purchased\n     * @param fees Protocol, maker, and taker fees taken\n     * @param stateUpdate Fulfillment to be recorded with a successful execution\n     * @param orderType Order type\n     * @param transferIndex Index of the transfer corresponding to the execution\n     */\n    function _emitExecutionEventFromBatch(\n        bytes memory executionBatch,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        StateUpdate memory stateUpdate,\n        OrderType orderType,\n        uint256 transferIndex\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            stateUpdate.hash,\n            stateUpdate.index,\n            price,\n            makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    /**\n     * @notice Emit the Execution event that minimizes the number of bytes in the log\n     * @param transfer The nft transfer\n     * @param orderHash Order hash\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param makerFee Maker fees taken\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitOptimalExecutionEvent(\n        Transfer memory transfer,\n        bytes32 orderHash,\n        uint256 listingIndex,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        if (\n            // see _insertNonfungibleTransfer; ERC721 transfers don't set the transfer amount,\n            // so we can assume the transfer amount and not check it\n            transfer.assetType == AssetType.ERC721 &&\n            fees.protocolFee.rate == 0 &&\n            transfer.id < 1 << (11 * 8) &&\n            listingIndex < 1 << (1 * 8) &&\n            price < 1 << (11 * 8)\n        ) {\n            if (makerFee.rate == 0 && fees.takerFee.rate == 0) {\n                emit Execution721Packed(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection)\n                );\n                return;\n            } else if (makerFee.rate == 0) {\n                emit Execution721TakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(fees.takerFee)\n                );\n                return;\n            } else if (fees.takerFee.rate == 0) {\n                emit Execution721MakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(makerFee)\n                );\n                return;\n            }\n        }\n\n        emit Execution({\n            transfer: transfer,\n            orderHash: orderHash,\n            listingIndex: listingIndex,\n            price: price,\n            makerFee: makerFee,\n            fees: fees,\n            orderType: orderType\n        });\n    }\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param order Order being fulfilled\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitExecutionEvent(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 listingIndex,\n        uint256 price,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(calldataPointer, add(transfersOffset, One_word))\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            bytes32(order.salt),\n            listingIndex,\n            price,\n            order.makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    function packTokenIdListingIndexTrader(\n        uint256 tokenId,\n        uint256 listingIndex,\n        address trader\n    ) private pure returns (uint256) {\n        return (tokenId << (21 * 8)) | (listingIndex << (20 * 8)) | uint160(trader);\n    }\n\n    function packTypePriceCollection(\n        OrderType orderType,\n        uint256 price,\n        address collection\n    ) private pure returns (uint256) {\n        return (uint256(orderType) << (31 * 8)) | (price << (20 * 8)) | uint160(collection);\n    }\n\n    function packFee(FeeRate memory fee) private pure returns (uint256) {\n        return (uint256(fee.rate) << (20 * 8)) | uint160(fee.recipient);\n    }\n\n    uint256[50] private __gap;\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Executor._emitOptimalExecutionEvent', 'start_line': 2279, 'end_line': 2332, 'offset_start': 84699, 'offset_end': 86784, 'content': "function _emitOptimalExecutionEvent(\n        Transfer memory transfer,\n        bytes32 orderHash,\n        uint256 listingIndex,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        if (\n            // see _insertNonfungibleTransfer; ERC721 transfers don't set the transfer amount,\n            // so we can assume the transfer amount and not check it\n            transfer.assetType == AssetType.ERC721 &&\n            fees.protocolFee.rate == 0 &&\n            transfer.id < 1 << (11 * 8) &&\n            listingIndex < 1 << (1 * 8) &&\n            price < 1 << (11 * 8)\n        ) {\n            if (makerFee.rate == 0 && fees.takerFee.rate == 0) {\n                emit Execution721Packed(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection)\n                );\n                return;\n            } else if (makerFee.rate == 0) {\n                emit Execution721TakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(fees.takerFee)\n                );\n                return;\n            } else if (fees.takerFee.rate == 0) {\n                emit Execution721MakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(makerFee)\n                );\n                return;\n            }\n        }\n\n        emit Execution({\n            transfer: transfer,\n            orderHash: orderHash,\n            listingIndex: listingIndex,\n            price: price,\n            makerFee: makerFee,\n            fees: fees,\n            orderType: orderType\n        });\n    }", 'contract_name': 'Executor', 'contract_code': "{\n    address private immutable _DELEGATE;\n    address private immutable _POOL;\n\n    constructor(address delegate, address pool, address proxy) Validation(proxy) {\n        _DELEGATE = delegate;\n        _POOL = pool;\n    }\n\n    receive() external payable {\n        if (msg.sender != _POOL) {\n            revert Unauthorized();\n        }\n    }\n\n    /**\n     * @notice Insert a validated ask listing into the batch if there's sufficient ETH to fulfill\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing the listing to insert\n     * @param fees Protocol and taker fees\n     * @param remainingETH Available ETH remaining\n     * @return Available ETH remaining after insertion; if the listing was inserted in the batch\n     */\n    function _insertExecutionAsk(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees,\n        uint256 remainingETH\n    ) internal pure returns (uint256, bool) {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        /* Only insert the executions if there are sufficient funds to execute. */\n        if (remainingETH >= totalPrice + takerFeeAmount) {\n            unchecked {\n                remainingETH = remainingETH - totalPrice - takerFeeAmount;\n            }\n\n            _setAddresses(fungibleTransfers, order);\n\n            uint256 index = _insertNonfungibleTransfer(\n                executionBatch,\n                order,\n                exchange.listing.tokenId,\n                takerAmount\n            );\n\n            _insertFungibleTransfers(\n                fungibleTransfers,\n                takerAmount,\n                exchange.listing,\n                bytes32(order.salt),\n                index,\n                totalPrice,\n                protocolFeeAmount,\n                makerFeeAmount,\n                takerFeeAmount,\n                true\n            );\n\n            return (remainingETH, true);\n        } else {\n            return (remainingETH, false);\n        }\n    }\n\n    /**\n     * @notice Insert a validated bid listing into the batch\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing listing to insert\n     * @param fees Protocol and taker fees\n     */\n    function _insertExecutionBid(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees\n    ) internal pure {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        _setAddresses(fungibleTransfers, order);\n\n        uint256 index = _insertNonfungibleTransfer(\n            executionBatch,\n            order,\n            exchange.taker.tokenId,\n            takerAmount\n        );\n\n        _insertFungibleTransfers(\n            fungibleTransfers,\n            takerAmount,\n            exchange.listing,\n            bytes32(order.salt),\n            index,\n            totalPrice,\n            protocolFeeAmount,\n            makerFeeAmount,\n            takerFeeAmount,\n            false\n        );\n    }\n\n    /**\n     * @notice Insert the nonfungible transfer into the batch\n     * @param executionBatch Execution batch\n     * @param order Order\n     * @param tokenId Token id\n     * @param amount Number of token units\n     * @return transferIndex Index of the transfer\n     */\n    function _insertNonfungibleTransfer(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 tokenId,\n        uint256 amount\n    ) internal pure returns (uint256 transferIndex) {\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            transferIndex := mload(add(calldataPointer, ExecutionBatch_length_offset))\n\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            let transferPointer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n            mstore(\n                add(transferPointer, Transfer_trader_offset),\n                mload(add(order, Order_trader_offset))\n            ) // set the trader\n            mstore(add(transferPointer, Transfer_id_offset), tokenId) // set the token id\n            mstore(\n                add(transferPointer, Transfer_collection_offset),\n                mload(add(order, Order_collection_offset))\n            ) // set the collection\n            mstore(\n                add(transferPointer, Transfer_assetType_offset),\n                mload(add(order, Order_assetType_offset))\n            ) // set the asset type\n            mstore(add(calldataPointer, ExecutionBatch_length_offset), add(transferIndex, 1)) // increment the batch length\n\n            if eq(mload(add(order, Order_assetType_offset)), AssetType_ERC1155) {\n                mstore(add(transferPointer, Transfer_amount_offset), amount) // set the amount (don't need to set for ERC721's)\n            }\n        }\n    }\n\n    /**\n     * @notice Insert the fungible transfers that need to be executed atomically\n     * @param fungibleTransfers Fungible transfers struct\n     * @param takerAmount Amount of the listing being taken\n     * @param listing Listing to execute\n     * @param orderHash Order hash\n     * @param index Execution index\n     * @param totalPrice Total price of the purchased tokens\n     * @param protocolFeeAmount Computed protocol fee\n     * @param makerFeeAmount Computed maker fee\n     * @param takerFeeAmount Computed taker fee\n     * @param makerIsSeller Is the order maker the seller\n     */\n    function _insertFungibleTransfers(\n        FungibleTransfers memory fungibleTransfers,\n        uint256 takerAmount,\n        Listing memory listing,\n        bytes32 orderHash,\n        uint256 index,\n        uint256 totalPrice,\n        uint256 protocolFeeAmount,\n        uint256 makerFeeAmount,\n        uint256 takerFeeAmount,\n        bool makerIsSeller\n    ) internal pure {\n        uint256 makerId = fungibleTransfers.makerId;\n        fungibleTransfers.executions[index].makerId = makerId;\n        fungibleTransfers.executions[index].makerFeeRecipientId = fungibleTransfers.feeRecipientId;\n        fungibleTransfers.executions[index].stateUpdate = StateUpdate({\n            trader: fungibleTransfers.makers[makerId],\n            hash: orderHash,\n            index: listing.index,\n            value: takerAmount,\n            maxAmount: listing.amount\n        });\n        if (makerIsSeller) {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    makerFeeAmount;\n            }\n        } else {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    takerFeeAmount;\n            }\n        }\n        fungibleTransfers.executions[index].makerFeeAmount = makerFeeAmount;\n        fungibleTransfers.executions[index].takerFeeAmount = takerFeeAmount;\n        fungibleTransfers.executions[index].protocolFeeAmount = protocolFeeAmount;\n    }\n\n    /**\n     * @notice Set the addresses of the maker fee recipient and order maker if different than currently being batched\n     * @param fungibleTransfers Fungible transfers struct\n     * @param order Parent order of listing being added to the batch\n     */\n    function _setAddresses(\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order\n    ) internal pure {\n        address feeRecipient = order.makerFee.recipient;\n        uint256 feeRecipientId = fungibleTransfers.feeRecipientId;\n        address currentFeeRecipient = fungibleTransfers.feeRecipients[feeRecipientId];\n        if (feeRecipient != currentFeeRecipient) {\n            if (currentFeeRecipient == address(0)) {\n                fungibleTransfers.feeRecipients[feeRecipientId] = feeRecipient;\n            } else {\n                unchecked {\n                    fungibleTransfers.feeRecipients[++feeRecipientId] = feeRecipient;\n                }\n                fungibleTransfers.feeRecipientId = feeRecipientId;\n            }\n        }\n        address trader = order.trader;\n        uint256 makerId = fungibleTransfers.makerId;\n        address currentTrader = fungibleTransfers.makers[makerId];\n        if (trader != currentTrader) {\n            if (currentTrader == address(0)) {\n                fungibleTransfers.makers[makerId] = trader;\n            } else {\n                unchecked {\n                    fungibleTransfers.makers[++makerId] = trader;\n                }\n                fungibleTransfers.makerId = makerId;\n            }\n        }\n    }\n\n    /**\n     * @notice Compute all necessary fees to be taken\n     * @param pricePerToken Price per token unit\n     * @param takerAmount Number of token units taken (should only be greater than 1 for ERC1155)\n     * @param fees Protocol and taker fee set by the transaction\n     */\n    function _computeFees(\n        uint256 pricePerToken,\n        uint256 takerAmount,\n        FeeRate memory makerFee,\n        Fees memory fees\n    )\n        internal\n        pure\n        returns (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        )\n    {\n        totalPrice = pricePerToken * takerAmount;\n        makerFeeAmount = (totalPrice * makerFee.rate) / _BASIS_POINTS;\n        takerFeeAmount = (totalPrice * fees.takerFee.rate) / _BASIS_POINTS;\n        protocolFeeAmount = (totalPrice * fees.protocolFee.rate) / _BASIS_POINTS;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Execute the transfers by first attempting the nonfungible transfers, for the successful transfers sum the fungible transfers by the recipients and execute\n     * @param executionBatch Execution batch struct\n     * @param fungibleTransfers Fungible transfers struct\n     * @param fees Protocol, maker, taker fees (note: makerFee will be inaccurate at this point in execution)\n     * @param orderType Order type\n     */\n    function _executeBatchTransfer(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        uint256 batchLength;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            batchLength := mload(add(calldataPointer, ExecutionBatch_length_offset))\n        }\n        if (batchLength > 0) {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(\n                executionBatch,\n                batchLength\n            );\n\n            uint256 transfersLength = successfulTransfers.length;\n            for (uint256 i; i < transfersLength; ) {\n                if (successfulTransfers[i]) {\n                    AtomicExecution memory execution = fungibleTransfers.executions[i];\n                    FeeRate memory makerFee;\n                    uint256 price;\n                    unchecked {\n                        if (orderType == OrderType.ASK) {\n                            fungibleTransfers.makerTransfers[execution.makerId] += execution\n                                .sellerAmount; // amount that needs to be sent *to* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount;\n                        } else {\n                            fungibleTransfers.makerTransfers[execution.makerId] +=\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount +\n                                execution.takerFeeAmount +\n                                execution.sellerAmount; // amount that needs to be taken *from* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.takerFeeAmount;\n                        }\n                        fungibleTransfers.totalSellerTransfer += execution.sellerAmount; // only for bids\n                        fungibleTransfers.totalProtocolFee += execution.protocolFeeAmount;\n                        fungibleTransfers.totalTakerFee += execution.takerFeeAmount;\n                        fungibleTransfers.feeTransfers[execution.makerFeeRecipientId] += execution\n                            .makerFeeAmount;\n                        makerFee = FeeRate(\n                            fungibleTransfers.feeRecipients[execution.makerFeeRecipientId],\n                            uint16((execution.makerFeeAmount * _BASIS_POINTS) / price)\n                        );\n                    }\n\n                    /* Commit state updates. */\n                    StateUpdate memory stateUpdate = fungibleTransfers.executions[i].stateUpdate;\n                    {\n                        address trader = stateUpdate.trader;\n                        bytes32 hash = stateUpdate.hash;\n                        uint256 index = stateUpdate.index;\n                        uint256 _amountTaken = amountTaken[trader][hash][index];\n                        uint256 newAmountTaken = _amountTaken + stateUpdate.value;\n\n                        /* Overfulfilled Listings should be caught prior to inserting into the batch, but this check prevents any misuse. */\n                        if (newAmountTaken <= stateUpdate.maxAmount) {\n                            amountTaken[trader][hash][index] = newAmountTaken;\n                        } else {\n                            revert OrderFulfilled();\n                        }\n                    }\n\n                    _emitExecutionEventFromBatch(\n                        executionBatch,\n                        price,\n                        makerFee,\n                        fees,\n                        stateUpdate,\n                        orderType,\n                        i\n                    );\n                }\n\n                unchecked {\n                    ++i;\n                }\n            }\n\n            if (orderType == OrderType.ASK) {\n                /* Transfer the payments to the sellers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferETH(fungibleTransfers.makers[i], fungibleTransfers.makerTransfers[i]);\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferETH(\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferETH(fees.protocolFee.recipient, fungibleTransfers.totalProtocolFee);\n\n                /* Transfer the taker fees. */\n                _transferETH(fees.takerFee.recipient, fungibleTransfers.totalTakerFee);\n            } else {\n                /* Take the pool funds from the buyers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferPool(\n                        fungibleTransfers.makers[i],\n                        address(this),\n                        fungibleTransfers.makerTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the payment to the seller. */\n                _transferPool(address(this), msg.sender, fungibleTransfers.totalSellerTransfer);\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferPool(\n                        address(this),\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferPool(\n                    address(this),\n                    fees.protocolFee.recipient,\n                    fungibleTransfers.totalProtocolFee\n                );\n\n                /* Transfer the taker fees. */\n                _transferPool(\n                    address(this),\n                    fees.takerFee.recipient,\n                    fungibleTransfers.totalTakerFee\n                );\n            }\n        }\n    }\n\n    /**\n     * @notice Attempt to execute a series of nonfungible transfers through the delegate; reverts will be skipped\n     * @param executionBatch Execution batch struct\n     * @param batchIndex Current available transfer slot in the batch\n     * @return Array indicating which transfers were successful\n     */\n    function _executeNonfungibleTransfers(\n        bytes memory executionBatch,\n        uint256 batchIndex\n    ) internal returns (bool[] memory) {\n        address delegate = _DELEGATE;\n\n        /* Initialize the memory space for the successful transfers array returned from the Delegate call. */\n        uint256 successfulTransfersPointer;\n        assembly {\n            successfulTransfersPointer := mload(Memory_pointer)\n            /* Need to shift the free memory pointer ahead one word to account for the array pointer returned from the call. */\n            mstore(Memory_pointer, add(successfulTransfersPointer, One_word))\n        }\n\n        bool[] memory successfulTransfers = new bool[](batchIndex);\n        assembly {\n            let size := mload(executionBatch)\n            let selectorPointer := add(executionBatch, ExecutionBatch_selector_offset)\n            mstore(selectorPointer, shr(Bytes4_shift, Delegate_transfer_selector))\n            let success := call(\n                gas(),\n                delegate,\n                0,\n                add(selectorPointer, Delegate_transfer_calldata_offset),\n                sub(size, Delegate_transfer_calldata_offset),\n                successfulTransfersPointer,\n                add(0x40, mul(batchIndex, One_word))\n            )\n        }\n        return successfulTransfers;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        TRANSFER FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Transfer ETH\n     * @param to Recipient address\n     * @param amount Amount of ETH to send\n     */\n    function _transferETH(address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            assembly {\n                success := call(gas(), to, amount, 0, 0, 0, 0)\n            }\n            if (!success) {\n                revert ETHTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Transfer pool funds on behalf of a user\n     * @param from Sender address\n     * @param to Recipient address\n     * @param amount Amount to send\n     */\n    function _transferPool(address from, address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            address pool = _POOL;\n            assembly {\n                let x := mload(Memory_pointer)\n                mstore(x, ERC20_transferFrom_selector)\n                mstore(add(x, ERC20_transferFrom_from_offset), from)\n                mstore(add(x, ERC20_transferFrom_to_offset), to)\n                mstore(add(x, ERC20_transferFrom_amount_offset), amount)\n                success := call(gas(), pool, 0, x, ERC20_transferFrom_size, 0, 0)\n            }\n            if (!success) {\n                revert PoolTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Deposit ETH to user's pool funds\n     * @param to Recipient address\n     * @param amount Amount of ETH to deposit\n     */\n    function _depositPool(address to, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_deposit_selector)\n            mstore(add(x, Pool_deposit_user_offset), to)\n            success := call(gas(), pool, amount, x, Pool_deposit_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolDepositFailed();\n        }\n    }\n\n    /**\n     * @notice Withdraw ETH from user's pool funds\n     * @param from Address to withdraw from\n     * @param amount Amount of ETH to withdraw\n     */\n    function _withdrawFromPool(address from, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_withdrawFrom_selector)\n            mstore(add(x, Pool_withdrawFrom_from_offset), from)\n            mstore(add(x, Pool_withdrawFrom_to_offset), address())\n            mstore(add(x, Pool_withdrawFrom_amount_offset), amount)\n            success := call(gas(), pool, 0, x, Pool_withdrawFrom_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolWithdrawFromFailed();\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EVENT EMITTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param price Price of the token purchased\n     * @param fees Protocol, maker, and taker fees taken\n     * @param stateUpdate Fulfillment to be recorded with a successful execution\n     * @param orderType Order type\n     * @param transferIndex Index of the transfer corresponding to the execution\n     */\n    function _emitExecutionEventFromBatch(\n        bytes memory executionBatch,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        StateUpdate memory stateUpdate,\n        OrderType orderType,\n        uint256 transferIndex\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            stateUpdate.hash,\n            stateUpdate.index,\n            price,\n            makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    /**\n     * @notice Emit the Execution event that minimizes the number of bytes in the log\n     * @param transfer The nft transfer\n     * @param orderHash Order hash\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param makerFee Maker fees taken\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitOptimalExecutionEvent(\n        Transfer memory transfer,\n        bytes32 orderHash,\n        uint256 listingIndex,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        if (\n            // see _insertNonfungibleTransfer; ERC721 transfers don't set the transfer amount,\n            // so we can assume the transfer amount and not check it\n            transfer.assetType == AssetType.ERC721 &&\n            fees.protocolFee.rate == 0 &&\n            transfer.id < 1 << (11 * 8) &&\n            listingIndex < 1 << (1 * 8) &&\n            price < 1 << (11 * 8)\n        ) {\n            if (makerFee.rate == 0 && fees.takerFee.rate == 0) {\n                emit Execution721Packed(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection)\n                );\n                return;\n            } else if (makerFee.rate == 0) {\n                emit Execution721TakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(fees.takerFee)\n                );\n                return;\n            } else if (fees.takerFee.rate == 0) {\n                emit Execution721MakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(makerFee)\n                );\n                return;\n            }\n        }\n\n        emit Execution({\n            transfer: transfer,\n            orderHash: orderHash,\n            listingIndex: listingIndex,\n            price: price,\n            makerFee: makerFee,\n            fees: fees,\n            orderType: orderType\n        });\n    }\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param order Order being fulfilled\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitExecutionEvent(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 listingIndex,\n        uint256 price,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(calldataPointer, add(transfersOffset, One_word))\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            bytes32(order.salt),\n            listingIndex,\n            price,\n            order.makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    function packTokenIdListingIndexTrader(\n        uint256 tokenId,\n        uint256 listingIndex,\n        address trader\n    ) private pure returns (uint256) {\n        return (tokenId << (21 * 8)) | (listingIndex << (20 * 8)) | uint160(trader);\n    }\n\n    function packTypePriceCollection(\n        OrderType orderType,\n        uint256 price,\n        address collection\n    ) private pure returns (uint256) {\n        return (uint256(orderType) << (31 * 8)) | (price << (20 * 8)) | uint160(collection);\n    }\n\n    function packFee(FeeRate memory fee) private pure returns (uint256) {\n        return (uint256(fee.rate) << (20 * 8)) | uint160(fee.recipient);\n    }\n\n    uint256[50] private __gap;\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Executor._emitExecutionEvent', 'start_line': 2343, 'end_line': 2367, 'offset_start': 87176, 'offset_end': 87946, 'content': 'function _emitExecutionEvent(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 listingIndex,\n        uint256 price,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(calldataPointer, add(transfersOffset, One_word))\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            bytes32(order.salt),\n            listingIndex,\n            price,\n            order.makerFee,\n            fees,\n            orderType\n        );\n    }', 'contract_name': 'Executor', 'contract_code': "{\n    address private immutable _DELEGATE;\n    address private immutable _POOL;\n\n    constructor(address delegate, address pool, address proxy) Validation(proxy) {\n        _DELEGATE = delegate;\n        _POOL = pool;\n    }\n\n    receive() external payable {\n        if (msg.sender != _POOL) {\n            revert Unauthorized();\n        }\n    }\n\n    /**\n     * @notice Insert a validated ask listing into the batch if there's sufficient ETH to fulfill\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing the listing to insert\n     * @param fees Protocol and taker fees\n     * @param remainingETH Available ETH remaining\n     * @return Available ETH remaining after insertion; if the listing was inserted in the batch\n     */\n    function _insertExecutionAsk(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees,\n        uint256 remainingETH\n    ) internal pure returns (uint256, bool) {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        /* Only insert the executions if there are sufficient funds to execute. */\n        if (remainingETH >= totalPrice + takerFeeAmount) {\n            unchecked {\n                remainingETH = remainingETH - totalPrice - takerFeeAmount;\n            }\n\n            _setAddresses(fungibleTransfers, order);\n\n            uint256 index = _insertNonfungibleTransfer(\n                executionBatch,\n                order,\n                exchange.listing.tokenId,\n                takerAmount\n            );\n\n            _insertFungibleTransfers(\n                fungibleTransfers,\n                takerAmount,\n                exchange.listing,\n                bytes32(order.salt),\n                index,\n                totalPrice,\n                protocolFeeAmount,\n                makerFeeAmount,\n                takerFeeAmount,\n                true\n            );\n\n            return (remainingETH, true);\n        } else {\n            return (remainingETH, false);\n        }\n    }\n\n    /**\n     * @notice Insert a validated bid listing into the batch\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing listing to insert\n     * @param fees Protocol and taker fees\n     */\n    function _insertExecutionBid(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees\n    ) internal pure {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        _setAddresses(fungibleTransfers, order);\n\n        uint256 index = _insertNonfungibleTransfer(\n            executionBatch,\n            order,\n            exchange.taker.tokenId,\n            takerAmount\n        );\n\n        _insertFungibleTransfers(\n            fungibleTransfers,\n            takerAmount,\n            exchange.listing,\n            bytes32(order.salt),\n            index,\n            totalPrice,\n            protocolFeeAmount,\n            makerFeeAmount,\n            takerFeeAmount,\n            false\n        );\n    }\n\n    /**\n     * @notice Insert the nonfungible transfer into the batch\n     * @param executionBatch Execution batch\n     * @param order Order\n     * @param tokenId Token id\n     * @param amount Number of token units\n     * @return transferIndex Index of the transfer\n     */\n    function _insertNonfungibleTransfer(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 tokenId,\n        uint256 amount\n    ) internal pure returns (uint256 transferIndex) {\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            transferIndex := mload(add(calldataPointer, ExecutionBatch_length_offset))\n\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            let transferPointer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n            mstore(\n                add(transferPointer, Transfer_trader_offset),\n                mload(add(order, Order_trader_offset))\n            ) // set the trader\n            mstore(add(transferPointer, Transfer_id_offset), tokenId) // set the token id\n            mstore(\n                add(transferPointer, Transfer_collection_offset),\n                mload(add(order, Order_collection_offset))\n            ) // set the collection\n            mstore(\n                add(transferPointer, Transfer_assetType_offset),\n                mload(add(order, Order_assetType_offset))\n            ) // set the asset type\n            mstore(add(calldataPointer, ExecutionBatch_length_offset), add(transferIndex, 1)) // increment the batch length\n\n            if eq(mload(add(order, Order_assetType_offset)), AssetType_ERC1155) {\n                mstore(add(transferPointer, Transfer_amount_offset), amount) // set the amount (don't need to set for ERC721's)\n            }\n        }\n    }\n\n    /**\n     * @notice Insert the fungible transfers that need to be executed atomically\n     * @param fungibleTransfers Fungible transfers struct\n     * @param takerAmount Amount of the listing being taken\n     * @param listing Listing to execute\n     * @param orderHash Order hash\n     * @param index Execution index\n     * @param totalPrice Total price of the purchased tokens\n     * @param protocolFeeAmount Computed protocol fee\n     * @param makerFeeAmount Computed maker fee\n     * @param takerFeeAmount Computed taker fee\n     * @param makerIsSeller Is the order maker the seller\n     */\n    function _insertFungibleTransfers(\n        FungibleTransfers memory fungibleTransfers,\n        uint256 takerAmount,\n        Listing memory listing,\n        bytes32 orderHash,\n        uint256 index,\n        uint256 totalPrice,\n        uint256 protocolFeeAmount,\n        uint256 makerFeeAmount,\n        uint256 takerFeeAmount,\n        bool makerIsSeller\n    ) internal pure {\n        uint256 makerId = fungibleTransfers.makerId;\n        fungibleTransfers.executions[index].makerId = makerId;\n        fungibleTransfers.executions[index].makerFeeRecipientId = fungibleTransfers.feeRecipientId;\n        fungibleTransfers.executions[index].stateUpdate = StateUpdate({\n            trader: fungibleTransfers.makers[makerId],\n            hash: orderHash,\n            index: listing.index,\n            value: takerAmount,\n            maxAmount: listing.amount\n        });\n        if (makerIsSeller) {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    makerFeeAmount;\n            }\n        } else {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    takerFeeAmount;\n            }\n        }\n        fungibleTransfers.executions[index].makerFeeAmount = makerFeeAmount;\n        fungibleTransfers.executions[index].takerFeeAmount = takerFeeAmount;\n        fungibleTransfers.executions[index].protocolFeeAmount = protocolFeeAmount;\n    }\n\n    /**\n     * @notice Set the addresses of the maker fee recipient and order maker if different than currently being batched\n     * @param fungibleTransfers Fungible transfers struct\n     * @param order Parent order of listing being added to the batch\n     */\n    function _setAddresses(\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order\n    ) internal pure {\n        address feeRecipient = order.makerFee.recipient;\n        uint256 feeRecipientId = fungibleTransfers.feeRecipientId;\n        address currentFeeRecipient = fungibleTransfers.feeRecipients[feeRecipientId];\n        if (feeRecipient != currentFeeRecipient) {\n            if (currentFeeRecipient == address(0)) {\n                fungibleTransfers.feeRecipients[feeRecipientId] = feeRecipient;\n            } else {\n                unchecked {\n                    fungibleTransfers.feeRecipients[++feeRecipientId] = feeRecipient;\n                }\n                fungibleTransfers.feeRecipientId = feeRecipientId;\n            }\n        }\n        address trader = order.trader;\n        uint256 makerId = fungibleTransfers.makerId;\n        address currentTrader = fungibleTransfers.makers[makerId];\n        if (trader != currentTrader) {\n            if (currentTrader == address(0)) {\n                fungibleTransfers.makers[makerId] = trader;\n            } else {\n                unchecked {\n                    fungibleTransfers.makers[++makerId] = trader;\n                }\n                fungibleTransfers.makerId = makerId;\n            }\n        }\n    }\n\n    /**\n     * @notice Compute all necessary fees to be taken\n     * @param pricePerToken Price per token unit\n     * @param takerAmount Number of token units taken (should only be greater than 1 for ERC1155)\n     * @param fees Protocol and taker fee set by the transaction\n     */\n    function _computeFees(\n        uint256 pricePerToken,\n        uint256 takerAmount,\n        FeeRate memory makerFee,\n        Fees memory fees\n    )\n        internal\n        pure\n        returns (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        )\n    {\n        totalPrice = pricePerToken * takerAmount;\n        makerFeeAmount = (totalPrice * makerFee.rate) / _BASIS_POINTS;\n        takerFeeAmount = (totalPrice * fees.takerFee.rate) / _BASIS_POINTS;\n        protocolFeeAmount = (totalPrice * fees.protocolFee.rate) / _BASIS_POINTS;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Execute the transfers by first attempting the nonfungible transfers, for the successful transfers sum the fungible transfers by the recipients and execute\n     * @param executionBatch Execution batch struct\n     * @param fungibleTransfers Fungible transfers struct\n     * @param fees Protocol, maker, taker fees (note: makerFee will be inaccurate at this point in execution)\n     * @param orderType Order type\n     */\n    function _executeBatchTransfer(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        uint256 batchLength;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            batchLength := mload(add(calldataPointer, ExecutionBatch_length_offset))\n        }\n        if (batchLength > 0) {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(\n                executionBatch,\n                batchLength\n            );\n\n            uint256 transfersLength = successfulTransfers.length;\n            for (uint256 i; i < transfersLength; ) {\n                if (successfulTransfers[i]) {\n                    AtomicExecution memory execution = fungibleTransfers.executions[i];\n                    FeeRate memory makerFee;\n                    uint256 price;\n                    unchecked {\n                        if (orderType == OrderType.ASK) {\n                            fungibleTransfers.makerTransfers[execution.makerId] += execution\n                                .sellerAmount; // amount that needs to be sent *to* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount;\n                        } else {\n                            fungibleTransfers.makerTransfers[execution.makerId] +=\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount +\n                                execution.takerFeeAmount +\n                                execution.sellerAmount; // amount that needs to be taken *from* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.takerFeeAmount;\n                        }\n                        fungibleTransfers.totalSellerTransfer += execution.sellerAmount; // only for bids\n                        fungibleTransfers.totalProtocolFee += execution.protocolFeeAmount;\n                        fungibleTransfers.totalTakerFee += execution.takerFeeAmount;\n                        fungibleTransfers.feeTransfers[execution.makerFeeRecipientId] += execution\n                            .makerFeeAmount;\n                        makerFee = FeeRate(\n                            fungibleTransfers.feeRecipients[execution.makerFeeRecipientId],\n                            uint16((execution.makerFeeAmount * _BASIS_POINTS) / price)\n                        );\n                    }\n\n                    /* Commit state updates. */\n                    StateUpdate memory stateUpdate = fungibleTransfers.executions[i].stateUpdate;\n                    {\n                        address trader = stateUpdate.trader;\n                        bytes32 hash = stateUpdate.hash;\n                        uint256 index = stateUpdate.index;\n                        uint256 _amountTaken = amountTaken[trader][hash][index];\n                        uint256 newAmountTaken = _amountTaken + stateUpdate.value;\n\n                        /* Overfulfilled Listings should be caught prior to inserting into the batch, but this check prevents any misuse. */\n                        if (newAmountTaken <= stateUpdate.maxAmount) {\n                            amountTaken[trader][hash][index] = newAmountTaken;\n                        } else {\n                            revert OrderFulfilled();\n                        }\n                    }\n\n                    _emitExecutionEventFromBatch(\n                        executionBatch,\n                        price,\n                        makerFee,\n                        fees,\n                        stateUpdate,\n                        orderType,\n                        i\n                    );\n                }\n\n                unchecked {\n                    ++i;\n                }\n            }\n\n            if (orderType == OrderType.ASK) {\n                /* Transfer the payments to the sellers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferETH(fungibleTransfers.makers[i], fungibleTransfers.makerTransfers[i]);\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferETH(\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferETH(fees.protocolFee.recipient, fungibleTransfers.totalProtocolFee);\n\n                /* Transfer the taker fees. */\n                _transferETH(fees.takerFee.recipient, fungibleTransfers.totalTakerFee);\n            } else {\n                /* Take the pool funds from the buyers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferPool(\n                        fungibleTransfers.makers[i],\n                        address(this),\n                        fungibleTransfers.makerTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the payment to the seller. */\n                _transferPool(address(this), msg.sender, fungibleTransfers.totalSellerTransfer);\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferPool(\n                        address(this),\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferPool(\n                    address(this),\n                    fees.protocolFee.recipient,\n                    fungibleTransfers.totalProtocolFee\n                );\n\n                /* Transfer the taker fees. */\n                _transferPool(\n                    address(this),\n                    fees.takerFee.recipient,\n                    fungibleTransfers.totalTakerFee\n                );\n            }\n        }\n    }\n\n    /**\n     * @notice Attempt to execute a series of nonfungible transfers through the delegate; reverts will be skipped\n     * @param executionBatch Execution batch struct\n     * @param batchIndex Current available transfer slot in the batch\n     * @return Array indicating which transfers were successful\n     */\n    function _executeNonfungibleTransfers(\n        bytes memory executionBatch,\n        uint256 batchIndex\n    ) internal returns (bool[] memory) {\n        address delegate = _DELEGATE;\n\n        /* Initialize the memory space for the successful transfers array returned from the Delegate call. */\n        uint256 successfulTransfersPointer;\n        assembly {\n            successfulTransfersPointer := mload(Memory_pointer)\n            /* Need to shift the free memory pointer ahead one word to account for the array pointer returned from the call. */\n            mstore(Memory_pointer, add(successfulTransfersPointer, One_word))\n        }\n\n        bool[] memory successfulTransfers = new bool[](batchIndex);\n        assembly {\n            let size := mload(executionBatch)\n            let selectorPointer := add(executionBatch, ExecutionBatch_selector_offset)\n            mstore(selectorPointer, shr(Bytes4_shift, Delegate_transfer_selector))\n            let success := call(\n                gas(),\n                delegate,\n                0,\n                add(selectorPointer, Delegate_transfer_calldata_offset),\n                sub(size, Delegate_transfer_calldata_offset),\n                successfulTransfersPointer,\n                add(0x40, mul(batchIndex, One_word))\n            )\n        }\n        return successfulTransfers;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        TRANSFER FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Transfer ETH\n     * @param to Recipient address\n     * @param amount Amount of ETH to send\n     */\n    function _transferETH(address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            assembly {\n                success := call(gas(), to, amount, 0, 0, 0, 0)\n            }\n            if (!success) {\n                revert ETHTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Transfer pool funds on behalf of a user\n     * @param from Sender address\n     * @param to Recipient address\n     * @param amount Amount to send\n     */\n    function _transferPool(address from, address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            address pool = _POOL;\n            assembly {\n                let x := mload(Memory_pointer)\n                mstore(x, ERC20_transferFrom_selector)\n                mstore(add(x, ERC20_transferFrom_from_offset), from)\n                mstore(add(x, ERC20_transferFrom_to_offset), to)\n                mstore(add(x, ERC20_transferFrom_amount_offset), amount)\n                success := call(gas(), pool, 0, x, ERC20_transferFrom_size, 0, 0)\n            }\n            if (!success) {\n                revert PoolTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Deposit ETH to user's pool funds\n     * @param to Recipient address\n     * @param amount Amount of ETH to deposit\n     */\n    function _depositPool(address to, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_deposit_selector)\n            mstore(add(x, Pool_deposit_user_offset), to)\n            success := call(gas(), pool, amount, x, Pool_deposit_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolDepositFailed();\n        }\n    }\n\n    /**\n     * @notice Withdraw ETH from user's pool funds\n     * @param from Address to withdraw from\n     * @param amount Amount of ETH to withdraw\n     */\n    function _withdrawFromPool(address from, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_withdrawFrom_selector)\n            mstore(add(x, Pool_withdrawFrom_from_offset), from)\n            mstore(add(x, Pool_withdrawFrom_to_offset), address())\n            mstore(add(x, Pool_withdrawFrom_amount_offset), amount)\n            success := call(gas(), pool, 0, x, Pool_withdrawFrom_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolWithdrawFromFailed();\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EVENT EMITTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param price Price of the token purchased\n     * @param fees Protocol, maker, and taker fees taken\n     * @param stateUpdate Fulfillment to be recorded with a successful execution\n     * @param orderType Order type\n     * @param transferIndex Index of the transfer corresponding to the execution\n     */\n    function _emitExecutionEventFromBatch(\n        bytes memory executionBatch,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        StateUpdate memory stateUpdate,\n        OrderType orderType,\n        uint256 transferIndex\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            stateUpdate.hash,\n            stateUpdate.index,\n            price,\n            makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    /**\n     * @notice Emit the Execution event that minimizes the number of bytes in the log\n     * @param transfer The nft transfer\n     * @param orderHash Order hash\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param makerFee Maker fees taken\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitOptimalExecutionEvent(\n        Transfer memory transfer,\n        bytes32 orderHash,\n        uint256 listingIndex,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        if (\n            // see _insertNonfungibleTransfer; ERC721 transfers don't set the transfer amount,\n            // so we can assume the transfer amount and not check it\n            transfer.assetType == AssetType.ERC721 &&\n            fees.protocolFee.rate == 0 &&\n            transfer.id < 1 << (11 * 8) &&\n            listingIndex < 1 << (1 * 8) &&\n            price < 1 << (11 * 8)\n        ) {\n            if (makerFee.rate == 0 && fees.takerFee.rate == 0) {\n                emit Execution721Packed(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection)\n                );\n                return;\n            } else if (makerFee.rate == 0) {\n                emit Execution721TakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(fees.takerFee)\n                );\n                return;\n            } else if (fees.takerFee.rate == 0) {\n                emit Execution721MakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(makerFee)\n                );\n                return;\n            }\n        }\n\n        emit Execution({\n            transfer: transfer,\n            orderHash: orderHash,\n            listingIndex: listingIndex,\n            price: price,\n            makerFee: makerFee,\n            fees: fees,\n            orderType: orderType\n        });\n    }\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param order Order being fulfilled\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitExecutionEvent(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 listingIndex,\n        uint256 price,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(calldataPointer, add(transfersOffset, One_word))\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            bytes32(order.salt),\n            listingIndex,\n            price,\n            order.makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    function packTokenIdListingIndexTrader(\n        uint256 tokenId,\n        uint256 listingIndex,\n        address trader\n    ) private pure returns (uint256) {\n        return (tokenId << (21 * 8)) | (listingIndex << (20 * 8)) | uint160(trader);\n    }\n\n    function packTypePriceCollection(\n        OrderType orderType,\n        uint256 price,\n        address collection\n    ) private pure returns (uint256) {\n        return (uint256(orderType) << (31 * 8)) | (price << (20 * 8)) | uint160(collection);\n    }\n\n    function packFee(FeeRate memory fee) private pure returns (uint256) {\n        return (uint256(fee.rate) << (20 * 8)) | uint160(fee.recipient);\n    }\n\n    uint256[50] private __gap;\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Executor.packTokenIdListingIndexTrader', 'start_line': 2369, 'end_line': 2375, 'offset_start': 87953, 'offset_end': 88199, 'content': 'function packTokenIdListingIndexTrader(\n        uint256 tokenId,\n        uint256 listingIndex,\n        address trader\n    ) private pure returns (uint256) {\n        return (tokenId << (21 * 8)) | (listingIndex << (20 * 8)) | uint160(trader);\n    }', 'contract_name': 'Executor', 'contract_code': "{\n    address private immutable _DELEGATE;\n    address private immutable _POOL;\n\n    constructor(address delegate, address pool, address proxy) Validation(proxy) {\n        _DELEGATE = delegate;\n        _POOL = pool;\n    }\n\n    receive() external payable {\n        if (msg.sender != _POOL) {\n            revert Unauthorized();\n        }\n    }\n\n    /**\n     * @notice Insert a validated ask listing into the batch if there's sufficient ETH to fulfill\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing the listing to insert\n     * @param fees Protocol and taker fees\n     * @param remainingETH Available ETH remaining\n     * @return Available ETH remaining after insertion; if the listing was inserted in the batch\n     */\n    function _insertExecutionAsk(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees,\n        uint256 remainingETH\n    ) internal pure returns (uint256, bool) {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        /* Only insert the executions if there are sufficient funds to execute. */\n        if (remainingETH >= totalPrice + takerFeeAmount) {\n            unchecked {\n                remainingETH = remainingETH - totalPrice - takerFeeAmount;\n            }\n\n            _setAddresses(fungibleTransfers, order);\n\n            uint256 index = _insertNonfungibleTransfer(\n                executionBatch,\n                order,\n                exchange.listing.tokenId,\n                takerAmount\n            );\n\n            _insertFungibleTransfers(\n                fungibleTransfers,\n                takerAmount,\n                exchange.listing,\n                bytes32(order.salt),\n                index,\n                totalPrice,\n                protocolFeeAmount,\n                makerFeeAmount,\n                takerFeeAmount,\n                true\n            );\n\n            return (remainingETH, true);\n        } else {\n            return (remainingETH, false);\n        }\n    }\n\n    /**\n     * @notice Insert a validated bid listing into the batch\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing listing to insert\n     * @param fees Protocol and taker fees\n     */\n    function _insertExecutionBid(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees\n    ) internal pure {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        _setAddresses(fungibleTransfers, order);\n\n        uint256 index = _insertNonfungibleTransfer(\n            executionBatch,\n            order,\n            exchange.taker.tokenId,\n            takerAmount\n        );\n\n        _insertFungibleTransfers(\n            fungibleTransfers,\n            takerAmount,\n            exchange.listing,\n            bytes32(order.salt),\n            index,\n            totalPrice,\n            protocolFeeAmount,\n            makerFeeAmount,\n            takerFeeAmount,\n            false\n        );\n    }\n\n    /**\n     * @notice Insert the nonfungible transfer into the batch\n     * @param executionBatch Execution batch\n     * @param order Order\n     * @param tokenId Token id\n     * @param amount Number of token units\n     * @return transferIndex Index of the transfer\n     */\n    function _insertNonfungibleTransfer(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 tokenId,\n        uint256 amount\n    ) internal pure returns (uint256 transferIndex) {\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            transferIndex := mload(add(calldataPointer, ExecutionBatch_length_offset))\n\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            let transferPointer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n            mstore(\n                add(transferPointer, Transfer_trader_offset),\n                mload(add(order, Order_trader_offset))\n            ) // set the trader\n            mstore(add(transferPointer, Transfer_id_offset), tokenId) // set the token id\n            mstore(\n                add(transferPointer, Transfer_collection_offset),\n                mload(add(order, Order_collection_offset))\n            ) // set the collection\n            mstore(\n                add(transferPointer, Transfer_assetType_offset),\n                mload(add(order, Order_assetType_offset))\n            ) // set the asset type\n            mstore(add(calldataPointer, ExecutionBatch_length_offset), add(transferIndex, 1)) // increment the batch length\n\n            if eq(mload(add(order, Order_assetType_offset)), AssetType_ERC1155) {\n                mstore(add(transferPointer, Transfer_amount_offset), amount) // set the amount (don't need to set for ERC721's)\n            }\n        }\n    }\n\n    /**\n     * @notice Insert the fungible transfers that need to be executed atomically\n     * @param fungibleTransfers Fungible transfers struct\n     * @param takerAmount Amount of the listing being taken\n     * @param listing Listing to execute\n     * @param orderHash Order hash\n     * @param index Execution index\n     * @param totalPrice Total price of the purchased tokens\n     * @param protocolFeeAmount Computed protocol fee\n     * @param makerFeeAmount Computed maker fee\n     * @param takerFeeAmount Computed taker fee\n     * @param makerIsSeller Is the order maker the seller\n     */\n    function _insertFungibleTransfers(\n        FungibleTransfers memory fungibleTransfers,\n        uint256 takerAmount,\n        Listing memory listing,\n        bytes32 orderHash,\n        uint256 index,\n        uint256 totalPrice,\n        uint256 protocolFeeAmount,\n        uint256 makerFeeAmount,\n        uint256 takerFeeAmount,\n        bool makerIsSeller\n    ) internal pure {\n        uint256 makerId = fungibleTransfers.makerId;\n        fungibleTransfers.executions[index].makerId = makerId;\n        fungibleTransfers.executions[index].makerFeeRecipientId = fungibleTransfers.feeRecipientId;\n        fungibleTransfers.executions[index].stateUpdate = StateUpdate({\n            trader: fungibleTransfers.makers[makerId],\n            hash: orderHash,\n            index: listing.index,\n            value: takerAmount,\n            maxAmount: listing.amount\n        });\n        if (makerIsSeller) {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    makerFeeAmount;\n            }\n        } else {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    takerFeeAmount;\n            }\n        }\n        fungibleTransfers.executions[index].makerFeeAmount = makerFeeAmount;\n        fungibleTransfers.executions[index].takerFeeAmount = takerFeeAmount;\n        fungibleTransfers.executions[index].protocolFeeAmount = protocolFeeAmount;\n    }\n\n    /**\n     * @notice Set the addresses of the maker fee recipient and order maker if different than currently being batched\n     * @param fungibleTransfers Fungible transfers struct\n     * @param order Parent order of listing being added to the batch\n     */\n    function _setAddresses(\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order\n    ) internal pure {\n        address feeRecipient = order.makerFee.recipient;\n        uint256 feeRecipientId = fungibleTransfers.feeRecipientId;\n        address currentFeeRecipient = fungibleTransfers.feeRecipients[feeRecipientId];\n        if (feeRecipient != currentFeeRecipient) {\n            if (currentFeeRecipient == address(0)) {\n                fungibleTransfers.feeRecipients[feeRecipientId] = feeRecipient;\n            } else {\n                unchecked {\n                    fungibleTransfers.feeRecipients[++feeRecipientId] = feeRecipient;\n                }\n                fungibleTransfers.feeRecipientId = feeRecipientId;\n            }\n        }\n        address trader = order.trader;\n        uint256 makerId = fungibleTransfers.makerId;\n        address currentTrader = fungibleTransfers.makers[makerId];\n        if (trader != currentTrader) {\n            if (currentTrader == address(0)) {\n                fungibleTransfers.makers[makerId] = trader;\n            } else {\n                unchecked {\n                    fungibleTransfers.makers[++makerId] = trader;\n                }\n                fungibleTransfers.makerId = makerId;\n            }\n        }\n    }\n\n    /**\n     * @notice Compute all necessary fees to be taken\n     * @param pricePerToken Price per token unit\n     * @param takerAmount Number of token units taken (should only be greater than 1 for ERC1155)\n     * @param fees Protocol and taker fee set by the transaction\n     */\n    function _computeFees(\n        uint256 pricePerToken,\n        uint256 takerAmount,\n        FeeRate memory makerFee,\n        Fees memory fees\n    )\n        internal\n        pure\n        returns (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        )\n    {\n        totalPrice = pricePerToken * takerAmount;\n        makerFeeAmount = (totalPrice * makerFee.rate) / _BASIS_POINTS;\n        takerFeeAmount = (totalPrice * fees.takerFee.rate) / _BASIS_POINTS;\n        protocolFeeAmount = (totalPrice * fees.protocolFee.rate) / _BASIS_POINTS;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Execute the transfers by first attempting the nonfungible transfers, for the successful transfers sum the fungible transfers by the recipients and execute\n     * @param executionBatch Execution batch struct\n     * @param fungibleTransfers Fungible transfers struct\n     * @param fees Protocol, maker, taker fees (note: makerFee will be inaccurate at this point in execution)\n     * @param orderType Order type\n     */\n    function _executeBatchTransfer(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        uint256 batchLength;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            batchLength := mload(add(calldataPointer, ExecutionBatch_length_offset))\n        }\n        if (batchLength > 0) {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(\n                executionBatch,\n                batchLength\n            );\n\n            uint256 transfersLength = successfulTransfers.length;\n            for (uint256 i; i < transfersLength; ) {\n                if (successfulTransfers[i]) {\n                    AtomicExecution memory execution = fungibleTransfers.executions[i];\n                    FeeRate memory makerFee;\n                    uint256 price;\n                    unchecked {\n                        if (orderType == OrderType.ASK) {\n                            fungibleTransfers.makerTransfers[execution.makerId] += execution\n                                .sellerAmount; // amount that needs to be sent *to* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount;\n                        } else {\n                            fungibleTransfers.makerTransfers[execution.makerId] +=\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount +\n                                execution.takerFeeAmount +\n                                execution.sellerAmount; // amount that needs to be taken *from* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.takerFeeAmount;\n                        }\n                        fungibleTransfers.totalSellerTransfer += execution.sellerAmount; // only for bids\n                        fungibleTransfers.totalProtocolFee += execution.protocolFeeAmount;\n                        fungibleTransfers.totalTakerFee += execution.takerFeeAmount;\n                        fungibleTransfers.feeTransfers[execution.makerFeeRecipientId] += execution\n                            .makerFeeAmount;\n                        makerFee = FeeRate(\n                            fungibleTransfers.feeRecipients[execution.makerFeeRecipientId],\n                            uint16((execution.makerFeeAmount * _BASIS_POINTS) / price)\n                        );\n                    }\n\n                    /* Commit state updates. */\n                    StateUpdate memory stateUpdate = fungibleTransfers.executions[i].stateUpdate;\n                    {\n                        address trader = stateUpdate.trader;\n                        bytes32 hash = stateUpdate.hash;\n                        uint256 index = stateUpdate.index;\n                        uint256 _amountTaken = amountTaken[trader][hash][index];\n                        uint256 newAmountTaken = _amountTaken + stateUpdate.value;\n\n                        /* Overfulfilled Listings should be caught prior to inserting into the batch, but this check prevents any misuse. */\n                        if (newAmountTaken <= stateUpdate.maxAmount) {\n                            amountTaken[trader][hash][index] = newAmountTaken;\n                        } else {\n                            revert OrderFulfilled();\n                        }\n                    }\n\n                    _emitExecutionEventFromBatch(\n                        executionBatch,\n                        price,\n                        makerFee,\n                        fees,\n                        stateUpdate,\n                        orderType,\n                        i\n                    );\n                }\n\n                unchecked {\n                    ++i;\n                }\n            }\n\n            if (orderType == OrderType.ASK) {\n                /* Transfer the payments to the sellers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferETH(fungibleTransfers.makers[i], fungibleTransfers.makerTransfers[i]);\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferETH(\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferETH(fees.protocolFee.recipient, fungibleTransfers.totalProtocolFee);\n\n                /* Transfer the taker fees. */\n                _transferETH(fees.takerFee.recipient, fungibleTransfers.totalTakerFee);\n            } else {\n                /* Take the pool funds from the buyers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferPool(\n                        fungibleTransfers.makers[i],\n                        address(this),\n                        fungibleTransfers.makerTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the payment to the seller. */\n                _transferPool(address(this), msg.sender, fungibleTransfers.totalSellerTransfer);\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferPool(\n                        address(this),\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferPool(\n                    address(this),\n                    fees.protocolFee.recipient,\n                    fungibleTransfers.totalProtocolFee\n                );\n\n                /* Transfer the taker fees. */\n                _transferPool(\n                    address(this),\n                    fees.takerFee.recipient,\n                    fungibleTransfers.totalTakerFee\n                );\n            }\n        }\n    }\n\n    /**\n     * @notice Attempt to execute a series of nonfungible transfers through the delegate; reverts will be skipped\n     * @param executionBatch Execution batch struct\n     * @param batchIndex Current available transfer slot in the batch\n     * @return Array indicating which transfers were successful\n     */\n    function _executeNonfungibleTransfers(\n        bytes memory executionBatch,\n        uint256 batchIndex\n    ) internal returns (bool[] memory) {\n        address delegate = _DELEGATE;\n\n        /* Initialize the memory space for the successful transfers array returned from the Delegate call. */\n        uint256 successfulTransfersPointer;\n        assembly {\n            successfulTransfersPointer := mload(Memory_pointer)\n            /* Need to shift the free memory pointer ahead one word to account for the array pointer returned from the call. */\n            mstore(Memory_pointer, add(successfulTransfersPointer, One_word))\n        }\n\n        bool[] memory successfulTransfers = new bool[](batchIndex);\n        assembly {\n            let size := mload(executionBatch)\n            let selectorPointer := add(executionBatch, ExecutionBatch_selector_offset)\n            mstore(selectorPointer, shr(Bytes4_shift, Delegate_transfer_selector))\n            let success := call(\n                gas(),\n                delegate,\n                0,\n                add(selectorPointer, Delegate_transfer_calldata_offset),\n                sub(size, Delegate_transfer_calldata_offset),\n                successfulTransfersPointer,\n                add(0x40, mul(batchIndex, One_word))\n            )\n        }\n        return successfulTransfers;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        TRANSFER FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Transfer ETH\n     * @param to Recipient address\n     * @param amount Amount of ETH to send\n     */\n    function _transferETH(address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            assembly {\n                success := call(gas(), to, amount, 0, 0, 0, 0)\n            }\n            if (!success) {\n                revert ETHTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Transfer pool funds on behalf of a user\n     * @param from Sender address\n     * @param to Recipient address\n     * @param amount Amount to send\n     */\n    function _transferPool(address from, address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            address pool = _POOL;\n            assembly {\n                let x := mload(Memory_pointer)\n                mstore(x, ERC20_transferFrom_selector)\n                mstore(add(x, ERC20_transferFrom_from_offset), from)\n                mstore(add(x, ERC20_transferFrom_to_offset), to)\n                mstore(add(x, ERC20_transferFrom_amount_offset), amount)\n                success := call(gas(), pool, 0, x, ERC20_transferFrom_size, 0, 0)\n            }\n            if (!success) {\n                revert PoolTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Deposit ETH to user's pool funds\n     * @param to Recipient address\n     * @param amount Amount of ETH to deposit\n     */\n    function _depositPool(address to, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_deposit_selector)\n            mstore(add(x, Pool_deposit_user_offset), to)\n            success := call(gas(), pool, amount, x, Pool_deposit_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolDepositFailed();\n        }\n    }\n\n    /**\n     * @notice Withdraw ETH from user's pool funds\n     * @param from Address to withdraw from\n     * @param amount Amount of ETH to withdraw\n     */\n    function _withdrawFromPool(address from, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_withdrawFrom_selector)\n            mstore(add(x, Pool_withdrawFrom_from_offset), from)\n            mstore(add(x, Pool_withdrawFrom_to_offset), address())\n            mstore(add(x, Pool_withdrawFrom_amount_offset), amount)\n            success := call(gas(), pool, 0, x, Pool_withdrawFrom_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolWithdrawFromFailed();\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EVENT EMITTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param price Price of the token purchased\n     * @param fees Protocol, maker, and taker fees taken\n     * @param stateUpdate Fulfillment to be recorded with a successful execution\n     * @param orderType Order type\n     * @param transferIndex Index of the transfer corresponding to the execution\n     */\n    function _emitExecutionEventFromBatch(\n        bytes memory executionBatch,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        StateUpdate memory stateUpdate,\n        OrderType orderType,\n        uint256 transferIndex\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            stateUpdate.hash,\n            stateUpdate.index,\n            price,\n            makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    /**\n     * @notice Emit the Execution event that minimizes the number of bytes in the log\n     * @param transfer The nft transfer\n     * @param orderHash Order hash\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param makerFee Maker fees taken\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitOptimalExecutionEvent(\n        Transfer memory transfer,\n        bytes32 orderHash,\n        uint256 listingIndex,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        if (\n            // see _insertNonfungibleTransfer; ERC721 transfers don't set the transfer amount,\n            // so we can assume the transfer amount and not check it\n            transfer.assetType == AssetType.ERC721 &&\n            fees.protocolFee.rate == 0 &&\n            transfer.id < 1 << (11 * 8) &&\n            listingIndex < 1 << (1 * 8) &&\n            price < 1 << (11 * 8)\n        ) {\n            if (makerFee.rate == 0 && fees.takerFee.rate == 0) {\n                emit Execution721Packed(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection)\n                );\n                return;\n            } else if (makerFee.rate == 0) {\n                emit Execution721TakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(fees.takerFee)\n                );\n                return;\n            } else if (fees.takerFee.rate == 0) {\n                emit Execution721MakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(makerFee)\n                );\n                return;\n            }\n        }\n\n        emit Execution({\n            transfer: transfer,\n            orderHash: orderHash,\n            listingIndex: listingIndex,\n            price: price,\n            makerFee: makerFee,\n            fees: fees,\n            orderType: orderType\n        });\n    }\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param order Order being fulfilled\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitExecutionEvent(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 listingIndex,\n        uint256 price,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(calldataPointer, add(transfersOffset, One_word))\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            bytes32(order.salt),\n            listingIndex,\n            price,\n            order.makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    function packTokenIdListingIndexTrader(\n        uint256 tokenId,\n        uint256 listingIndex,\n        address trader\n    ) private pure returns (uint256) {\n        return (tokenId << (21 * 8)) | (listingIndex << (20 * 8)) | uint160(trader);\n    }\n\n    function packTypePriceCollection(\n        OrderType orderType,\n        uint256 price,\n        address collection\n    ) private pure returns (uint256) {\n        return (uint256(orderType) << (31 * 8)) | (price << (20 * 8)) | uint160(collection);\n    }\n\n    function packFee(FeeRate memory fee) private pure returns (uint256) {\n        return (uint256(fee.rate) << (20 * 8)) | uint160(fee.recipient);\n    }\n\n    uint256[50] private __gap;\n}", 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'private', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Executor.packTypePriceCollection', 'start_line': 2377, 'end_line': 2383, 'offset_start': 88206, 'offset_end': 88455, 'content': 'function packTypePriceCollection(\n        OrderType orderType,\n        uint256 price,\n        address collection\n    ) private pure returns (uint256) {\n        return (uint256(orderType) << (31 * 8)) | (price << (20 * 8)) | uint160(collection);\n    }', 'contract_name': 'Executor', 'contract_code': "{\n    address private immutable _DELEGATE;\n    address private immutable _POOL;\n\n    constructor(address delegate, address pool, address proxy) Validation(proxy) {\n        _DELEGATE = delegate;\n        _POOL = pool;\n    }\n\n    receive() external payable {\n        if (msg.sender != _POOL) {\n            revert Unauthorized();\n        }\n    }\n\n    /**\n     * @notice Insert a validated ask listing into the batch if there's sufficient ETH to fulfill\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing the listing to insert\n     * @param fees Protocol and taker fees\n     * @param remainingETH Available ETH remaining\n     * @return Available ETH remaining after insertion; if the listing was inserted in the batch\n     */\n    function _insertExecutionAsk(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees,\n        uint256 remainingETH\n    ) internal pure returns (uint256, bool) {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        /* Only insert the executions if there are sufficient funds to execute. */\n        if (remainingETH >= totalPrice + takerFeeAmount) {\n            unchecked {\n                remainingETH = remainingETH - totalPrice - takerFeeAmount;\n            }\n\n            _setAddresses(fungibleTransfers, order);\n\n            uint256 index = _insertNonfungibleTransfer(\n                executionBatch,\n                order,\n                exchange.listing.tokenId,\n                takerAmount\n            );\n\n            _insertFungibleTransfers(\n                fungibleTransfers,\n                takerAmount,\n                exchange.listing,\n                bytes32(order.salt),\n                index,\n                totalPrice,\n                protocolFeeAmount,\n                makerFeeAmount,\n                takerFeeAmount,\n                true\n            );\n\n            return (remainingETH, true);\n        } else {\n            return (remainingETH, false);\n        }\n    }\n\n    /**\n     * @notice Insert a validated bid listing into the batch\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing listing to insert\n     * @param fees Protocol and taker fees\n     */\n    function _insertExecutionBid(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees\n    ) internal pure {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        _setAddresses(fungibleTransfers, order);\n\n        uint256 index = _insertNonfungibleTransfer(\n            executionBatch,\n            order,\n            exchange.taker.tokenId,\n            takerAmount\n        );\n\n        _insertFungibleTransfers(\n            fungibleTransfers,\n            takerAmount,\n            exchange.listing,\n            bytes32(order.salt),\n            index,\n            totalPrice,\n            protocolFeeAmount,\n            makerFeeAmount,\n            takerFeeAmount,\n            false\n        );\n    }\n\n    /**\n     * @notice Insert the nonfungible transfer into the batch\n     * @param executionBatch Execution batch\n     * @param order Order\n     * @param tokenId Token id\n     * @param amount Number of token units\n     * @return transferIndex Index of the transfer\n     */\n    function _insertNonfungibleTransfer(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 tokenId,\n        uint256 amount\n    ) internal pure returns (uint256 transferIndex) {\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            transferIndex := mload(add(calldataPointer, ExecutionBatch_length_offset))\n\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            let transferPointer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n            mstore(\n                add(transferPointer, Transfer_trader_offset),\n                mload(add(order, Order_trader_offset))\n            ) // set the trader\n            mstore(add(transferPointer, Transfer_id_offset), tokenId) // set the token id\n            mstore(\n                add(transferPointer, Transfer_collection_offset),\n                mload(add(order, Order_collection_offset))\n            ) // set the collection\n            mstore(\n                add(transferPointer, Transfer_assetType_offset),\n                mload(add(order, Order_assetType_offset))\n            ) // set the asset type\n            mstore(add(calldataPointer, ExecutionBatch_length_offset), add(transferIndex, 1)) // increment the batch length\n\n            if eq(mload(add(order, Order_assetType_offset)), AssetType_ERC1155) {\n                mstore(add(transferPointer, Transfer_amount_offset), amount) // set the amount (don't need to set for ERC721's)\n            }\n        }\n    }\n\n    /**\n     * @notice Insert the fungible transfers that need to be executed atomically\n     * @param fungibleTransfers Fungible transfers struct\n     * @param takerAmount Amount of the listing being taken\n     * @param listing Listing to execute\n     * @param orderHash Order hash\n     * @param index Execution index\n     * @param totalPrice Total price of the purchased tokens\n     * @param protocolFeeAmount Computed protocol fee\n     * @param makerFeeAmount Computed maker fee\n     * @param takerFeeAmount Computed taker fee\n     * @param makerIsSeller Is the order maker the seller\n     */\n    function _insertFungibleTransfers(\n        FungibleTransfers memory fungibleTransfers,\n        uint256 takerAmount,\n        Listing memory listing,\n        bytes32 orderHash,\n        uint256 index,\n        uint256 totalPrice,\n        uint256 protocolFeeAmount,\n        uint256 makerFeeAmount,\n        uint256 takerFeeAmount,\n        bool makerIsSeller\n    ) internal pure {\n        uint256 makerId = fungibleTransfers.makerId;\n        fungibleTransfers.executions[index].makerId = makerId;\n        fungibleTransfers.executions[index].makerFeeRecipientId = fungibleTransfers.feeRecipientId;\n        fungibleTransfers.executions[index].stateUpdate = StateUpdate({\n            trader: fungibleTransfers.makers[makerId],\n            hash: orderHash,\n            index: listing.index,\n            value: takerAmount,\n            maxAmount: listing.amount\n        });\n        if (makerIsSeller) {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    makerFeeAmount;\n            }\n        } else {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    takerFeeAmount;\n            }\n        }\n        fungibleTransfers.executions[index].makerFeeAmount = makerFeeAmount;\n        fungibleTransfers.executions[index].takerFeeAmount = takerFeeAmount;\n        fungibleTransfers.executions[index].protocolFeeAmount = protocolFeeAmount;\n    }\n\n    /**\n     * @notice Set the addresses of the maker fee recipient and order maker if different than currently being batched\n     * @param fungibleTransfers Fungible transfers struct\n     * @param order Parent order of listing being added to the batch\n     */\n    function _setAddresses(\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order\n    ) internal pure {\n        address feeRecipient = order.makerFee.recipient;\n        uint256 feeRecipientId = fungibleTransfers.feeRecipientId;\n        address currentFeeRecipient = fungibleTransfers.feeRecipients[feeRecipientId];\n        if (feeRecipient != currentFeeRecipient) {\n            if (currentFeeRecipient == address(0)) {\n                fungibleTransfers.feeRecipients[feeRecipientId] = feeRecipient;\n            } else {\n                unchecked {\n                    fungibleTransfers.feeRecipients[++feeRecipientId] = feeRecipient;\n                }\n                fungibleTransfers.feeRecipientId = feeRecipientId;\n            }\n        }\n        address trader = order.trader;\n        uint256 makerId = fungibleTransfers.makerId;\n        address currentTrader = fungibleTransfers.makers[makerId];\n        if (trader != currentTrader) {\n            if (currentTrader == address(0)) {\n                fungibleTransfers.makers[makerId] = trader;\n            } else {\n                unchecked {\n                    fungibleTransfers.makers[++makerId] = trader;\n                }\n                fungibleTransfers.makerId = makerId;\n            }\n        }\n    }\n\n    /**\n     * @notice Compute all necessary fees to be taken\n     * @param pricePerToken Price per token unit\n     * @param takerAmount Number of token units taken (should only be greater than 1 for ERC1155)\n     * @param fees Protocol and taker fee set by the transaction\n     */\n    function _computeFees(\n        uint256 pricePerToken,\n        uint256 takerAmount,\n        FeeRate memory makerFee,\n        Fees memory fees\n    )\n        internal\n        pure\n        returns (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        )\n    {\n        totalPrice = pricePerToken * takerAmount;\n        makerFeeAmount = (totalPrice * makerFee.rate) / _BASIS_POINTS;\n        takerFeeAmount = (totalPrice * fees.takerFee.rate) / _BASIS_POINTS;\n        protocolFeeAmount = (totalPrice * fees.protocolFee.rate) / _BASIS_POINTS;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Execute the transfers by first attempting the nonfungible transfers, for the successful transfers sum the fungible transfers by the recipients and execute\n     * @param executionBatch Execution batch struct\n     * @param fungibleTransfers Fungible transfers struct\n     * @param fees Protocol, maker, taker fees (note: makerFee will be inaccurate at this point in execution)\n     * @param orderType Order type\n     */\n    function _executeBatchTransfer(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        uint256 batchLength;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            batchLength := mload(add(calldataPointer, ExecutionBatch_length_offset))\n        }\n        if (batchLength > 0) {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(\n                executionBatch,\n                batchLength\n            );\n\n            uint256 transfersLength = successfulTransfers.length;\n            for (uint256 i; i < transfersLength; ) {\n                if (successfulTransfers[i]) {\n                    AtomicExecution memory execution = fungibleTransfers.executions[i];\n                    FeeRate memory makerFee;\n                    uint256 price;\n                    unchecked {\n                        if (orderType == OrderType.ASK) {\n                            fungibleTransfers.makerTransfers[execution.makerId] += execution\n                                .sellerAmount; // amount that needs to be sent *to* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount;\n                        } else {\n                            fungibleTransfers.makerTransfers[execution.makerId] +=\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount +\n                                execution.takerFeeAmount +\n                                execution.sellerAmount; // amount that needs to be taken *from* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.takerFeeAmount;\n                        }\n                        fungibleTransfers.totalSellerTransfer += execution.sellerAmount; // only for bids\n                        fungibleTransfers.totalProtocolFee += execution.protocolFeeAmount;\n                        fungibleTransfers.totalTakerFee += execution.takerFeeAmount;\n                        fungibleTransfers.feeTransfers[execution.makerFeeRecipientId] += execution\n                            .makerFeeAmount;\n                        makerFee = FeeRate(\n                            fungibleTransfers.feeRecipients[execution.makerFeeRecipientId],\n                            uint16((execution.makerFeeAmount * _BASIS_POINTS) / price)\n                        );\n                    }\n\n                    /* Commit state updates. */\n                    StateUpdate memory stateUpdate = fungibleTransfers.executions[i].stateUpdate;\n                    {\n                        address trader = stateUpdate.trader;\n                        bytes32 hash = stateUpdate.hash;\n                        uint256 index = stateUpdate.index;\n                        uint256 _amountTaken = amountTaken[trader][hash][index];\n                        uint256 newAmountTaken = _amountTaken + stateUpdate.value;\n\n                        /* Overfulfilled Listings should be caught prior to inserting into the batch, but this check prevents any misuse. */\n                        if (newAmountTaken <= stateUpdate.maxAmount) {\n                            amountTaken[trader][hash][index] = newAmountTaken;\n                        } else {\n                            revert OrderFulfilled();\n                        }\n                    }\n\n                    _emitExecutionEventFromBatch(\n                        executionBatch,\n                        price,\n                        makerFee,\n                        fees,\n                        stateUpdate,\n                        orderType,\n                        i\n                    );\n                }\n\n                unchecked {\n                    ++i;\n                }\n            }\n\n            if (orderType == OrderType.ASK) {\n                /* Transfer the payments to the sellers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferETH(fungibleTransfers.makers[i], fungibleTransfers.makerTransfers[i]);\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferETH(\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferETH(fees.protocolFee.recipient, fungibleTransfers.totalProtocolFee);\n\n                /* Transfer the taker fees. */\n                _transferETH(fees.takerFee.recipient, fungibleTransfers.totalTakerFee);\n            } else {\n                /* Take the pool funds from the buyers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferPool(\n                        fungibleTransfers.makers[i],\n                        address(this),\n                        fungibleTransfers.makerTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the payment to the seller. */\n                _transferPool(address(this), msg.sender, fungibleTransfers.totalSellerTransfer);\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferPool(\n                        address(this),\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferPool(\n                    address(this),\n                    fees.protocolFee.recipient,\n                    fungibleTransfers.totalProtocolFee\n                );\n\n                /* Transfer the taker fees. */\n                _transferPool(\n                    address(this),\n                    fees.takerFee.recipient,\n                    fungibleTransfers.totalTakerFee\n                );\n            }\n        }\n    }\n\n    /**\n     * @notice Attempt to execute a series of nonfungible transfers through the delegate; reverts will be skipped\n     * @param executionBatch Execution batch struct\n     * @param batchIndex Current available transfer slot in the batch\n     * @return Array indicating which transfers were successful\n     */\n    function _executeNonfungibleTransfers(\n        bytes memory executionBatch,\n        uint256 batchIndex\n    ) internal returns (bool[] memory) {\n        address delegate = _DELEGATE;\n\n        /* Initialize the memory space for the successful transfers array returned from the Delegate call. */\n        uint256 successfulTransfersPointer;\n        assembly {\n            successfulTransfersPointer := mload(Memory_pointer)\n            /* Need to shift the free memory pointer ahead one word to account for the array pointer returned from the call. */\n            mstore(Memory_pointer, add(successfulTransfersPointer, One_word))\n        }\n\n        bool[] memory successfulTransfers = new bool[](batchIndex);\n        assembly {\n            let size := mload(executionBatch)\n            let selectorPointer := add(executionBatch, ExecutionBatch_selector_offset)\n            mstore(selectorPointer, shr(Bytes4_shift, Delegate_transfer_selector))\n            let success := call(\n                gas(),\n                delegate,\n                0,\n                add(selectorPointer, Delegate_transfer_calldata_offset),\n                sub(size, Delegate_transfer_calldata_offset),\n                successfulTransfersPointer,\n                add(0x40, mul(batchIndex, One_word))\n            )\n        }\n        return successfulTransfers;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        TRANSFER FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Transfer ETH\n     * @param to Recipient address\n     * @param amount Amount of ETH to send\n     */\n    function _transferETH(address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            assembly {\n                success := call(gas(), to, amount, 0, 0, 0, 0)\n            }\n            if (!success) {\n                revert ETHTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Transfer pool funds on behalf of a user\n     * @param from Sender address\n     * @param to Recipient address\n     * @param amount Amount to send\n     */\n    function _transferPool(address from, address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            address pool = _POOL;\n            assembly {\n                let x := mload(Memory_pointer)\n                mstore(x, ERC20_transferFrom_selector)\n                mstore(add(x, ERC20_transferFrom_from_offset), from)\n                mstore(add(x, ERC20_transferFrom_to_offset), to)\n                mstore(add(x, ERC20_transferFrom_amount_offset), amount)\n                success := call(gas(), pool, 0, x, ERC20_transferFrom_size, 0, 0)\n            }\n            if (!success) {\n                revert PoolTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Deposit ETH to user's pool funds\n     * @param to Recipient address\n     * @param amount Amount of ETH to deposit\n     */\n    function _depositPool(address to, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_deposit_selector)\n            mstore(add(x, Pool_deposit_user_offset), to)\n            success := call(gas(), pool, amount, x, Pool_deposit_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolDepositFailed();\n        }\n    }\n\n    /**\n     * @notice Withdraw ETH from user's pool funds\n     * @param from Address to withdraw from\n     * @param amount Amount of ETH to withdraw\n     */\n    function _withdrawFromPool(address from, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_withdrawFrom_selector)\n            mstore(add(x, Pool_withdrawFrom_from_offset), from)\n            mstore(add(x, Pool_withdrawFrom_to_offset), address())\n            mstore(add(x, Pool_withdrawFrom_amount_offset), amount)\n            success := call(gas(), pool, 0, x, Pool_withdrawFrom_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolWithdrawFromFailed();\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EVENT EMITTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param price Price of the token purchased\n     * @param fees Protocol, maker, and taker fees taken\n     * @param stateUpdate Fulfillment to be recorded with a successful execution\n     * @param orderType Order type\n     * @param transferIndex Index of the transfer corresponding to the execution\n     */\n    function _emitExecutionEventFromBatch(\n        bytes memory executionBatch,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        StateUpdate memory stateUpdate,\n        OrderType orderType,\n        uint256 transferIndex\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            stateUpdate.hash,\n            stateUpdate.index,\n            price,\n            makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    /**\n     * @notice Emit the Execution event that minimizes the number of bytes in the log\n     * @param transfer The nft transfer\n     * @param orderHash Order hash\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param makerFee Maker fees taken\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitOptimalExecutionEvent(\n        Transfer memory transfer,\n        bytes32 orderHash,\n        uint256 listingIndex,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        if (\n            // see _insertNonfungibleTransfer; ERC721 transfers don't set the transfer amount,\n            // so we can assume the transfer amount and not check it\n            transfer.assetType == AssetType.ERC721 &&\n            fees.protocolFee.rate == 0 &&\n            transfer.id < 1 << (11 * 8) &&\n            listingIndex < 1 << (1 * 8) &&\n            price < 1 << (11 * 8)\n        ) {\n            if (makerFee.rate == 0 && fees.takerFee.rate == 0) {\n                emit Execution721Packed(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection)\n                );\n                return;\n            } else if (makerFee.rate == 0) {\n                emit Execution721TakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(fees.takerFee)\n                );\n                return;\n            } else if (fees.takerFee.rate == 0) {\n                emit Execution721MakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(makerFee)\n                );\n                return;\n            }\n        }\n\n        emit Execution({\n            transfer: transfer,\n            orderHash: orderHash,\n            listingIndex: listingIndex,\n            price: price,\n            makerFee: makerFee,\n            fees: fees,\n            orderType: orderType\n        });\n    }\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param order Order being fulfilled\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitExecutionEvent(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 listingIndex,\n        uint256 price,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(calldataPointer, add(transfersOffset, One_word))\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            bytes32(order.salt),\n            listingIndex,\n            price,\n            order.makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    function packTokenIdListingIndexTrader(\n        uint256 tokenId,\n        uint256 listingIndex,\n        address trader\n    ) private pure returns (uint256) {\n        return (tokenId << (21 * 8)) | (listingIndex << (20 * 8)) | uint160(trader);\n    }\n\n    function packTypePriceCollection(\n        OrderType orderType,\n        uint256 price,\n        address collection\n    ) private pure returns (uint256) {\n        return (uint256(orderType) << (31 * 8)) | (price << (20 * 8)) | uint160(collection);\n    }\n\n    function packFee(FeeRate memory fee) private pure returns (uint256) {\n        return (uint256(fee.rate) << (20 * 8)) | uint160(fee.recipient);\n    }\n\n    uint256[50] private __gap;\n}", 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'private', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Executor.packFee', 'start_line': 2385, 'end_line': 2387, 'offset_start': 88462, 'offset_end': 88609, 'content': 'function packFee(FeeRate memory fee) private pure returns (uint256) {\n        return (uint256(fee.rate) << (20 * 8)) | uint160(fee.recipient);\n    }', 'contract_name': 'Executor', 'contract_code': "{\n    address private immutable _DELEGATE;\n    address private immutable _POOL;\n\n    constructor(address delegate, address pool, address proxy) Validation(proxy) {\n        _DELEGATE = delegate;\n        _POOL = pool;\n    }\n\n    receive() external payable {\n        if (msg.sender != _POOL) {\n            revert Unauthorized();\n        }\n    }\n\n    /**\n     * @notice Insert a validated ask listing into the batch if there's sufficient ETH to fulfill\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing the listing to insert\n     * @param fees Protocol and taker fees\n     * @param remainingETH Available ETH remaining\n     * @return Available ETH remaining after insertion; if the listing was inserted in the batch\n     */\n    function _insertExecutionAsk(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees,\n        uint256 remainingETH\n    ) internal pure returns (uint256, bool) {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        /* Only insert the executions if there are sufficient funds to execute. */\n        if (remainingETH >= totalPrice + takerFeeAmount) {\n            unchecked {\n                remainingETH = remainingETH - totalPrice - takerFeeAmount;\n            }\n\n            _setAddresses(fungibleTransfers, order);\n\n            uint256 index = _insertNonfungibleTransfer(\n                executionBatch,\n                order,\n                exchange.listing.tokenId,\n                takerAmount\n            );\n\n            _insertFungibleTransfers(\n                fungibleTransfers,\n                takerAmount,\n                exchange.listing,\n                bytes32(order.salt),\n                index,\n                totalPrice,\n                protocolFeeAmount,\n                makerFeeAmount,\n                takerFeeAmount,\n                true\n            );\n\n            return (remainingETH, true);\n        } else {\n            return (remainingETH, false);\n        }\n    }\n\n    /**\n     * @notice Insert a validated bid listing into the batch\n     * @param executionBatch Execution batch\n     * @param fungibleTransfers Fungible transfers\n     * @param order Order of the listing to insert\n     * @param exchange Exchange containing listing to insert\n     * @param fees Protocol and taker fees\n     */\n    function _insertExecutionBid(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order,\n        Exchange memory exchange,\n        Fees memory fees\n    ) internal pure {\n        uint256 takerAmount = exchange.taker.amount;\n\n        (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        ) = _computeFees(exchange.listing.price, takerAmount, order.makerFee, fees);\n\n        _setAddresses(fungibleTransfers, order);\n\n        uint256 index = _insertNonfungibleTransfer(\n            executionBatch,\n            order,\n            exchange.taker.tokenId,\n            takerAmount\n        );\n\n        _insertFungibleTransfers(\n            fungibleTransfers,\n            takerAmount,\n            exchange.listing,\n            bytes32(order.salt),\n            index,\n            totalPrice,\n            protocolFeeAmount,\n            makerFeeAmount,\n            takerFeeAmount,\n            false\n        );\n    }\n\n    /**\n     * @notice Insert the nonfungible transfer into the batch\n     * @param executionBatch Execution batch\n     * @param order Order\n     * @param tokenId Token id\n     * @param amount Number of token units\n     * @return transferIndex Index of the transfer\n     */\n    function _insertNonfungibleTransfer(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 tokenId,\n        uint256 amount\n    ) internal pure returns (uint256 transferIndex) {\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            transferIndex := mload(add(calldataPointer, ExecutionBatch_length_offset))\n\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            let transferPointer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n            mstore(\n                add(transferPointer, Transfer_trader_offset),\n                mload(add(order, Order_trader_offset))\n            ) // set the trader\n            mstore(add(transferPointer, Transfer_id_offset), tokenId) // set the token id\n            mstore(\n                add(transferPointer, Transfer_collection_offset),\n                mload(add(order, Order_collection_offset))\n            ) // set the collection\n            mstore(\n                add(transferPointer, Transfer_assetType_offset),\n                mload(add(order, Order_assetType_offset))\n            ) // set the asset type\n            mstore(add(calldataPointer, ExecutionBatch_length_offset), add(transferIndex, 1)) // increment the batch length\n\n            if eq(mload(add(order, Order_assetType_offset)), AssetType_ERC1155) {\n                mstore(add(transferPointer, Transfer_amount_offset), amount) // set the amount (don't need to set for ERC721's)\n            }\n        }\n    }\n\n    /**\n     * @notice Insert the fungible transfers that need to be executed atomically\n     * @param fungibleTransfers Fungible transfers struct\n     * @param takerAmount Amount of the listing being taken\n     * @param listing Listing to execute\n     * @param orderHash Order hash\n     * @param index Execution index\n     * @param totalPrice Total price of the purchased tokens\n     * @param protocolFeeAmount Computed protocol fee\n     * @param makerFeeAmount Computed maker fee\n     * @param takerFeeAmount Computed taker fee\n     * @param makerIsSeller Is the order maker the seller\n     */\n    function _insertFungibleTransfers(\n        FungibleTransfers memory fungibleTransfers,\n        uint256 takerAmount,\n        Listing memory listing,\n        bytes32 orderHash,\n        uint256 index,\n        uint256 totalPrice,\n        uint256 protocolFeeAmount,\n        uint256 makerFeeAmount,\n        uint256 takerFeeAmount,\n        bool makerIsSeller\n    ) internal pure {\n        uint256 makerId = fungibleTransfers.makerId;\n        fungibleTransfers.executions[index].makerId = makerId;\n        fungibleTransfers.executions[index].makerFeeRecipientId = fungibleTransfers.feeRecipientId;\n        fungibleTransfers.executions[index].stateUpdate = StateUpdate({\n            trader: fungibleTransfers.makers[makerId],\n            hash: orderHash,\n            index: listing.index,\n            value: takerAmount,\n            maxAmount: listing.amount\n        });\n        if (makerIsSeller) {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    makerFeeAmount;\n            }\n        } else {\n            unchecked {\n                fungibleTransfers.executions[index].sellerAmount =\n                    totalPrice -\n                    protocolFeeAmount -\n                    takerFeeAmount;\n            }\n        }\n        fungibleTransfers.executions[index].makerFeeAmount = makerFeeAmount;\n        fungibleTransfers.executions[index].takerFeeAmount = takerFeeAmount;\n        fungibleTransfers.executions[index].protocolFeeAmount = protocolFeeAmount;\n    }\n\n    /**\n     * @notice Set the addresses of the maker fee recipient and order maker if different than currently being batched\n     * @param fungibleTransfers Fungible transfers struct\n     * @param order Parent order of listing being added to the batch\n     */\n    function _setAddresses(\n        FungibleTransfers memory fungibleTransfers,\n        Order memory order\n    ) internal pure {\n        address feeRecipient = order.makerFee.recipient;\n        uint256 feeRecipientId = fungibleTransfers.feeRecipientId;\n        address currentFeeRecipient = fungibleTransfers.feeRecipients[feeRecipientId];\n        if (feeRecipient != currentFeeRecipient) {\n            if (currentFeeRecipient == address(0)) {\n                fungibleTransfers.feeRecipients[feeRecipientId] = feeRecipient;\n            } else {\n                unchecked {\n                    fungibleTransfers.feeRecipients[++feeRecipientId] = feeRecipient;\n                }\n                fungibleTransfers.feeRecipientId = feeRecipientId;\n            }\n        }\n        address trader = order.trader;\n        uint256 makerId = fungibleTransfers.makerId;\n        address currentTrader = fungibleTransfers.makers[makerId];\n        if (trader != currentTrader) {\n            if (currentTrader == address(0)) {\n                fungibleTransfers.makers[makerId] = trader;\n            } else {\n                unchecked {\n                    fungibleTransfers.makers[++makerId] = trader;\n                }\n                fungibleTransfers.makerId = makerId;\n            }\n        }\n    }\n\n    /**\n     * @notice Compute all necessary fees to be taken\n     * @param pricePerToken Price per token unit\n     * @param takerAmount Number of token units taken (should only be greater than 1 for ERC1155)\n     * @param fees Protocol and taker fee set by the transaction\n     */\n    function _computeFees(\n        uint256 pricePerToken,\n        uint256 takerAmount,\n        FeeRate memory makerFee,\n        Fees memory fees\n    )\n        internal\n        pure\n        returns (\n            uint256 totalPrice,\n            uint256 protocolFeeAmount,\n            uint256 makerFeeAmount,\n            uint256 takerFeeAmount\n        )\n    {\n        totalPrice = pricePerToken * takerAmount;\n        makerFeeAmount = (totalPrice * makerFee.rate) / _BASIS_POINTS;\n        takerFeeAmount = (totalPrice * fees.takerFee.rate) / _BASIS_POINTS;\n        protocolFeeAmount = (totalPrice * fees.protocolFee.rate) / _BASIS_POINTS;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Execute the transfers by first attempting the nonfungible transfers, for the successful transfers sum the fungible transfers by the recipients and execute\n     * @param executionBatch Execution batch struct\n     * @param fungibleTransfers Fungible transfers struct\n     * @param fees Protocol, maker, taker fees (note: makerFee will be inaccurate at this point in execution)\n     * @param orderType Order type\n     */\n    function _executeBatchTransfer(\n        bytes memory executionBatch,\n        FungibleTransfers memory fungibleTransfers,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        uint256 batchLength;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            batchLength := mload(add(calldataPointer, ExecutionBatch_length_offset))\n        }\n        if (batchLength > 0) {\n            bool[] memory successfulTransfers = _executeNonfungibleTransfers(\n                executionBatch,\n                batchLength\n            );\n\n            uint256 transfersLength = successfulTransfers.length;\n            for (uint256 i; i < transfersLength; ) {\n                if (successfulTransfers[i]) {\n                    AtomicExecution memory execution = fungibleTransfers.executions[i];\n                    FeeRate memory makerFee;\n                    uint256 price;\n                    unchecked {\n                        if (orderType == OrderType.ASK) {\n                            fungibleTransfers.makerTransfers[execution.makerId] += execution\n                                .sellerAmount; // amount that needs to be sent *to* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount;\n                        } else {\n                            fungibleTransfers.makerTransfers[execution.makerId] +=\n                                execution.protocolFeeAmount +\n                                execution.makerFeeAmount +\n                                execution.takerFeeAmount +\n                                execution.sellerAmount; // amount that needs to be taken *from* the order maker\n                            price =\n                                execution.sellerAmount +\n                                execution.protocolFeeAmount +\n                                execution.takerFeeAmount;\n                        }\n                        fungibleTransfers.totalSellerTransfer += execution.sellerAmount; // only for bids\n                        fungibleTransfers.totalProtocolFee += execution.protocolFeeAmount;\n                        fungibleTransfers.totalTakerFee += execution.takerFeeAmount;\n                        fungibleTransfers.feeTransfers[execution.makerFeeRecipientId] += execution\n                            .makerFeeAmount;\n                        makerFee = FeeRate(\n                            fungibleTransfers.feeRecipients[execution.makerFeeRecipientId],\n                            uint16((execution.makerFeeAmount * _BASIS_POINTS) / price)\n                        );\n                    }\n\n                    /* Commit state updates. */\n                    StateUpdate memory stateUpdate = fungibleTransfers.executions[i].stateUpdate;\n                    {\n                        address trader = stateUpdate.trader;\n                        bytes32 hash = stateUpdate.hash;\n                        uint256 index = stateUpdate.index;\n                        uint256 _amountTaken = amountTaken[trader][hash][index];\n                        uint256 newAmountTaken = _amountTaken + stateUpdate.value;\n\n                        /* Overfulfilled Listings should be caught prior to inserting into the batch, but this check prevents any misuse. */\n                        if (newAmountTaken <= stateUpdate.maxAmount) {\n                            amountTaken[trader][hash][index] = newAmountTaken;\n                        } else {\n                            revert OrderFulfilled();\n                        }\n                    }\n\n                    _emitExecutionEventFromBatch(\n                        executionBatch,\n                        price,\n                        makerFee,\n                        fees,\n                        stateUpdate,\n                        orderType,\n                        i\n                    );\n                }\n\n                unchecked {\n                    ++i;\n                }\n            }\n\n            if (orderType == OrderType.ASK) {\n                /* Transfer the payments to the sellers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferETH(fungibleTransfers.makers[i], fungibleTransfers.makerTransfers[i]);\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferETH(\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferETH(fees.protocolFee.recipient, fungibleTransfers.totalProtocolFee);\n\n                /* Transfer the taker fees. */\n                _transferETH(fees.takerFee.recipient, fungibleTransfers.totalTakerFee);\n            } else {\n                /* Take the pool funds from the buyers. */\n                uint256 makersLength = fungibleTransfers.makerId + 1;\n                for (uint256 i; i < makersLength; ) {\n                    _transferPool(\n                        fungibleTransfers.makers[i],\n                        address(this),\n                        fungibleTransfers.makerTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the payment to the seller. */\n                _transferPool(address(this), msg.sender, fungibleTransfers.totalSellerTransfer);\n\n                /* Transfer the fees to the fee recipients. */\n                uint256 feesLength = fungibleTransfers.feeRecipientId + 1;\n                for (uint256 i; i < feesLength; ) {\n                    _transferPool(\n                        address(this),\n                        fungibleTransfers.feeRecipients[i],\n                        fungibleTransfers.feeTransfers[i]\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n\n                /* Transfer the protocol fees. */\n                _transferPool(\n                    address(this),\n                    fees.protocolFee.recipient,\n                    fungibleTransfers.totalProtocolFee\n                );\n\n                /* Transfer the taker fees. */\n                _transferPool(\n                    address(this),\n                    fees.takerFee.recipient,\n                    fungibleTransfers.totalTakerFee\n                );\n            }\n        }\n    }\n\n    /**\n     * @notice Attempt to execute a series of nonfungible transfers through the delegate; reverts will be skipped\n     * @param executionBatch Execution batch struct\n     * @param batchIndex Current available transfer slot in the batch\n     * @return Array indicating which transfers were successful\n     */\n    function _executeNonfungibleTransfers(\n        bytes memory executionBatch,\n        uint256 batchIndex\n    ) internal returns (bool[] memory) {\n        address delegate = _DELEGATE;\n\n        /* Initialize the memory space for the successful transfers array returned from the Delegate call. */\n        uint256 successfulTransfersPointer;\n        assembly {\n            successfulTransfersPointer := mload(Memory_pointer)\n            /* Need to shift the free memory pointer ahead one word to account for the array pointer returned from the call. */\n            mstore(Memory_pointer, add(successfulTransfersPointer, One_word))\n        }\n\n        bool[] memory successfulTransfers = new bool[](batchIndex);\n        assembly {\n            let size := mload(executionBatch)\n            let selectorPointer := add(executionBatch, ExecutionBatch_selector_offset)\n            mstore(selectorPointer, shr(Bytes4_shift, Delegate_transfer_selector))\n            let success := call(\n                gas(),\n                delegate,\n                0,\n                add(selectorPointer, Delegate_transfer_calldata_offset),\n                sub(size, Delegate_transfer_calldata_offset),\n                successfulTransfersPointer,\n                add(0x40, mul(batchIndex, One_word))\n            )\n        }\n        return successfulTransfers;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        TRANSFER FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Transfer ETH\n     * @param to Recipient address\n     * @param amount Amount of ETH to send\n     */\n    function _transferETH(address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            assembly {\n                success := call(gas(), to, amount, 0, 0, 0, 0)\n            }\n            if (!success) {\n                revert ETHTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Transfer pool funds on behalf of a user\n     * @param from Sender address\n     * @param to Recipient address\n     * @param amount Amount to send\n     */\n    function _transferPool(address from, address to, uint256 amount) internal {\n        if (amount > 0) {\n            bool success;\n            address pool = _POOL;\n            assembly {\n                let x := mload(Memory_pointer)\n                mstore(x, ERC20_transferFrom_selector)\n                mstore(add(x, ERC20_transferFrom_from_offset), from)\n                mstore(add(x, ERC20_transferFrom_to_offset), to)\n                mstore(add(x, ERC20_transferFrom_amount_offset), amount)\n                success := call(gas(), pool, 0, x, ERC20_transferFrom_size, 0, 0)\n            }\n            if (!success) {\n                revert PoolTransferFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Deposit ETH to user's pool funds\n     * @param to Recipient address\n     * @param amount Amount of ETH to deposit\n     */\n    function _depositPool(address to, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_deposit_selector)\n            mstore(add(x, Pool_deposit_user_offset), to)\n            success := call(gas(), pool, amount, x, Pool_deposit_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolDepositFailed();\n        }\n    }\n\n    /**\n     * @notice Withdraw ETH from user's pool funds\n     * @param from Address to withdraw from\n     * @param amount Amount of ETH to withdraw\n     */\n    function _withdrawFromPool(address from, uint256 amount) internal {\n        bool success;\n        address pool = _POOL;\n        assembly {\n            let x := mload(Memory_pointer)\n            mstore(x, Pool_withdrawFrom_selector)\n            mstore(add(x, Pool_withdrawFrom_from_offset), from)\n            mstore(add(x, Pool_withdrawFrom_to_offset), address())\n            mstore(add(x, Pool_withdrawFrom_amount_offset), amount)\n            success := call(gas(), pool, 0, x, Pool_withdrawFrom_size, 0, 0)\n        }\n        if (!success) {\n            revert PoolWithdrawFromFailed();\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          EVENT EMITTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param price Price of the token purchased\n     * @param fees Protocol, maker, and taker fees taken\n     * @param stateUpdate Fulfillment to be recorded with a successful execution\n     * @param orderType Order type\n     * @param transferIndex Index of the transfer corresponding to the execution\n     */\n    function _emitExecutionEventFromBatch(\n        bytes memory executionBatch,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        StateUpdate memory stateUpdate,\n        OrderType orderType,\n        uint256 transferIndex\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(\n                add(calldataPointer, add(transfersOffset, One_word)),\n                mul(transferIndex, Transfer_size)\n            )\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            stateUpdate.hash,\n            stateUpdate.index,\n            price,\n            makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    /**\n     * @notice Emit the Execution event that minimizes the number of bytes in the log\n     * @param transfer The nft transfer\n     * @param orderHash Order hash\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param makerFee Maker fees taken\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitOptimalExecutionEvent(\n        Transfer memory transfer,\n        bytes32 orderHash,\n        uint256 listingIndex,\n        uint256 price,\n        FeeRate memory makerFee,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        if (\n            // see _insertNonfungibleTransfer; ERC721 transfers don't set the transfer amount,\n            // so we can assume the transfer amount and not check it\n            transfer.assetType == AssetType.ERC721 &&\n            fees.protocolFee.rate == 0 &&\n            transfer.id < 1 << (11 * 8) &&\n            listingIndex < 1 << (1 * 8) &&\n            price < 1 << (11 * 8)\n        ) {\n            if (makerFee.rate == 0 && fees.takerFee.rate == 0) {\n                emit Execution721Packed(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection)\n                );\n                return;\n            } else if (makerFee.rate == 0) {\n                emit Execution721TakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(fees.takerFee)\n                );\n                return;\n            } else if (fees.takerFee.rate == 0) {\n                emit Execution721MakerFeePacked(\n                    orderHash,\n                    packTokenIdListingIndexTrader(transfer.id, listingIndex, transfer.trader),\n                    packTypePriceCollection(orderType, price, transfer.collection),\n                    packFee(makerFee)\n                );\n                return;\n            }\n        }\n\n        emit Execution({\n            transfer: transfer,\n            orderHash: orderHash,\n            listingIndex: listingIndex,\n            price: price,\n            makerFee: makerFee,\n            fees: fees,\n            orderType: orderType\n        });\n    }\n\n    /**\n     * @notice Emit Execution event from a single execution\n     * @param executionBatch Execution batch struct\n     * @param order Order being fulfilled\n     * @param listingIndex Index of the listing being fulfilled within the order\n     * @param price Price of the token purchased\n     * @param fees Protocol, and taker fees taken\n     * @param orderType Order type\n     */\n    function _emitExecutionEvent(\n        bytes memory executionBatch,\n        Order memory order,\n        uint256 listingIndex,\n        uint256 price,\n        Fees memory fees,\n        OrderType orderType\n    ) internal {\n        Transfer memory transfer;\n        assembly {\n            let calldataPointer := add(executionBatch, ExecutionBatch_calldata_offset)\n            let transfersOffset := mload(add(calldataPointer, ExecutionBatch_transfers_pointer_offset))\n            transfer := add(calldataPointer, add(transfersOffset, One_word))\n        }\n\n        _emitOptimalExecutionEvent(\n            transfer,\n            bytes32(order.salt),\n            listingIndex,\n            price,\n            order.makerFee,\n            fees,\n            orderType\n        );\n    }\n\n    function packTokenIdListingIndexTrader(\n        uint256 tokenId,\n        uint256 listingIndex,\n        address trader\n    ) private pure returns (uint256) {\n        return (tokenId << (21 * 8)) | (listingIndex << (20 * 8)) | uint160(trader);\n    }\n\n    function packTypePriceCollection(\n        OrderType orderType,\n        uint256 price,\n        address collection\n    ) private pure returns (uint256) {\n        return (uint256(orderType) << (31 * 8)) | (price << (20 * 8)) | uint160(collection);\n    }\n\n    function packFee(FeeRate memory fee) private pure returns (uint256) {\n        return (uint256(fee.rate) << (20 * 8)) | uint160(fee.recipient);\n    }\n\n    uint256[50] private __gap;\n}", 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'private', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Signatures.tor', 'start_line': 2535, 'end_line': 2537, 'offset_start': 94382, 'offset_end': 94508, 'content': 'constructor(address proxy) {\n        (_FEE_RATE_TYPEHASH, _ORDER_TYPEHASH, _DOMAIN_SEPARATOR) = _createTypehashes(proxy);\n    }', 'contract_name': 'Signatures', 'contract_code': '{\n    string private constant _NAME = "Blur Exchange";\n    string private constant _VERSION = "1.0";\n\n    bytes32 private immutable _FEE_RATE_TYPEHASH;\n    bytes32 private immutable _ORDER_TYPEHASH;\n    bytes32 private immutable _DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public oracles;\n    mapping(address => uint256) public nonces;\n    uint256 public blockRange;\n\n    constructor(address proxy) {\n        (_FEE_RATE_TYPEHASH, _ORDER_TYPEHASH, _DOMAIN_SEPARATOR) = _createTypehashes(proxy);\n    }\n\n    /**\n     * @notice Verify the domain separator produced during deployment of the implementation matches that of the proxy\n     */\n    function verifyDomain() public view {\n        bytes32 eip712DomainTypehash = keccak256(\n            bytes.concat(\n                "EIP712Domain(",\n                "string name,",\n                "string version,",\n                "uint256 chainId,",\n                "address verifyingContract",\n                ")"\n            )\n        );\n\n        bytes32 domainSeparator = _hashDomain(\n            eip712DomainTypehash,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION)),\n            address(this)\n        );\n        if (_DOMAIN_SEPARATOR != domainSeparator) {\n            revert InvalidDomain();\n        }\n    }\n\n    /**\n     * @notice Return version and domain separator\n     */\n    function information() external view returns (string memory version, bytes32 domainSeparator) {\n        version = _VERSION;\n        domainSeparator = _DOMAIN_SEPARATOR;\n    }\n\n    /**\n     * @notice Create a hash of TakeAsk calldata with an approved caller\n     * @param inputs TakeAsk inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeAsk(TakeAsk memory inputs, address _caller) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeBid calldata with an approved caller\n     * @param inputs TakeBid inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeBid(TakeBid memory inputs, address _caller) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeAskSingle calldata with an approved caller\n     * @param inputs TakeAskSingle inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeAskSingle(\n        TakeAskSingle memory inputs,\n        address _caller\n    ) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeBidSingle calldata with an approved caller\n     * @param inputs TakeBidSingle inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeBidSingle(\n        TakeBidSingle memory inputs,\n        address _caller\n    ) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create an EIP712 hash of an Order\n     * @dev Includes two additional parameters not in the struct (orderType, nonce)\n     * @param order Order to hash\n     * @param orderType OrderType of the Order\n     * @return Order EIP712 hash\n     */\n    function hashOrder(Order memory order, OrderType orderType) public view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    _ORDER_TYPEHASH,\n                    order.trader,\n                    order.collection,\n                    order.listingsRoot,\n                    order.numberOfListings,\n                    order.expirationTime,\n                    order.assetType,\n                    _hashFeeRate(order.makerFee),\n                    order.salt,\n                    orderType,\n                    nonces[order.trader]\n                )\n            );\n    }\n\n    /**\n     * @notice Create a hash of a Listing struct\n     * @param listing Listing to hash\n     * @return Listing hash\n     */\n    function hashListing(Listing memory listing) public pure returns (bytes32) {\n        return keccak256(abi.encode(listing.index, listing.tokenId, listing.amount, listing.price));\n    }\n\n    /**\n     * @notice Create a hash of calldata with an approved caller\n     * @param _caller Address approved to execute the calldata\n     * @return hash Calldata hash\n     */\n    function _hashCalldata(address _caller) internal pure returns (bytes32 hash) {\n        assembly {\n            let nextPointer := mload(0x40)\n            let size := add(sub(nextPointer, 0x80), 0x20)\n            mstore(nextPointer, _caller)\n            hash := keccak256(0x80, size)\n        }\n    }\n\n    /**\n     * @notice Create an EIP712 hash of a FeeRate struct\n     * @param feeRate FeeRate to hash\n     * @return FeeRate EIP712 hash\n     */\n    function _hashFeeRate(FeeRate memory feeRate) private view returns (bytes32) {\n        return keccak256(abi.encode(_FEE_RATE_TYPEHASH, feeRate.recipient, feeRate.rate));\n    }\n\n    /**\n     * @notice Create an EIP712 hash to sign\n     * @param hash Primary EIP712 object hash\n     * @return EIP712 hash\n     */\n    function _hashToSign(bytes32 hash) private view returns (bytes32) {\n        return keccak256(bytes.concat(bytes2(0x1901), _DOMAIN_SEPARATOR, hash));\n    }\n\n    /**\n     * @notice Generate all EIP712 Typehashes\n     */\n    function _createTypehashes(\n        address proxy\n    )\n        private\n        view\n        returns (bytes32 feeRateTypehash, bytes32 orderTypehash, bytes32 domainSeparator)\n    {\n        bytes32 eip712DomainTypehash = keccak256(\n            bytes.concat(\n                "EIP712Domain(",\n                "string name,",\n                "string version,",\n                "uint256 chainId,",\n                "address verifyingContract",\n                ")"\n            )\n        );\n\n        bytes memory feeRateTypestring = "FeeRate(address recipient,uint16 rate)";\n\n        orderTypehash = keccak256(\n            bytes.concat(\n                "Order(",\n                "address trader,",\n                "address collection,",\n                "bytes32 listingsRoot,",\n                "uint256 numberOfListings,",\n                "uint256 expirationTime,",\n                "uint8 assetType,",\n                "FeeRate makerFee,",\n                "uint256 salt,",\n                "uint8 orderType,",\n                "uint256 nonce",\n                ")",\n                feeRateTypestring\n            )\n        );\n\n        feeRateTypehash = keccak256(feeRateTypestring);\n\n        domainSeparator = _hashDomain(\n            eip712DomainTypehash,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION)),\n            proxy\n        );\n    }\n\n    /**\n     * @notice Create an EIP712 domain separator\n     * @param eip712DomainTypehash Typehash of the EIP712Domain struct\n     * @param nameHash Hash of the contract name\n     * @param versionHash Hash of the version string\n     * @param proxy Address of the proxy this implementation will be behind\n     * @return EIP712Domain hash\n     */\n    function _hashDomain(\n        bytes32 eip712DomainTypehash,\n        bytes32 nameHash,\n        bytes32 versionHash,\n        address proxy\n    ) private view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(eip712DomainTypehash, nameHash, versionHash, block.chainid, proxy)\n            );\n    }\n\n    /**\n     * @notice Verify EIP712 signature\n     * @param signer Address of the alleged signer\n     * @param hash EIP712 hash\n     * @param signatures Packed bytes array of order signatures\n     * @param index Index of the signature to verify\n     * @return authorized Validity of the signature\n     */\n    function _verifyAuthorization(\n        address signer,\n        bytes32 hash,\n        bytes memory signatures,\n        uint256 index\n    ) internal view returns (bool authorized) {\n        bytes32 hashToSign = _hashToSign(hash);\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            let signatureOffset := add(add(signatures, One_word), mul(Signatures_size, index))\n            r := mload(signatureOffset)\n            s := mload(add(signatureOffset, Signatures_s_offset))\n            v := shr(Bytes1_shift, mload(add(signatureOffset, Signatures_v_offset)))\n        }\n        authorized = _verify(signer, hashToSign, v, r, s);\n    }\n\n    modifier verifyOracleSignature(bytes32 hash, bytes calldata oracleSignature) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        uint32 blockNumber;\n        address oracle;\n        assembly {\n            let signatureOffset := oracleSignature.offset\n            r := calldataload(signatureOffset)\n            s := calldataload(add(signatureOffset, OracleSignatures_s_offset))\n            v := shr(Bytes1_shift, calldataload(add(signatureOffset, OracleSignatures_v_offset)))\n            blockNumber := shr(\n                Bytes4_shift,\n                calldataload(add(signatureOffset, OracleSignatures_blockNumber_offset))\n            )\n            oracle := shr(\n                Bytes20_shift,\n                calldataload(add(signatureOffset, OracleSignatures_oracle_offset))\n            )\n        }\n        if (blockNumber + blockRange < block.number) {\n            revert ExpiredOracleSignature();\n        }\n        if (oracles[oracle] == 0) {\n            revert UnauthorizedOracle();\n        }\n        if (!_verify(oracle, keccak256(abi.encodePacked(hash, blockNumber)), v, r, s)) {\n            revert InvalidOracleSignature();\n        }\n        _;\n    }\n\n    /**\n     * @notice Verify signature of digest\n     * @param signer Address of expected signer\n     * @param digest Signature digest\n     * @param v v parameter\n     * @param r r parameter\n     * @param s s parameter\n     */\n    function _verify(\n        address signer,\n        bytes32 digest,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) private pure returns (bool valid) {\n        address recoveredSigner = ecrecover(digest, v, r, s);\n        if (recoveredSigner != address(0) && recoveredSigner == signer) {\n            valid = true;\n        }\n    }\n\n    uint256[47] private __gap;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'default', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Signatures.verifyDomain', 'start_line': 2542, 'end_line': 2563, 'offset_start': 94649, 'offset_end': 95287, 'content': 'function verifyDomain() public view {\n        bytes32 eip712DomainTypehash = keccak256(\n            bytes.concat(\n                "EIP712Domain(",\n                "string name,",\n                "string version,",\n                "uint256 chainId,",\n                "address verifyingContract",\n                ")"\n            )\n        );\n\n        bytes32 domainSeparator = _hashDomain(\n            eip712DomainTypehash,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION)),\n            address(this)\n        );\n        if (_DOMAIN_SEPARATOR != domainSeparator) {\n            revert InvalidDomain();\n        }\n    }', 'contract_name': 'Signatures', 'contract_code': '{\n    string private constant _NAME = "Blur Exchange";\n    string private constant _VERSION = "1.0";\n\n    bytes32 private immutable _FEE_RATE_TYPEHASH;\n    bytes32 private immutable _ORDER_TYPEHASH;\n    bytes32 private immutable _DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public oracles;\n    mapping(address => uint256) public nonces;\n    uint256 public blockRange;\n\n    constructor(address proxy) {\n        (_FEE_RATE_TYPEHASH, _ORDER_TYPEHASH, _DOMAIN_SEPARATOR) = _createTypehashes(proxy);\n    }\n\n    /**\n     * @notice Verify the domain separator produced during deployment of the implementation matches that of the proxy\n     */\n    function verifyDomain() public view {\n        bytes32 eip712DomainTypehash = keccak256(\n            bytes.concat(\n                "EIP712Domain(",\n                "string name,",\n                "string version,",\n                "uint256 chainId,",\n                "address verifyingContract",\n                ")"\n            )\n        );\n\n        bytes32 domainSeparator = _hashDomain(\n            eip712DomainTypehash,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION)),\n            address(this)\n        );\n        if (_DOMAIN_SEPARATOR != domainSeparator) {\n            revert InvalidDomain();\n        }\n    }\n\n    /**\n     * @notice Return version and domain separator\n     */\n    function information() external view returns (string memory version, bytes32 domainSeparator) {\n        version = _VERSION;\n        domainSeparator = _DOMAIN_SEPARATOR;\n    }\n\n    /**\n     * @notice Create a hash of TakeAsk calldata with an approved caller\n     * @param inputs TakeAsk inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeAsk(TakeAsk memory inputs, address _caller) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeBid calldata with an approved caller\n     * @param inputs TakeBid inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeBid(TakeBid memory inputs, address _caller) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeAskSingle calldata with an approved caller\n     * @param inputs TakeAskSingle inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeAskSingle(\n        TakeAskSingle memory inputs,\n        address _caller\n    ) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeBidSingle calldata with an approved caller\n     * @param inputs TakeBidSingle inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeBidSingle(\n        TakeBidSingle memory inputs,\n        address _caller\n    ) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create an EIP712 hash of an Order\n     * @dev Includes two additional parameters not in the struct (orderType, nonce)\n     * @param order Order to hash\n     * @param orderType OrderType of the Order\n     * @return Order EIP712 hash\n     */\n    function hashOrder(Order memory order, OrderType orderType) public view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    _ORDER_TYPEHASH,\n                    order.trader,\n                    order.collection,\n                    order.listingsRoot,\n                    order.numberOfListings,\n                    order.expirationTime,\n                    order.assetType,\n                    _hashFeeRate(order.makerFee),\n                    order.salt,\n                    orderType,\n                    nonces[order.trader]\n                )\n            );\n    }\n\n    /**\n     * @notice Create a hash of a Listing struct\n     * @param listing Listing to hash\n     * @return Listing hash\n     */\n    function hashListing(Listing memory listing) public pure returns (bytes32) {\n        return keccak256(abi.encode(listing.index, listing.tokenId, listing.amount, listing.price));\n    }\n\n    /**\n     * @notice Create a hash of calldata with an approved caller\n     * @param _caller Address approved to execute the calldata\n     * @return hash Calldata hash\n     */\n    function _hashCalldata(address _caller) internal pure returns (bytes32 hash) {\n        assembly {\n            let nextPointer := mload(0x40)\n            let size := add(sub(nextPointer, 0x80), 0x20)\n            mstore(nextPointer, _caller)\n            hash := keccak256(0x80, size)\n        }\n    }\n\n    /**\n     * @notice Create an EIP712 hash of a FeeRate struct\n     * @param feeRate FeeRate to hash\n     * @return FeeRate EIP712 hash\n     */\n    function _hashFeeRate(FeeRate memory feeRate) private view returns (bytes32) {\n        return keccak256(abi.encode(_FEE_RATE_TYPEHASH, feeRate.recipient, feeRate.rate));\n    }\n\n    /**\n     * @notice Create an EIP712 hash to sign\n     * @param hash Primary EIP712 object hash\n     * @return EIP712 hash\n     */\n    function _hashToSign(bytes32 hash) private view returns (bytes32) {\n        return keccak256(bytes.concat(bytes2(0x1901), _DOMAIN_SEPARATOR, hash));\n    }\n\n    /**\n     * @notice Generate all EIP712 Typehashes\n     */\n    function _createTypehashes(\n        address proxy\n    )\n        private\n        view\n        returns (bytes32 feeRateTypehash, bytes32 orderTypehash, bytes32 domainSeparator)\n    {\n        bytes32 eip712DomainTypehash = keccak256(\n            bytes.concat(\n                "EIP712Domain(",\n                "string name,",\n                "string version,",\n                "uint256 chainId,",\n                "address verifyingContract",\n                ")"\n            )\n        );\n\n        bytes memory feeRateTypestring = "FeeRate(address recipient,uint16 rate)";\n\n        orderTypehash = keccak256(\n            bytes.concat(\n                "Order(",\n                "address trader,",\n                "address collection,",\n                "bytes32 listingsRoot,",\n                "uint256 numberOfListings,",\n                "uint256 expirationTime,",\n                "uint8 assetType,",\n                "FeeRate makerFee,",\n                "uint256 salt,",\n                "uint8 orderType,",\n                "uint256 nonce",\n                ")",\n                feeRateTypestring\n            )\n        );\n\n        feeRateTypehash = keccak256(feeRateTypestring);\n\n        domainSeparator = _hashDomain(\n            eip712DomainTypehash,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION)),\n            proxy\n        );\n    }\n\n    /**\n     * @notice Create an EIP712 domain separator\n     * @param eip712DomainTypehash Typehash of the EIP712Domain struct\n     * @param nameHash Hash of the contract name\n     * @param versionHash Hash of the version string\n     * @param proxy Address of the proxy this implementation will be behind\n     * @return EIP712Domain hash\n     */\n    function _hashDomain(\n        bytes32 eip712DomainTypehash,\n        bytes32 nameHash,\n        bytes32 versionHash,\n        address proxy\n    ) private view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(eip712DomainTypehash, nameHash, versionHash, block.chainid, proxy)\n            );\n    }\n\n    /**\n     * @notice Verify EIP712 signature\n     * @param signer Address of the alleged signer\n     * @param hash EIP712 hash\n     * @param signatures Packed bytes array of order signatures\n     * @param index Index of the signature to verify\n     * @return authorized Validity of the signature\n     */\n    function _verifyAuthorization(\n        address signer,\n        bytes32 hash,\n        bytes memory signatures,\n        uint256 index\n    ) internal view returns (bool authorized) {\n        bytes32 hashToSign = _hashToSign(hash);\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            let signatureOffset := add(add(signatures, One_word), mul(Signatures_size, index))\n            r := mload(signatureOffset)\n            s := mload(add(signatureOffset, Signatures_s_offset))\n            v := shr(Bytes1_shift, mload(add(signatureOffset, Signatures_v_offset)))\n        }\n        authorized = _verify(signer, hashToSign, v, r, s);\n    }\n\n    modifier verifyOracleSignature(bytes32 hash, bytes calldata oracleSignature) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        uint32 blockNumber;\n        address oracle;\n        assembly {\n            let signatureOffset := oracleSignature.offset\n            r := calldataload(signatureOffset)\n            s := calldataload(add(signatureOffset, OracleSignatures_s_offset))\n            v := shr(Bytes1_shift, calldataload(add(signatureOffset, OracleSignatures_v_offset)))\n            blockNumber := shr(\n                Bytes4_shift,\n                calldataload(add(signatureOffset, OracleSignatures_blockNumber_offset))\n            )\n            oracle := shr(\n                Bytes20_shift,\n                calldataload(add(signatureOffset, OracleSignatures_oracle_offset))\n            )\n        }\n        if (blockNumber + blockRange < block.number) {\n            revert ExpiredOracleSignature();\n        }\n        if (oracles[oracle] == 0) {\n            revert UnauthorizedOracle();\n        }\n        if (!_verify(oracle, keccak256(abi.encodePacked(hash, blockNumber)), v, r, s)) {\n            revert InvalidOracleSignature();\n        }\n        _;\n    }\n\n    /**\n     * @notice Verify signature of digest\n     * @param signer Address of expected signer\n     * @param digest Signature digest\n     * @param v v parameter\n     * @param r r parameter\n     * @param s s parameter\n     */\n    function _verify(\n        address signer,\n        bytes32 digest,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) private pure returns (bool valid) {\n        address recoveredSigner = ecrecover(digest, v, r, s);\n        if (recoveredSigner != address(0) && recoveredSigner == signer) {\n            valid = true;\n        }\n    }\n\n    uint256[47] private __gap;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Signatures.information', 'start_line': 2568, 'end_line': 2571, 'offset_start': 95361, 'offset_end': 95534, 'content': 'function information() external view returns (string memory version, bytes32 domainSeparator) {\n        version = _VERSION;\n        domainSeparator = _DOMAIN_SEPARATOR;\n    }', 'contract_name': 'Signatures', 'contract_code': '{\n    string private constant _NAME = "Blur Exchange";\n    string private constant _VERSION = "1.0";\n\n    bytes32 private immutable _FEE_RATE_TYPEHASH;\n    bytes32 private immutable _ORDER_TYPEHASH;\n    bytes32 private immutable _DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public oracles;\n    mapping(address => uint256) public nonces;\n    uint256 public blockRange;\n\n    constructor(address proxy) {\n        (_FEE_RATE_TYPEHASH, _ORDER_TYPEHASH, _DOMAIN_SEPARATOR) = _createTypehashes(proxy);\n    }\n\n    /**\n     * @notice Verify the domain separator produced during deployment of the implementation matches that of the proxy\n     */\n    function verifyDomain() public view {\n        bytes32 eip712DomainTypehash = keccak256(\n            bytes.concat(\n                "EIP712Domain(",\n                "string name,",\n                "string version,",\n                "uint256 chainId,",\n                "address verifyingContract",\n                ")"\n            )\n        );\n\n        bytes32 domainSeparator = _hashDomain(\n            eip712DomainTypehash,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION)),\n            address(this)\n        );\n        if (_DOMAIN_SEPARATOR != domainSeparator) {\n            revert InvalidDomain();\n        }\n    }\n\n    /**\n     * @notice Return version and domain separator\n     */\n    function information() external view returns (string memory version, bytes32 domainSeparator) {\n        version = _VERSION;\n        domainSeparator = _DOMAIN_SEPARATOR;\n    }\n\n    /**\n     * @notice Create a hash of TakeAsk calldata with an approved caller\n     * @param inputs TakeAsk inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeAsk(TakeAsk memory inputs, address _caller) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeBid calldata with an approved caller\n     * @param inputs TakeBid inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeBid(TakeBid memory inputs, address _caller) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeAskSingle calldata with an approved caller\n     * @param inputs TakeAskSingle inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeAskSingle(\n        TakeAskSingle memory inputs,\n        address _caller\n    ) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeBidSingle calldata with an approved caller\n     * @param inputs TakeBidSingle inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeBidSingle(\n        TakeBidSingle memory inputs,\n        address _caller\n    ) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create an EIP712 hash of an Order\n     * @dev Includes two additional parameters not in the struct (orderType, nonce)\n     * @param order Order to hash\n     * @param orderType OrderType of the Order\n     * @return Order EIP712 hash\n     */\n    function hashOrder(Order memory order, OrderType orderType) public view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    _ORDER_TYPEHASH,\n                    order.trader,\n                    order.collection,\n                    order.listingsRoot,\n                    order.numberOfListings,\n                    order.expirationTime,\n                    order.assetType,\n                    _hashFeeRate(order.makerFee),\n                    order.salt,\n                    orderType,\n                    nonces[order.trader]\n                )\n            );\n    }\n\n    /**\n     * @notice Create a hash of a Listing struct\n     * @param listing Listing to hash\n     * @return Listing hash\n     */\n    function hashListing(Listing memory listing) public pure returns (bytes32) {\n        return keccak256(abi.encode(listing.index, listing.tokenId, listing.amount, listing.price));\n    }\n\n    /**\n     * @notice Create a hash of calldata with an approved caller\n     * @param _caller Address approved to execute the calldata\n     * @return hash Calldata hash\n     */\n    function _hashCalldata(address _caller) internal pure returns (bytes32 hash) {\n        assembly {\n            let nextPointer := mload(0x40)\n            let size := add(sub(nextPointer, 0x80), 0x20)\n            mstore(nextPointer, _caller)\n            hash := keccak256(0x80, size)\n        }\n    }\n\n    /**\n     * @notice Create an EIP712 hash of a FeeRate struct\n     * @param feeRate FeeRate to hash\n     * @return FeeRate EIP712 hash\n     */\n    function _hashFeeRate(FeeRate memory feeRate) private view returns (bytes32) {\n        return keccak256(abi.encode(_FEE_RATE_TYPEHASH, feeRate.recipient, feeRate.rate));\n    }\n\n    /**\n     * @notice Create an EIP712 hash to sign\n     * @param hash Primary EIP712 object hash\n     * @return EIP712 hash\n     */\n    function _hashToSign(bytes32 hash) private view returns (bytes32) {\n        return keccak256(bytes.concat(bytes2(0x1901), _DOMAIN_SEPARATOR, hash));\n    }\n\n    /**\n     * @notice Generate all EIP712 Typehashes\n     */\n    function _createTypehashes(\n        address proxy\n    )\n        private\n        view\n        returns (bytes32 feeRateTypehash, bytes32 orderTypehash, bytes32 domainSeparator)\n    {\n        bytes32 eip712DomainTypehash = keccak256(\n            bytes.concat(\n                "EIP712Domain(",\n                "string name,",\n                "string version,",\n                "uint256 chainId,",\n                "address verifyingContract",\n                ")"\n            )\n        );\n\n        bytes memory feeRateTypestring = "FeeRate(address recipient,uint16 rate)";\n\n        orderTypehash = keccak256(\n            bytes.concat(\n                "Order(",\n                "address trader,",\n                "address collection,",\n                "bytes32 listingsRoot,",\n                "uint256 numberOfListings,",\n                "uint256 expirationTime,",\n                "uint8 assetType,",\n                "FeeRate makerFee,",\n                "uint256 salt,",\n                "uint8 orderType,",\n                "uint256 nonce",\n                ")",\n                feeRateTypestring\n            )\n        );\n\n        feeRateTypehash = keccak256(feeRateTypestring);\n\n        domainSeparator = _hashDomain(\n            eip712DomainTypehash,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION)),\n            proxy\n        );\n    }\n\n    /**\n     * @notice Create an EIP712 domain separator\n     * @param eip712DomainTypehash Typehash of the EIP712Domain struct\n     * @param nameHash Hash of the contract name\n     * @param versionHash Hash of the version string\n     * @param proxy Address of the proxy this implementation will be behind\n     * @return EIP712Domain hash\n     */\n    function _hashDomain(\n        bytes32 eip712DomainTypehash,\n        bytes32 nameHash,\n        bytes32 versionHash,\n        address proxy\n    ) private view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(eip712DomainTypehash, nameHash, versionHash, block.chainid, proxy)\n            );\n    }\n\n    /**\n     * @notice Verify EIP712 signature\n     * @param signer Address of the alleged signer\n     * @param hash EIP712 hash\n     * @param signatures Packed bytes array of order signatures\n     * @param index Index of the signature to verify\n     * @return authorized Validity of the signature\n     */\n    function _verifyAuthorization(\n        address signer,\n        bytes32 hash,\n        bytes memory signatures,\n        uint256 index\n    ) internal view returns (bool authorized) {\n        bytes32 hashToSign = _hashToSign(hash);\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            let signatureOffset := add(add(signatures, One_word), mul(Signatures_size, index))\n            r := mload(signatureOffset)\n            s := mload(add(signatureOffset, Signatures_s_offset))\n            v := shr(Bytes1_shift, mload(add(signatureOffset, Signatures_v_offset)))\n        }\n        authorized = _verify(signer, hashToSign, v, r, s);\n    }\n\n    modifier verifyOracleSignature(bytes32 hash, bytes calldata oracleSignature) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        uint32 blockNumber;\n        address oracle;\n        assembly {\n            let signatureOffset := oracleSignature.offset\n            r := calldataload(signatureOffset)\n            s := calldataload(add(signatureOffset, OracleSignatures_s_offset))\n            v := shr(Bytes1_shift, calldataload(add(signatureOffset, OracleSignatures_v_offset)))\n            blockNumber := shr(\n                Bytes4_shift,\n                calldataload(add(signatureOffset, OracleSignatures_blockNumber_offset))\n            )\n            oracle := shr(\n                Bytes20_shift,\n                calldataload(add(signatureOffset, OracleSignatures_oracle_offset))\n            )\n        }\n        if (blockNumber + blockRange < block.number) {\n            revert ExpiredOracleSignature();\n        }\n        if (oracles[oracle] == 0) {\n            revert UnauthorizedOracle();\n        }\n        if (!_verify(oracle, keccak256(abi.encodePacked(hash, blockNumber)), v, r, s)) {\n            revert InvalidOracleSignature();\n        }\n        _;\n    }\n\n    /**\n     * @notice Verify signature of digest\n     * @param signer Address of expected signer\n     * @param digest Signature digest\n     * @param v v parameter\n     * @param r r parameter\n     * @param s s parameter\n     */\n    function _verify(\n        address signer,\n        bytes32 digest,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) private pure returns (bool valid) {\n        address recoveredSigner = ecrecover(digest, v, r, s);\n        if (recoveredSigner != address(0) && recoveredSigner == signer) {\n            valid = true;\n        }\n    }\n\n    uint256[47] private __gap;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Signatures.hashTakeAsk', 'start_line': 2579, 'end_line': 2581, 'offset_start': 95758, 'offset_end': 95896, 'content': 'function hashTakeAsk(TakeAsk memory inputs, address _caller) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }', 'contract_name': 'Signatures', 'contract_code': '{\n    string private constant _NAME = "Blur Exchange";\n    string private constant _VERSION = "1.0";\n\n    bytes32 private immutable _FEE_RATE_TYPEHASH;\n    bytes32 private immutable _ORDER_TYPEHASH;\n    bytes32 private immutable _DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public oracles;\n    mapping(address => uint256) public nonces;\n    uint256 public blockRange;\n\n    constructor(address proxy) {\n        (_FEE_RATE_TYPEHASH, _ORDER_TYPEHASH, _DOMAIN_SEPARATOR) = _createTypehashes(proxy);\n    }\n\n    /**\n     * @notice Verify the domain separator produced during deployment of the implementation matches that of the proxy\n     */\n    function verifyDomain() public view {\n        bytes32 eip712DomainTypehash = keccak256(\n            bytes.concat(\n                "EIP712Domain(",\n                "string name,",\n                "string version,",\n                "uint256 chainId,",\n                "address verifyingContract",\n                ")"\n            )\n        );\n\n        bytes32 domainSeparator = _hashDomain(\n            eip712DomainTypehash,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION)),\n            address(this)\n        );\n        if (_DOMAIN_SEPARATOR != domainSeparator) {\n            revert InvalidDomain();\n        }\n    }\n\n    /**\n     * @notice Return version and domain separator\n     */\n    function information() external view returns (string memory version, bytes32 domainSeparator) {\n        version = _VERSION;\n        domainSeparator = _DOMAIN_SEPARATOR;\n    }\n\n    /**\n     * @notice Create a hash of TakeAsk calldata with an approved caller\n     * @param inputs TakeAsk inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeAsk(TakeAsk memory inputs, address _caller) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeBid calldata with an approved caller\n     * @param inputs TakeBid inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeBid(TakeBid memory inputs, address _caller) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeAskSingle calldata with an approved caller\n     * @param inputs TakeAskSingle inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeAskSingle(\n        TakeAskSingle memory inputs,\n        address _caller\n    ) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeBidSingle calldata with an approved caller\n     * @param inputs TakeBidSingle inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeBidSingle(\n        TakeBidSingle memory inputs,\n        address _caller\n    ) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create an EIP712 hash of an Order\n     * @dev Includes two additional parameters not in the struct (orderType, nonce)\n     * @param order Order to hash\n     * @param orderType OrderType of the Order\n     * @return Order EIP712 hash\n     */\n    function hashOrder(Order memory order, OrderType orderType) public view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    _ORDER_TYPEHASH,\n                    order.trader,\n                    order.collection,\n                    order.listingsRoot,\n                    order.numberOfListings,\n                    order.expirationTime,\n                    order.assetType,\n                    _hashFeeRate(order.makerFee),\n                    order.salt,\n                    orderType,\n                    nonces[order.trader]\n                )\n            );\n    }\n\n    /**\n     * @notice Create a hash of a Listing struct\n     * @param listing Listing to hash\n     * @return Listing hash\n     */\n    function hashListing(Listing memory listing) public pure returns (bytes32) {\n        return keccak256(abi.encode(listing.index, listing.tokenId, listing.amount, listing.price));\n    }\n\n    /**\n     * @notice Create a hash of calldata with an approved caller\n     * @param _caller Address approved to execute the calldata\n     * @return hash Calldata hash\n     */\n    function _hashCalldata(address _caller) internal pure returns (bytes32 hash) {\n        assembly {\n            let nextPointer := mload(0x40)\n            let size := add(sub(nextPointer, 0x80), 0x20)\n            mstore(nextPointer, _caller)\n            hash := keccak256(0x80, size)\n        }\n    }\n\n    /**\n     * @notice Create an EIP712 hash of a FeeRate struct\n     * @param feeRate FeeRate to hash\n     * @return FeeRate EIP712 hash\n     */\n    function _hashFeeRate(FeeRate memory feeRate) private view returns (bytes32) {\n        return keccak256(abi.encode(_FEE_RATE_TYPEHASH, feeRate.recipient, feeRate.rate));\n    }\n\n    /**\n     * @notice Create an EIP712 hash to sign\n     * @param hash Primary EIP712 object hash\n     * @return EIP712 hash\n     */\n    function _hashToSign(bytes32 hash) private view returns (bytes32) {\n        return keccak256(bytes.concat(bytes2(0x1901), _DOMAIN_SEPARATOR, hash));\n    }\n\n    /**\n     * @notice Generate all EIP712 Typehashes\n     */\n    function _createTypehashes(\n        address proxy\n    )\n        private\n        view\n        returns (bytes32 feeRateTypehash, bytes32 orderTypehash, bytes32 domainSeparator)\n    {\n        bytes32 eip712DomainTypehash = keccak256(\n            bytes.concat(\n                "EIP712Domain(",\n                "string name,",\n                "string version,",\n                "uint256 chainId,",\n                "address verifyingContract",\n                ")"\n            )\n        );\n\n        bytes memory feeRateTypestring = "FeeRate(address recipient,uint16 rate)";\n\n        orderTypehash = keccak256(\n            bytes.concat(\n                "Order(",\n                "address trader,",\n                "address collection,",\n                "bytes32 listingsRoot,",\n                "uint256 numberOfListings,",\n                "uint256 expirationTime,",\n                "uint8 assetType,",\n                "FeeRate makerFee,",\n                "uint256 salt,",\n                "uint8 orderType,",\n                "uint256 nonce",\n                ")",\n                feeRateTypestring\n            )\n        );\n\n        feeRateTypehash = keccak256(feeRateTypestring);\n\n        domainSeparator = _hashDomain(\n            eip712DomainTypehash,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION)),\n            proxy\n        );\n    }\n\n    /**\n     * @notice Create an EIP712 domain separator\n     * @param eip712DomainTypehash Typehash of the EIP712Domain struct\n     * @param nameHash Hash of the contract name\n     * @param versionHash Hash of the version string\n     * @param proxy Address of the proxy this implementation will be behind\n     * @return EIP712Domain hash\n     */\n    function _hashDomain(\n        bytes32 eip712DomainTypehash,\n        bytes32 nameHash,\n        bytes32 versionHash,\n        address proxy\n    ) private view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(eip712DomainTypehash, nameHash, versionHash, block.chainid, proxy)\n            );\n    }\n\n    /**\n     * @notice Verify EIP712 signature\n     * @param signer Address of the alleged signer\n     * @param hash EIP712 hash\n     * @param signatures Packed bytes array of order signatures\n     * @param index Index of the signature to verify\n     * @return authorized Validity of the signature\n     */\n    function _verifyAuthorization(\n        address signer,\n        bytes32 hash,\n        bytes memory signatures,\n        uint256 index\n    ) internal view returns (bool authorized) {\n        bytes32 hashToSign = _hashToSign(hash);\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            let signatureOffset := add(add(signatures, One_word), mul(Signatures_size, index))\n            r := mload(signatureOffset)\n            s := mload(add(signatureOffset, Signatures_s_offset))\n            v := shr(Bytes1_shift, mload(add(signatureOffset, Signatures_v_offset)))\n        }\n        authorized = _verify(signer, hashToSign, v, r, s);\n    }\n\n    modifier verifyOracleSignature(bytes32 hash, bytes calldata oracleSignature) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        uint32 blockNumber;\n        address oracle;\n        assembly {\n            let signatureOffset := oracleSignature.offset\n            r := calldataload(signatureOffset)\n            s := calldataload(add(signatureOffset, OracleSignatures_s_offset))\n            v := shr(Bytes1_shift, calldataload(add(signatureOffset, OracleSignatures_v_offset)))\n            blockNumber := shr(\n                Bytes4_shift,\n                calldataload(add(signatureOffset, OracleSignatures_blockNumber_offset))\n            )\n            oracle := shr(\n                Bytes20_shift,\n                calldataload(add(signatureOffset, OracleSignatures_oracle_offset))\n            )\n        }\n        if (blockNumber + blockRange < block.number) {\n            revert ExpiredOracleSignature();\n        }\n        if (oracles[oracle] == 0) {\n            revert UnauthorizedOracle();\n        }\n        if (!_verify(oracle, keccak256(abi.encodePacked(hash, blockNumber)), v, r, s)) {\n            revert InvalidOracleSignature();\n        }\n        _;\n    }\n\n    /**\n     * @notice Verify signature of digest\n     * @param signer Address of expected signer\n     * @param digest Signature digest\n     * @param v v parameter\n     * @param r r parameter\n     * @param s s parameter\n     */\n    function _verify(\n        address signer,\n        bytes32 digest,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) private pure returns (bool valid) {\n        address recoveredSigner = ecrecover(digest, v, r, s);\n        if (recoveredSigner != address(0) && recoveredSigner == signer) {\n            valid = true;\n        }\n    }\n\n    uint256[47] private __gap;\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Signatures.hashTakeBid', 'start_line': 2589, 'end_line': 2591, 'offset_start': 96120, 'offset_end': 96258, 'content': 'function hashTakeBid(TakeBid memory inputs, address _caller) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }', 'contract_name': 'Signatures', 'contract_code': '{\n    string private constant _NAME = "Blur Exchange";\n    string private constant _VERSION = "1.0";\n\n    bytes32 private immutable _FEE_RATE_TYPEHASH;\n    bytes32 private immutable _ORDER_TYPEHASH;\n    bytes32 private immutable _DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public oracles;\n    mapping(address => uint256) public nonces;\n    uint256 public blockRange;\n\n    constructor(address proxy) {\n        (_FEE_RATE_TYPEHASH, _ORDER_TYPEHASH, _DOMAIN_SEPARATOR) = _createTypehashes(proxy);\n    }\n\n    /**\n     * @notice Verify the domain separator produced during deployment of the implementation matches that of the proxy\n     */\n    function verifyDomain() public view {\n        bytes32 eip712DomainTypehash = keccak256(\n            bytes.concat(\n                "EIP712Domain(",\n                "string name,",\n                "string version,",\n                "uint256 chainId,",\n                "address verifyingContract",\n                ")"\n            )\n        );\n\n        bytes32 domainSeparator = _hashDomain(\n            eip712DomainTypehash,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION)),\n            address(this)\n        );\n        if (_DOMAIN_SEPARATOR != domainSeparator) {\n            revert InvalidDomain();\n        }\n    }\n\n    /**\n     * @notice Return version and domain separator\n     */\n    function information() external view returns (string memory version, bytes32 domainSeparator) {\n        version = _VERSION;\n        domainSeparator = _DOMAIN_SEPARATOR;\n    }\n\n    /**\n     * @notice Create a hash of TakeAsk calldata with an approved caller\n     * @param inputs TakeAsk inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeAsk(TakeAsk memory inputs, address _caller) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeBid calldata with an approved caller\n     * @param inputs TakeBid inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeBid(TakeBid memory inputs, address _caller) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeAskSingle calldata with an approved caller\n     * @param inputs TakeAskSingle inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeAskSingle(\n        TakeAskSingle memory inputs,\n        address _caller\n    ) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeBidSingle calldata with an approved caller\n     * @param inputs TakeBidSingle inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeBidSingle(\n        TakeBidSingle memory inputs,\n        address _caller\n    ) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create an EIP712 hash of an Order\n     * @dev Includes two additional parameters not in the struct (orderType, nonce)\n     * @param order Order to hash\n     * @param orderType OrderType of the Order\n     * @return Order EIP712 hash\n     */\n    function hashOrder(Order memory order, OrderType orderType) public view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    _ORDER_TYPEHASH,\n                    order.trader,\n                    order.collection,\n                    order.listingsRoot,\n                    order.numberOfListings,\n                    order.expirationTime,\n                    order.assetType,\n                    _hashFeeRate(order.makerFee),\n                    order.salt,\n                    orderType,\n                    nonces[order.trader]\n                )\n            );\n    }\n\n    /**\n     * @notice Create a hash of a Listing struct\n     * @param listing Listing to hash\n     * @return Listing hash\n     */\n    function hashListing(Listing memory listing) public pure returns (bytes32) {\n        return keccak256(abi.encode(listing.index, listing.tokenId, listing.amount, listing.price));\n    }\n\n    /**\n     * @notice Create a hash of calldata with an approved caller\n     * @param _caller Address approved to execute the calldata\n     * @return hash Calldata hash\n     */\n    function _hashCalldata(address _caller) internal pure returns (bytes32 hash) {\n        assembly {\n            let nextPointer := mload(0x40)\n            let size := add(sub(nextPointer, 0x80), 0x20)\n            mstore(nextPointer, _caller)\n            hash := keccak256(0x80, size)\n        }\n    }\n\n    /**\n     * @notice Create an EIP712 hash of a FeeRate struct\n     * @param feeRate FeeRate to hash\n     * @return FeeRate EIP712 hash\n     */\n    function _hashFeeRate(FeeRate memory feeRate) private view returns (bytes32) {\n        return keccak256(abi.encode(_FEE_RATE_TYPEHASH, feeRate.recipient, feeRate.rate));\n    }\n\n    /**\n     * @notice Create an EIP712 hash to sign\n     * @param hash Primary EIP712 object hash\n     * @return EIP712 hash\n     */\n    function _hashToSign(bytes32 hash) private view returns (bytes32) {\n        return keccak256(bytes.concat(bytes2(0x1901), _DOMAIN_SEPARATOR, hash));\n    }\n\n    /**\n     * @notice Generate all EIP712 Typehashes\n     */\n    function _createTypehashes(\n        address proxy\n    )\n        private\n        view\n        returns (bytes32 feeRateTypehash, bytes32 orderTypehash, bytes32 domainSeparator)\n    {\n        bytes32 eip712DomainTypehash = keccak256(\n            bytes.concat(\n                "EIP712Domain(",\n                "string name,",\n                "string version,",\n                "uint256 chainId,",\n                "address verifyingContract",\n                ")"\n            )\n        );\n\n        bytes memory feeRateTypestring = "FeeRate(address recipient,uint16 rate)";\n\n        orderTypehash = keccak256(\n            bytes.concat(\n                "Order(",\n                "address trader,",\n                "address collection,",\n                "bytes32 listingsRoot,",\n                "uint256 numberOfListings,",\n                "uint256 expirationTime,",\n                "uint8 assetType,",\n                "FeeRate makerFee,",\n                "uint256 salt,",\n                "uint8 orderType,",\n                "uint256 nonce",\n                ")",\n                feeRateTypestring\n            )\n        );\n\n        feeRateTypehash = keccak256(feeRateTypestring);\n\n        domainSeparator = _hashDomain(\n            eip712DomainTypehash,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION)),\n            proxy\n        );\n    }\n\n    /**\n     * @notice Create an EIP712 domain separator\n     * @param eip712DomainTypehash Typehash of the EIP712Domain struct\n     * @param nameHash Hash of the contract name\n     * @param versionHash Hash of the version string\n     * @param proxy Address of the proxy this implementation will be behind\n     * @return EIP712Domain hash\n     */\n    function _hashDomain(\n        bytes32 eip712DomainTypehash,\n        bytes32 nameHash,\n        bytes32 versionHash,\n        address proxy\n    ) private view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(eip712DomainTypehash, nameHash, versionHash, block.chainid, proxy)\n            );\n    }\n\n    /**\n     * @notice Verify EIP712 signature\n     * @param signer Address of the alleged signer\n     * @param hash EIP712 hash\n     * @param signatures Packed bytes array of order signatures\n     * @param index Index of the signature to verify\n     * @return authorized Validity of the signature\n     */\n    function _verifyAuthorization(\n        address signer,\n        bytes32 hash,\n        bytes memory signatures,\n        uint256 index\n    ) internal view returns (bool authorized) {\n        bytes32 hashToSign = _hashToSign(hash);\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            let signatureOffset := add(add(signatures, One_word), mul(Signatures_size, index))\n            r := mload(signatureOffset)\n            s := mload(add(signatureOffset, Signatures_s_offset))\n            v := shr(Bytes1_shift, mload(add(signatureOffset, Signatures_v_offset)))\n        }\n        authorized = _verify(signer, hashToSign, v, r, s);\n    }\n\n    modifier verifyOracleSignature(bytes32 hash, bytes calldata oracleSignature) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        uint32 blockNumber;\n        address oracle;\n        assembly {\n            let signatureOffset := oracleSignature.offset\n            r := calldataload(signatureOffset)\n            s := calldataload(add(signatureOffset, OracleSignatures_s_offset))\n            v := shr(Bytes1_shift, calldataload(add(signatureOffset, OracleSignatures_v_offset)))\n            blockNumber := shr(\n                Bytes4_shift,\n                calldataload(add(signatureOffset, OracleSignatures_blockNumber_offset))\n            )\n            oracle := shr(\n                Bytes20_shift,\n                calldataload(add(signatureOffset, OracleSignatures_oracle_offset))\n            )\n        }\n        if (blockNumber + blockRange < block.number) {\n            revert ExpiredOracleSignature();\n        }\n        if (oracles[oracle] == 0) {\n            revert UnauthorizedOracle();\n        }\n        if (!_verify(oracle, keccak256(abi.encodePacked(hash, blockNumber)), v, r, s)) {\n            revert InvalidOracleSignature();\n        }\n        _;\n    }\n\n    /**\n     * @notice Verify signature of digest\n     * @param signer Address of expected signer\n     * @param digest Signature digest\n     * @param v v parameter\n     * @param r r parameter\n     * @param s s parameter\n     */\n    function _verify(\n        address signer,\n        bytes32 digest,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) private pure returns (bool valid) {\n        address recoveredSigner = ecrecover(digest, v, r, s);\n        if (recoveredSigner != address(0) && recoveredSigner == signer) {\n            valid = true;\n        }\n    }\n\n    uint256[47] private __gap;\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Signatures.hashTakeAskSingle', 'start_line': 2599, 'end_line': 2604, 'offset_start': 96494, 'offset_end': 96666, 'content': 'function hashTakeAskSingle(\n        TakeAskSingle memory inputs,\n        address _caller\n    ) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }', 'contract_name': 'Signatures', 'contract_code': '{\n    string private constant _NAME = "Blur Exchange";\n    string private constant _VERSION = "1.0";\n\n    bytes32 private immutable _FEE_RATE_TYPEHASH;\n    bytes32 private immutable _ORDER_TYPEHASH;\n    bytes32 private immutable _DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public oracles;\n    mapping(address => uint256) public nonces;\n    uint256 public blockRange;\n\n    constructor(address proxy) {\n        (_FEE_RATE_TYPEHASH, _ORDER_TYPEHASH, _DOMAIN_SEPARATOR) = _createTypehashes(proxy);\n    }\n\n    /**\n     * @notice Verify the domain separator produced during deployment of the implementation matches that of the proxy\n     */\n    function verifyDomain() public view {\n        bytes32 eip712DomainTypehash = keccak256(\n            bytes.concat(\n                "EIP712Domain(",\n                "string name,",\n                "string version,",\n                "uint256 chainId,",\n                "address verifyingContract",\n                ")"\n            )\n        );\n\n        bytes32 domainSeparator = _hashDomain(\n            eip712DomainTypehash,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION)),\n            address(this)\n        );\n        if (_DOMAIN_SEPARATOR != domainSeparator) {\n            revert InvalidDomain();\n        }\n    }\n\n    /**\n     * @notice Return version and domain separator\n     */\n    function information() external view returns (string memory version, bytes32 domainSeparator) {\n        version = _VERSION;\n        domainSeparator = _DOMAIN_SEPARATOR;\n    }\n\n    /**\n     * @notice Create a hash of TakeAsk calldata with an approved caller\n     * @param inputs TakeAsk inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeAsk(TakeAsk memory inputs, address _caller) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeBid calldata with an approved caller\n     * @param inputs TakeBid inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeBid(TakeBid memory inputs, address _caller) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeAskSingle calldata with an approved caller\n     * @param inputs TakeAskSingle inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeAskSingle(\n        TakeAskSingle memory inputs,\n        address _caller\n    ) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeBidSingle calldata with an approved caller\n     * @param inputs TakeBidSingle inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeBidSingle(\n        TakeBidSingle memory inputs,\n        address _caller\n    ) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create an EIP712 hash of an Order\n     * @dev Includes two additional parameters not in the struct (orderType, nonce)\n     * @param order Order to hash\n     * @param orderType OrderType of the Order\n     * @return Order EIP712 hash\n     */\n    function hashOrder(Order memory order, OrderType orderType) public view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    _ORDER_TYPEHASH,\n                    order.trader,\n                    order.collection,\n                    order.listingsRoot,\n                    order.numberOfListings,\n                    order.expirationTime,\n                    order.assetType,\n                    _hashFeeRate(order.makerFee),\n                    order.salt,\n                    orderType,\n                    nonces[order.trader]\n                )\n            );\n    }\n\n    /**\n     * @notice Create a hash of a Listing struct\n     * @param listing Listing to hash\n     * @return Listing hash\n     */\n    function hashListing(Listing memory listing) public pure returns (bytes32) {\n        return keccak256(abi.encode(listing.index, listing.tokenId, listing.amount, listing.price));\n    }\n\n    /**\n     * @notice Create a hash of calldata with an approved caller\n     * @param _caller Address approved to execute the calldata\n     * @return hash Calldata hash\n     */\n    function _hashCalldata(address _caller) internal pure returns (bytes32 hash) {\n        assembly {\n            let nextPointer := mload(0x40)\n            let size := add(sub(nextPointer, 0x80), 0x20)\n            mstore(nextPointer, _caller)\n            hash := keccak256(0x80, size)\n        }\n    }\n\n    /**\n     * @notice Create an EIP712 hash of a FeeRate struct\n     * @param feeRate FeeRate to hash\n     * @return FeeRate EIP712 hash\n     */\n    function _hashFeeRate(FeeRate memory feeRate) private view returns (bytes32) {\n        return keccak256(abi.encode(_FEE_RATE_TYPEHASH, feeRate.recipient, feeRate.rate));\n    }\n\n    /**\n     * @notice Create an EIP712 hash to sign\n     * @param hash Primary EIP712 object hash\n     * @return EIP712 hash\n     */\n    function _hashToSign(bytes32 hash) private view returns (bytes32) {\n        return keccak256(bytes.concat(bytes2(0x1901), _DOMAIN_SEPARATOR, hash));\n    }\n\n    /**\n     * @notice Generate all EIP712 Typehashes\n     */\n    function _createTypehashes(\n        address proxy\n    )\n        private\n        view\n        returns (bytes32 feeRateTypehash, bytes32 orderTypehash, bytes32 domainSeparator)\n    {\n        bytes32 eip712DomainTypehash = keccak256(\n            bytes.concat(\n                "EIP712Domain(",\n                "string name,",\n                "string version,",\n                "uint256 chainId,",\n                "address verifyingContract",\n                ")"\n            )\n        );\n\n        bytes memory feeRateTypestring = "FeeRate(address recipient,uint16 rate)";\n\n        orderTypehash = keccak256(\n            bytes.concat(\n                "Order(",\n                "address trader,",\n                "address collection,",\n                "bytes32 listingsRoot,",\n                "uint256 numberOfListings,",\n                "uint256 expirationTime,",\n                "uint8 assetType,",\n                "FeeRate makerFee,",\n                "uint256 salt,",\n                "uint8 orderType,",\n                "uint256 nonce",\n                ")",\n                feeRateTypestring\n            )\n        );\n\n        feeRateTypehash = keccak256(feeRateTypestring);\n\n        domainSeparator = _hashDomain(\n            eip712DomainTypehash,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION)),\n            proxy\n        );\n    }\n\n    /**\n     * @notice Create an EIP712 domain separator\n     * @param eip712DomainTypehash Typehash of the EIP712Domain struct\n     * @param nameHash Hash of the contract name\n     * @param versionHash Hash of the version string\n     * @param proxy Address of the proxy this implementation will be behind\n     * @return EIP712Domain hash\n     */\n    function _hashDomain(\n        bytes32 eip712DomainTypehash,\n        bytes32 nameHash,\n        bytes32 versionHash,\n        address proxy\n    ) private view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(eip712DomainTypehash, nameHash, versionHash, block.chainid, proxy)\n            );\n    }\n\n    /**\n     * @notice Verify EIP712 signature\n     * @param signer Address of the alleged signer\n     * @param hash EIP712 hash\n     * @param signatures Packed bytes array of order signatures\n     * @param index Index of the signature to verify\n     * @return authorized Validity of the signature\n     */\n    function _verifyAuthorization(\n        address signer,\n        bytes32 hash,\n        bytes memory signatures,\n        uint256 index\n    ) internal view returns (bool authorized) {\n        bytes32 hashToSign = _hashToSign(hash);\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            let signatureOffset := add(add(signatures, One_word), mul(Signatures_size, index))\n            r := mload(signatureOffset)\n            s := mload(add(signatureOffset, Signatures_s_offset))\n            v := shr(Bytes1_shift, mload(add(signatureOffset, Signatures_v_offset)))\n        }\n        authorized = _verify(signer, hashToSign, v, r, s);\n    }\n\n    modifier verifyOracleSignature(bytes32 hash, bytes calldata oracleSignature) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        uint32 blockNumber;\n        address oracle;\n        assembly {\n            let signatureOffset := oracleSignature.offset\n            r := calldataload(signatureOffset)\n            s := calldataload(add(signatureOffset, OracleSignatures_s_offset))\n            v := shr(Bytes1_shift, calldataload(add(signatureOffset, OracleSignatures_v_offset)))\n            blockNumber := shr(\n                Bytes4_shift,\n                calldataload(add(signatureOffset, OracleSignatures_blockNumber_offset))\n            )\n            oracle := shr(\n                Bytes20_shift,\n                calldataload(add(signatureOffset, OracleSignatures_oracle_offset))\n            )\n        }\n        if (blockNumber + blockRange < block.number) {\n            revert ExpiredOracleSignature();\n        }\n        if (oracles[oracle] == 0) {\n            revert UnauthorizedOracle();\n        }\n        if (!_verify(oracle, keccak256(abi.encodePacked(hash, blockNumber)), v, r, s)) {\n            revert InvalidOracleSignature();\n        }\n        _;\n    }\n\n    /**\n     * @notice Verify signature of digest\n     * @param signer Address of expected signer\n     * @param digest Signature digest\n     * @param v v parameter\n     * @param r r parameter\n     * @param s s parameter\n     */\n    function _verify(\n        address signer,\n        bytes32 digest,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) private pure returns (bool valid) {\n        address recoveredSigner = ecrecover(digest, v, r, s);\n        if (recoveredSigner != address(0) && recoveredSigner == signer) {\n            valid = true;\n        }\n    }\n\n    uint256[47] private __gap;\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Signatures.hashTakeBidSingle', 'start_line': 2612, 'end_line': 2617, 'offset_start': 96902, 'offset_end': 97074, 'content': 'function hashTakeBidSingle(\n        TakeBidSingle memory inputs,\n        address _caller\n    ) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }', 'contract_name': 'Signatures', 'contract_code': '{\n    string private constant _NAME = "Blur Exchange";\n    string private constant _VERSION = "1.0";\n\n    bytes32 private immutable _FEE_RATE_TYPEHASH;\n    bytes32 private immutable _ORDER_TYPEHASH;\n    bytes32 private immutable _DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public oracles;\n    mapping(address => uint256) public nonces;\n    uint256 public blockRange;\n\n    constructor(address proxy) {\n        (_FEE_RATE_TYPEHASH, _ORDER_TYPEHASH, _DOMAIN_SEPARATOR) = _createTypehashes(proxy);\n    }\n\n    /**\n     * @notice Verify the domain separator produced during deployment of the implementation matches that of the proxy\n     */\n    function verifyDomain() public view {\n        bytes32 eip712DomainTypehash = keccak256(\n            bytes.concat(\n                "EIP712Domain(",\n                "string name,",\n                "string version,",\n                "uint256 chainId,",\n                "address verifyingContract",\n                ")"\n            )\n        );\n\n        bytes32 domainSeparator = _hashDomain(\n            eip712DomainTypehash,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION)),\n            address(this)\n        );\n        if (_DOMAIN_SEPARATOR != domainSeparator) {\n            revert InvalidDomain();\n        }\n    }\n\n    /**\n     * @notice Return version and domain separator\n     */\n    function information() external view returns (string memory version, bytes32 domainSeparator) {\n        version = _VERSION;\n        domainSeparator = _DOMAIN_SEPARATOR;\n    }\n\n    /**\n     * @notice Create a hash of TakeAsk calldata with an approved caller\n     * @param inputs TakeAsk inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeAsk(TakeAsk memory inputs, address _caller) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeBid calldata with an approved caller\n     * @param inputs TakeBid inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeBid(TakeBid memory inputs, address _caller) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeAskSingle calldata with an approved caller\n     * @param inputs TakeAskSingle inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeAskSingle(\n        TakeAskSingle memory inputs,\n        address _caller\n    ) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeBidSingle calldata with an approved caller\n     * @param inputs TakeBidSingle inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeBidSingle(\n        TakeBidSingle memory inputs,\n        address _caller\n    ) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create an EIP712 hash of an Order\n     * @dev Includes two additional parameters not in the struct (orderType, nonce)\n     * @param order Order to hash\n     * @param orderType OrderType of the Order\n     * @return Order EIP712 hash\n     */\n    function hashOrder(Order memory order, OrderType orderType) public view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    _ORDER_TYPEHASH,\n                    order.trader,\n                    order.collection,\n                    order.listingsRoot,\n                    order.numberOfListings,\n                    order.expirationTime,\n                    order.assetType,\n                    _hashFeeRate(order.makerFee),\n                    order.salt,\n                    orderType,\n                    nonces[order.trader]\n                )\n            );\n    }\n\n    /**\n     * @notice Create a hash of a Listing struct\n     * @param listing Listing to hash\n     * @return Listing hash\n     */\n    function hashListing(Listing memory listing) public pure returns (bytes32) {\n        return keccak256(abi.encode(listing.index, listing.tokenId, listing.amount, listing.price));\n    }\n\n    /**\n     * @notice Create a hash of calldata with an approved caller\n     * @param _caller Address approved to execute the calldata\n     * @return hash Calldata hash\n     */\n    function _hashCalldata(address _caller) internal pure returns (bytes32 hash) {\n        assembly {\n            let nextPointer := mload(0x40)\n            let size := add(sub(nextPointer, 0x80), 0x20)\n            mstore(nextPointer, _caller)\n            hash := keccak256(0x80, size)\n        }\n    }\n\n    /**\n     * @notice Create an EIP712 hash of a FeeRate struct\n     * @param feeRate FeeRate to hash\n     * @return FeeRate EIP712 hash\n     */\n    function _hashFeeRate(FeeRate memory feeRate) private view returns (bytes32) {\n        return keccak256(abi.encode(_FEE_RATE_TYPEHASH, feeRate.recipient, feeRate.rate));\n    }\n\n    /**\n     * @notice Create an EIP712 hash to sign\n     * @param hash Primary EIP712 object hash\n     * @return EIP712 hash\n     */\n    function _hashToSign(bytes32 hash) private view returns (bytes32) {\n        return keccak256(bytes.concat(bytes2(0x1901), _DOMAIN_SEPARATOR, hash));\n    }\n\n    /**\n     * @notice Generate all EIP712 Typehashes\n     */\n    function _createTypehashes(\n        address proxy\n    )\n        private\n        view\n        returns (bytes32 feeRateTypehash, bytes32 orderTypehash, bytes32 domainSeparator)\n    {\n        bytes32 eip712DomainTypehash = keccak256(\n            bytes.concat(\n                "EIP712Domain(",\n                "string name,",\n                "string version,",\n                "uint256 chainId,",\n                "address verifyingContract",\n                ")"\n            )\n        );\n\n        bytes memory feeRateTypestring = "FeeRate(address recipient,uint16 rate)";\n\n        orderTypehash = keccak256(\n            bytes.concat(\n                "Order(",\n                "address trader,",\n                "address collection,",\n                "bytes32 listingsRoot,",\n                "uint256 numberOfListings,",\n                "uint256 expirationTime,",\n                "uint8 assetType,",\n                "FeeRate makerFee,",\n                "uint256 salt,",\n                "uint8 orderType,",\n                "uint256 nonce",\n                ")",\n                feeRateTypestring\n            )\n        );\n\n        feeRateTypehash = keccak256(feeRateTypestring);\n\n        domainSeparator = _hashDomain(\n            eip712DomainTypehash,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION)),\n            proxy\n        );\n    }\n\n    /**\n     * @notice Create an EIP712 domain separator\n     * @param eip712DomainTypehash Typehash of the EIP712Domain struct\n     * @param nameHash Hash of the contract name\n     * @param versionHash Hash of the version string\n     * @param proxy Address of the proxy this implementation will be behind\n     * @return EIP712Domain hash\n     */\n    function _hashDomain(\n        bytes32 eip712DomainTypehash,\n        bytes32 nameHash,\n        bytes32 versionHash,\n        address proxy\n    ) private view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(eip712DomainTypehash, nameHash, versionHash, block.chainid, proxy)\n            );\n    }\n\n    /**\n     * @notice Verify EIP712 signature\n     * @param signer Address of the alleged signer\n     * @param hash EIP712 hash\n     * @param signatures Packed bytes array of order signatures\n     * @param index Index of the signature to verify\n     * @return authorized Validity of the signature\n     */\n    function _verifyAuthorization(\n        address signer,\n        bytes32 hash,\n        bytes memory signatures,\n        uint256 index\n    ) internal view returns (bool authorized) {\n        bytes32 hashToSign = _hashToSign(hash);\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            let signatureOffset := add(add(signatures, One_word), mul(Signatures_size, index))\n            r := mload(signatureOffset)\n            s := mload(add(signatureOffset, Signatures_s_offset))\n            v := shr(Bytes1_shift, mload(add(signatureOffset, Signatures_v_offset)))\n        }\n        authorized = _verify(signer, hashToSign, v, r, s);\n    }\n\n    modifier verifyOracleSignature(bytes32 hash, bytes calldata oracleSignature) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        uint32 blockNumber;\n        address oracle;\n        assembly {\n            let signatureOffset := oracleSignature.offset\n            r := calldataload(signatureOffset)\n            s := calldataload(add(signatureOffset, OracleSignatures_s_offset))\n            v := shr(Bytes1_shift, calldataload(add(signatureOffset, OracleSignatures_v_offset)))\n            blockNumber := shr(\n                Bytes4_shift,\n                calldataload(add(signatureOffset, OracleSignatures_blockNumber_offset))\n            )\n            oracle := shr(\n                Bytes20_shift,\n                calldataload(add(signatureOffset, OracleSignatures_oracle_offset))\n            )\n        }\n        if (blockNumber + blockRange < block.number) {\n            revert ExpiredOracleSignature();\n        }\n        if (oracles[oracle] == 0) {\n            revert UnauthorizedOracle();\n        }\n        if (!_verify(oracle, keccak256(abi.encodePacked(hash, blockNumber)), v, r, s)) {\n            revert InvalidOracleSignature();\n        }\n        _;\n    }\n\n    /**\n     * @notice Verify signature of digest\n     * @param signer Address of expected signer\n     * @param digest Signature digest\n     * @param v v parameter\n     * @param r r parameter\n     * @param s s parameter\n     */\n    function _verify(\n        address signer,\n        bytes32 digest,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) private pure returns (bool valid) {\n        address recoveredSigner = ecrecover(digest, v, r, s);\n        if (recoveredSigner != address(0) && recoveredSigner == signer) {\n            valid = true;\n        }\n    }\n\n    uint256[47] private __gap;\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Signatures.hashOrder', 'start_line': 2626, 'end_line': 2643, 'offset_start': 97344, 'offset_end': 97965, 'content': 'function hashOrder(Order memory order, OrderType orderType) public view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    _ORDER_TYPEHASH,\n                    order.trader,\n                    order.collection,\n                    order.listingsRoot,\n                    order.numberOfListings,\n                    order.expirationTime,\n                    order.assetType,\n                    _hashFeeRate(order.makerFee),\n                    order.salt,\n                    orderType,\n                    nonces[order.trader]\n                )\n            );\n    }', 'contract_name': 'Signatures', 'contract_code': '{\n    string private constant _NAME = "Blur Exchange";\n    string private constant _VERSION = "1.0";\n\n    bytes32 private immutable _FEE_RATE_TYPEHASH;\n    bytes32 private immutable _ORDER_TYPEHASH;\n    bytes32 private immutable _DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public oracles;\n    mapping(address => uint256) public nonces;\n    uint256 public blockRange;\n\n    constructor(address proxy) {\n        (_FEE_RATE_TYPEHASH, _ORDER_TYPEHASH, _DOMAIN_SEPARATOR) = _createTypehashes(proxy);\n    }\n\n    /**\n     * @notice Verify the domain separator produced during deployment of the implementation matches that of the proxy\n     */\n    function verifyDomain() public view {\n        bytes32 eip712DomainTypehash = keccak256(\n            bytes.concat(\n                "EIP712Domain(",\n                "string name,",\n                "string version,",\n                "uint256 chainId,",\n                "address verifyingContract",\n                ")"\n            )\n        );\n\n        bytes32 domainSeparator = _hashDomain(\n            eip712DomainTypehash,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION)),\n            address(this)\n        );\n        if (_DOMAIN_SEPARATOR != domainSeparator) {\n            revert InvalidDomain();\n        }\n    }\n\n    /**\n     * @notice Return version and domain separator\n     */\n    function information() external view returns (string memory version, bytes32 domainSeparator) {\n        version = _VERSION;\n        domainSeparator = _DOMAIN_SEPARATOR;\n    }\n\n    /**\n     * @notice Create a hash of TakeAsk calldata with an approved caller\n     * @param inputs TakeAsk inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeAsk(TakeAsk memory inputs, address _caller) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeBid calldata with an approved caller\n     * @param inputs TakeBid inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeBid(TakeBid memory inputs, address _caller) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeAskSingle calldata with an approved caller\n     * @param inputs TakeAskSingle inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeAskSingle(\n        TakeAskSingle memory inputs,\n        address _caller\n    ) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeBidSingle calldata with an approved caller\n     * @param inputs TakeBidSingle inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeBidSingle(\n        TakeBidSingle memory inputs,\n        address _caller\n    ) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create an EIP712 hash of an Order\n     * @dev Includes two additional parameters not in the struct (orderType, nonce)\n     * @param order Order to hash\n     * @param orderType OrderType of the Order\n     * @return Order EIP712 hash\n     */\n    function hashOrder(Order memory order, OrderType orderType) public view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    _ORDER_TYPEHASH,\n                    order.trader,\n                    order.collection,\n                    order.listingsRoot,\n                    order.numberOfListings,\n                    order.expirationTime,\n                    order.assetType,\n                    _hashFeeRate(order.makerFee),\n                    order.salt,\n                    orderType,\n                    nonces[order.trader]\n                )\n            );\n    }\n\n    /**\n     * @notice Create a hash of a Listing struct\n     * @param listing Listing to hash\n     * @return Listing hash\n     */\n    function hashListing(Listing memory listing) public pure returns (bytes32) {\n        return keccak256(abi.encode(listing.index, listing.tokenId, listing.amount, listing.price));\n    }\n\n    /**\n     * @notice Create a hash of calldata with an approved caller\n     * @param _caller Address approved to execute the calldata\n     * @return hash Calldata hash\n     */\n    function _hashCalldata(address _caller) internal pure returns (bytes32 hash) {\n        assembly {\n            let nextPointer := mload(0x40)\n            let size := add(sub(nextPointer, 0x80), 0x20)\n            mstore(nextPointer, _caller)\n            hash := keccak256(0x80, size)\n        }\n    }\n\n    /**\n     * @notice Create an EIP712 hash of a FeeRate struct\n     * @param feeRate FeeRate to hash\n     * @return FeeRate EIP712 hash\n     */\n    function _hashFeeRate(FeeRate memory feeRate) private view returns (bytes32) {\n        return keccak256(abi.encode(_FEE_RATE_TYPEHASH, feeRate.recipient, feeRate.rate));\n    }\n\n    /**\n     * @notice Create an EIP712 hash to sign\n     * @param hash Primary EIP712 object hash\n     * @return EIP712 hash\n     */\n    function _hashToSign(bytes32 hash) private view returns (bytes32) {\n        return keccak256(bytes.concat(bytes2(0x1901), _DOMAIN_SEPARATOR, hash));\n    }\n\n    /**\n     * @notice Generate all EIP712 Typehashes\n     */\n    function _createTypehashes(\n        address proxy\n    )\n        private\n        view\n        returns (bytes32 feeRateTypehash, bytes32 orderTypehash, bytes32 domainSeparator)\n    {\n        bytes32 eip712DomainTypehash = keccak256(\n            bytes.concat(\n                "EIP712Domain(",\n                "string name,",\n                "string version,",\n                "uint256 chainId,",\n                "address verifyingContract",\n                ")"\n            )\n        );\n\n        bytes memory feeRateTypestring = "FeeRate(address recipient,uint16 rate)";\n\n        orderTypehash = keccak256(\n            bytes.concat(\n                "Order(",\n                "address trader,",\n                "address collection,",\n                "bytes32 listingsRoot,",\n                "uint256 numberOfListings,",\n                "uint256 expirationTime,",\n                "uint8 assetType,",\n                "FeeRate makerFee,",\n                "uint256 salt,",\n                "uint8 orderType,",\n                "uint256 nonce",\n                ")",\n                feeRateTypestring\n            )\n        );\n\n        feeRateTypehash = keccak256(feeRateTypestring);\n\n        domainSeparator = _hashDomain(\n            eip712DomainTypehash,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION)),\n            proxy\n        );\n    }\n\n    /**\n     * @notice Create an EIP712 domain separator\n     * @param eip712DomainTypehash Typehash of the EIP712Domain struct\n     * @param nameHash Hash of the contract name\n     * @param versionHash Hash of the version string\n     * @param proxy Address of the proxy this implementation will be behind\n     * @return EIP712Domain hash\n     */\n    function _hashDomain(\n        bytes32 eip712DomainTypehash,\n        bytes32 nameHash,\n        bytes32 versionHash,\n        address proxy\n    ) private view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(eip712DomainTypehash, nameHash, versionHash, block.chainid, proxy)\n            );\n    }\n\n    /**\n     * @notice Verify EIP712 signature\n     * @param signer Address of the alleged signer\n     * @param hash EIP712 hash\n     * @param signatures Packed bytes array of order signatures\n     * @param index Index of the signature to verify\n     * @return authorized Validity of the signature\n     */\n    function _verifyAuthorization(\n        address signer,\n        bytes32 hash,\n        bytes memory signatures,\n        uint256 index\n    ) internal view returns (bool authorized) {\n        bytes32 hashToSign = _hashToSign(hash);\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            let signatureOffset := add(add(signatures, One_word), mul(Signatures_size, index))\n            r := mload(signatureOffset)\n            s := mload(add(signatureOffset, Signatures_s_offset))\n            v := shr(Bytes1_shift, mload(add(signatureOffset, Signatures_v_offset)))\n        }\n        authorized = _verify(signer, hashToSign, v, r, s);\n    }\n\n    modifier verifyOracleSignature(bytes32 hash, bytes calldata oracleSignature) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        uint32 blockNumber;\n        address oracle;\n        assembly {\n            let signatureOffset := oracleSignature.offset\n            r := calldataload(signatureOffset)\n            s := calldataload(add(signatureOffset, OracleSignatures_s_offset))\n            v := shr(Bytes1_shift, calldataload(add(signatureOffset, OracleSignatures_v_offset)))\n            blockNumber := shr(\n                Bytes4_shift,\n                calldataload(add(signatureOffset, OracleSignatures_blockNumber_offset))\n            )\n            oracle := shr(\n                Bytes20_shift,\n                calldataload(add(signatureOffset, OracleSignatures_oracle_offset))\n            )\n        }\n        if (blockNumber + blockRange < block.number) {\n            revert ExpiredOracleSignature();\n        }\n        if (oracles[oracle] == 0) {\n            revert UnauthorizedOracle();\n        }\n        if (!_verify(oracle, keccak256(abi.encodePacked(hash, blockNumber)), v, r, s)) {\n            revert InvalidOracleSignature();\n        }\n        _;\n    }\n\n    /**\n     * @notice Verify signature of digest\n     * @param signer Address of expected signer\n     * @param digest Signature digest\n     * @param v v parameter\n     * @param r r parameter\n     * @param s s parameter\n     */\n    function _verify(\n        address signer,\n        bytes32 digest,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) private pure returns (bool valid) {\n        address recoveredSigner = ecrecover(digest, v, r, s);\n        if (recoveredSigner != address(0) && recoveredSigner == signer) {\n            valid = true;\n        }\n    }\n\n    uint256[47] private __gap;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Signatures.hashListing', 'start_line': 2650, 'end_line': 2652, 'offset_start': 98103, 'offset_end': 98285, 'content': 'function hashListing(Listing memory listing) public pure returns (bytes32) {\n        return keccak256(abi.encode(listing.index, listing.tokenId, listing.amount, listing.price));\n    }', 'contract_name': 'Signatures', 'contract_code': '{\n    string private constant _NAME = "Blur Exchange";\n    string private constant _VERSION = "1.0";\n\n    bytes32 private immutable _FEE_RATE_TYPEHASH;\n    bytes32 private immutable _ORDER_TYPEHASH;\n    bytes32 private immutable _DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public oracles;\n    mapping(address => uint256) public nonces;\n    uint256 public blockRange;\n\n    constructor(address proxy) {\n        (_FEE_RATE_TYPEHASH, _ORDER_TYPEHASH, _DOMAIN_SEPARATOR) = _createTypehashes(proxy);\n    }\n\n    /**\n     * @notice Verify the domain separator produced during deployment of the implementation matches that of the proxy\n     */\n    function verifyDomain() public view {\n        bytes32 eip712DomainTypehash = keccak256(\n            bytes.concat(\n                "EIP712Domain(",\n                "string name,",\n                "string version,",\n                "uint256 chainId,",\n                "address verifyingContract",\n                ")"\n            )\n        );\n\n        bytes32 domainSeparator = _hashDomain(\n            eip712DomainTypehash,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION)),\n            address(this)\n        );\n        if (_DOMAIN_SEPARATOR != domainSeparator) {\n            revert InvalidDomain();\n        }\n    }\n\n    /**\n     * @notice Return version and domain separator\n     */\n    function information() external view returns (string memory version, bytes32 domainSeparator) {\n        version = _VERSION;\n        domainSeparator = _DOMAIN_SEPARATOR;\n    }\n\n    /**\n     * @notice Create a hash of TakeAsk calldata with an approved caller\n     * @param inputs TakeAsk inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeAsk(TakeAsk memory inputs, address _caller) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeBid calldata with an approved caller\n     * @param inputs TakeBid inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeBid(TakeBid memory inputs, address _caller) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeAskSingle calldata with an approved caller\n     * @param inputs TakeAskSingle inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeAskSingle(\n        TakeAskSingle memory inputs,\n        address _caller\n    ) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeBidSingle calldata with an approved caller\n     * @param inputs TakeBidSingle inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeBidSingle(\n        TakeBidSingle memory inputs,\n        address _caller\n    ) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create an EIP712 hash of an Order\n     * @dev Includes two additional parameters not in the struct (orderType, nonce)\n     * @param order Order to hash\n     * @param orderType OrderType of the Order\n     * @return Order EIP712 hash\n     */\n    function hashOrder(Order memory order, OrderType orderType) public view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    _ORDER_TYPEHASH,\n                    order.trader,\n                    order.collection,\n                    order.listingsRoot,\n                    order.numberOfListings,\n                    order.expirationTime,\n                    order.assetType,\n                    _hashFeeRate(order.makerFee),\n                    order.salt,\n                    orderType,\n                    nonces[order.trader]\n                )\n            );\n    }\n\n    /**\n     * @notice Create a hash of a Listing struct\n     * @param listing Listing to hash\n     * @return Listing hash\n     */\n    function hashListing(Listing memory listing) public pure returns (bytes32) {\n        return keccak256(abi.encode(listing.index, listing.tokenId, listing.amount, listing.price));\n    }\n\n    /**\n     * @notice Create a hash of calldata with an approved caller\n     * @param _caller Address approved to execute the calldata\n     * @return hash Calldata hash\n     */\n    function _hashCalldata(address _caller) internal pure returns (bytes32 hash) {\n        assembly {\n            let nextPointer := mload(0x40)\n            let size := add(sub(nextPointer, 0x80), 0x20)\n            mstore(nextPointer, _caller)\n            hash := keccak256(0x80, size)\n        }\n    }\n\n    /**\n     * @notice Create an EIP712 hash of a FeeRate struct\n     * @param feeRate FeeRate to hash\n     * @return FeeRate EIP712 hash\n     */\n    function _hashFeeRate(FeeRate memory feeRate) private view returns (bytes32) {\n        return keccak256(abi.encode(_FEE_RATE_TYPEHASH, feeRate.recipient, feeRate.rate));\n    }\n\n    /**\n     * @notice Create an EIP712 hash to sign\n     * @param hash Primary EIP712 object hash\n     * @return EIP712 hash\n     */\n    function _hashToSign(bytes32 hash) private view returns (bytes32) {\n        return keccak256(bytes.concat(bytes2(0x1901), _DOMAIN_SEPARATOR, hash));\n    }\n\n    /**\n     * @notice Generate all EIP712 Typehashes\n     */\n    function _createTypehashes(\n        address proxy\n    )\n        private\n        view\n        returns (bytes32 feeRateTypehash, bytes32 orderTypehash, bytes32 domainSeparator)\n    {\n        bytes32 eip712DomainTypehash = keccak256(\n            bytes.concat(\n                "EIP712Domain(",\n                "string name,",\n                "string version,",\n                "uint256 chainId,",\n                "address verifyingContract",\n                ")"\n            )\n        );\n\n        bytes memory feeRateTypestring = "FeeRate(address recipient,uint16 rate)";\n\n        orderTypehash = keccak256(\n            bytes.concat(\n                "Order(",\n                "address trader,",\n                "address collection,",\n                "bytes32 listingsRoot,",\n                "uint256 numberOfListings,",\n                "uint256 expirationTime,",\n                "uint8 assetType,",\n                "FeeRate makerFee,",\n                "uint256 salt,",\n                "uint8 orderType,",\n                "uint256 nonce",\n                ")",\n                feeRateTypestring\n            )\n        );\n\n        feeRateTypehash = keccak256(feeRateTypestring);\n\n        domainSeparator = _hashDomain(\n            eip712DomainTypehash,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION)),\n            proxy\n        );\n    }\n\n    /**\n     * @notice Create an EIP712 domain separator\n     * @param eip712DomainTypehash Typehash of the EIP712Domain struct\n     * @param nameHash Hash of the contract name\n     * @param versionHash Hash of the version string\n     * @param proxy Address of the proxy this implementation will be behind\n     * @return EIP712Domain hash\n     */\n    function _hashDomain(\n        bytes32 eip712DomainTypehash,\n        bytes32 nameHash,\n        bytes32 versionHash,\n        address proxy\n    ) private view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(eip712DomainTypehash, nameHash, versionHash, block.chainid, proxy)\n            );\n    }\n\n    /**\n     * @notice Verify EIP712 signature\n     * @param signer Address of the alleged signer\n     * @param hash EIP712 hash\n     * @param signatures Packed bytes array of order signatures\n     * @param index Index of the signature to verify\n     * @return authorized Validity of the signature\n     */\n    function _verifyAuthorization(\n        address signer,\n        bytes32 hash,\n        bytes memory signatures,\n        uint256 index\n    ) internal view returns (bool authorized) {\n        bytes32 hashToSign = _hashToSign(hash);\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            let signatureOffset := add(add(signatures, One_word), mul(Signatures_size, index))\n            r := mload(signatureOffset)\n            s := mload(add(signatureOffset, Signatures_s_offset))\n            v := shr(Bytes1_shift, mload(add(signatureOffset, Signatures_v_offset)))\n        }\n        authorized = _verify(signer, hashToSign, v, r, s);\n    }\n\n    modifier verifyOracleSignature(bytes32 hash, bytes calldata oracleSignature) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        uint32 blockNumber;\n        address oracle;\n        assembly {\n            let signatureOffset := oracleSignature.offset\n            r := calldataload(signatureOffset)\n            s := calldataload(add(signatureOffset, OracleSignatures_s_offset))\n            v := shr(Bytes1_shift, calldataload(add(signatureOffset, OracleSignatures_v_offset)))\n            blockNumber := shr(\n                Bytes4_shift,\n                calldataload(add(signatureOffset, OracleSignatures_blockNumber_offset))\n            )\n            oracle := shr(\n                Bytes20_shift,\n                calldataload(add(signatureOffset, OracleSignatures_oracle_offset))\n            )\n        }\n        if (blockNumber + blockRange < block.number) {\n            revert ExpiredOracleSignature();\n        }\n        if (oracles[oracle] == 0) {\n            revert UnauthorizedOracle();\n        }\n        if (!_verify(oracle, keccak256(abi.encodePacked(hash, blockNumber)), v, r, s)) {\n            revert InvalidOracleSignature();\n        }\n        _;\n    }\n\n    /**\n     * @notice Verify signature of digest\n     * @param signer Address of expected signer\n     * @param digest Signature digest\n     * @param v v parameter\n     * @param r r parameter\n     * @param s s parameter\n     */\n    function _verify(\n        address signer,\n        bytes32 digest,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) private pure returns (bool valid) {\n        address recoveredSigner = ecrecover(digest, v, r, s);\n        if (recoveredSigner != address(0) && recoveredSigner == signer) {\n            valid = true;\n        }\n    }\n\n    uint256[47] private __gap;\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Signatures._hashCalldata', 'start_line': 2659, 'end_line': 2666, 'offset_start': 98470, 'offset_end': 98766, 'content': 'function _hashCalldata(address _caller) internal pure returns (bytes32 hash) {\n        assembly {\n            let nextPointer := mload(0x40)\n            let size := add(sub(nextPointer, 0x80), 0x20)\n            mstore(nextPointer, _caller)\n            hash := keccak256(0x80, size)\n        }\n    }', 'contract_name': 'Signatures', 'contract_code': '{\n    string private constant _NAME = "Blur Exchange";\n    string private constant _VERSION = "1.0";\n\n    bytes32 private immutable _FEE_RATE_TYPEHASH;\n    bytes32 private immutable _ORDER_TYPEHASH;\n    bytes32 private immutable _DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public oracles;\n    mapping(address => uint256) public nonces;\n    uint256 public blockRange;\n\n    constructor(address proxy) {\n        (_FEE_RATE_TYPEHASH, _ORDER_TYPEHASH, _DOMAIN_SEPARATOR) = _createTypehashes(proxy);\n    }\n\n    /**\n     * @notice Verify the domain separator produced during deployment of the implementation matches that of the proxy\n     */\n    function verifyDomain() public view {\n        bytes32 eip712DomainTypehash = keccak256(\n            bytes.concat(\n                "EIP712Domain(",\n                "string name,",\n                "string version,",\n                "uint256 chainId,",\n                "address verifyingContract",\n                ")"\n            )\n        );\n\n        bytes32 domainSeparator = _hashDomain(\n            eip712DomainTypehash,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION)),\n            address(this)\n        );\n        if (_DOMAIN_SEPARATOR != domainSeparator) {\n            revert InvalidDomain();\n        }\n    }\n\n    /**\n     * @notice Return version and domain separator\n     */\n    function information() external view returns (string memory version, bytes32 domainSeparator) {\n        version = _VERSION;\n        domainSeparator = _DOMAIN_SEPARATOR;\n    }\n\n    /**\n     * @notice Create a hash of TakeAsk calldata with an approved caller\n     * @param inputs TakeAsk inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeAsk(TakeAsk memory inputs, address _caller) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeBid calldata with an approved caller\n     * @param inputs TakeBid inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeBid(TakeBid memory inputs, address _caller) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeAskSingle calldata with an approved caller\n     * @param inputs TakeAskSingle inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeAskSingle(\n        TakeAskSingle memory inputs,\n        address _caller\n    ) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeBidSingle calldata with an approved caller\n     * @param inputs TakeBidSingle inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeBidSingle(\n        TakeBidSingle memory inputs,\n        address _caller\n    ) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create an EIP712 hash of an Order\n     * @dev Includes two additional parameters not in the struct (orderType, nonce)\n     * @param order Order to hash\n     * @param orderType OrderType of the Order\n     * @return Order EIP712 hash\n     */\n    function hashOrder(Order memory order, OrderType orderType) public view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    _ORDER_TYPEHASH,\n                    order.trader,\n                    order.collection,\n                    order.listingsRoot,\n                    order.numberOfListings,\n                    order.expirationTime,\n                    order.assetType,\n                    _hashFeeRate(order.makerFee),\n                    order.salt,\n                    orderType,\n                    nonces[order.trader]\n                )\n            );\n    }\n\n    /**\n     * @notice Create a hash of a Listing struct\n     * @param listing Listing to hash\n     * @return Listing hash\n     */\n    function hashListing(Listing memory listing) public pure returns (bytes32) {\n        return keccak256(abi.encode(listing.index, listing.tokenId, listing.amount, listing.price));\n    }\n\n    /**\n     * @notice Create a hash of calldata with an approved caller\n     * @param _caller Address approved to execute the calldata\n     * @return hash Calldata hash\n     */\n    function _hashCalldata(address _caller) internal pure returns (bytes32 hash) {\n        assembly {\n            let nextPointer := mload(0x40)\n            let size := add(sub(nextPointer, 0x80), 0x20)\n            mstore(nextPointer, _caller)\n            hash := keccak256(0x80, size)\n        }\n    }\n\n    /**\n     * @notice Create an EIP712 hash of a FeeRate struct\n     * @param feeRate FeeRate to hash\n     * @return FeeRate EIP712 hash\n     */\n    function _hashFeeRate(FeeRate memory feeRate) private view returns (bytes32) {\n        return keccak256(abi.encode(_FEE_RATE_TYPEHASH, feeRate.recipient, feeRate.rate));\n    }\n\n    /**\n     * @notice Create an EIP712 hash to sign\n     * @param hash Primary EIP712 object hash\n     * @return EIP712 hash\n     */\n    function _hashToSign(bytes32 hash) private view returns (bytes32) {\n        return keccak256(bytes.concat(bytes2(0x1901), _DOMAIN_SEPARATOR, hash));\n    }\n\n    /**\n     * @notice Generate all EIP712 Typehashes\n     */\n    function _createTypehashes(\n        address proxy\n    )\n        private\n        view\n        returns (bytes32 feeRateTypehash, bytes32 orderTypehash, bytes32 domainSeparator)\n    {\n        bytes32 eip712DomainTypehash = keccak256(\n            bytes.concat(\n                "EIP712Domain(",\n                "string name,",\n                "string version,",\n                "uint256 chainId,",\n                "address verifyingContract",\n                ")"\n            )\n        );\n\n        bytes memory feeRateTypestring = "FeeRate(address recipient,uint16 rate)";\n\n        orderTypehash = keccak256(\n            bytes.concat(\n                "Order(",\n                "address trader,",\n                "address collection,",\n                "bytes32 listingsRoot,",\n                "uint256 numberOfListings,",\n                "uint256 expirationTime,",\n                "uint8 assetType,",\n                "FeeRate makerFee,",\n                "uint256 salt,",\n                "uint8 orderType,",\n                "uint256 nonce",\n                ")",\n                feeRateTypestring\n            )\n        );\n\n        feeRateTypehash = keccak256(feeRateTypestring);\n\n        domainSeparator = _hashDomain(\n            eip712DomainTypehash,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION)),\n            proxy\n        );\n    }\n\n    /**\n     * @notice Create an EIP712 domain separator\n     * @param eip712DomainTypehash Typehash of the EIP712Domain struct\n     * @param nameHash Hash of the contract name\n     * @param versionHash Hash of the version string\n     * @param proxy Address of the proxy this implementation will be behind\n     * @return EIP712Domain hash\n     */\n    function _hashDomain(\n        bytes32 eip712DomainTypehash,\n        bytes32 nameHash,\n        bytes32 versionHash,\n        address proxy\n    ) private view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(eip712DomainTypehash, nameHash, versionHash, block.chainid, proxy)\n            );\n    }\n\n    /**\n     * @notice Verify EIP712 signature\n     * @param signer Address of the alleged signer\n     * @param hash EIP712 hash\n     * @param signatures Packed bytes array of order signatures\n     * @param index Index of the signature to verify\n     * @return authorized Validity of the signature\n     */\n    function _verifyAuthorization(\n        address signer,\n        bytes32 hash,\n        bytes memory signatures,\n        uint256 index\n    ) internal view returns (bool authorized) {\n        bytes32 hashToSign = _hashToSign(hash);\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            let signatureOffset := add(add(signatures, One_word), mul(Signatures_size, index))\n            r := mload(signatureOffset)\n            s := mload(add(signatureOffset, Signatures_s_offset))\n            v := shr(Bytes1_shift, mload(add(signatureOffset, Signatures_v_offset)))\n        }\n        authorized = _verify(signer, hashToSign, v, r, s);\n    }\n\n    modifier verifyOracleSignature(bytes32 hash, bytes calldata oracleSignature) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        uint32 blockNumber;\n        address oracle;\n        assembly {\n            let signatureOffset := oracleSignature.offset\n            r := calldataload(signatureOffset)\n            s := calldataload(add(signatureOffset, OracleSignatures_s_offset))\n            v := shr(Bytes1_shift, calldataload(add(signatureOffset, OracleSignatures_v_offset)))\n            blockNumber := shr(\n                Bytes4_shift,\n                calldataload(add(signatureOffset, OracleSignatures_blockNumber_offset))\n            )\n            oracle := shr(\n                Bytes20_shift,\n                calldataload(add(signatureOffset, OracleSignatures_oracle_offset))\n            )\n        }\n        if (blockNumber + blockRange < block.number) {\n            revert ExpiredOracleSignature();\n        }\n        if (oracles[oracle] == 0) {\n            revert UnauthorizedOracle();\n        }\n        if (!_verify(oracle, keccak256(abi.encodePacked(hash, blockNumber)), v, r, s)) {\n            revert InvalidOracleSignature();\n        }\n        _;\n    }\n\n    /**\n     * @notice Verify signature of digest\n     * @param signer Address of expected signer\n     * @param digest Signature digest\n     * @param v v parameter\n     * @param r r parameter\n     * @param s s parameter\n     */\n    function _verify(\n        address signer,\n        bytes32 digest,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) private pure returns (bool valid) {\n        address recoveredSigner = ecrecover(digest, v, r, s);\n        if (recoveredSigner != address(0) && recoveredSigner == signer) {\n            valid = true;\n        }\n    }\n\n    uint256[47] private __gap;\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Signatures._hashFeeRate', 'start_line': 2673, 'end_line': 2675, 'offset_start': 98919, 'offset_end': 99093, 'content': 'function _hashFeeRate(FeeRate memory feeRate) private view returns (bytes32) {\n        return keccak256(abi.encode(_FEE_RATE_TYPEHASH, feeRate.recipient, feeRate.rate));\n    }', 'contract_name': 'Signatures', 'contract_code': '{\n    string private constant _NAME = "Blur Exchange";\n    string private constant _VERSION = "1.0";\n\n    bytes32 private immutable _FEE_RATE_TYPEHASH;\n    bytes32 private immutable _ORDER_TYPEHASH;\n    bytes32 private immutable _DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public oracles;\n    mapping(address => uint256) public nonces;\n    uint256 public blockRange;\n\n    constructor(address proxy) {\n        (_FEE_RATE_TYPEHASH, _ORDER_TYPEHASH, _DOMAIN_SEPARATOR) = _createTypehashes(proxy);\n    }\n\n    /**\n     * @notice Verify the domain separator produced during deployment of the implementation matches that of the proxy\n     */\n    function verifyDomain() public view {\n        bytes32 eip712DomainTypehash = keccak256(\n            bytes.concat(\n                "EIP712Domain(",\n                "string name,",\n                "string version,",\n                "uint256 chainId,",\n                "address verifyingContract",\n                ")"\n            )\n        );\n\n        bytes32 domainSeparator = _hashDomain(\n            eip712DomainTypehash,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION)),\n            address(this)\n        );\n        if (_DOMAIN_SEPARATOR != domainSeparator) {\n            revert InvalidDomain();\n        }\n    }\n\n    /**\n     * @notice Return version and domain separator\n     */\n    function information() external view returns (string memory version, bytes32 domainSeparator) {\n        version = _VERSION;\n        domainSeparator = _DOMAIN_SEPARATOR;\n    }\n\n    /**\n     * @notice Create a hash of TakeAsk calldata with an approved caller\n     * @param inputs TakeAsk inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeAsk(TakeAsk memory inputs, address _caller) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeBid calldata with an approved caller\n     * @param inputs TakeBid inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeBid(TakeBid memory inputs, address _caller) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeAskSingle calldata with an approved caller\n     * @param inputs TakeAskSingle inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeAskSingle(\n        TakeAskSingle memory inputs,\n        address _caller\n    ) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeBidSingle calldata with an approved caller\n     * @param inputs TakeBidSingle inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeBidSingle(\n        TakeBidSingle memory inputs,\n        address _caller\n    ) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create an EIP712 hash of an Order\n     * @dev Includes two additional parameters not in the struct (orderType, nonce)\n     * @param order Order to hash\n     * @param orderType OrderType of the Order\n     * @return Order EIP712 hash\n     */\n    function hashOrder(Order memory order, OrderType orderType) public view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    _ORDER_TYPEHASH,\n                    order.trader,\n                    order.collection,\n                    order.listingsRoot,\n                    order.numberOfListings,\n                    order.expirationTime,\n                    order.assetType,\n                    _hashFeeRate(order.makerFee),\n                    order.salt,\n                    orderType,\n                    nonces[order.trader]\n                )\n            );\n    }\n\n    /**\n     * @notice Create a hash of a Listing struct\n     * @param listing Listing to hash\n     * @return Listing hash\n     */\n    function hashListing(Listing memory listing) public pure returns (bytes32) {\n        return keccak256(abi.encode(listing.index, listing.tokenId, listing.amount, listing.price));\n    }\n\n    /**\n     * @notice Create a hash of calldata with an approved caller\n     * @param _caller Address approved to execute the calldata\n     * @return hash Calldata hash\n     */\n    function _hashCalldata(address _caller) internal pure returns (bytes32 hash) {\n        assembly {\n            let nextPointer := mload(0x40)\n            let size := add(sub(nextPointer, 0x80), 0x20)\n            mstore(nextPointer, _caller)\n            hash := keccak256(0x80, size)\n        }\n    }\n\n    /**\n     * @notice Create an EIP712 hash of a FeeRate struct\n     * @param feeRate FeeRate to hash\n     * @return FeeRate EIP712 hash\n     */\n    function _hashFeeRate(FeeRate memory feeRate) private view returns (bytes32) {\n        return keccak256(abi.encode(_FEE_RATE_TYPEHASH, feeRate.recipient, feeRate.rate));\n    }\n\n    /**\n     * @notice Create an EIP712 hash to sign\n     * @param hash Primary EIP712 object hash\n     * @return EIP712 hash\n     */\n    function _hashToSign(bytes32 hash) private view returns (bytes32) {\n        return keccak256(bytes.concat(bytes2(0x1901), _DOMAIN_SEPARATOR, hash));\n    }\n\n    /**\n     * @notice Generate all EIP712 Typehashes\n     */\n    function _createTypehashes(\n        address proxy\n    )\n        private\n        view\n        returns (bytes32 feeRateTypehash, bytes32 orderTypehash, bytes32 domainSeparator)\n    {\n        bytes32 eip712DomainTypehash = keccak256(\n            bytes.concat(\n                "EIP712Domain(",\n                "string name,",\n                "string version,",\n                "uint256 chainId,",\n                "address verifyingContract",\n                ")"\n            )\n        );\n\n        bytes memory feeRateTypestring = "FeeRate(address recipient,uint16 rate)";\n\n        orderTypehash = keccak256(\n            bytes.concat(\n                "Order(",\n                "address trader,",\n                "address collection,",\n                "bytes32 listingsRoot,",\n                "uint256 numberOfListings,",\n                "uint256 expirationTime,",\n                "uint8 assetType,",\n                "FeeRate makerFee,",\n                "uint256 salt,",\n                "uint8 orderType,",\n                "uint256 nonce",\n                ")",\n                feeRateTypestring\n            )\n        );\n\n        feeRateTypehash = keccak256(feeRateTypestring);\n\n        domainSeparator = _hashDomain(\n            eip712DomainTypehash,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION)),\n            proxy\n        );\n    }\n\n    /**\n     * @notice Create an EIP712 domain separator\n     * @param eip712DomainTypehash Typehash of the EIP712Domain struct\n     * @param nameHash Hash of the contract name\n     * @param versionHash Hash of the version string\n     * @param proxy Address of the proxy this implementation will be behind\n     * @return EIP712Domain hash\n     */\n    function _hashDomain(\n        bytes32 eip712DomainTypehash,\n        bytes32 nameHash,\n        bytes32 versionHash,\n        address proxy\n    ) private view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(eip712DomainTypehash, nameHash, versionHash, block.chainid, proxy)\n            );\n    }\n\n    /**\n     * @notice Verify EIP712 signature\n     * @param signer Address of the alleged signer\n     * @param hash EIP712 hash\n     * @param signatures Packed bytes array of order signatures\n     * @param index Index of the signature to verify\n     * @return authorized Validity of the signature\n     */\n    function _verifyAuthorization(\n        address signer,\n        bytes32 hash,\n        bytes memory signatures,\n        uint256 index\n    ) internal view returns (bool authorized) {\n        bytes32 hashToSign = _hashToSign(hash);\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            let signatureOffset := add(add(signatures, One_word), mul(Signatures_size, index))\n            r := mload(signatureOffset)\n            s := mload(add(signatureOffset, Signatures_s_offset))\n            v := shr(Bytes1_shift, mload(add(signatureOffset, Signatures_v_offset)))\n        }\n        authorized = _verify(signer, hashToSign, v, r, s);\n    }\n\n    modifier verifyOracleSignature(bytes32 hash, bytes calldata oracleSignature) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        uint32 blockNumber;\n        address oracle;\n        assembly {\n            let signatureOffset := oracleSignature.offset\n            r := calldataload(signatureOffset)\n            s := calldataload(add(signatureOffset, OracleSignatures_s_offset))\n            v := shr(Bytes1_shift, calldataload(add(signatureOffset, OracleSignatures_v_offset)))\n            blockNumber := shr(\n                Bytes4_shift,\n                calldataload(add(signatureOffset, OracleSignatures_blockNumber_offset))\n            )\n            oracle := shr(\n                Bytes20_shift,\n                calldataload(add(signatureOffset, OracleSignatures_oracle_offset))\n            )\n        }\n        if (blockNumber + blockRange < block.number) {\n            revert ExpiredOracleSignature();\n        }\n        if (oracles[oracle] == 0) {\n            revert UnauthorizedOracle();\n        }\n        if (!_verify(oracle, keccak256(abi.encodePacked(hash, blockNumber)), v, r, s)) {\n            revert InvalidOracleSignature();\n        }\n        _;\n    }\n\n    /**\n     * @notice Verify signature of digest\n     * @param signer Address of expected signer\n     * @param digest Signature digest\n     * @param v v parameter\n     * @param r r parameter\n     * @param s s parameter\n     */\n    function _verify(\n        address signer,\n        bytes32 digest,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) private pure returns (bool valid) {\n        address recoveredSigner = ecrecover(digest, v, r, s);\n        if (recoveredSigner != address(0) && recoveredSigner == signer) {\n            valid = true;\n        }\n    }\n\n    uint256[47] private __gap;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'private', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Signatures._hashToSign', 'start_line': 2682, 'end_line': 2684, 'offset_start': 99234, 'offset_end': 99387, 'content': 'function _hashToSign(bytes32 hash) private view returns (bytes32) {\n        return keccak256(bytes.concat(bytes2(0x1901), _DOMAIN_SEPARATOR, hash));\n    }', 'contract_name': 'Signatures', 'contract_code': '{\n    string private constant _NAME = "Blur Exchange";\n    string private constant _VERSION = "1.0";\n\n    bytes32 private immutable _FEE_RATE_TYPEHASH;\n    bytes32 private immutable _ORDER_TYPEHASH;\n    bytes32 private immutable _DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public oracles;\n    mapping(address => uint256) public nonces;\n    uint256 public blockRange;\n\n    constructor(address proxy) {\n        (_FEE_RATE_TYPEHASH, _ORDER_TYPEHASH, _DOMAIN_SEPARATOR) = _createTypehashes(proxy);\n    }\n\n    /**\n     * @notice Verify the domain separator produced during deployment of the implementation matches that of the proxy\n     */\n    function verifyDomain() public view {\n        bytes32 eip712DomainTypehash = keccak256(\n            bytes.concat(\n                "EIP712Domain(",\n                "string name,",\n                "string version,",\n                "uint256 chainId,",\n                "address verifyingContract",\n                ")"\n            )\n        );\n\n        bytes32 domainSeparator = _hashDomain(\n            eip712DomainTypehash,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION)),\n            address(this)\n        );\n        if (_DOMAIN_SEPARATOR != domainSeparator) {\n            revert InvalidDomain();\n        }\n    }\n\n    /**\n     * @notice Return version and domain separator\n     */\n    function information() external view returns (string memory version, bytes32 domainSeparator) {\n        version = _VERSION;\n        domainSeparator = _DOMAIN_SEPARATOR;\n    }\n\n    /**\n     * @notice Create a hash of TakeAsk calldata with an approved caller\n     * @param inputs TakeAsk inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeAsk(TakeAsk memory inputs, address _caller) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeBid calldata with an approved caller\n     * @param inputs TakeBid inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeBid(TakeBid memory inputs, address _caller) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeAskSingle calldata with an approved caller\n     * @param inputs TakeAskSingle inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeAskSingle(\n        TakeAskSingle memory inputs,\n        address _caller\n    ) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeBidSingle calldata with an approved caller\n     * @param inputs TakeBidSingle inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeBidSingle(\n        TakeBidSingle memory inputs,\n        address _caller\n    ) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create an EIP712 hash of an Order\n     * @dev Includes two additional parameters not in the struct (orderType, nonce)\n     * @param order Order to hash\n     * @param orderType OrderType of the Order\n     * @return Order EIP712 hash\n     */\n    function hashOrder(Order memory order, OrderType orderType) public view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    _ORDER_TYPEHASH,\n                    order.trader,\n                    order.collection,\n                    order.listingsRoot,\n                    order.numberOfListings,\n                    order.expirationTime,\n                    order.assetType,\n                    _hashFeeRate(order.makerFee),\n                    order.salt,\n                    orderType,\n                    nonces[order.trader]\n                )\n            );\n    }\n\n    /**\n     * @notice Create a hash of a Listing struct\n     * @param listing Listing to hash\n     * @return Listing hash\n     */\n    function hashListing(Listing memory listing) public pure returns (bytes32) {\n        return keccak256(abi.encode(listing.index, listing.tokenId, listing.amount, listing.price));\n    }\n\n    /**\n     * @notice Create a hash of calldata with an approved caller\n     * @param _caller Address approved to execute the calldata\n     * @return hash Calldata hash\n     */\n    function _hashCalldata(address _caller) internal pure returns (bytes32 hash) {\n        assembly {\n            let nextPointer := mload(0x40)\n            let size := add(sub(nextPointer, 0x80), 0x20)\n            mstore(nextPointer, _caller)\n            hash := keccak256(0x80, size)\n        }\n    }\n\n    /**\n     * @notice Create an EIP712 hash of a FeeRate struct\n     * @param feeRate FeeRate to hash\n     * @return FeeRate EIP712 hash\n     */\n    function _hashFeeRate(FeeRate memory feeRate) private view returns (bytes32) {\n        return keccak256(abi.encode(_FEE_RATE_TYPEHASH, feeRate.recipient, feeRate.rate));\n    }\n\n    /**\n     * @notice Create an EIP712 hash to sign\n     * @param hash Primary EIP712 object hash\n     * @return EIP712 hash\n     */\n    function _hashToSign(bytes32 hash) private view returns (bytes32) {\n        return keccak256(bytes.concat(bytes2(0x1901), _DOMAIN_SEPARATOR, hash));\n    }\n\n    /**\n     * @notice Generate all EIP712 Typehashes\n     */\n    function _createTypehashes(\n        address proxy\n    )\n        private\n        view\n        returns (bytes32 feeRateTypehash, bytes32 orderTypehash, bytes32 domainSeparator)\n    {\n        bytes32 eip712DomainTypehash = keccak256(\n            bytes.concat(\n                "EIP712Domain(",\n                "string name,",\n                "string version,",\n                "uint256 chainId,",\n                "address verifyingContract",\n                ")"\n            )\n        );\n\n        bytes memory feeRateTypestring = "FeeRate(address recipient,uint16 rate)";\n\n        orderTypehash = keccak256(\n            bytes.concat(\n                "Order(",\n                "address trader,",\n                "address collection,",\n                "bytes32 listingsRoot,",\n                "uint256 numberOfListings,",\n                "uint256 expirationTime,",\n                "uint8 assetType,",\n                "FeeRate makerFee,",\n                "uint256 salt,",\n                "uint8 orderType,",\n                "uint256 nonce",\n                ")",\n                feeRateTypestring\n            )\n        );\n\n        feeRateTypehash = keccak256(feeRateTypestring);\n\n        domainSeparator = _hashDomain(\n            eip712DomainTypehash,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION)),\n            proxy\n        );\n    }\n\n    /**\n     * @notice Create an EIP712 domain separator\n     * @param eip712DomainTypehash Typehash of the EIP712Domain struct\n     * @param nameHash Hash of the contract name\n     * @param versionHash Hash of the version string\n     * @param proxy Address of the proxy this implementation will be behind\n     * @return EIP712Domain hash\n     */\n    function _hashDomain(\n        bytes32 eip712DomainTypehash,\n        bytes32 nameHash,\n        bytes32 versionHash,\n        address proxy\n    ) private view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(eip712DomainTypehash, nameHash, versionHash, block.chainid, proxy)\n            );\n    }\n\n    /**\n     * @notice Verify EIP712 signature\n     * @param signer Address of the alleged signer\n     * @param hash EIP712 hash\n     * @param signatures Packed bytes array of order signatures\n     * @param index Index of the signature to verify\n     * @return authorized Validity of the signature\n     */\n    function _verifyAuthorization(\n        address signer,\n        bytes32 hash,\n        bytes memory signatures,\n        uint256 index\n    ) internal view returns (bool authorized) {\n        bytes32 hashToSign = _hashToSign(hash);\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            let signatureOffset := add(add(signatures, One_word), mul(Signatures_size, index))\n            r := mload(signatureOffset)\n            s := mload(add(signatureOffset, Signatures_s_offset))\n            v := shr(Bytes1_shift, mload(add(signatureOffset, Signatures_v_offset)))\n        }\n        authorized = _verify(signer, hashToSign, v, r, s);\n    }\n\n    modifier verifyOracleSignature(bytes32 hash, bytes calldata oracleSignature) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        uint32 blockNumber;\n        address oracle;\n        assembly {\n            let signatureOffset := oracleSignature.offset\n            r := calldataload(signatureOffset)\n            s := calldataload(add(signatureOffset, OracleSignatures_s_offset))\n            v := shr(Bytes1_shift, calldataload(add(signatureOffset, OracleSignatures_v_offset)))\n            blockNumber := shr(\n                Bytes4_shift,\n                calldataload(add(signatureOffset, OracleSignatures_blockNumber_offset))\n            )\n            oracle := shr(\n                Bytes20_shift,\n                calldataload(add(signatureOffset, OracleSignatures_oracle_offset))\n            )\n        }\n        if (blockNumber + blockRange < block.number) {\n            revert ExpiredOracleSignature();\n        }\n        if (oracles[oracle] == 0) {\n            revert UnauthorizedOracle();\n        }\n        if (!_verify(oracle, keccak256(abi.encodePacked(hash, blockNumber)), v, r, s)) {\n            revert InvalidOracleSignature();\n        }\n        _;\n    }\n\n    /**\n     * @notice Verify signature of digest\n     * @param signer Address of expected signer\n     * @param digest Signature digest\n     * @param v v parameter\n     * @param r r parameter\n     * @param s s parameter\n     */\n    function _verify(\n        address signer,\n        bytes32 digest,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) private pure returns (bool valid) {\n        address recoveredSigner = ecrecover(digest, v, r, s);\n        if (recoveredSigner != address(0) && recoveredSigner == signer) {\n            valid = true;\n        }\n    }\n\n    uint256[47] private __gap;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'private', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Signatures._createTypehashes', 'start_line': 2689, 'end_line': 2735, 'offset_start': 99456, 'offset_end': 100810, 'content': 'function _createTypehashes(\n        address proxy\n    )\n        private\n        view\n        returns (bytes32 feeRateTypehash, bytes32 orderTypehash, bytes32 domainSeparator)\n    {\n        bytes32 eip712DomainTypehash = keccak256(\n            bytes.concat(\n                "EIP712Domain(",\n                "string name,",\n                "string version,",\n                "uint256 chainId,",\n                "address verifyingContract",\n                ")"\n            )\n        );\n\n        bytes memory feeRateTypestring = "FeeRate(address recipient,uint16 rate)";\n\n        orderTypehash = keccak256(\n            bytes.concat(\n                "Order(",\n                "address trader,",\n                "address collection,",\n                "bytes32 listingsRoot,",\n                "uint256 numberOfListings,",\n                "uint256 expirationTime,",\n                "uint8 assetType,",\n                "FeeRate makerFee,",\n                "uint256 salt,",\n                "uint8 orderType,",\n                "uint256 nonce",\n                ")",\n                feeRateTypestring\n            )\n        );\n\n        feeRateTypehash = keccak256(feeRateTypestring);\n\n        domainSeparator = _hashDomain(\n            eip712DomainTypehash,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION)),\n            proxy\n        );\n    }', 'contract_name': 'Signatures', 'contract_code': '{\n    string private constant _NAME = "Blur Exchange";\n    string private constant _VERSION = "1.0";\n\n    bytes32 private immutable _FEE_RATE_TYPEHASH;\n    bytes32 private immutable _ORDER_TYPEHASH;\n    bytes32 private immutable _DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public oracles;\n    mapping(address => uint256) public nonces;\n    uint256 public blockRange;\n\n    constructor(address proxy) {\n        (_FEE_RATE_TYPEHASH, _ORDER_TYPEHASH, _DOMAIN_SEPARATOR) = _createTypehashes(proxy);\n    }\n\n    /**\n     * @notice Verify the domain separator produced during deployment of the implementation matches that of the proxy\n     */\n    function verifyDomain() public view {\n        bytes32 eip712DomainTypehash = keccak256(\n            bytes.concat(\n                "EIP712Domain(",\n                "string name,",\n                "string version,",\n                "uint256 chainId,",\n                "address verifyingContract",\n                ")"\n            )\n        );\n\n        bytes32 domainSeparator = _hashDomain(\n            eip712DomainTypehash,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION)),\n            address(this)\n        );\n        if (_DOMAIN_SEPARATOR != domainSeparator) {\n            revert InvalidDomain();\n        }\n    }\n\n    /**\n     * @notice Return version and domain separator\n     */\n    function information() external view returns (string memory version, bytes32 domainSeparator) {\n        version = _VERSION;\n        domainSeparator = _DOMAIN_SEPARATOR;\n    }\n\n    /**\n     * @notice Create a hash of TakeAsk calldata with an approved caller\n     * @param inputs TakeAsk inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeAsk(TakeAsk memory inputs, address _caller) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeBid calldata with an approved caller\n     * @param inputs TakeBid inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeBid(TakeBid memory inputs, address _caller) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeAskSingle calldata with an approved caller\n     * @param inputs TakeAskSingle inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeAskSingle(\n        TakeAskSingle memory inputs,\n        address _caller\n    ) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeBidSingle calldata with an approved caller\n     * @param inputs TakeBidSingle inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeBidSingle(\n        TakeBidSingle memory inputs,\n        address _caller\n    ) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create an EIP712 hash of an Order\n     * @dev Includes two additional parameters not in the struct (orderType, nonce)\n     * @param order Order to hash\n     * @param orderType OrderType of the Order\n     * @return Order EIP712 hash\n     */\n    function hashOrder(Order memory order, OrderType orderType) public view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    _ORDER_TYPEHASH,\n                    order.trader,\n                    order.collection,\n                    order.listingsRoot,\n                    order.numberOfListings,\n                    order.expirationTime,\n                    order.assetType,\n                    _hashFeeRate(order.makerFee),\n                    order.salt,\n                    orderType,\n                    nonces[order.trader]\n                )\n            );\n    }\n\n    /**\n     * @notice Create a hash of a Listing struct\n     * @param listing Listing to hash\n     * @return Listing hash\n     */\n    function hashListing(Listing memory listing) public pure returns (bytes32) {\n        return keccak256(abi.encode(listing.index, listing.tokenId, listing.amount, listing.price));\n    }\n\n    /**\n     * @notice Create a hash of calldata with an approved caller\n     * @param _caller Address approved to execute the calldata\n     * @return hash Calldata hash\n     */\n    function _hashCalldata(address _caller) internal pure returns (bytes32 hash) {\n        assembly {\n            let nextPointer := mload(0x40)\n            let size := add(sub(nextPointer, 0x80), 0x20)\n            mstore(nextPointer, _caller)\n            hash := keccak256(0x80, size)\n        }\n    }\n\n    /**\n     * @notice Create an EIP712 hash of a FeeRate struct\n     * @param feeRate FeeRate to hash\n     * @return FeeRate EIP712 hash\n     */\n    function _hashFeeRate(FeeRate memory feeRate) private view returns (bytes32) {\n        return keccak256(abi.encode(_FEE_RATE_TYPEHASH, feeRate.recipient, feeRate.rate));\n    }\n\n    /**\n     * @notice Create an EIP712 hash to sign\n     * @param hash Primary EIP712 object hash\n     * @return EIP712 hash\n     */\n    function _hashToSign(bytes32 hash) private view returns (bytes32) {\n        return keccak256(bytes.concat(bytes2(0x1901), _DOMAIN_SEPARATOR, hash));\n    }\n\n    /**\n     * @notice Generate all EIP712 Typehashes\n     */\n    function _createTypehashes(\n        address proxy\n    )\n        private\n        view\n        returns (bytes32 feeRateTypehash, bytes32 orderTypehash, bytes32 domainSeparator)\n    {\n        bytes32 eip712DomainTypehash = keccak256(\n            bytes.concat(\n                "EIP712Domain(",\n                "string name,",\n                "string version,",\n                "uint256 chainId,",\n                "address verifyingContract",\n                ")"\n            )\n        );\n\n        bytes memory feeRateTypestring = "FeeRate(address recipient,uint16 rate)";\n\n        orderTypehash = keccak256(\n            bytes.concat(\n                "Order(",\n                "address trader,",\n                "address collection,",\n                "bytes32 listingsRoot,",\n                "uint256 numberOfListings,",\n                "uint256 expirationTime,",\n                "uint8 assetType,",\n                "FeeRate makerFee,",\n                "uint256 salt,",\n                "uint8 orderType,",\n                "uint256 nonce",\n                ")",\n                feeRateTypestring\n            )\n        );\n\n        feeRateTypehash = keccak256(feeRateTypestring);\n\n        domainSeparator = _hashDomain(\n            eip712DomainTypehash,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION)),\n            proxy\n        );\n    }\n\n    /**\n     * @notice Create an EIP712 domain separator\n     * @param eip712DomainTypehash Typehash of the EIP712Domain struct\n     * @param nameHash Hash of the contract name\n     * @param versionHash Hash of the version string\n     * @param proxy Address of the proxy this implementation will be behind\n     * @return EIP712Domain hash\n     */\n    function _hashDomain(\n        bytes32 eip712DomainTypehash,\n        bytes32 nameHash,\n        bytes32 versionHash,\n        address proxy\n    ) private view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(eip712DomainTypehash, nameHash, versionHash, block.chainid, proxy)\n            );\n    }\n\n    /**\n     * @notice Verify EIP712 signature\n     * @param signer Address of the alleged signer\n     * @param hash EIP712 hash\n     * @param signatures Packed bytes array of order signatures\n     * @param index Index of the signature to verify\n     * @return authorized Validity of the signature\n     */\n    function _verifyAuthorization(\n        address signer,\n        bytes32 hash,\n        bytes memory signatures,\n        uint256 index\n    ) internal view returns (bool authorized) {\n        bytes32 hashToSign = _hashToSign(hash);\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            let signatureOffset := add(add(signatures, One_word), mul(Signatures_size, index))\n            r := mload(signatureOffset)\n            s := mload(add(signatureOffset, Signatures_s_offset))\n            v := shr(Bytes1_shift, mload(add(signatureOffset, Signatures_v_offset)))\n        }\n        authorized = _verify(signer, hashToSign, v, r, s);\n    }\n\n    modifier verifyOracleSignature(bytes32 hash, bytes calldata oracleSignature) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        uint32 blockNumber;\n        address oracle;\n        assembly {\n            let signatureOffset := oracleSignature.offset\n            r := calldataload(signatureOffset)\n            s := calldataload(add(signatureOffset, OracleSignatures_s_offset))\n            v := shr(Bytes1_shift, calldataload(add(signatureOffset, OracleSignatures_v_offset)))\n            blockNumber := shr(\n                Bytes4_shift,\n                calldataload(add(signatureOffset, OracleSignatures_blockNumber_offset))\n            )\n            oracle := shr(\n                Bytes20_shift,\n                calldataload(add(signatureOffset, OracleSignatures_oracle_offset))\n            )\n        }\n        if (blockNumber + blockRange < block.number) {\n            revert ExpiredOracleSignature();\n        }\n        if (oracles[oracle] == 0) {\n            revert UnauthorizedOracle();\n        }\n        if (!_verify(oracle, keccak256(abi.encodePacked(hash, blockNumber)), v, r, s)) {\n            revert InvalidOracleSignature();\n        }\n        _;\n    }\n\n    /**\n     * @notice Verify signature of digest\n     * @param signer Address of expected signer\n     * @param digest Signature digest\n     * @param v v parameter\n     * @param r r parameter\n     * @param s s parameter\n     */\n    function _verify(\n        address signer,\n        bytes32 digest,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) private pure returns (bool valid) {\n        address recoveredSigner = ecrecover(digest, v, r, s);\n        if (recoveredSigner != address(0) && recoveredSigner == signer) {\n            valid = true;\n        }\n    }\n\n    uint256[47] private __gap;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'private', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Signatures._hashDomain', 'start_line': 2745, 'end_line': 2755, 'offset_start': 101164, 'offset_end': 101491, 'content': 'function _hashDomain(\n        bytes32 eip712DomainTypehash,\n        bytes32 nameHash,\n        bytes32 versionHash,\n        address proxy\n    ) private view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(eip712DomainTypehash, nameHash, versionHash, block.chainid, proxy)\n            );\n    }', 'contract_name': 'Signatures', 'contract_code': '{\n    string private constant _NAME = "Blur Exchange";\n    string private constant _VERSION = "1.0";\n\n    bytes32 private immutable _FEE_RATE_TYPEHASH;\n    bytes32 private immutable _ORDER_TYPEHASH;\n    bytes32 private immutable _DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public oracles;\n    mapping(address => uint256) public nonces;\n    uint256 public blockRange;\n\n    constructor(address proxy) {\n        (_FEE_RATE_TYPEHASH, _ORDER_TYPEHASH, _DOMAIN_SEPARATOR) = _createTypehashes(proxy);\n    }\n\n    /**\n     * @notice Verify the domain separator produced during deployment of the implementation matches that of the proxy\n     */\n    function verifyDomain() public view {\n        bytes32 eip712DomainTypehash = keccak256(\n            bytes.concat(\n                "EIP712Domain(",\n                "string name,",\n                "string version,",\n                "uint256 chainId,",\n                "address verifyingContract",\n                ")"\n            )\n        );\n\n        bytes32 domainSeparator = _hashDomain(\n            eip712DomainTypehash,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION)),\n            address(this)\n        );\n        if (_DOMAIN_SEPARATOR != domainSeparator) {\n            revert InvalidDomain();\n        }\n    }\n\n    /**\n     * @notice Return version and domain separator\n     */\n    function information() external view returns (string memory version, bytes32 domainSeparator) {\n        version = _VERSION;\n        domainSeparator = _DOMAIN_SEPARATOR;\n    }\n\n    /**\n     * @notice Create a hash of TakeAsk calldata with an approved caller\n     * @param inputs TakeAsk inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeAsk(TakeAsk memory inputs, address _caller) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeBid calldata with an approved caller\n     * @param inputs TakeBid inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeBid(TakeBid memory inputs, address _caller) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeAskSingle calldata with an approved caller\n     * @param inputs TakeAskSingle inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeAskSingle(\n        TakeAskSingle memory inputs,\n        address _caller\n    ) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeBidSingle calldata with an approved caller\n     * @param inputs TakeBidSingle inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeBidSingle(\n        TakeBidSingle memory inputs,\n        address _caller\n    ) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create an EIP712 hash of an Order\n     * @dev Includes two additional parameters not in the struct (orderType, nonce)\n     * @param order Order to hash\n     * @param orderType OrderType of the Order\n     * @return Order EIP712 hash\n     */\n    function hashOrder(Order memory order, OrderType orderType) public view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    _ORDER_TYPEHASH,\n                    order.trader,\n                    order.collection,\n                    order.listingsRoot,\n                    order.numberOfListings,\n                    order.expirationTime,\n                    order.assetType,\n                    _hashFeeRate(order.makerFee),\n                    order.salt,\n                    orderType,\n                    nonces[order.trader]\n                )\n            );\n    }\n\n    /**\n     * @notice Create a hash of a Listing struct\n     * @param listing Listing to hash\n     * @return Listing hash\n     */\n    function hashListing(Listing memory listing) public pure returns (bytes32) {\n        return keccak256(abi.encode(listing.index, listing.tokenId, listing.amount, listing.price));\n    }\n\n    /**\n     * @notice Create a hash of calldata with an approved caller\n     * @param _caller Address approved to execute the calldata\n     * @return hash Calldata hash\n     */\n    function _hashCalldata(address _caller) internal pure returns (bytes32 hash) {\n        assembly {\n            let nextPointer := mload(0x40)\n            let size := add(sub(nextPointer, 0x80), 0x20)\n            mstore(nextPointer, _caller)\n            hash := keccak256(0x80, size)\n        }\n    }\n\n    /**\n     * @notice Create an EIP712 hash of a FeeRate struct\n     * @param feeRate FeeRate to hash\n     * @return FeeRate EIP712 hash\n     */\n    function _hashFeeRate(FeeRate memory feeRate) private view returns (bytes32) {\n        return keccak256(abi.encode(_FEE_RATE_TYPEHASH, feeRate.recipient, feeRate.rate));\n    }\n\n    /**\n     * @notice Create an EIP712 hash to sign\n     * @param hash Primary EIP712 object hash\n     * @return EIP712 hash\n     */\n    function _hashToSign(bytes32 hash) private view returns (bytes32) {\n        return keccak256(bytes.concat(bytes2(0x1901), _DOMAIN_SEPARATOR, hash));\n    }\n\n    /**\n     * @notice Generate all EIP712 Typehashes\n     */\n    function _createTypehashes(\n        address proxy\n    )\n        private\n        view\n        returns (bytes32 feeRateTypehash, bytes32 orderTypehash, bytes32 domainSeparator)\n    {\n        bytes32 eip712DomainTypehash = keccak256(\n            bytes.concat(\n                "EIP712Domain(",\n                "string name,",\n                "string version,",\n                "uint256 chainId,",\n                "address verifyingContract",\n                ")"\n            )\n        );\n\n        bytes memory feeRateTypestring = "FeeRate(address recipient,uint16 rate)";\n\n        orderTypehash = keccak256(\n            bytes.concat(\n                "Order(",\n                "address trader,",\n                "address collection,",\n                "bytes32 listingsRoot,",\n                "uint256 numberOfListings,",\n                "uint256 expirationTime,",\n                "uint8 assetType,",\n                "FeeRate makerFee,",\n                "uint256 salt,",\n                "uint8 orderType,",\n                "uint256 nonce",\n                ")",\n                feeRateTypestring\n            )\n        );\n\n        feeRateTypehash = keccak256(feeRateTypestring);\n\n        domainSeparator = _hashDomain(\n            eip712DomainTypehash,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION)),\n            proxy\n        );\n    }\n\n    /**\n     * @notice Create an EIP712 domain separator\n     * @param eip712DomainTypehash Typehash of the EIP712Domain struct\n     * @param nameHash Hash of the contract name\n     * @param versionHash Hash of the version string\n     * @param proxy Address of the proxy this implementation will be behind\n     * @return EIP712Domain hash\n     */\n    function _hashDomain(\n        bytes32 eip712DomainTypehash,\n        bytes32 nameHash,\n        bytes32 versionHash,\n        address proxy\n    ) private view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(eip712DomainTypehash, nameHash, versionHash, block.chainid, proxy)\n            );\n    }\n\n    /**\n     * @notice Verify EIP712 signature\n     * @param signer Address of the alleged signer\n     * @param hash EIP712 hash\n     * @param signatures Packed bytes array of order signatures\n     * @param index Index of the signature to verify\n     * @return authorized Validity of the signature\n     */\n    function _verifyAuthorization(\n        address signer,\n        bytes32 hash,\n        bytes memory signatures,\n        uint256 index\n    ) internal view returns (bool authorized) {\n        bytes32 hashToSign = _hashToSign(hash);\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            let signatureOffset := add(add(signatures, One_word), mul(Signatures_size, index))\n            r := mload(signatureOffset)\n            s := mload(add(signatureOffset, Signatures_s_offset))\n            v := shr(Bytes1_shift, mload(add(signatureOffset, Signatures_v_offset)))\n        }\n        authorized = _verify(signer, hashToSign, v, r, s);\n    }\n\n    modifier verifyOracleSignature(bytes32 hash, bytes calldata oracleSignature) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        uint32 blockNumber;\n        address oracle;\n        assembly {\n            let signatureOffset := oracleSignature.offset\n            r := calldataload(signatureOffset)\n            s := calldataload(add(signatureOffset, OracleSignatures_s_offset))\n            v := shr(Bytes1_shift, calldataload(add(signatureOffset, OracleSignatures_v_offset)))\n            blockNumber := shr(\n                Bytes4_shift,\n                calldataload(add(signatureOffset, OracleSignatures_blockNumber_offset))\n            )\n            oracle := shr(\n                Bytes20_shift,\n                calldataload(add(signatureOffset, OracleSignatures_oracle_offset))\n            )\n        }\n        if (blockNumber + blockRange < block.number) {\n            revert ExpiredOracleSignature();\n        }\n        if (oracles[oracle] == 0) {\n            revert UnauthorizedOracle();\n        }\n        if (!_verify(oracle, keccak256(abi.encodePacked(hash, blockNumber)), v, r, s)) {\n            revert InvalidOracleSignature();\n        }\n        _;\n    }\n\n    /**\n     * @notice Verify signature of digest\n     * @param signer Address of expected signer\n     * @param digest Signature digest\n     * @param v v parameter\n     * @param r r parameter\n     * @param s s parameter\n     */\n    function _verify(\n        address signer,\n        bytes32 digest,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) private pure returns (bool valid) {\n        address recoveredSigner = ecrecover(digest, v, r, s);\n        if (recoveredSigner != address(0) && recoveredSigner == signer) {\n            valid = true;\n        }\n    }\n\n    uint256[47] private __gap;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'private', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Signatures._verifyAuthorization', 'start_line': 2765, 'end_line': 2782, 'offset_start': 101804, 'offset_end': 102465, 'content': 'function _verifyAuthorization(\n        address signer,\n        bytes32 hash,\n        bytes memory signatures,\n        uint256 index\n    ) internal view returns (bool authorized) {\n        bytes32 hashToSign = _hashToSign(hash);\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            let signatureOffset := add(add(signatures, One_word), mul(Signatures_size, index))\n            r := mload(signatureOffset)\n            s := mload(add(signatureOffset, Signatures_s_offset))\n            v := shr(Bytes1_shift, mload(add(signatureOffset, Signatures_v_offset)))\n        }\n        authorized = _verify(signer, hashToSign, v, r, s);\n    }', 'contract_name': 'Signatures', 'contract_code': '{\n    string private constant _NAME = "Blur Exchange";\n    string private constant _VERSION = "1.0";\n\n    bytes32 private immutable _FEE_RATE_TYPEHASH;\n    bytes32 private immutable _ORDER_TYPEHASH;\n    bytes32 private immutable _DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public oracles;\n    mapping(address => uint256) public nonces;\n    uint256 public blockRange;\n\n    constructor(address proxy) {\n        (_FEE_RATE_TYPEHASH, _ORDER_TYPEHASH, _DOMAIN_SEPARATOR) = _createTypehashes(proxy);\n    }\n\n    /**\n     * @notice Verify the domain separator produced during deployment of the implementation matches that of the proxy\n     */\n    function verifyDomain() public view {\n        bytes32 eip712DomainTypehash = keccak256(\n            bytes.concat(\n                "EIP712Domain(",\n                "string name,",\n                "string version,",\n                "uint256 chainId,",\n                "address verifyingContract",\n                ")"\n            )\n        );\n\n        bytes32 domainSeparator = _hashDomain(\n            eip712DomainTypehash,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION)),\n            address(this)\n        );\n        if (_DOMAIN_SEPARATOR != domainSeparator) {\n            revert InvalidDomain();\n        }\n    }\n\n    /**\n     * @notice Return version and domain separator\n     */\n    function information() external view returns (string memory version, bytes32 domainSeparator) {\n        version = _VERSION;\n        domainSeparator = _DOMAIN_SEPARATOR;\n    }\n\n    /**\n     * @notice Create a hash of TakeAsk calldata with an approved caller\n     * @param inputs TakeAsk inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeAsk(TakeAsk memory inputs, address _caller) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeBid calldata with an approved caller\n     * @param inputs TakeBid inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeBid(TakeBid memory inputs, address _caller) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeAskSingle calldata with an approved caller\n     * @param inputs TakeAskSingle inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeAskSingle(\n        TakeAskSingle memory inputs,\n        address _caller\n    ) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeBidSingle calldata with an approved caller\n     * @param inputs TakeBidSingle inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeBidSingle(\n        TakeBidSingle memory inputs,\n        address _caller\n    ) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create an EIP712 hash of an Order\n     * @dev Includes two additional parameters not in the struct (orderType, nonce)\n     * @param order Order to hash\n     * @param orderType OrderType of the Order\n     * @return Order EIP712 hash\n     */\n    function hashOrder(Order memory order, OrderType orderType) public view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    _ORDER_TYPEHASH,\n                    order.trader,\n                    order.collection,\n                    order.listingsRoot,\n                    order.numberOfListings,\n                    order.expirationTime,\n                    order.assetType,\n                    _hashFeeRate(order.makerFee),\n                    order.salt,\n                    orderType,\n                    nonces[order.trader]\n                )\n            );\n    }\n\n    /**\n     * @notice Create a hash of a Listing struct\n     * @param listing Listing to hash\n     * @return Listing hash\n     */\n    function hashListing(Listing memory listing) public pure returns (bytes32) {\n        return keccak256(abi.encode(listing.index, listing.tokenId, listing.amount, listing.price));\n    }\n\n    /**\n     * @notice Create a hash of calldata with an approved caller\n     * @param _caller Address approved to execute the calldata\n     * @return hash Calldata hash\n     */\n    function _hashCalldata(address _caller) internal pure returns (bytes32 hash) {\n        assembly {\n            let nextPointer := mload(0x40)\n            let size := add(sub(nextPointer, 0x80), 0x20)\n            mstore(nextPointer, _caller)\n            hash := keccak256(0x80, size)\n        }\n    }\n\n    /**\n     * @notice Create an EIP712 hash of a FeeRate struct\n     * @param feeRate FeeRate to hash\n     * @return FeeRate EIP712 hash\n     */\n    function _hashFeeRate(FeeRate memory feeRate) private view returns (bytes32) {\n        return keccak256(abi.encode(_FEE_RATE_TYPEHASH, feeRate.recipient, feeRate.rate));\n    }\n\n    /**\n     * @notice Create an EIP712 hash to sign\n     * @param hash Primary EIP712 object hash\n     * @return EIP712 hash\n     */\n    function _hashToSign(bytes32 hash) private view returns (bytes32) {\n        return keccak256(bytes.concat(bytes2(0x1901), _DOMAIN_SEPARATOR, hash));\n    }\n\n    /**\n     * @notice Generate all EIP712 Typehashes\n     */\n    function _createTypehashes(\n        address proxy\n    )\n        private\n        view\n        returns (bytes32 feeRateTypehash, bytes32 orderTypehash, bytes32 domainSeparator)\n    {\n        bytes32 eip712DomainTypehash = keccak256(\n            bytes.concat(\n                "EIP712Domain(",\n                "string name,",\n                "string version,",\n                "uint256 chainId,",\n                "address verifyingContract",\n                ")"\n            )\n        );\n\n        bytes memory feeRateTypestring = "FeeRate(address recipient,uint16 rate)";\n\n        orderTypehash = keccak256(\n            bytes.concat(\n                "Order(",\n                "address trader,",\n                "address collection,",\n                "bytes32 listingsRoot,",\n                "uint256 numberOfListings,",\n                "uint256 expirationTime,",\n                "uint8 assetType,",\n                "FeeRate makerFee,",\n                "uint256 salt,",\n                "uint8 orderType,",\n                "uint256 nonce",\n                ")",\n                feeRateTypestring\n            )\n        );\n\n        feeRateTypehash = keccak256(feeRateTypestring);\n\n        domainSeparator = _hashDomain(\n            eip712DomainTypehash,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION)),\n            proxy\n        );\n    }\n\n    /**\n     * @notice Create an EIP712 domain separator\n     * @param eip712DomainTypehash Typehash of the EIP712Domain struct\n     * @param nameHash Hash of the contract name\n     * @param versionHash Hash of the version string\n     * @param proxy Address of the proxy this implementation will be behind\n     * @return EIP712Domain hash\n     */\n    function _hashDomain(\n        bytes32 eip712DomainTypehash,\n        bytes32 nameHash,\n        bytes32 versionHash,\n        address proxy\n    ) private view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(eip712DomainTypehash, nameHash, versionHash, block.chainid, proxy)\n            );\n    }\n\n    /**\n     * @notice Verify EIP712 signature\n     * @param signer Address of the alleged signer\n     * @param hash EIP712 hash\n     * @param signatures Packed bytes array of order signatures\n     * @param index Index of the signature to verify\n     * @return authorized Validity of the signature\n     */\n    function _verifyAuthorization(\n        address signer,\n        bytes32 hash,\n        bytes memory signatures,\n        uint256 index\n    ) internal view returns (bool authorized) {\n        bytes32 hashToSign = _hashToSign(hash);\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            let signatureOffset := add(add(signatures, One_word), mul(Signatures_size, index))\n            r := mload(signatureOffset)\n            s := mload(add(signatureOffset, Signatures_s_offset))\n            v := shr(Bytes1_shift, mload(add(signatureOffset, Signatures_v_offset)))\n        }\n        authorized = _verify(signer, hashToSign, v, r, s);\n    }\n\n    modifier verifyOracleSignature(bytes32 hash, bytes calldata oracleSignature) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        uint32 blockNumber;\n        address oracle;\n        assembly {\n            let signatureOffset := oracleSignature.offset\n            r := calldataload(signatureOffset)\n            s := calldataload(add(signatureOffset, OracleSignatures_s_offset))\n            v := shr(Bytes1_shift, calldataload(add(signatureOffset, OracleSignatures_v_offset)))\n            blockNumber := shr(\n                Bytes4_shift,\n                calldataload(add(signatureOffset, OracleSignatures_blockNumber_offset))\n            )\n            oracle := shr(\n                Bytes20_shift,\n                calldataload(add(signatureOffset, OracleSignatures_oracle_offset))\n            )\n        }\n        if (blockNumber + blockRange < block.number) {\n            revert ExpiredOracleSignature();\n        }\n        if (oracles[oracle] == 0) {\n            revert UnauthorizedOracle();\n        }\n        if (!_verify(oracle, keccak256(abi.encodePacked(hash, blockNumber)), v, r, s)) {\n            revert InvalidOracleSignature();\n        }\n        _;\n    }\n\n    /**\n     * @notice Verify signature of digest\n     * @param signer Address of expected signer\n     * @param digest Signature digest\n     * @param v v parameter\n     * @param r r parameter\n     * @param s s parameter\n     */\n    function _verify(\n        address signer,\n        bytes32 digest,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) private pure returns (bool valid) {\n        address recoveredSigner = ecrecover(digest, v, r, s);\n        if (recoveredSigner != address(0) && recoveredSigner == signer) {\n            valid = true;\n        }\n    }\n\n    uint256[47] private __gap;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Signatures._verify', 'start_line': 2824, 'end_line': 2835, 'offset_start': 103879, 'offset_end': 104217, 'content': 'function _verify(\n        address signer,\n        bytes32 digest,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) private pure returns (bool valid) {\n        address recoveredSigner = ecrecover(digest, v, r, s);\n        if (recoveredSigner != address(0) && recoveredSigner == signer) {\n            valid = true;\n        }\n    }', 'contract_name': 'Signatures', 'contract_code': '{\n    string private constant _NAME = "Blur Exchange";\n    string private constant _VERSION = "1.0";\n\n    bytes32 private immutable _FEE_RATE_TYPEHASH;\n    bytes32 private immutable _ORDER_TYPEHASH;\n    bytes32 private immutable _DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public oracles;\n    mapping(address => uint256) public nonces;\n    uint256 public blockRange;\n\n    constructor(address proxy) {\n        (_FEE_RATE_TYPEHASH, _ORDER_TYPEHASH, _DOMAIN_SEPARATOR) = _createTypehashes(proxy);\n    }\n\n    /**\n     * @notice Verify the domain separator produced during deployment of the implementation matches that of the proxy\n     */\n    function verifyDomain() public view {\n        bytes32 eip712DomainTypehash = keccak256(\n            bytes.concat(\n                "EIP712Domain(",\n                "string name,",\n                "string version,",\n                "uint256 chainId,",\n                "address verifyingContract",\n                ")"\n            )\n        );\n\n        bytes32 domainSeparator = _hashDomain(\n            eip712DomainTypehash,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION)),\n            address(this)\n        );\n        if (_DOMAIN_SEPARATOR != domainSeparator) {\n            revert InvalidDomain();\n        }\n    }\n\n    /**\n     * @notice Return version and domain separator\n     */\n    function information() external view returns (string memory version, bytes32 domainSeparator) {\n        version = _VERSION;\n        domainSeparator = _DOMAIN_SEPARATOR;\n    }\n\n    /**\n     * @notice Create a hash of TakeAsk calldata with an approved caller\n     * @param inputs TakeAsk inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeAsk(TakeAsk memory inputs, address _caller) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeBid calldata with an approved caller\n     * @param inputs TakeBid inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeBid(TakeBid memory inputs, address _caller) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeAskSingle calldata with an approved caller\n     * @param inputs TakeAskSingle inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeAskSingle(\n        TakeAskSingle memory inputs,\n        address _caller\n    ) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create a hash of TakeBidSingle calldata with an approved caller\n     * @param inputs TakeBidSingle inputs\n     * @param _caller Address approved to execute the calldata\n     * @return Calldata hash\n     */\n    function hashTakeBidSingle(\n        TakeBidSingle memory inputs,\n        address _caller\n    ) external pure returns (bytes32) {\n        return _hashCalldata(_caller);\n    }\n\n    /**\n     * @notice Create an EIP712 hash of an Order\n     * @dev Includes two additional parameters not in the struct (orderType, nonce)\n     * @param order Order to hash\n     * @param orderType OrderType of the Order\n     * @return Order EIP712 hash\n     */\n    function hashOrder(Order memory order, OrderType orderType) public view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    _ORDER_TYPEHASH,\n                    order.trader,\n                    order.collection,\n                    order.listingsRoot,\n                    order.numberOfListings,\n                    order.expirationTime,\n                    order.assetType,\n                    _hashFeeRate(order.makerFee),\n                    order.salt,\n                    orderType,\n                    nonces[order.trader]\n                )\n            );\n    }\n\n    /**\n     * @notice Create a hash of a Listing struct\n     * @param listing Listing to hash\n     * @return Listing hash\n     */\n    function hashListing(Listing memory listing) public pure returns (bytes32) {\n        return keccak256(abi.encode(listing.index, listing.tokenId, listing.amount, listing.price));\n    }\n\n    /**\n     * @notice Create a hash of calldata with an approved caller\n     * @param _caller Address approved to execute the calldata\n     * @return hash Calldata hash\n     */\n    function _hashCalldata(address _caller) internal pure returns (bytes32 hash) {\n        assembly {\n            let nextPointer := mload(0x40)\n            let size := add(sub(nextPointer, 0x80), 0x20)\n            mstore(nextPointer, _caller)\n            hash := keccak256(0x80, size)\n        }\n    }\n\n    /**\n     * @notice Create an EIP712 hash of a FeeRate struct\n     * @param feeRate FeeRate to hash\n     * @return FeeRate EIP712 hash\n     */\n    function _hashFeeRate(FeeRate memory feeRate) private view returns (bytes32) {\n        return keccak256(abi.encode(_FEE_RATE_TYPEHASH, feeRate.recipient, feeRate.rate));\n    }\n\n    /**\n     * @notice Create an EIP712 hash to sign\n     * @param hash Primary EIP712 object hash\n     * @return EIP712 hash\n     */\n    function _hashToSign(bytes32 hash) private view returns (bytes32) {\n        return keccak256(bytes.concat(bytes2(0x1901), _DOMAIN_SEPARATOR, hash));\n    }\n\n    /**\n     * @notice Generate all EIP712 Typehashes\n     */\n    function _createTypehashes(\n        address proxy\n    )\n        private\n        view\n        returns (bytes32 feeRateTypehash, bytes32 orderTypehash, bytes32 domainSeparator)\n    {\n        bytes32 eip712DomainTypehash = keccak256(\n            bytes.concat(\n                "EIP712Domain(",\n                "string name,",\n                "string version,",\n                "uint256 chainId,",\n                "address verifyingContract",\n                ")"\n            )\n        );\n\n        bytes memory feeRateTypestring = "FeeRate(address recipient,uint16 rate)";\n\n        orderTypehash = keccak256(\n            bytes.concat(\n                "Order(",\n                "address trader,",\n                "address collection,",\n                "bytes32 listingsRoot,",\n                "uint256 numberOfListings,",\n                "uint256 expirationTime,",\n                "uint8 assetType,",\n                "FeeRate makerFee,",\n                "uint256 salt,",\n                "uint8 orderType,",\n                "uint256 nonce",\n                ")",\n                feeRateTypestring\n            )\n        );\n\n        feeRateTypehash = keccak256(feeRateTypestring);\n\n        domainSeparator = _hashDomain(\n            eip712DomainTypehash,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION)),\n            proxy\n        );\n    }\n\n    /**\n     * @notice Create an EIP712 domain separator\n     * @param eip712DomainTypehash Typehash of the EIP712Domain struct\n     * @param nameHash Hash of the contract name\n     * @param versionHash Hash of the version string\n     * @param proxy Address of the proxy this implementation will be behind\n     * @return EIP712Domain hash\n     */\n    function _hashDomain(\n        bytes32 eip712DomainTypehash,\n        bytes32 nameHash,\n        bytes32 versionHash,\n        address proxy\n    ) private view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(eip712DomainTypehash, nameHash, versionHash, block.chainid, proxy)\n            );\n    }\n\n    /**\n     * @notice Verify EIP712 signature\n     * @param signer Address of the alleged signer\n     * @param hash EIP712 hash\n     * @param signatures Packed bytes array of order signatures\n     * @param index Index of the signature to verify\n     * @return authorized Validity of the signature\n     */\n    function _verifyAuthorization(\n        address signer,\n        bytes32 hash,\n        bytes memory signatures,\n        uint256 index\n    ) internal view returns (bool authorized) {\n        bytes32 hashToSign = _hashToSign(hash);\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            let signatureOffset := add(add(signatures, One_word), mul(Signatures_size, index))\n            r := mload(signatureOffset)\n            s := mload(add(signatureOffset, Signatures_s_offset))\n            v := shr(Bytes1_shift, mload(add(signatureOffset, Signatures_v_offset)))\n        }\n        authorized = _verify(signer, hashToSign, v, r, s);\n    }\n\n    modifier verifyOracleSignature(bytes32 hash, bytes calldata oracleSignature) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        uint32 blockNumber;\n        address oracle;\n        assembly {\n            let signatureOffset := oracleSignature.offset\n            r := calldataload(signatureOffset)\n            s := calldataload(add(signatureOffset, OracleSignatures_s_offset))\n            v := shr(Bytes1_shift, calldataload(add(signatureOffset, OracleSignatures_v_offset)))\n            blockNumber := shr(\n                Bytes4_shift,\n                calldataload(add(signatureOffset, OracleSignatures_blockNumber_offset))\n            )\n            oracle := shr(\n                Bytes20_shift,\n                calldataload(add(signatureOffset, OracleSignatures_oracle_offset))\n            )\n        }\n        if (blockNumber + blockRange < block.number) {\n            revert ExpiredOracleSignature();\n        }\n        if (oracles[oracle] == 0) {\n            revert UnauthorizedOracle();\n        }\n        if (!_verify(oracle, keccak256(abi.encodePacked(hash, blockNumber)), v, r, s)) {\n            revert InvalidOracleSignature();\n        }\n        _;\n    }\n\n    /**\n     * @notice Verify signature of digest\n     * @param signer Address of expected signer\n     * @param digest Signature digest\n     * @param v v parameter\n     * @param r r parameter\n     * @param s s parameter\n     */\n    function _verify(\n        address signer,\n        bytes32 digest,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) private pure returns (bool valid) {\n        address recoveredSigner = ecrecover(digest, v, r, s);\n        if (recoveredSigner != address(0) && recoveredSigner == signer) {\n            valid = true;\n        }\n    }\n\n    uint256[47] private __gap;\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'private', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC1967UpgradeUpgradeable.__ERC1967Upgrade_init', 'start_line': 2861, 'end_line': 2862, 'offset_start': 105003, 'offset_end': 105068, 'content': 'function __ERC1967Upgrade_init() internal onlyInitializing {\n    }', 'contract_name': 'ERC1967UpgradeUpgradeable', 'contract_code': '{\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of "eip1967.proxy.rollback" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), "ERC1967: new implementation is not a contract");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, "ERC1967Upgrade: unsupported proxiableUUID");\n            } catch {\n                revert("ERC1967Upgrade: new implementation is not UUPS");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), "ERC1967: new admin is the zero address");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256(\'eip1967.proxy.beacon\')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), "ERC1967: new beacon is not a contract");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            "ERC1967: beacon implementation is not a contract"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), "Address: delegate call to non-contract");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, "Address: low-level delegate call failed");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC1967UpgradeUpgradeable.__ERC1967Upgrade_init_unchained', 'start_line': 2864, 'end_line': 2865, 'offset_start': 105075, 'offset_end': 105150, 'content': 'function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }', 'contract_name': 'ERC1967UpgradeUpgradeable', 'contract_code': '{\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of "eip1967.proxy.rollback" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), "ERC1967: new implementation is not a contract");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, "ERC1967Upgrade: unsupported proxiableUUID");\n            } catch {\n                revert("ERC1967Upgrade: new implementation is not UUPS");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), "ERC1967: new admin is the zero address");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256(\'eip1967.proxy.beacon\')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), "ERC1967: new beacon is not a contract");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            "ERC1967: beacon implementation is not a contract"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), "Address: delegate call to non-contract");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, "Address: low-level delegate call failed");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC1967UpgradeUpgradeable._getImplementation', 'start_line': 2879, 'end_line': 2881, 'offset_start': 105763, 'offset_end': 105913, 'content': 'function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }', 'contract_name': 'ERC1967UpgradeUpgradeable', 'contract_code': '{\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of "eip1967.proxy.rollback" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), "ERC1967: new implementation is not a contract");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, "ERC1967Upgrade: unsupported proxiableUUID");\n            } catch {\n                revert("ERC1967Upgrade: new implementation is not UUPS");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), "ERC1967: new admin is the zero address");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256(\'eip1967.proxy.beacon\')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), "ERC1967: new beacon is not a contract");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            "ERC1967: beacon implementation is not a contract"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), "Address: delegate call to non-contract");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, "Address: low-level delegate call failed");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC1967UpgradeUpgradeable._setImplementation', 'start_line': 2886, 'end_line': 2889, 'offset_start': 106005, 'offset_end': 106285, 'content': 'function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), "ERC1967: new implementation is not a contract");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }', 'contract_name': 'ERC1967UpgradeUpgradeable', 'contract_code': '{\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of "eip1967.proxy.rollback" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), "ERC1967: new implementation is not a contract");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, "ERC1967Upgrade: unsupported proxiableUUID");\n            } catch {\n                revert("ERC1967Upgrade: new implementation is not UUPS");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), "ERC1967: new admin is the zero address");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256(\'eip1967.proxy.beacon\')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), "ERC1967: new beacon is not a contract");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            "ERC1967: beacon implementation is not a contract"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), "Address: delegate call to non-contract");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, "Address: low-level delegate call failed");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'private', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC1967UpgradeUpgradeable._upgradeTo', 'start_line': 2896, 'end_line': 2899, 'offset_start': 106392, 'offset_end': 106543, 'content': 'function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }', 'contract_name': 'ERC1967UpgradeUpgradeable', 'contract_code': '{\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of "eip1967.proxy.rollback" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), "ERC1967: new implementation is not a contract");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, "ERC1967Upgrade: unsupported proxiableUUID");\n            } catch {\n                revert("ERC1967Upgrade: new implementation is not UUPS");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), "ERC1967: new admin is the zero address");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256(\'eip1967.proxy.beacon\')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), "ERC1967: new beacon is not a contract");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            "ERC1967: beacon implementation is not a contract"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), "Address: delegate call to non-contract");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, "Address: low-level delegate call failed");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC1967UpgradeUpgradeable._upgradeToAndCall', 'start_line': 2906, 'end_line': 2915, 'offset_start': 106678, 'offset_end': 106965, 'content': 'function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }', 'contract_name': 'ERC1967UpgradeUpgradeable', 'contract_code': '{\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of "eip1967.proxy.rollback" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), "ERC1967: new implementation is not a contract");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, "ERC1967Upgrade: unsupported proxiableUUID");\n            } catch {\n                revert("ERC1967Upgrade: new implementation is not UUPS");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), "ERC1967: new admin is the zero address");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256(\'eip1967.proxy.beacon\')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), "ERC1967: new beacon is not a contract");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            "ERC1967: beacon implementation is not a contract"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), "Address: delegate call to non-contract");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, "Address: low-level delegate call failed");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC1967UpgradeUpgradeable._upgradeToAndCallUUPS', 'start_line': 2922, 'end_line': 2940, 'offset_start': 107138, 'offset_end': 108111, 'content': 'function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, "ERC1967Upgrade: unsupported proxiableUUID");\n            } catch {\n                revert("ERC1967Upgrade: new implementation is not UUPS");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }', 'contract_name': 'ERC1967UpgradeUpgradeable', 'contract_code': '{\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of "eip1967.proxy.rollback" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), "ERC1967: new implementation is not a contract");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, "ERC1967Upgrade: unsupported proxiableUUID");\n            } catch {\n                revert("ERC1967Upgrade: new implementation is not UUPS");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), "ERC1967: new admin is the zero address");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256(\'eip1967.proxy.beacon\')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), "ERC1967: new beacon is not a contract");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            "ERC1967: beacon implementation is not a contract"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), "Address: delegate call to non-contract");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, "Address: low-level delegate call failed");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC1967UpgradeUpgradeable._getAdmin', 'start_line': 2952, 'end_line': 2954, 'offset_start': 108480, 'offset_end': 108612, 'content': 'function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }', 'contract_name': 'ERC1967UpgradeUpgradeable', 'contract_code': '{\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of "eip1967.proxy.rollback" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), "ERC1967: new implementation is not a contract");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, "ERC1967Upgrade: unsupported proxiableUUID");\n            } catch {\n                revert("ERC1967Upgrade: new implementation is not UUPS");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), "ERC1967: new admin is the zero address");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256(\'eip1967.proxy.beacon\')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), "ERC1967: new beacon is not a contract");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            "ERC1967: beacon implementation is not a contract"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), "Address: delegate call to non-contract");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, "Address: low-level delegate call failed");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC1967UpgradeUpgradeable._setAdmin', 'start_line': 2959, 'end_line': 2962, 'offset_start': 108695, 'offset_end': 108906, 'content': 'function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), "ERC1967: new admin is the zero address");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }', 'contract_name': 'ERC1967UpgradeUpgradeable', 'contract_code': '{\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of "eip1967.proxy.rollback" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), "ERC1967: new implementation is not a contract");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, "ERC1967Upgrade: unsupported proxiableUUID");\n            } catch {\n                revert("ERC1967Upgrade: new implementation is not UUPS");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), "ERC1967: new admin is the zero address");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256(\'eip1967.proxy.beacon\')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), "ERC1967: new beacon is not a contract");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            "ERC1967: beacon implementation is not a contract"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), "Address: delegate call to non-contract");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, "Address: low-level delegate call failed");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'private', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC1967UpgradeUpgradeable._changeAdmin', 'start_line': 2969, 'end_line': 2972, 'offset_start': 109018, 'offset_end': 109152, 'content': 'function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }', 'contract_name': 'ERC1967UpgradeUpgradeable', 'contract_code': '{\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of "eip1967.proxy.rollback" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), "ERC1967: new implementation is not a contract");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, "ERC1967Upgrade: unsupported proxiableUUID");\n            } catch {\n                revert("ERC1967Upgrade: new implementation is not UUPS");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), "ERC1967: new admin is the zero address");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256(\'eip1967.proxy.beacon\')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), "ERC1967: new beacon is not a contract");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            "ERC1967: beacon implementation is not a contract"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), "Address: delegate call to non-contract");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, "Address: low-level delegate call failed");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC1967UpgradeUpgradeable._getBeacon', 'start_line': 2983, 'end_line': 2985, 'offset_start': 109566, 'offset_end': 109700, 'content': 'function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }', 'contract_name': 'ERC1967UpgradeUpgradeable', 'contract_code': '{\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of "eip1967.proxy.rollback" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), "ERC1967: new implementation is not a contract");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, "ERC1967Upgrade: unsupported proxiableUUID");\n            } catch {\n                revert("ERC1967Upgrade: new implementation is not UUPS");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), "ERC1967: new admin is the zero address");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256(\'eip1967.proxy.beacon\')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), "ERC1967: new beacon is not a contract");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            "ERC1967: beacon implementation is not a contract"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), "Address: delegate call to non-contract");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, "Address: low-level delegate call failed");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC1967UpgradeUpgradeable._setBeacon', 'start_line': 2990, 'end_line': 2997, 'offset_start': 109783, 'offset_end': 110197, 'content': 'function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), "ERC1967: new beacon is not a contract");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            "ERC1967: beacon implementation is not a contract"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }', 'contract_name': 'ERC1967UpgradeUpgradeable', 'contract_code': '{\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of "eip1967.proxy.rollback" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), "ERC1967: new implementation is not a contract");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, "ERC1967Upgrade: unsupported proxiableUUID");\n            } catch {\n                revert("ERC1967Upgrade: new implementation is not UUPS");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), "ERC1967: new admin is the zero address");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256(\'eip1967.proxy.beacon\')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), "ERC1967: new beacon is not a contract");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            "ERC1967: beacon implementation is not a contract"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), "Address: delegate call to non-contract");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, "Address: low-level delegate call failed");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'private', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC1967UpgradeUpgradeable._upgradeBeaconToAndCall', 'start_line': 3005, 'end_line': 3015, 'offset_start': 110501, 'offset_end': 110847, 'content': 'function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }', 'contract_name': 'ERC1967UpgradeUpgradeable', 'contract_code': '{\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of "eip1967.proxy.rollback" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), "ERC1967: new implementation is not a contract");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, "ERC1967Upgrade: unsupported proxiableUUID");\n            } catch {\n                revert("ERC1967Upgrade: new implementation is not UUPS");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), "ERC1967: new admin is the zero address");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256(\'eip1967.proxy.beacon\')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), "ERC1967: new beacon is not a contract");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            "ERC1967: beacon implementation is not a contract"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), "Address: delegate call to non-contract");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, "Address: low-level delegate call failed");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC1967UpgradeUpgradeable._functionDelegateCall', 'start_line': 3023, 'end_line': 3029, 'offset_start': 111034, 'offset_end': 111488, 'content': 'function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), "Address: delegate call to non-contract");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, "Address: low-level delegate call failed");\n    }', 'contract_name': 'ERC1967UpgradeUpgradeable', 'contract_code': '{\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of "eip1967.proxy.rollback" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), "ERC1967: new implementation is not a contract");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, "ERC1967Upgrade: unsupported proxiableUUID");\n            } catch {\n                revert("ERC1967Upgrade: new implementation is not UUPS");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), "ERC1967: new admin is the zero address");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256(\'eip1967.proxy.beacon\')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), "ERC1967: new beacon is not a contract");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            "ERC1967: beacon implementation is not a contract"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), "Address: delegate call to non-contract");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, "Address: low-level delegate call failed");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'private', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'OwnableUpgradeable.__Ownable_init', 'start_line': 3067, 'end_line': 3069, 'offset_start': 112787, 'offset_end': 112881, 'content': 'function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }', 'contract_name': 'OwnableUpgradeable', 'contract_code': '{\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), "Ownable: new owner is the zero address");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'OwnableUpgradeable.__Ownable_init_unchained', 'start_line': 3071, 'end_line': 3073, 'offset_start': 112888, 'offset_end': 112998, 'content': 'function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }', 'contract_name': 'OwnableUpgradeable', 'contract_code': '{\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), "Ownable: new owner is the zero address");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'OwnableUpgradeable.owner', 'start_line': 3086, 'end_line': 3088, 'offset_start': 113225, 'offset_end': 113309, 'content': 'function owner() public view virtual returns (address) {\n        return _owner;\n    }', 'contract_name': 'OwnableUpgradeable', 'contract_code': '{\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), "Ownable: new owner is the zero address");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'OwnableUpgradeable._checkOwner', 'start_line': 3093, 'end_line': 3095, 'offset_start': 113383, 'offset_end': 113512, 'content': 'function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n    }', 'contract_name': 'OwnableUpgradeable', 'contract_code': '{\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), "Ownable: new owner is the zero address");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'OwnableUpgradeable.renounceOwnership', 'start_line': 3104, 'end_line': 3106, 'offset_start': 113855, 'offset_end': 113955, 'content': 'function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }', 'contract_name': 'OwnableUpgradeable', 'contract_code': '{\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), "Ownable: new owner is the zero address");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'OwnableUpgradeable.transferOwnership', 'start_line': 3112, 'end_line': 3115, 'offset_start': 114105, 'offset_end': 114302, 'content': 'function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), "Ownable: new owner is the zero address");\n        _transferOwnership(newOwner);\n    }', 'contract_name': 'OwnableUpgradeable', 'contract_code': '{\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), "Ownable: new owner is the zero address");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'OwnableUpgradeable._transferOwnership', 'start_line': 3121, 'end_line': 3125, 'offset_start': 114457, 'offset_end': 114643, 'content': 'function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }', 'contract_name': 'OwnableUpgradeable', 'contract_code': '{\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), "Ownable: new owner is the zero address");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'IBlurExchangeV2.initialize', 'start_line': 3169, 'end_line': 3169, 'offset_start': 115795, 'offset_end': 115825, 'content': 'function initialize() external;', 'contract_name': 'IBlurExchangeV2', 'contract_code': '{\n    error InsufficientFunds();\n    error TokenTransferFailed();\n    error InvalidOrder();\n    error ProtocolFeeTooHigh();\n\n    event NewProtocolFee(address indexed recipient, uint16 indexed rate);\n    event NewGovernor(address indexed governor);\n    event NewBlockRange(uint256 blockRange);\n    event CancelTrade(address indexed user, bytes32 hash, uint256 index, uint256 amount);\n    event NonceIncremented(address indexed user, uint256 newNonce);\n    event SetOracle(address indexed user, bool approved);\n\n    function initialize() external;\n\n    function setProtocolFee(address recipient, uint16 rate) external;\n    function setGovernor(address _governor) external;\n    function setOracle(address oracle, bool approved) external;\n    function setBlockRange(uint256 _blockRange) external;\n    function cancelTrades(Cancel[] memory cancels) external;\n    function incrementNonce() external;\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    function takeAsk(TakeAsk memory inputs, bytes calldata oracleSignature) external payable;\n    function takeBid(TakeBid memory inputs, bytes calldata oracleSignature) external;\n    function takeAskSingle(TakeAskSingle memory inputs, bytes calldata oracleSignature) external payable;\n    function takeBidSingle(TakeBidSingle memory inputs, bytes calldata oracleSignature) external;\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable;\n\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'IBlurExchangeV2.setProtocolFee', 'start_line': 3171, 'end_line': 3171, 'offset_start': 115832, 'offset_end': 115896, 'content': 'function setProtocolFee(address recipient, uint16 rate) external;', 'contract_name': 'IBlurExchangeV2', 'contract_code': '{\n    error InsufficientFunds();\n    error TokenTransferFailed();\n    error InvalidOrder();\n    error ProtocolFeeTooHigh();\n\n    event NewProtocolFee(address indexed recipient, uint16 indexed rate);\n    event NewGovernor(address indexed governor);\n    event NewBlockRange(uint256 blockRange);\n    event CancelTrade(address indexed user, bytes32 hash, uint256 index, uint256 amount);\n    event NonceIncremented(address indexed user, uint256 newNonce);\n    event SetOracle(address indexed user, bool approved);\n\n    function initialize() external;\n\n    function setProtocolFee(address recipient, uint16 rate) external;\n    function setGovernor(address _governor) external;\n    function setOracle(address oracle, bool approved) external;\n    function setBlockRange(uint256 _blockRange) external;\n    function cancelTrades(Cancel[] memory cancels) external;\n    function incrementNonce() external;\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    function takeAsk(TakeAsk memory inputs, bytes calldata oracleSignature) external payable;\n    function takeBid(TakeBid memory inputs, bytes calldata oracleSignature) external;\n    function takeAskSingle(TakeAskSingle memory inputs, bytes calldata oracleSignature) external payable;\n    function takeBidSingle(TakeBidSingle memory inputs, bytes calldata oracleSignature) external;\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable;\n\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'IBlurExchangeV2.setGovernor', 'start_line': 3172, 'end_line': 3172, 'offset_start': 115902, 'offset_end': 115950, 'content': 'function setGovernor(address _governor) external;', 'contract_name': 'IBlurExchangeV2', 'contract_code': '{\n    error InsufficientFunds();\n    error TokenTransferFailed();\n    error InvalidOrder();\n    error ProtocolFeeTooHigh();\n\n    event NewProtocolFee(address indexed recipient, uint16 indexed rate);\n    event NewGovernor(address indexed governor);\n    event NewBlockRange(uint256 blockRange);\n    event CancelTrade(address indexed user, bytes32 hash, uint256 index, uint256 amount);\n    event NonceIncremented(address indexed user, uint256 newNonce);\n    event SetOracle(address indexed user, bool approved);\n\n    function initialize() external;\n\n    function setProtocolFee(address recipient, uint16 rate) external;\n    function setGovernor(address _governor) external;\n    function setOracle(address oracle, bool approved) external;\n    function setBlockRange(uint256 _blockRange) external;\n    function cancelTrades(Cancel[] memory cancels) external;\n    function incrementNonce() external;\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    function takeAsk(TakeAsk memory inputs, bytes calldata oracleSignature) external payable;\n    function takeBid(TakeBid memory inputs, bytes calldata oracleSignature) external;\n    function takeAskSingle(TakeAskSingle memory inputs, bytes calldata oracleSignature) external payable;\n    function takeBidSingle(TakeBidSingle memory inputs, bytes calldata oracleSignature) external;\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable;\n\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'IBlurExchangeV2.setOracle', 'start_line': 3173, 'end_line': 3173, 'offset_start': 115956, 'offset_end': 116014, 'content': 'function setOracle(address oracle, bool approved) external;', 'contract_name': 'IBlurExchangeV2', 'contract_code': '{\n    error InsufficientFunds();\n    error TokenTransferFailed();\n    error InvalidOrder();\n    error ProtocolFeeTooHigh();\n\n    event NewProtocolFee(address indexed recipient, uint16 indexed rate);\n    event NewGovernor(address indexed governor);\n    event NewBlockRange(uint256 blockRange);\n    event CancelTrade(address indexed user, bytes32 hash, uint256 index, uint256 amount);\n    event NonceIncremented(address indexed user, uint256 newNonce);\n    event SetOracle(address indexed user, bool approved);\n\n    function initialize() external;\n\n    function setProtocolFee(address recipient, uint16 rate) external;\n    function setGovernor(address _governor) external;\n    function setOracle(address oracle, bool approved) external;\n    function setBlockRange(uint256 _blockRange) external;\n    function cancelTrades(Cancel[] memory cancels) external;\n    function incrementNonce() external;\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    function takeAsk(TakeAsk memory inputs, bytes calldata oracleSignature) external payable;\n    function takeBid(TakeBid memory inputs, bytes calldata oracleSignature) external;\n    function takeAskSingle(TakeAskSingle memory inputs, bytes calldata oracleSignature) external payable;\n    function takeBidSingle(TakeBidSingle memory inputs, bytes calldata oracleSignature) external;\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable;\n\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'IBlurExchangeV2.setBlockRange', 'start_line': 3174, 'end_line': 3174, 'offset_start': 116020, 'offset_end': 116072, 'content': 'function setBlockRange(uint256 _blockRange) external;', 'contract_name': 'IBlurExchangeV2', 'contract_code': '{\n    error InsufficientFunds();\n    error TokenTransferFailed();\n    error InvalidOrder();\n    error ProtocolFeeTooHigh();\n\n    event NewProtocolFee(address indexed recipient, uint16 indexed rate);\n    event NewGovernor(address indexed governor);\n    event NewBlockRange(uint256 blockRange);\n    event CancelTrade(address indexed user, bytes32 hash, uint256 index, uint256 amount);\n    event NonceIncremented(address indexed user, uint256 newNonce);\n    event SetOracle(address indexed user, bool approved);\n\n    function initialize() external;\n\n    function setProtocolFee(address recipient, uint16 rate) external;\n    function setGovernor(address _governor) external;\n    function setOracle(address oracle, bool approved) external;\n    function setBlockRange(uint256 _blockRange) external;\n    function cancelTrades(Cancel[] memory cancels) external;\n    function incrementNonce() external;\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    function takeAsk(TakeAsk memory inputs, bytes calldata oracleSignature) external payable;\n    function takeBid(TakeBid memory inputs, bytes calldata oracleSignature) external;\n    function takeAskSingle(TakeAskSingle memory inputs, bytes calldata oracleSignature) external payable;\n    function takeBidSingle(TakeBidSingle memory inputs, bytes calldata oracleSignature) external;\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable;\n\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'IBlurExchangeV2.cancelTrades', 'start_line': 3175, 'end_line': 3175, 'offset_start': 116078, 'offset_end': 116133, 'content': 'function cancelTrades(Cancel[] memory cancels) external;', 'contract_name': 'IBlurExchangeV2', 'contract_code': '{\n    error InsufficientFunds();\n    error TokenTransferFailed();\n    error InvalidOrder();\n    error ProtocolFeeTooHigh();\n\n    event NewProtocolFee(address indexed recipient, uint16 indexed rate);\n    event NewGovernor(address indexed governor);\n    event NewBlockRange(uint256 blockRange);\n    event CancelTrade(address indexed user, bytes32 hash, uint256 index, uint256 amount);\n    event NonceIncremented(address indexed user, uint256 newNonce);\n    event SetOracle(address indexed user, bool approved);\n\n    function initialize() external;\n\n    function setProtocolFee(address recipient, uint16 rate) external;\n    function setGovernor(address _governor) external;\n    function setOracle(address oracle, bool approved) external;\n    function setBlockRange(uint256 _blockRange) external;\n    function cancelTrades(Cancel[] memory cancels) external;\n    function incrementNonce() external;\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    function takeAsk(TakeAsk memory inputs, bytes calldata oracleSignature) external payable;\n    function takeBid(TakeBid memory inputs, bytes calldata oracleSignature) external;\n    function takeAskSingle(TakeAskSingle memory inputs, bytes calldata oracleSignature) external payable;\n    function takeBidSingle(TakeBidSingle memory inputs, bytes calldata oracleSignature) external;\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable;\n\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'IBlurExchangeV2.incrementNonce', 'start_line': 3176, 'end_line': 3176, 'offset_start': 116139, 'offset_end': 116173, 'content': 'function incrementNonce() external;', 'contract_name': 'IBlurExchangeV2', 'contract_code': '{\n    error InsufficientFunds();\n    error TokenTransferFailed();\n    error InvalidOrder();\n    error ProtocolFeeTooHigh();\n\n    event NewProtocolFee(address indexed recipient, uint16 indexed rate);\n    event NewGovernor(address indexed governor);\n    event NewBlockRange(uint256 blockRange);\n    event CancelTrade(address indexed user, bytes32 hash, uint256 index, uint256 amount);\n    event NonceIncremented(address indexed user, uint256 newNonce);\n    event SetOracle(address indexed user, bool approved);\n\n    function initialize() external;\n\n    function setProtocolFee(address recipient, uint16 rate) external;\n    function setGovernor(address _governor) external;\n    function setOracle(address oracle, bool approved) external;\n    function setBlockRange(uint256 _blockRange) external;\n    function cancelTrades(Cancel[] memory cancels) external;\n    function incrementNonce() external;\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    function takeAsk(TakeAsk memory inputs, bytes calldata oracleSignature) external payable;\n    function takeBid(TakeBid memory inputs, bytes calldata oracleSignature) external;\n    function takeAskSingle(TakeAskSingle memory inputs, bytes calldata oracleSignature) external payable;\n    function takeBidSingle(TakeBidSingle memory inputs, bytes calldata oracleSignature) external;\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable;\n\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'IBlurExchangeV2.takeAsk', 'start_line': 3182, 'end_line': 3182, 'offset_start': 116364, 'offset_end': 116452, 'content': 'function takeAsk(TakeAsk memory inputs, bytes calldata oracleSignature) external payable;', 'contract_name': 'IBlurExchangeV2', 'contract_code': '{\n    error InsufficientFunds();\n    error TokenTransferFailed();\n    error InvalidOrder();\n    error ProtocolFeeTooHigh();\n\n    event NewProtocolFee(address indexed recipient, uint16 indexed rate);\n    event NewGovernor(address indexed governor);\n    event NewBlockRange(uint256 blockRange);\n    event CancelTrade(address indexed user, bytes32 hash, uint256 index, uint256 amount);\n    event NonceIncremented(address indexed user, uint256 newNonce);\n    event SetOracle(address indexed user, bool approved);\n\n    function initialize() external;\n\n    function setProtocolFee(address recipient, uint16 rate) external;\n    function setGovernor(address _governor) external;\n    function setOracle(address oracle, bool approved) external;\n    function setBlockRange(uint256 _blockRange) external;\n    function cancelTrades(Cancel[] memory cancels) external;\n    function incrementNonce() external;\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    function takeAsk(TakeAsk memory inputs, bytes calldata oracleSignature) external payable;\n    function takeBid(TakeBid memory inputs, bytes calldata oracleSignature) external;\n    function takeAskSingle(TakeAskSingle memory inputs, bytes calldata oracleSignature) external payable;\n    function takeBidSingle(TakeBidSingle memory inputs, bytes calldata oracleSignature) external;\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable;\n\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable;\n}', 'modifiers': [], 'stateMutability': 'payable', 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'IBlurExchangeV2.takeBid', 'start_line': 3183, 'end_line': 3183, 'offset_start': 116458, 'offset_end': 116538, 'content': 'function takeBid(TakeBid memory inputs, bytes calldata oracleSignature) external;', 'contract_name': 'IBlurExchangeV2', 'contract_code': '{\n    error InsufficientFunds();\n    error TokenTransferFailed();\n    error InvalidOrder();\n    error ProtocolFeeTooHigh();\n\n    event NewProtocolFee(address indexed recipient, uint16 indexed rate);\n    event NewGovernor(address indexed governor);\n    event NewBlockRange(uint256 blockRange);\n    event CancelTrade(address indexed user, bytes32 hash, uint256 index, uint256 amount);\n    event NonceIncremented(address indexed user, uint256 newNonce);\n    event SetOracle(address indexed user, bool approved);\n\n    function initialize() external;\n\n    function setProtocolFee(address recipient, uint16 rate) external;\n    function setGovernor(address _governor) external;\n    function setOracle(address oracle, bool approved) external;\n    function setBlockRange(uint256 _blockRange) external;\n    function cancelTrades(Cancel[] memory cancels) external;\n    function incrementNonce() external;\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    function takeAsk(TakeAsk memory inputs, bytes calldata oracleSignature) external payable;\n    function takeBid(TakeBid memory inputs, bytes calldata oracleSignature) external;\n    function takeAskSingle(TakeAskSingle memory inputs, bytes calldata oracleSignature) external payable;\n    function takeBidSingle(TakeBidSingle memory inputs, bytes calldata oracleSignature) external;\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable;\n\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'IBlurExchangeV2.takeAskSingle', 'start_line': 3184, 'end_line': 3184, 'offset_start': 116544, 'offset_end': 116644, 'content': 'function takeAskSingle(TakeAskSingle memory inputs, bytes calldata oracleSignature) external payable;', 'contract_name': 'IBlurExchangeV2', 'contract_code': '{\n    error InsufficientFunds();\n    error TokenTransferFailed();\n    error InvalidOrder();\n    error ProtocolFeeTooHigh();\n\n    event NewProtocolFee(address indexed recipient, uint16 indexed rate);\n    event NewGovernor(address indexed governor);\n    event NewBlockRange(uint256 blockRange);\n    event CancelTrade(address indexed user, bytes32 hash, uint256 index, uint256 amount);\n    event NonceIncremented(address indexed user, uint256 newNonce);\n    event SetOracle(address indexed user, bool approved);\n\n    function initialize() external;\n\n    function setProtocolFee(address recipient, uint16 rate) external;\n    function setGovernor(address _governor) external;\n    function setOracle(address oracle, bool approved) external;\n    function setBlockRange(uint256 _blockRange) external;\n    function cancelTrades(Cancel[] memory cancels) external;\n    function incrementNonce() external;\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    function takeAsk(TakeAsk memory inputs, bytes calldata oracleSignature) external payable;\n    function takeBid(TakeBid memory inputs, bytes calldata oracleSignature) external;\n    function takeAskSingle(TakeAskSingle memory inputs, bytes calldata oracleSignature) external payable;\n    function takeBidSingle(TakeBidSingle memory inputs, bytes calldata oracleSignature) external;\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable;\n\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable;\n}', 'modifiers': [], 'stateMutability': 'payable', 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'IBlurExchangeV2.takeBidSingle', 'start_line': 3185, 'end_line': 3185, 'offset_start': 116650, 'offset_end': 116742, 'content': 'function takeBidSingle(TakeBidSingle memory inputs, bytes calldata oracleSignature) external;', 'contract_name': 'IBlurExchangeV2', 'contract_code': '{\n    error InsufficientFunds();\n    error TokenTransferFailed();\n    error InvalidOrder();\n    error ProtocolFeeTooHigh();\n\n    event NewProtocolFee(address indexed recipient, uint16 indexed rate);\n    event NewGovernor(address indexed governor);\n    event NewBlockRange(uint256 blockRange);\n    event CancelTrade(address indexed user, bytes32 hash, uint256 index, uint256 amount);\n    event NonceIncremented(address indexed user, uint256 newNonce);\n    event SetOracle(address indexed user, bool approved);\n\n    function initialize() external;\n\n    function setProtocolFee(address recipient, uint16 rate) external;\n    function setGovernor(address _governor) external;\n    function setOracle(address oracle, bool approved) external;\n    function setBlockRange(uint256 _blockRange) external;\n    function cancelTrades(Cancel[] memory cancels) external;\n    function incrementNonce() external;\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    function takeAsk(TakeAsk memory inputs, bytes calldata oracleSignature) external payable;\n    function takeBid(TakeBid memory inputs, bytes calldata oracleSignature) external;\n    function takeAskSingle(TakeAskSingle memory inputs, bytes calldata oracleSignature) external payable;\n    function takeBidSingle(TakeBidSingle memory inputs, bytes calldata oracleSignature) external;\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable;\n\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'IBlurExchangeV2.takeAskSinglePool', 'start_line': 3191, 'end_line': 3195, 'offset_start': 116936, 'offset_end': 117096, 'content': 'function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable;', 'contract_name': 'IBlurExchangeV2', 'contract_code': '{\n    error InsufficientFunds();\n    error TokenTransferFailed();\n    error InvalidOrder();\n    error ProtocolFeeTooHigh();\n\n    event NewProtocolFee(address indexed recipient, uint16 indexed rate);\n    event NewGovernor(address indexed governor);\n    event NewBlockRange(uint256 blockRange);\n    event CancelTrade(address indexed user, bytes32 hash, uint256 index, uint256 amount);\n    event NonceIncremented(address indexed user, uint256 newNonce);\n    event SetOracle(address indexed user, bool approved);\n\n    function initialize() external;\n\n    function setProtocolFee(address recipient, uint16 rate) external;\n    function setGovernor(address _governor) external;\n    function setOracle(address oracle, bool approved) external;\n    function setBlockRange(uint256 _blockRange) external;\n    function cancelTrades(Cancel[] memory cancels) external;\n    function incrementNonce() external;\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    function takeAsk(TakeAsk memory inputs, bytes calldata oracleSignature) external payable;\n    function takeBid(TakeBid memory inputs, bytes calldata oracleSignature) external;\n    function takeAskSingle(TakeAskSingle memory inputs, bytes calldata oracleSignature) external payable;\n    function takeBidSingle(TakeBidSingle memory inputs, bytes calldata oracleSignature) external;\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable;\n\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable;\n}', 'modifiers': [], 'stateMutability': 'payable', 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'IBlurExchangeV2.takeAskPool', 'start_line': 3197, 'end_line': 3201, 'offset_start': 117103, 'offset_end': 117251, 'content': 'function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable;', 'contract_name': 'IBlurExchangeV2', 'contract_code': '{\n    error InsufficientFunds();\n    error TokenTransferFailed();\n    error InvalidOrder();\n    error ProtocolFeeTooHigh();\n\n    event NewProtocolFee(address indexed recipient, uint16 indexed rate);\n    event NewGovernor(address indexed governor);\n    event NewBlockRange(uint256 blockRange);\n    event CancelTrade(address indexed user, bytes32 hash, uint256 index, uint256 amount);\n    event NonceIncremented(address indexed user, uint256 newNonce);\n    event SetOracle(address indexed user, bool approved);\n\n    function initialize() external;\n\n    function setProtocolFee(address recipient, uint16 rate) external;\n    function setGovernor(address _governor) external;\n    function setOracle(address oracle, bool approved) external;\n    function setBlockRange(uint256 _blockRange) external;\n    function cancelTrades(Cancel[] memory cancels) external;\n    function incrementNonce() external;\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    function takeAsk(TakeAsk memory inputs, bytes calldata oracleSignature) external payable;\n    function takeBid(TakeBid memory inputs, bytes calldata oracleSignature) external;\n    function takeAskSingle(TakeAskSingle memory inputs, bytes calldata oracleSignature) external payable;\n    function takeBidSingle(TakeBidSingle memory inputs, bytes calldata oracleSignature) external;\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable;\n\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable;\n}', 'modifiers': [], 'stateMutability': 'payable', 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Ownable2StepUpgradeable.__Ownable2Step_init', 'start_line': 3224, 'end_line': 3226, 'offset_start': 117994, 'offset_end': 118093, 'content': 'function __Ownable2Step_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }', 'contract_name': 'Ownable2StepUpgradeable', 'contract_code': '{\n    function __Ownable2Step_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\n    }\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() external {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, "Ownable2Step: caller is not the new owner");\n        _transferOwnership(sender);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Ownable2StepUpgradeable.__Ownable2Step_init_unchained', 'start_line': 3228, 'end_line': 3229, 'offset_start': 118100, 'offset_end': 118173, 'content': 'function __Ownable2Step_init_unchained() internal onlyInitializing {\n    }', 'contract_name': 'Ownable2StepUpgradeable', 'contract_code': '{\n    function __Ownable2Step_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\n    }\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() external {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, "Ownable2Step: caller is not the new owner");\n        _transferOwnership(sender);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Ownable2StepUpgradeable.pendingOwner', 'start_line': 3237, 'end_line': 3239, 'offset_start': 118379, 'offset_end': 118477, 'content': 'function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }', 'contract_name': 'Ownable2StepUpgradeable', 'contract_code': '{\n    function __Ownable2Step_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\n    }\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() external {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, "Ownable2Step: caller is not the new owner");\n        _transferOwnership(sender);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Ownable2StepUpgradeable.transferOwnership', 'start_line': 3245, 'end_line': 3248, 'offset_start': 118671, 'offset_end': 118848, 'content': 'function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }', 'contract_name': 'Ownable2StepUpgradeable', 'contract_code': '{\n    function __Ownable2Step_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\n    }\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() external {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, "Ownable2Step: caller is not the new owner");\n        _transferOwnership(sender);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Ownable2StepUpgradeable._transferOwnership', 'start_line': 3254, 'end_line': 3257, 'offset_start': 119033, 'offset_end': 119185, 'content': 'function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }', 'contract_name': 'Ownable2StepUpgradeable', 'contract_code': '{\n    function __Ownable2Step_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\n    }\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() external {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, "Ownable2Step: caller is not the new owner");\n        _transferOwnership(sender);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'Ownable2StepUpgradeable.acceptOwnership', 'start_line': 3262, 'end_line': 3266, 'offset_start': 119266, 'offset_end': 119471, 'content': 'function acceptOwnership() external {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, "Ownable2Step: caller is not the new owner");\n        _transferOwnership(sender);\n    }', 'contract_name': 'Ownable2StepUpgradeable', 'contract_code': '{\n    function __Ownable2Step_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\n    }\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() external {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, "Ownable2Step: caller is not the new owner");\n        _transferOwnership(sender);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'AddressUpgradeable.isContract', 'start_line': 3311, 'end_line': 3317, 'offset_start': 120953, 'offset_end': 121272, 'content': 'function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }', 'contract_name': 'AddressUpgradeable', 'contract_code': '{\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\'t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, "Address: insufficient balance");\n\n        (bool success, ) = recipient.call{value: amount}("");\n        require(success, "Address: unable to send value, recipient may have reverted");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, "Address: low-level call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, "Address: insufficient balance for call");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, "Address: low-level static call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), "Address: call to non-contract");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn\'t, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'AddressUpgradeable.sendValue', 'start_line': 3335, 'end_line': 3340, 'offset_start': 122190, 'offset_end': 122501, 'content': 'function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, "Address: insufficient balance");\n\n        (bool success, ) = recipient.call{value: amount}("");\n        require(success, "Address: unable to send value, recipient may have reverted");\n    }', 'contract_name': 'AddressUpgradeable', 'contract_code': '{\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\'t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, "Address: insufficient balance");\n\n        (bool success, ) = recipient.call{value: amount}("");\n        require(success, "Address: unable to send value, recipient may have reverted");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, "Address: low-level call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, "Address: insufficient balance for call");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, "Address: low-level static call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), "Address: call to non-contract");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn\'t, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'AddressUpgradeable.functionCall', 'start_line': 3360, 'end_line': 3362, 'offset_start': 123244, 'offset_end': 123428, 'content': 'function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, "Address: low-level call failed");\n    }', 'contract_name': 'AddressUpgradeable', 'contract_code': '{\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\'t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, "Address: insufficient balance");\n\n        (bool success, ) = recipient.call{value: amount}("");\n        require(success, "Address: unable to send value, recipient may have reverted");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, "Address: low-level call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, "Address: insufficient balance for call");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, "Address: low-level static call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), "Address: call to non-contract");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn\'t, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'AddressUpgradeable.functionCall', 'start_line': 3370, 'end_line': 3376, 'offset_start': 123651, 'offset_end': 123873, 'content': 'function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }', 'contract_name': 'AddressUpgradeable', 'contract_code': '{\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\'t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, "Address: insufficient balance");\n\n        (bool success, ) = recipient.call{value: amount}("");\n        require(success, "Address: unable to send value, recipient may have reverted");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, "Address: low-level call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, "Address: insufficient balance for call");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, "Address: low-level static call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), "Address: call to non-contract");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn\'t, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'AddressUpgradeable.functionCallWithValue', 'start_line': 3389, 'end_line': 3395, 'offset_start': 124236, 'offset_end': 124489, 'content': 'function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n    }', 'contract_name': 'AddressUpgradeable', 'contract_code': '{\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\'t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, "Address: insufficient balance");\n\n        (bool success, ) = recipient.call{value: amount}("");\n        require(success, "Address: unable to send value, recipient may have reverted");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, "Address: low-level call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, "Address: insufficient balance for call");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, "Address: low-level static call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), "Address: call to non-contract");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn\'t, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'AddressUpgradeable.functionCallWithValue', 'start_line': 3403, 'end_line': 3412, 'offset_start': 124738, 'offset_end': 125183, 'content': 'function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, "Address: insufficient balance for call");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }', 'contract_name': 'AddressUpgradeable', 'contract_code': '{\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\'t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, "Address: insufficient balance");\n\n        (bool success, ) = recipient.call{value: amount}("");\n        require(success, "Address: unable to send value, recipient may have reverted");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, "Address: low-level call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, "Address: insufficient balance for call");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, "Address: low-level static call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), "Address: call to non-contract");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn\'t, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'AddressUpgradeable.functionStaticCall', 'start_line': 3420, 'end_line': 3422, 'offset_start': 125361, 'offset_end': 125557, 'content': 'function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, "Address: low-level static call failed");\n    }', 'contract_name': 'AddressUpgradeable', 'contract_code': '{\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\'t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, "Address: insufficient balance");\n\n        (bool success, ) = recipient.call{value: amount}("");\n        require(success, "Address: unable to send value, recipient may have reverted");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, "Address: low-level call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, "Address: insufficient balance for call");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, "Address: low-level static call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), "Address: call to non-contract");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn\'t, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'AddressUpgradeable.functionStaticCall', 'start_line': 3430, 'end_line': 3437, 'offset_start': 125742, 'offset_end': 126067, 'content': 'function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }', 'contract_name': 'AddressUpgradeable', 'contract_code': '{\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\'t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, "Address: insufficient balance");\n\n        (bool success, ) = recipient.call{value: amount}("");\n        require(success, "Address: unable to send value, recipient may have reverted");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, "Address: low-level call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, "Address: insufficient balance for call");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, "Address: low-level static call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), "Address: call to non-contract");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn\'t, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'AddressUpgradeable.verifyCallResultFromTarget', 'start_line': 3445, 'end_line': 3461, 'offset_start': 126356, 'offset_end': 126983, 'content': 'function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), "Address: call to non-contract");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }', 'contract_name': 'AddressUpgradeable', 'contract_code': '{\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\'t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, "Address: insufficient balance");\n\n        (bool success, ) = recipient.call{value: amount}("");\n        require(success, "Address: unable to send value, recipient may have reverted");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, "Address: low-level call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, "Address: insufficient balance for call");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, "Address: low-level static call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), "Address: call to non-contract");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn\'t, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'AddressUpgradeable.verifyCallResult', 'start_line': 3469, 'end_line': 3479, 'offset_start': 127205, 'offset_end': 127499, 'content': 'function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }', 'contract_name': 'AddressUpgradeable', 'contract_code': '{\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\'t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, "Address: insufficient balance");\n\n        (bool success, ) = recipient.call{value: amount}("");\n        require(success, "Address: unable to send value, recipient may have reverted");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, "Address: low-level call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, "Address: insufficient balance for call");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, "Address: low-level static call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), "Address: call to non-contract");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn\'t, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
{'type': 'FunctionDefinition', 'name': 'AddressUpgradeable._revert', 'start_line': 3481, 'end_line': 3493, 'offset_start': 127506, 'offset_end': 128045, 'content': 'function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }', 'contract_name': 'AddressUpgradeable', 'contract_code': '{\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\'t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, "Address: insufficient balance");\n\n        (bool success, ) = recipient.call{value: amount}("");\n        require(success, "Address: unable to send value, recipient may have reverted");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, "Address: low-level call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, "Address: insufficient balance for call");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, "Address: low-level static call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), "Address: call to non-contract");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn\'t, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': [], 'visibility': 'private', 'node_count': 4, 'relative_file_path': './testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5/0xb2ecfe4e4d61f8790bbb9de2d1259b9e2410cea5.sol'}
