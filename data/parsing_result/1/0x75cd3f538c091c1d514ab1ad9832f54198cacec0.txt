{'type': 'FunctionDefinition', 'name': 'GnarsHD.tor', 'start_line': 101, 'end_line': 112, 'offset_start': 6230, 'offset_end': 6595, 'content': 'constructor(\n        address _gnarsV2Address,\n        string memory _rendererBaseUri,\n        Artwork memory _artwork,\n        string memory _contractURI,\n        address _owner\n    ) Owned(_owner) {\n        gnarsV2 = ISkateContractV2(_gnarsV2Address);\n        rendererBaseUri = _rendererBaseUri;\n        artwork = _artwork;\n        contractURI = _contractURI;\n    }', 'contract_name': 'GnarsHD', 'contract_code': '{\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STRUCTS / EVENTS / ERRORS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n    struct Artwork {\n        string ipfsFolder;\n        uint48 amountBackgrounds;\n        uint48 amountBodies;\n        uint48 amountAccessories;\n        uint48 amountHeads;\n        uint48 amountNoggles;\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    error Untransferable();\n    error TokenDoesNotExist(uint256 tokenId);\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STORAGE\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    string public name = "Gnars HD";\n\n    string public symbol = "GNARSHD";\n\n    string public rendererBaseUri;\n\n    string public contractURI;\n\n    Artwork public artwork;\n\n    ISkateContractV2 public gnarsV2;\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                        CONSTRUCTOR\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    constructor(\n        address _gnarsV2Address,\n        string memory _rendererBaseUri,\n        Artwork memory _artwork,\n        string memory _contractURI,\n        address _owner\n    ) Owned(_owner) {\n        gnarsV2 = ISkateContractV2(_gnarsV2Address);\n        rendererBaseUri = _rendererBaseUri;\n        artwork = _artwork;\n        contractURI = _contractURI;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         MAIN LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function setArtwork(Artwork memory _artwork) public onlyOwner {\n        artwork = _artwork;\n    }\n\n    function setContractUri(string memory _contractURI) public onlyOwner {\n        contractURI = _contractURI;\n    }\n\n    function setRendererBaseUri(string memory _rendererBaseUri) public onlyOwner {\n        rendererBaseUri = _rendererBaseUri;\n    }\n\n    /// @notice The properties and query string for a generated token\n    /// @param _tokenId The ERC-721 token id\n    function getAttributes(uint256 _tokenId)\n        public\n        view\n        returns (string memory resultAttributes, string memory queryString)\n    {\n        (uint48 background, uint48 body, uint48 accessory, uint48 head, uint48 glasses) = gnarsV2.seeds(_tokenId);\n        IGnarDescriptorV2 descriptor = IGnarDescriptorV2(gnarsV2.descriptor());\n        IGnarDecorator decorator = IGnarDecorator(descriptor.decorator());\n\n        queryString = string.concat(\n            "?contractAddress=",\n            Strings.toHexString(address(this)),\n            "&tokenId=",\n            Strings.toString(_tokenId),\n            getBackgroundQueryParam(background),\n            getPartQueryParam("BODY", body, artwork.amountBodies),\n            getPartQueryParam("ACCESSORY", accessory, artwork.amountAccessories),\n            getPartQueryParam("HEADS", head, artwork.amountHeads),\n            getPartQueryParam("NOGGLES", glasses, artwork.amountNoggles)\n        );\n\n        resultAttributes = string.concat(\n            getPartTrait("Background", background, decorator.backgrounds),\n            ",",\n            getPartTrait("Body", body, decorator.bodies),\n            ",",\n            getPartTrait("Accessory", accessory, decorator.accessories),\n            ",",\n            getPartTrait("Head", head, decorator.heads),\n            ",",\n            getPartTrait("Glasses", glasses, decorator.glasses)\n        );\n    }\n\n    function getPartQueryParam(string memory folder, uint48 partIndex, uint48 amountOfPart)\n        public\n        view\n        returns (string memory)\n    {\n        if (partIndex >= amountOfPart) {\n            return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/", Strings.toString(partIndex), ".PNG");\n    }\n\n    function getBackgroundQueryParam(uint48 backgroundIndex) public view returns (string memory) {\n        if (backgroundIndex >= artwork.amountBackgrounds) {\n            return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/", Strings.toString(backgroundIndex), ".PNG");\n    }\n\n    function getPartTrait(\n        string memory traitType,\n        uint48 partIndex,\n        function (uint256) external view returns (string memory) getPartDescription\n    ) public view returns (string memory) {\n        try getPartDescription(partIndex) returns (string memory partDescription) {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"\', partDescription, \'"}\');\n        } catch {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"Unknown"}\');\n        }\n    }\n\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\n        if (gnarsV2.ownerOf(_tokenId) == address(0)) {\n            revert TokenDoesNotExist(_tokenId);\n        }\n\n        (string memory attributes, string memory queryString) = getAttributes(_tokenId);\n        return string(\n            abi.encodePacked(\n                "data:application/json;base64,",\n                Base64.encode(\n                    bytes(\n                        abi.encodePacked(\n                            \'{"name":"Gnar HD #\',\n                            Strings.toString(_tokenId),\n                            \'", "description":"High definition Gnar #\',\n                            Strings.toString(_tokenId),\n                            " counterpart",\n                            \'", "attributes": [\',\n                            attributes,\n                            \'], "image": "\',\n                            string.concat(rendererBaseUri, queryString),\n                            \'"}\'\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              PASSTHROUGH METHODS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Returns the total amount of Gnars HD in existence\n    /// @dev Delegates to the Gnars V2 contract\n    function totalSupply() external view returns (uint256) {\n        return gnarsV2.totalSupply();\n    }\n\n    /// @notice Returns the tokenId of the Gnar HD by index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenByIndex(_index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenOfOwnerByIndex(_owner, _index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token id\n    /// @dev Delegates to the Gnars V2 contract\n    function ownerOf(uint256 id) public view returns (address owner) {\n        return gnarsV2.ownerOf(id);\n    }\n\n    /// @notice Returns the amount of Gnars HD owned by the specified address\n    /// @dev Delegates to the Gnars V2 contract\n    function balanceOf(address owner) public view returns (uint256) {\n        return gnarsV2.balanceOf(owner);\n    }\n\n    /// @notice Refresh ownership of specified tokens on marketplaces/datasets that are showing out of date information\n    /// @dev Since this token is not mintable, there\'s no Transfer event. This method emits the Transfer event so that consumers that can detect the creation/new ownership of the token.\n    /// @param tokenIds The ids of tokens to refresh\n    function assertOwnership(uint256[] memory tokenIds) public {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            emit Transfer(address(0), gnarsV2.ownerOf(tokenId), tokenId);\n        }\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC721 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function approve(address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function setApprovalForAll(address, bool) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function transferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256, bytes calldata) public pure {\n        revert Untransferable();\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC6454 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always return false\n    function isTransferable(uint256, address, address) external pure returns (bool) {\n        return false;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC165 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165\n            || interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721\n            || interfaceId == 0x5b5e139f // ERC165 Interface ID for ERC721Metadata\n            || interfaceId == 0x780e9d63 // ERC165 Interface ID for ERC721Enumerable\n            || interfaceId == 0x7f5828d0 // ERC165 Interface ID for ERC173\n            || interfaceId == 0x91a6262f; // ERC165 Interface ID for ERC6454\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'default', 'node_count': 4, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'GnarsHD.setArtwork', 'start_line': 118, 'end_line': 120, 'offset_start': 6786, 'offset_end': 6882, 'content': 'function setArtwork(Artwork memory _artwork) public onlyOwner {\n        artwork = _artwork;\n    }', 'contract_name': 'GnarsHD', 'contract_code': '{\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STRUCTS / EVENTS / ERRORS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n    struct Artwork {\n        string ipfsFolder;\n        uint48 amountBackgrounds;\n        uint48 amountBodies;\n        uint48 amountAccessories;\n        uint48 amountHeads;\n        uint48 amountNoggles;\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    error Untransferable();\n    error TokenDoesNotExist(uint256 tokenId);\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STORAGE\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    string public name = "Gnars HD";\n\n    string public symbol = "GNARSHD";\n\n    string public rendererBaseUri;\n\n    string public contractURI;\n\n    Artwork public artwork;\n\n    ISkateContractV2 public gnarsV2;\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                        CONSTRUCTOR\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    constructor(\n        address _gnarsV2Address,\n        string memory _rendererBaseUri,\n        Artwork memory _artwork,\n        string memory _contractURI,\n        address _owner\n    ) Owned(_owner) {\n        gnarsV2 = ISkateContractV2(_gnarsV2Address);\n        rendererBaseUri = _rendererBaseUri;\n        artwork = _artwork;\n        contractURI = _contractURI;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         MAIN LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function setArtwork(Artwork memory _artwork) public onlyOwner {\n        artwork = _artwork;\n    }\n\n    function setContractUri(string memory _contractURI) public onlyOwner {\n        contractURI = _contractURI;\n    }\n\n    function setRendererBaseUri(string memory _rendererBaseUri) public onlyOwner {\n        rendererBaseUri = _rendererBaseUri;\n    }\n\n    /// @notice The properties and query string for a generated token\n    /// @param _tokenId The ERC-721 token id\n    function getAttributes(uint256 _tokenId)\n        public\n        view\n        returns (string memory resultAttributes, string memory queryString)\n    {\n        (uint48 background, uint48 body, uint48 accessory, uint48 head, uint48 glasses) = gnarsV2.seeds(_tokenId);\n        IGnarDescriptorV2 descriptor = IGnarDescriptorV2(gnarsV2.descriptor());\n        IGnarDecorator decorator = IGnarDecorator(descriptor.decorator());\n\n        queryString = string.concat(\n            "?contractAddress=",\n            Strings.toHexString(address(this)),\n            "&tokenId=",\n            Strings.toString(_tokenId),\n            getBackgroundQueryParam(background),\n            getPartQueryParam("BODY", body, artwork.amountBodies),\n            getPartQueryParam("ACCESSORY", accessory, artwork.amountAccessories),\n            getPartQueryParam("HEADS", head, artwork.amountHeads),\n            getPartQueryParam("NOGGLES", glasses, artwork.amountNoggles)\n        );\n\n        resultAttributes = string.concat(\n            getPartTrait("Background", background, decorator.backgrounds),\n            ",",\n            getPartTrait("Body", body, decorator.bodies),\n            ",",\n            getPartTrait("Accessory", accessory, decorator.accessories),\n            ",",\n            getPartTrait("Head", head, decorator.heads),\n            ",",\n            getPartTrait("Glasses", glasses, decorator.glasses)\n        );\n    }\n\n    function getPartQueryParam(string memory folder, uint48 partIndex, uint48 amountOfPart)\n        public\n        view\n        returns (string memory)\n    {\n        if (partIndex >= amountOfPart) {\n            return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/", Strings.toString(partIndex), ".PNG");\n    }\n\n    function getBackgroundQueryParam(uint48 backgroundIndex) public view returns (string memory) {\n        if (backgroundIndex >= artwork.amountBackgrounds) {\n            return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/", Strings.toString(backgroundIndex), ".PNG");\n    }\n\n    function getPartTrait(\n        string memory traitType,\n        uint48 partIndex,\n        function (uint256) external view returns (string memory) getPartDescription\n    ) public view returns (string memory) {\n        try getPartDescription(partIndex) returns (string memory partDescription) {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"\', partDescription, \'"}\');\n        } catch {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"Unknown"}\');\n        }\n    }\n\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\n        if (gnarsV2.ownerOf(_tokenId) == address(0)) {\n            revert TokenDoesNotExist(_tokenId);\n        }\n\n        (string memory attributes, string memory queryString) = getAttributes(_tokenId);\n        return string(\n            abi.encodePacked(\n                "data:application/json;base64,",\n                Base64.encode(\n                    bytes(\n                        abi.encodePacked(\n                            \'{"name":"Gnar HD #\',\n                            Strings.toString(_tokenId),\n                            \'", "description":"High definition Gnar #\',\n                            Strings.toString(_tokenId),\n                            " counterpart",\n                            \'", "attributes": [\',\n                            attributes,\n                            \'], "image": "\',\n                            string.concat(rendererBaseUri, queryString),\n                            \'"}\'\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              PASSTHROUGH METHODS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Returns the total amount of Gnars HD in existence\n    /// @dev Delegates to the Gnars V2 contract\n    function totalSupply() external view returns (uint256) {\n        return gnarsV2.totalSupply();\n    }\n\n    /// @notice Returns the tokenId of the Gnar HD by index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenByIndex(_index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenOfOwnerByIndex(_owner, _index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token id\n    /// @dev Delegates to the Gnars V2 contract\n    function ownerOf(uint256 id) public view returns (address owner) {\n        return gnarsV2.ownerOf(id);\n    }\n\n    /// @notice Returns the amount of Gnars HD owned by the specified address\n    /// @dev Delegates to the Gnars V2 contract\n    function balanceOf(address owner) public view returns (uint256) {\n        return gnarsV2.balanceOf(owner);\n    }\n\n    /// @notice Refresh ownership of specified tokens on marketplaces/datasets that are showing out of date information\n    /// @dev Since this token is not mintable, there\'s no Transfer event. This method emits the Transfer event so that consumers that can detect the creation/new ownership of the token.\n    /// @param tokenIds The ids of tokens to refresh\n    function assertOwnership(uint256[] memory tokenIds) public {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            emit Transfer(address(0), gnarsV2.ownerOf(tokenId), tokenId);\n        }\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC721 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function approve(address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function setApprovalForAll(address, bool) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function transferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256, bytes calldata) public pure {\n        revert Untransferable();\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC6454 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always return false\n    function isTransferable(uint256, address, address) external pure returns (bool) {\n        return false;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC165 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165\n            || interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721\n            || interfaceId == 0x5b5e139f // ERC165 Interface ID for ERC721Metadata\n            || interfaceId == 0x780e9d63 // ERC165 Interface ID for ERC721Enumerable\n            || interfaceId == 0x7f5828d0 // ERC165 Interface ID for ERC173\n            || interfaceId == 0x91a6262f; // ERC165 Interface ID for ERC6454\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'GnarsHD.setContractUri', 'start_line': 122, 'end_line': 124, 'offset_start': 6889, 'offset_end': 7000, 'content': 'function setContractUri(string memory _contractURI) public onlyOwner {\n        contractURI = _contractURI;\n    }', 'contract_name': 'GnarsHD', 'contract_code': '{\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STRUCTS / EVENTS / ERRORS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n    struct Artwork {\n        string ipfsFolder;\n        uint48 amountBackgrounds;\n        uint48 amountBodies;\n        uint48 amountAccessories;\n        uint48 amountHeads;\n        uint48 amountNoggles;\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    error Untransferable();\n    error TokenDoesNotExist(uint256 tokenId);\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STORAGE\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    string public name = "Gnars HD";\n\n    string public symbol = "GNARSHD";\n\n    string public rendererBaseUri;\n\n    string public contractURI;\n\n    Artwork public artwork;\n\n    ISkateContractV2 public gnarsV2;\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                        CONSTRUCTOR\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    constructor(\n        address _gnarsV2Address,\n        string memory _rendererBaseUri,\n        Artwork memory _artwork,\n        string memory _contractURI,\n        address _owner\n    ) Owned(_owner) {\n        gnarsV2 = ISkateContractV2(_gnarsV2Address);\n        rendererBaseUri = _rendererBaseUri;\n        artwork = _artwork;\n        contractURI = _contractURI;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         MAIN LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function setArtwork(Artwork memory _artwork) public onlyOwner {\n        artwork = _artwork;\n    }\n\n    function setContractUri(string memory _contractURI) public onlyOwner {\n        contractURI = _contractURI;\n    }\n\n    function setRendererBaseUri(string memory _rendererBaseUri) public onlyOwner {\n        rendererBaseUri = _rendererBaseUri;\n    }\n\n    /// @notice The properties and query string for a generated token\n    /// @param _tokenId The ERC-721 token id\n    function getAttributes(uint256 _tokenId)\n        public\n        view\n        returns (string memory resultAttributes, string memory queryString)\n    {\n        (uint48 background, uint48 body, uint48 accessory, uint48 head, uint48 glasses) = gnarsV2.seeds(_tokenId);\n        IGnarDescriptorV2 descriptor = IGnarDescriptorV2(gnarsV2.descriptor());\n        IGnarDecorator decorator = IGnarDecorator(descriptor.decorator());\n\n        queryString = string.concat(\n            "?contractAddress=",\n            Strings.toHexString(address(this)),\n            "&tokenId=",\n            Strings.toString(_tokenId),\n            getBackgroundQueryParam(background),\n            getPartQueryParam("BODY", body, artwork.amountBodies),\n            getPartQueryParam("ACCESSORY", accessory, artwork.amountAccessories),\n            getPartQueryParam("HEADS", head, artwork.amountHeads),\n            getPartQueryParam("NOGGLES", glasses, artwork.amountNoggles)\n        );\n\n        resultAttributes = string.concat(\n            getPartTrait("Background", background, decorator.backgrounds),\n            ",",\n            getPartTrait("Body", body, decorator.bodies),\n            ",",\n            getPartTrait("Accessory", accessory, decorator.accessories),\n            ",",\n            getPartTrait("Head", head, decorator.heads),\n            ",",\n            getPartTrait("Glasses", glasses, decorator.glasses)\n        );\n    }\n\n    function getPartQueryParam(string memory folder, uint48 partIndex, uint48 amountOfPart)\n        public\n        view\n        returns (string memory)\n    {\n        if (partIndex >= amountOfPart) {\n            return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/", Strings.toString(partIndex), ".PNG");\n    }\n\n    function getBackgroundQueryParam(uint48 backgroundIndex) public view returns (string memory) {\n        if (backgroundIndex >= artwork.amountBackgrounds) {\n            return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/", Strings.toString(backgroundIndex), ".PNG");\n    }\n\n    function getPartTrait(\n        string memory traitType,\n        uint48 partIndex,\n        function (uint256) external view returns (string memory) getPartDescription\n    ) public view returns (string memory) {\n        try getPartDescription(partIndex) returns (string memory partDescription) {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"\', partDescription, \'"}\');\n        } catch {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"Unknown"}\');\n        }\n    }\n\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\n        if (gnarsV2.ownerOf(_tokenId) == address(0)) {\n            revert TokenDoesNotExist(_tokenId);\n        }\n\n        (string memory attributes, string memory queryString) = getAttributes(_tokenId);\n        return string(\n            abi.encodePacked(\n                "data:application/json;base64,",\n                Base64.encode(\n                    bytes(\n                        abi.encodePacked(\n                            \'{"name":"Gnar HD #\',\n                            Strings.toString(_tokenId),\n                            \'", "description":"High definition Gnar #\',\n                            Strings.toString(_tokenId),\n                            " counterpart",\n                            \'", "attributes": [\',\n                            attributes,\n                            \'], "image": "\',\n                            string.concat(rendererBaseUri, queryString),\n                            \'"}\'\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              PASSTHROUGH METHODS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Returns the total amount of Gnars HD in existence\n    /// @dev Delegates to the Gnars V2 contract\n    function totalSupply() external view returns (uint256) {\n        return gnarsV2.totalSupply();\n    }\n\n    /// @notice Returns the tokenId of the Gnar HD by index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenByIndex(_index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenOfOwnerByIndex(_owner, _index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token id\n    /// @dev Delegates to the Gnars V2 contract\n    function ownerOf(uint256 id) public view returns (address owner) {\n        return gnarsV2.ownerOf(id);\n    }\n\n    /// @notice Returns the amount of Gnars HD owned by the specified address\n    /// @dev Delegates to the Gnars V2 contract\n    function balanceOf(address owner) public view returns (uint256) {\n        return gnarsV2.balanceOf(owner);\n    }\n\n    /// @notice Refresh ownership of specified tokens on marketplaces/datasets that are showing out of date information\n    /// @dev Since this token is not mintable, there\'s no Transfer event. This method emits the Transfer event so that consumers that can detect the creation/new ownership of the token.\n    /// @param tokenIds The ids of tokens to refresh\n    function assertOwnership(uint256[] memory tokenIds) public {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            emit Transfer(address(0), gnarsV2.ownerOf(tokenId), tokenId);\n        }\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC721 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function approve(address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function setApprovalForAll(address, bool) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function transferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256, bytes calldata) public pure {\n        revert Untransferable();\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC6454 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always return false\n    function isTransferable(uint256, address, address) external pure returns (bool) {\n        return false;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC165 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165\n            || interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721\n            || interfaceId == 0x5b5e139f // ERC165 Interface ID for ERC721Metadata\n            || interfaceId == 0x780e9d63 // ERC165 Interface ID for ERC721Enumerable\n            || interfaceId == 0x7f5828d0 // ERC165 Interface ID for ERC173\n            || interfaceId == 0x91a6262f; // ERC165 Interface ID for ERC6454\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'GnarsHD.setRendererBaseUri', 'start_line': 126, 'end_line': 128, 'offset_start': 7007, 'offset_end': 7134, 'content': 'function setRendererBaseUri(string memory _rendererBaseUri) public onlyOwner {\n        rendererBaseUri = _rendererBaseUri;\n    }', 'contract_name': 'GnarsHD', 'contract_code': '{\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STRUCTS / EVENTS / ERRORS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n    struct Artwork {\n        string ipfsFolder;\n        uint48 amountBackgrounds;\n        uint48 amountBodies;\n        uint48 amountAccessories;\n        uint48 amountHeads;\n        uint48 amountNoggles;\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    error Untransferable();\n    error TokenDoesNotExist(uint256 tokenId);\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STORAGE\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    string public name = "Gnars HD";\n\n    string public symbol = "GNARSHD";\n\n    string public rendererBaseUri;\n\n    string public contractURI;\n\n    Artwork public artwork;\n\n    ISkateContractV2 public gnarsV2;\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                        CONSTRUCTOR\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    constructor(\n        address _gnarsV2Address,\n        string memory _rendererBaseUri,\n        Artwork memory _artwork,\n        string memory _contractURI,\n        address _owner\n    ) Owned(_owner) {\n        gnarsV2 = ISkateContractV2(_gnarsV2Address);\n        rendererBaseUri = _rendererBaseUri;\n        artwork = _artwork;\n        contractURI = _contractURI;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         MAIN LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function setArtwork(Artwork memory _artwork) public onlyOwner {\n        artwork = _artwork;\n    }\n\n    function setContractUri(string memory _contractURI) public onlyOwner {\n        contractURI = _contractURI;\n    }\n\n    function setRendererBaseUri(string memory _rendererBaseUri) public onlyOwner {\n        rendererBaseUri = _rendererBaseUri;\n    }\n\n    /// @notice The properties and query string for a generated token\n    /// @param _tokenId The ERC-721 token id\n    function getAttributes(uint256 _tokenId)\n        public\n        view\n        returns (string memory resultAttributes, string memory queryString)\n    {\n        (uint48 background, uint48 body, uint48 accessory, uint48 head, uint48 glasses) = gnarsV2.seeds(_tokenId);\n        IGnarDescriptorV2 descriptor = IGnarDescriptorV2(gnarsV2.descriptor());\n        IGnarDecorator decorator = IGnarDecorator(descriptor.decorator());\n\n        queryString = string.concat(\n            "?contractAddress=",\n            Strings.toHexString(address(this)),\n            "&tokenId=",\n            Strings.toString(_tokenId),\n            getBackgroundQueryParam(background),\n            getPartQueryParam("BODY", body, artwork.amountBodies),\n            getPartQueryParam("ACCESSORY", accessory, artwork.amountAccessories),\n            getPartQueryParam("HEADS", head, artwork.amountHeads),\n            getPartQueryParam("NOGGLES", glasses, artwork.amountNoggles)\n        );\n\n        resultAttributes = string.concat(\n            getPartTrait("Background", background, decorator.backgrounds),\n            ",",\n            getPartTrait("Body", body, decorator.bodies),\n            ",",\n            getPartTrait("Accessory", accessory, decorator.accessories),\n            ",",\n            getPartTrait("Head", head, decorator.heads),\n            ",",\n            getPartTrait("Glasses", glasses, decorator.glasses)\n        );\n    }\n\n    function getPartQueryParam(string memory folder, uint48 partIndex, uint48 amountOfPart)\n        public\n        view\n        returns (string memory)\n    {\n        if (partIndex >= amountOfPart) {\n            return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/", Strings.toString(partIndex), ".PNG");\n    }\n\n    function getBackgroundQueryParam(uint48 backgroundIndex) public view returns (string memory) {\n        if (backgroundIndex >= artwork.amountBackgrounds) {\n            return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/", Strings.toString(backgroundIndex), ".PNG");\n    }\n\n    function getPartTrait(\n        string memory traitType,\n        uint48 partIndex,\n        function (uint256) external view returns (string memory) getPartDescription\n    ) public view returns (string memory) {\n        try getPartDescription(partIndex) returns (string memory partDescription) {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"\', partDescription, \'"}\');\n        } catch {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"Unknown"}\');\n        }\n    }\n\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\n        if (gnarsV2.ownerOf(_tokenId) == address(0)) {\n            revert TokenDoesNotExist(_tokenId);\n        }\n\n        (string memory attributes, string memory queryString) = getAttributes(_tokenId);\n        return string(\n            abi.encodePacked(\n                "data:application/json;base64,",\n                Base64.encode(\n                    bytes(\n                        abi.encodePacked(\n                            \'{"name":"Gnar HD #\',\n                            Strings.toString(_tokenId),\n                            \'", "description":"High definition Gnar #\',\n                            Strings.toString(_tokenId),\n                            " counterpart",\n                            \'", "attributes": [\',\n                            attributes,\n                            \'], "image": "\',\n                            string.concat(rendererBaseUri, queryString),\n                            \'"}\'\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              PASSTHROUGH METHODS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Returns the total amount of Gnars HD in existence\n    /// @dev Delegates to the Gnars V2 contract\n    function totalSupply() external view returns (uint256) {\n        return gnarsV2.totalSupply();\n    }\n\n    /// @notice Returns the tokenId of the Gnar HD by index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenByIndex(_index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenOfOwnerByIndex(_owner, _index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token id\n    /// @dev Delegates to the Gnars V2 contract\n    function ownerOf(uint256 id) public view returns (address owner) {\n        return gnarsV2.ownerOf(id);\n    }\n\n    /// @notice Returns the amount of Gnars HD owned by the specified address\n    /// @dev Delegates to the Gnars V2 contract\n    function balanceOf(address owner) public view returns (uint256) {\n        return gnarsV2.balanceOf(owner);\n    }\n\n    /// @notice Refresh ownership of specified tokens on marketplaces/datasets that are showing out of date information\n    /// @dev Since this token is not mintable, there\'s no Transfer event. This method emits the Transfer event so that consumers that can detect the creation/new ownership of the token.\n    /// @param tokenIds The ids of tokens to refresh\n    function assertOwnership(uint256[] memory tokenIds) public {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            emit Transfer(address(0), gnarsV2.ownerOf(tokenId), tokenId);\n        }\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC721 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function approve(address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function setApprovalForAll(address, bool) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function transferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256, bytes calldata) public pure {\n        revert Untransferable();\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC6454 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always return false\n    function isTransferable(uint256, address, address) external pure returns (bool) {\n        return false;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC165 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165\n            || interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721\n            || interfaceId == 0x5b5e139f // ERC165 Interface ID for ERC721Metadata\n            || interfaceId == 0x780e9d63 // ERC165 Interface ID for ERC721Enumerable\n            || interfaceId == 0x7f5828d0 // ERC165 Interface ID for ERC173\n            || interfaceId == 0x91a6262f; // ERC165 Interface ID for ERC6454\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'GnarsHD.getAttributes', 'start_line': 132, 'end_line': 164, 'offset_start': 7256, 'offset_end': 8663, 'content': 'function getAttributes(uint256 _tokenId)\n        public\n        view\n        returns (string memory resultAttributes, string memory queryString)\n    {\n        (uint48 background, uint48 body, uint48 accessory, uint48 head, uint48 glasses) = gnarsV2.seeds(_tokenId);\n        IGnarDescriptorV2 descriptor = IGnarDescriptorV2(gnarsV2.descriptor());\n        IGnarDecorator decorator = IGnarDecorator(descriptor.decorator());\n\n        queryString = string.concat(\n            "?contractAddress=",\n            Strings.toHexString(address(this)),\n            "&tokenId=",\n            Strings.toString(_tokenId),\n            getBackgroundQueryParam(background),\n            getPartQueryParam("BODY", body, artwork.amountBodies),\n            getPartQueryParam("ACCESSORY", accessory, artwork.amountAccessories),\n            getPartQueryParam("HEADS", head, artwork.amountHeads),\n            getPartQueryParam("NOGGLES", glasses, artwork.amountNoggles)\n        );\n\n        resultAttributes = string.concat(\n            getPartTrait("Background", background, decorator.backgrounds),\n            ",",\n            getPartTrait("Body", body, decorator.bodies),\n            ",",\n            getPartTrait("Accessory", accessory, decorator.accessories),\n            ",",\n            getPartTrait("Head", head, decorator.heads),\n            ",",\n            getPartTrait("Glasses", glasses, decorator.glasses)\n        );\n    }', 'contract_name': 'GnarsHD', 'contract_code': '{\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STRUCTS / EVENTS / ERRORS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n    struct Artwork {\n        string ipfsFolder;\n        uint48 amountBackgrounds;\n        uint48 amountBodies;\n        uint48 amountAccessories;\n        uint48 amountHeads;\n        uint48 amountNoggles;\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    error Untransferable();\n    error TokenDoesNotExist(uint256 tokenId);\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STORAGE\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    string public name = "Gnars HD";\n\n    string public symbol = "GNARSHD";\n\n    string public rendererBaseUri;\n\n    string public contractURI;\n\n    Artwork public artwork;\n\n    ISkateContractV2 public gnarsV2;\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                        CONSTRUCTOR\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    constructor(\n        address _gnarsV2Address,\n        string memory _rendererBaseUri,\n        Artwork memory _artwork,\n        string memory _contractURI,\n        address _owner\n    ) Owned(_owner) {\n        gnarsV2 = ISkateContractV2(_gnarsV2Address);\n        rendererBaseUri = _rendererBaseUri;\n        artwork = _artwork;\n        contractURI = _contractURI;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         MAIN LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function setArtwork(Artwork memory _artwork) public onlyOwner {\n        artwork = _artwork;\n    }\n\n    function setContractUri(string memory _contractURI) public onlyOwner {\n        contractURI = _contractURI;\n    }\n\n    function setRendererBaseUri(string memory _rendererBaseUri) public onlyOwner {\n        rendererBaseUri = _rendererBaseUri;\n    }\n\n    /// @notice The properties and query string for a generated token\n    /// @param _tokenId The ERC-721 token id\n    function getAttributes(uint256 _tokenId)\n        public\n        view\n        returns (string memory resultAttributes, string memory queryString)\n    {\n        (uint48 background, uint48 body, uint48 accessory, uint48 head, uint48 glasses) = gnarsV2.seeds(_tokenId);\n        IGnarDescriptorV2 descriptor = IGnarDescriptorV2(gnarsV2.descriptor());\n        IGnarDecorator decorator = IGnarDecorator(descriptor.decorator());\n\n        queryString = string.concat(\n            "?contractAddress=",\n            Strings.toHexString(address(this)),\n            "&tokenId=",\n            Strings.toString(_tokenId),\n            getBackgroundQueryParam(background),\n            getPartQueryParam("BODY", body, artwork.amountBodies),\n            getPartQueryParam("ACCESSORY", accessory, artwork.amountAccessories),\n            getPartQueryParam("HEADS", head, artwork.amountHeads),\n            getPartQueryParam("NOGGLES", glasses, artwork.amountNoggles)\n        );\n\n        resultAttributes = string.concat(\n            getPartTrait("Background", background, decorator.backgrounds),\n            ",",\n            getPartTrait("Body", body, decorator.bodies),\n            ",",\n            getPartTrait("Accessory", accessory, decorator.accessories),\n            ",",\n            getPartTrait("Head", head, decorator.heads),\n            ",",\n            getPartTrait("Glasses", glasses, decorator.glasses)\n        );\n    }\n\n    function getPartQueryParam(string memory folder, uint48 partIndex, uint48 amountOfPart)\n        public\n        view\n        returns (string memory)\n    {\n        if (partIndex >= amountOfPart) {\n            return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/", Strings.toString(partIndex), ".PNG");\n    }\n\n    function getBackgroundQueryParam(uint48 backgroundIndex) public view returns (string memory) {\n        if (backgroundIndex >= artwork.amountBackgrounds) {\n            return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/", Strings.toString(backgroundIndex), ".PNG");\n    }\n\n    function getPartTrait(\n        string memory traitType,\n        uint48 partIndex,\n        function (uint256) external view returns (string memory) getPartDescription\n    ) public view returns (string memory) {\n        try getPartDescription(partIndex) returns (string memory partDescription) {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"\', partDescription, \'"}\');\n        } catch {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"Unknown"}\');\n        }\n    }\n\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\n        if (gnarsV2.ownerOf(_tokenId) == address(0)) {\n            revert TokenDoesNotExist(_tokenId);\n        }\n\n        (string memory attributes, string memory queryString) = getAttributes(_tokenId);\n        return string(\n            abi.encodePacked(\n                "data:application/json;base64,",\n                Base64.encode(\n                    bytes(\n                        abi.encodePacked(\n                            \'{"name":"Gnar HD #\',\n                            Strings.toString(_tokenId),\n                            \'", "description":"High definition Gnar #\',\n                            Strings.toString(_tokenId),\n                            " counterpart",\n                            \'", "attributes": [\',\n                            attributes,\n                            \'], "image": "\',\n                            string.concat(rendererBaseUri, queryString),\n                            \'"}\'\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              PASSTHROUGH METHODS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Returns the total amount of Gnars HD in existence\n    /// @dev Delegates to the Gnars V2 contract\n    function totalSupply() external view returns (uint256) {\n        return gnarsV2.totalSupply();\n    }\n\n    /// @notice Returns the tokenId of the Gnar HD by index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenByIndex(_index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenOfOwnerByIndex(_owner, _index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token id\n    /// @dev Delegates to the Gnars V2 contract\n    function ownerOf(uint256 id) public view returns (address owner) {\n        return gnarsV2.ownerOf(id);\n    }\n\n    /// @notice Returns the amount of Gnars HD owned by the specified address\n    /// @dev Delegates to the Gnars V2 contract\n    function balanceOf(address owner) public view returns (uint256) {\n        return gnarsV2.balanceOf(owner);\n    }\n\n    /// @notice Refresh ownership of specified tokens on marketplaces/datasets that are showing out of date information\n    /// @dev Since this token is not mintable, there\'s no Transfer event. This method emits the Transfer event so that consumers that can detect the creation/new ownership of the token.\n    /// @param tokenIds The ids of tokens to refresh\n    function assertOwnership(uint256[] memory tokenIds) public {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            emit Transfer(address(0), gnarsV2.ownerOf(tokenId), tokenId);\n        }\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC721 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function approve(address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function setApprovalForAll(address, bool) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function transferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256, bytes calldata) public pure {\n        revert Untransferable();\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC6454 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always return false\n    function isTransferable(uint256, address, address) external pure returns (bool) {\n        return false;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC165 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165\n            || interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721\n            || interfaceId == 0x5b5e139f // ERC165 Interface ID for ERC721Metadata\n            || interfaceId == 0x780e9d63 // ERC165 Interface ID for ERC721Enumerable\n            || interfaceId == 0x7f5828d0 // ERC165 Interface ID for ERC173\n            || interfaceId == 0x91a6262f; // ERC165 Interface ID for ERC6454\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'GnarsHD.getPartQueryParam', 'start_line': 166, 'end_line': 176, 'offset_start': 8670, 'offset_end': 9093, 'content': 'function getPartQueryParam(string memory folder, uint48 partIndex, uint48 amountOfPart)\n        public\n        view\n        returns (string memory)\n    {\n        if (partIndex >= amountOfPart) {\n            return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/", Strings.toString(partIndex), ".PNG");\n    }', 'contract_name': 'GnarsHD', 'contract_code': '{\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STRUCTS / EVENTS / ERRORS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n    struct Artwork {\n        string ipfsFolder;\n        uint48 amountBackgrounds;\n        uint48 amountBodies;\n        uint48 amountAccessories;\n        uint48 amountHeads;\n        uint48 amountNoggles;\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    error Untransferable();\n    error TokenDoesNotExist(uint256 tokenId);\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STORAGE\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    string public name = "Gnars HD";\n\n    string public symbol = "GNARSHD";\n\n    string public rendererBaseUri;\n\n    string public contractURI;\n\n    Artwork public artwork;\n\n    ISkateContractV2 public gnarsV2;\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                        CONSTRUCTOR\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    constructor(\n        address _gnarsV2Address,\n        string memory _rendererBaseUri,\n        Artwork memory _artwork,\n        string memory _contractURI,\n        address _owner\n    ) Owned(_owner) {\n        gnarsV2 = ISkateContractV2(_gnarsV2Address);\n        rendererBaseUri = _rendererBaseUri;\n        artwork = _artwork;\n        contractURI = _contractURI;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         MAIN LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function setArtwork(Artwork memory _artwork) public onlyOwner {\n        artwork = _artwork;\n    }\n\n    function setContractUri(string memory _contractURI) public onlyOwner {\n        contractURI = _contractURI;\n    }\n\n    function setRendererBaseUri(string memory _rendererBaseUri) public onlyOwner {\n        rendererBaseUri = _rendererBaseUri;\n    }\n\n    /// @notice The properties and query string for a generated token\n    /// @param _tokenId The ERC-721 token id\n    function getAttributes(uint256 _tokenId)\n        public\n        view\n        returns (string memory resultAttributes, string memory queryString)\n    {\n        (uint48 background, uint48 body, uint48 accessory, uint48 head, uint48 glasses) = gnarsV2.seeds(_tokenId);\n        IGnarDescriptorV2 descriptor = IGnarDescriptorV2(gnarsV2.descriptor());\n        IGnarDecorator decorator = IGnarDecorator(descriptor.decorator());\n\n        queryString = string.concat(\n            "?contractAddress=",\n            Strings.toHexString(address(this)),\n            "&tokenId=",\n            Strings.toString(_tokenId),\n            getBackgroundQueryParam(background),\n            getPartQueryParam("BODY", body, artwork.amountBodies),\n            getPartQueryParam("ACCESSORY", accessory, artwork.amountAccessories),\n            getPartQueryParam("HEADS", head, artwork.amountHeads),\n            getPartQueryParam("NOGGLES", glasses, artwork.amountNoggles)\n        );\n\n        resultAttributes = string.concat(\n            getPartTrait("Background", background, decorator.backgrounds),\n            ",",\n            getPartTrait("Body", body, decorator.bodies),\n            ",",\n            getPartTrait("Accessory", accessory, decorator.accessories),\n            ",",\n            getPartTrait("Head", head, decorator.heads),\n            ",",\n            getPartTrait("Glasses", glasses, decorator.glasses)\n        );\n    }\n\n    function getPartQueryParam(string memory folder, uint48 partIndex, uint48 amountOfPart)\n        public\n        view\n        returns (string memory)\n    {\n        if (partIndex >= amountOfPart) {\n            return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/", Strings.toString(partIndex), ".PNG");\n    }\n\n    function getBackgroundQueryParam(uint48 backgroundIndex) public view returns (string memory) {\n        if (backgroundIndex >= artwork.amountBackgrounds) {\n            return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/", Strings.toString(backgroundIndex), ".PNG");\n    }\n\n    function getPartTrait(\n        string memory traitType,\n        uint48 partIndex,\n        function (uint256) external view returns (string memory) getPartDescription\n    ) public view returns (string memory) {\n        try getPartDescription(partIndex) returns (string memory partDescription) {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"\', partDescription, \'"}\');\n        } catch {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"Unknown"}\');\n        }\n    }\n\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\n        if (gnarsV2.ownerOf(_tokenId) == address(0)) {\n            revert TokenDoesNotExist(_tokenId);\n        }\n\n        (string memory attributes, string memory queryString) = getAttributes(_tokenId);\n        return string(\n            abi.encodePacked(\n                "data:application/json;base64,",\n                Base64.encode(\n                    bytes(\n                        abi.encodePacked(\n                            \'{"name":"Gnar HD #\',\n                            Strings.toString(_tokenId),\n                            \'", "description":"High definition Gnar #\',\n                            Strings.toString(_tokenId),\n                            " counterpart",\n                            \'", "attributes": [\',\n                            attributes,\n                            \'], "image": "\',\n                            string.concat(rendererBaseUri, queryString),\n                            \'"}\'\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              PASSTHROUGH METHODS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Returns the total amount of Gnars HD in existence\n    /// @dev Delegates to the Gnars V2 contract\n    function totalSupply() external view returns (uint256) {\n        return gnarsV2.totalSupply();\n    }\n\n    /// @notice Returns the tokenId of the Gnar HD by index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenByIndex(_index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenOfOwnerByIndex(_owner, _index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token id\n    /// @dev Delegates to the Gnars V2 contract\n    function ownerOf(uint256 id) public view returns (address owner) {\n        return gnarsV2.ownerOf(id);\n    }\n\n    /// @notice Returns the amount of Gnars HD owned by the specified address\n    /// @dev Delegates to the Gnars V2 contract\n    function balanceOf(address owner) public view returns (uint256) {\n        return gnarsV2.balanceOf(owner);\n    }\n\n    /// @notice Refresh ownership of specified tokens on marketplaces/datasets that are showing out of date information\n    /// @dev Since this token is not mintable, there\'s no Transfer event. This method emits the Transfer event so that consumers that can detect the creation/new ownership of the token.\n    /// @param tokenIds The ids of tokens to refresh\n    function assertOwnership(uint256[] memory tokenIds) public {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            emit Transfer(address(0), gnarsV2.ownerOf(tokenId), tokenId);\n        }\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC721 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function approve(address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function setApprovalForAll(address, bool) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function transferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256, bytes calldata) public pure {\n        revert Untransferable();\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC6454 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always return false\n    function isTransferable(uint256, address, address) external pure returns (bool) {\n        return false;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC165 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165\n            || interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721\n            || interfaceId == 0x5b5e139f // ERC165 Interface ID for ERC721Metadata\n            || interfaceId == 0x780e9d63 // ERC165 Interface ID for ERC721Enumerable\n            || interfaceId == 0x7f5828d0 // ERC165 Interface ID for ERC173\n            || interfaceId == 0x91a6262f; // ERC165 Interface ID for ERC6454\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'GnarsHD.getBackgroundQueryParam', 'start_line': 178, 'end_line': 184, 'offset_start': 9100, 'offset_end': 9485, 'content': 'function getBackgroundQueryParam(uint48 backgroundIndex) public view returns (string memory) {\n        if (backgroundIndex >= artwork.amountBackgrounds) {\n            return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/", Strings.toString(backgroundIndex), ".PNG");\n    }', 'contract_name': 'GnarsHD', 'contract_code': '{\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STRUCTS / EVENTS / ERRORS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n    struct Artwork {\n        string ipfsFolder;\n        uint48 amountBackgrounds;\n        uint48 amountBodies;\n        uint48 amountAccessories;\n        uint48 amountHeads;\n        uint48 amountNoggles;\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    error Untransferable();\n    error TokenDoesNotExist(uint256 tokenId);\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STORAGE\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    string public name = "Gnars HD";\n\n    string public symbol = "GNARSHD";\n\n    string public rendererBaseUri;\n\n    string public contractURI;\n\n    Artwork public artwork;\n\n    ISkateContractV2 public gnarsV2;\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                        CONSTRUCTOR\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    constructor(\n        address _gnarsV2Address,\n        string memory _rendererBaseUri,\n        Artwork memory _artwork,\n        string memory _contractURI,\n        address _owner\n    ) Owned(_owner) {\n        gnarsV2 = ISkateContractV2(_gnarsV2Address);\n        rendererBaseUri = _rendererBaseUri;\n        artwork = _artwork;\n        contractURI = _contractURI;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         MAIN LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function setArtwork(Artwork memory _artwork) public onlyOwner {\n        artwork = _artwork;\n    }\n\n    function setContractUri(string memory _contractURI) public onlyOwner {\n        contractURI = _contractURI;\n    }\n\n    function setRendererBaseUri(string memory _rendererBaseUri) public onlyOwner {\n        rendererBaseUri = _rendererBaseUri;\n    }\n\n    /// @notice The properties and query string for a generated token\n    /// @param _tokenId The ERC-721 token id\n    function getAttributes(uint256 _tokenId)\n        public\n        view\n        returns (string memory resultAttributes, string memory queryString)\n    {\n        (uint48 background, uint48 body, uint48 accessory, uint48 head, uint48 glasses) = gnarsV2.seeds(_tokenId);\n        IGnarDescriptorV2 descriptor = IGnarDescriptorV2(gnarsV2.descriptor());\n        IGnarDecorator decorator = IGnarDecorator(descriptor.decorator());\n\n        queryString = string.concat(\n            "?contractAddress=",\n            Strings.toHexString(address(this)),\n            "&tokenId=",\n            Strings.toString(_tokenId),\n            getBackgroundQueryParam(background),\n            getPartQueryParam("BODY", body, artwork.amountBodies),\n            getPartQueryParam("ACCESSORY", accessory, artwork.amountAccessories),\n            getPartQueryParam("HEADS", head, artwork.amountHeads),\n            getPartQueryParam("NOGGLES", glasses, artwork.amountNoggles)\n        );\n\n        resultAttributes = string.concat(\n            getPartTrait("Background", background, decorator.backgrounds),\n            ",",\n            getPartTrait("Body", body, decorator.bodies),\n            ",",\n            getPartTrait("Accessory", accessory, decorator.accessories),\n            ",",\n            getPartTrait("Head", head, decorator.heads),\n            ",",\n            getPartTrait("Glasses", glasses, decorator.glasses)\n        );\n    }\n\n    function getPartQueryParam(string memory folder, uint48 partIndex, uint48 amountOfPart)\n        public\n        view\n        returns (string memory)\n    {\n        if (partIndex >= amountOfPart) {\n            return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/", Strings.toString(partIndex), ".PNG");\n    }\n\n    function getBackgroundQueryParam(uint48 backgroundIndex) public view returns (string memory) {\n        if (backgroundIndex >= artwork.amountBackgrounds) {\n            return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/", Strings.toString(backgroundIndex), ".PNG");\n    }\n\n    function getPartTrait(\n        string memory traitType,\n        uint48 partIndex,\n        function (uint256) external view returns (string memory) getPartDescription\n    ) public view returns (string memory) {\n        try getPartDescription(partIndex) returns (string memory partDescription) {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"\', partDescription, \'"}\');\n        } catch {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"Unknown"}\');\n        }\n    }\n\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\n        if (gnarsV2.ownerOf(_tokenId) == address(0)) {\n            revert TokenDoesNotExist(_tokenId);\n        }\n\n        (string memory attributes, string memory queryString) = getAttributes(_tokenId);\n        return string(\n            abi.encodePacked(\n                "data:application/json;base64,",\n                Base64.encode(\n                    bytes(\n                        abi.encodePacked(\n                            \'{"name":"Gnar HD #\',\n                            Strings.toString(_tokenId),\n                            \'", "description":"High definition Gnar #\',\n                            Strings.toString(_tokenId),\n                            " counterpart",\n                            \'", "attributes": [\',\n                            attributes,\n                            \'], "image": "\',\n                            string.concat(rendererBaseUri, queryString),\n                            \'"}\'\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              PASSTHROUGH METHODS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Returns the total amount of Gnars HD in existence\n    /// @dev Delegates to the Gnars V2 contract\n    function totalSupply() external view returns (uint256) {\n        return gnarsV2.totalSupply();\n    }\n\n    /// @notice Returns the tokenId of the Gnar HD by index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenByIndex(_index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenOfOwnerByIndex(_owner, _index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token id\n    /// @dev Delegates to the Gnars V2 contract\n    function ownerOf(uint256 id) public view returns (address owner) {\n        return gnarsV2.ownerOf(id);\n    }\n\n    /// @notice Returns the amount of Gnars HD owned by the specified address\n    /// @dev Delegates to the Gnars V2 contract\n    function balanceOf(address owner) public view returns (uint256) {\n        return gnarsV2.balanceOf(owner);\n    }\n\n    /// @notice Refresh ownership of specified tokens on marketplaces/datasets that are showing out of date information\n    /// @dev Since this token is not mintable, there\'s no Transfer event. This method emits the Transfer event so that consumers that can detect the creation/new ownership of the token.\n    /// @param tokenIds The ids of tokens to refresh\n    function assertOwnership(uint256[] memory tokenIds) public {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            emit Transfer(address(0), gnarsV2.ownerOf(tokenId), tokenId);\n        }\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC721 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function approve(address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function setApprovalForAll(address, bool) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function transferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256, bytes calldata) public pure {\n        revert Untransferable();\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC6454 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always return false\n    function isTransferable(uint256, address, address) external pure returns (bool) {\n        return false;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC165 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165\n            || interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721\n            || interfaceId == 0x5b5e139f // ERC165 Interface ID for ERC721Metadata\n            || interfaceId == 0x780e9d63 // ERC165 Interface ID for ERC721Enumerable\n            || interfaceId == 0x7f5828d0 // ERC165 Interface ID for ERC173\n            || interfaceId == 0x91a6262f; // ERC165 Interface ID for ERC6454\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'GnarsHD.getPartTrait', 'start_line': 186, 'end_line': 196, 'offset_start': 9492, 'offset_end': 10008, 'content': 'function getPartTrait(\n        string memory traitType,\n        uint48 partIndex,\n        function (uint256) external view returns (string memory) getPartDescription\n    ) public view returns (string memory) {\n        try getPartDescription(partIndex) returns (string memory partDescription) {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"\', partDescription, \'"}\');\n        } catch {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"Unknown"}\');\n        }\n    }', 'contract_name': 'GnarsHD', 'contract_code': '{\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STRUCTS / EVENTS / ERRORS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n    struct Artwork {\n        string ipfsFolder;\n        uint48 amountBackgrounds;\n        uint48 amountBodies;\n        uint48 amountAccessories;\n        uint48 amountHeads;\n        uint48 amountNoggles;\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    error Untransferable();\n    error TokenDoesNotExist(uint256 tokenId);\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STORAGE\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    string public name = "Gnars HD";\n\n    string public symbol = "GNARSHD";\n\n    string public rendererBaseUri;\n\n    string public contractURI;\n\n    Artwork public artwork;\n\n    ISkateContractV2 public gnarsV2;\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                        CONSTRUCTOR\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    constructor(\n        address _gnarsV2Address,\n        string memory _rendererBaseUri,\n        Artwork memory _artwork,\n        string memory _contractURI,\n        address _owner\n    ) Owned(_owner) {\n        gnarsV2 = ISkateContractV2(_gnarsV2Address);\n        rendererBaseUri = _rendererBaseUri;\n        artwork = _artwork;\n        contractURI = _contractURI;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         MAIN LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function setArtwork(Artwork memory _artwork) public onlyOwner {\n        artwork = _artwork;\n    }\n\n    function setContractUri(string memory _contractURI) public onlyOwner {\n        contractURI = _contractURI;\n    }\n\n    function setRendererBaseUri(string memory _rendererBaseUri) public onlyOwner {\n        rendererBaseUri = _rendererBaseUri;\n    }\n\n    /// @notice The properties and query string for a generated token\n    /// @param _tokenId The ERC-721 token id\n    function getAttributes(uint256 _tokenId)\n        public\n        view\n        returns (string memory resultAttributes, string memory queryString)\n    {\n        (uint48 background, uint48 body, uint48 accessory, uint48 head, uint48 glasses) = gnarsV2.seeds(_tokenId);\n        IGnarDescriptorV2 descriptor = IGnarDescriptorV2(gnarsV2.descriptor());\n        IGnarDecorator decorator = IGnarDecorator(descriptor.decorator());\n\n        queryString = string.concat(\n            "?contractAddress=",\n            Strings.toHexString(address(this)),\n            "&tokenId=",\n            Strings.toString(_tokenId),\n            getBackgroundQueryParam(background),\n            getPartQueryParam("BODY", body, artwork.amountBodies),\n            getPartQueryParam("ACCESSORY", accessory, artwork.amountAccessories),\n            getPartQueryParam("HEADS", head, artwork.amountHeads),\n            getPartQueryParam("NOGGLES", glasses, artwork.amountNoggles)\n        );\n\n        resultAttributes = string.concat(\n            getPartTrait("Background", background, decorator.backgrounds),\n            ",",\n            getPartTrait("Body", body, decorator.bodies),\n            ",",\n            getPartTrait("Accessory", accessory, decorator.accessories),\n            ",",\n            getPartTrait("Head", head, decorator.heads),\n            ",",\n            getPartTrait("Glasses", glasses, decorator.glasses)\n        );\n    }\n\n    function getPartQueryParam(string memory folder, uint48 partIndex, uint48 amountOfPart)\n        public\n        view\n        returns (string memory)\n    {\n        if (partIndex >= amountOfPart) {\n            return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/", Strings.toString(partIndex), ".PNG");\n    }\n\n    function getBackgroundQueryParam(uint48 backgroundIndex) public view returns (string memory) {\n        if (backgroundIndex >= artwork.amountBackgrounds) {\n            return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/", Strings.toString(backgroundIndex), ".PNG");\n    }\n\n    function getPartTrait(\n        string memory traitType,\n        uint48 partIndex,\n        function (uint256) external view returns (string memory) getPartDescription\n    ) public view returns (string memory) {\n        try getPartDescription(partIndex) returns (string memory partDescription) {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"\', partDescription, \'"}\');\n        } catch {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"Unknown"}\');\n        }\n    }\n\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\n        if (gnarsV2.ownerOf(_tokenId) == address(0)) {\n            revert TokenDoesNotExist(_tokenId);\n        }\n\n        (string memory attributes, string memory queryString) = getAttributes(_tokenId);\n        return string(\n            abi.encodePacked(\n                "data:application/json;base64,",\n                Base64.encode(\n                    bytes(\n                        abi.encodePacked(\n                            \'{"name":"Gnar HD #\',\n                            Strings.toString(_tokenId),\n                            \'", "description":"High definition Gnar #\',\n                            Strings.toString(_tokenId),\n                            " counterpart",\n                            \'", "attributes": [\',\n                            attributes,\n                            \'], "image": "\',\n                            string.concat(rendererBaseUri, queryString),\n                            \'"}\'\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              PASSTHROUGH METHODS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Returns the total amount of Gnars HD in existence\n    /// @dev Delegates to the Gnars V2 contract\n    function totalSupply() external view returns (uint256) {\n        return gnarsV2.totalSupply();\n    }\n\n    /// @notice Returns the tokenId of the Gnar HD by index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenByIndex(_index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenOfOwnerByIndex(_owner, _index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token id\n    /// @dev Delegates to the Gnars V2 contract\n    function ownerOf(uint256 id) public view returns (address owner) {\n        return gnarsV2.ownerOf(id);\n    }\n\n    /// @notice Returns the amount of Gnars HD owned by the specified address\n    /// @dev Delegates to the Gnars V2 contract\n    function balanceOf(address owner) public view returns (uint256) {\n        return gnarsV2.balanceOf(owner);\n    }\n\n    /// @notice Refresh ownership of specified tokens on marketplaces/datasets that are showing out of date information\n    /// @dev Since this token is not mintable, there\'s no Transfer event. This method emits the Transfer event so that consumers that can detect the creation/new ownership of the token.\n    /// @param tokenIds The ids of tokens to refresh\n    function assertOwnership(uint256[] memory tokenIds) public {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            emit Transfer(address(0), gnarsV2.ownerOf(tokenId), tokenId);\n        }\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC721 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function approve(address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function setApprovalForAll(address, bool) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function transferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256, bytes calldata) public pure {\n        revert Untransferable();\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC6454 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always return false\n    function isTransferable(uint256, address, address) external pure returns (bool) {\n        return false;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC165 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165\n            || interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721\n            || interfaceId == 0x5b5e139f // ERC165 Interface ID for ERC721Metadata\n            || interfaceId == 0x780e9d63 // ERC165 Interface ID for ERC721Enumerable\n            || interfaceId == 0x7f5828d0 // ERC165 Interface ID for ERC173\n            || interfaceId == 0x91a6262f; // ERC165 Interface ID for ERC6454\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'GnarsHD.tokenURI', 'start_line': 198, 'end_line': 225, 'offset_start': 10015, 'offset_end': 11108, 'content': 'function tokenURI(uint256 _tokenId) public view returns (string memory) {\n        if (gnarsV2.ownerOf(_tokenId) == address(0)) {\n            revert TokenDoesNotExist(_tokenId);\n        }\n\n        (string memory attributes, string memory queryString) = getAttributes(_tokenId);\n        return string(\n            abi.encodePacked(\n                "data:application/json;base64,",\n                Base64.encode(\n                    bytes(\n                        abi.encodePacked(\n                            \'{"name":"Gnar HD #\',\n                            Strings.toString(_tokenId),\n                            \'", "description":"High definition Gnar #\',\n                            Strings.toString(_tokenId),\n                            " counterpart",\n                            \'", "attributes": [\',\n                            attributes,\n                            \'], "image": "\',\n                            string.concat(rendererBaseUri, queryString),\n                            \'"}\'\n                        )\n                    )\n                )\n            )\n        );\n    }', 'contract_name': 'GnarsHD', 'contract_code': '{\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STRUCTS / EVENTS / ERRORS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n    struct Artwork {\n        string ipfsFolder;\n        uint48 amountBackgrounds;\n        uint48 amountBodies;\n        uint48 amountAccessories;\n        uint48 amountHeads;\n        uint48 amountNoggles;\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    error Untransferable();\n    error TokenDoesNotExist(uint256 tokenId);\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STORAGE\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    string public name = "Gnars HD";\n\n    string public symbol = "GNARSHD";\n\n    string public rendererBaseUri;\n\n    string public contractURI;\n\n    Artwork public artwork;\n\n    ISkateContractV2 public gnarsV2;\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                        CONSTRUCTOR\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    constructor(\n        address _gnarsV2Address,\n        string memory _rendererBaseUri,\n        Artwork memory _artwork,\n        string memory _contractURI,\n        address _owner\n    ) Owned(_owner) {\n        gnarsV2 = ISkateContractV2(_gnarsV2Address);\n        rendererBaseUri = _rendererBaseUri;\n        artwork = _artwork;\n        contractURI = _contractURI;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         MAIN LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function setArtwork(Artwork memory _artwork) public onlyOwner {\n        artwork = _artwork;\n    }\n\n    function setContractUri(string memory _contractURI) public onlyOwner {\n        contractURI = _contractURI;\n    }\n\n    function setRendererBaseUri(string memory _rendererBaseUri) public onlyOwner {\n        rendererBaseUri = _rendererBaseUri;\n    }\n\n    /// @notice The properties and query string for a generated token\n    /// @param _tokenId The ERC-721 token id\n    function getAttributes(uint256 _tokenId)\n        public\n        view\n        returns (string memory resultAttributes, string memory queryString)\n    {\n        (uint48 background, uint48 body, uint48 accessory, uint48 head, uint48 glasses) = gnarsV2.seeds(_tokenId);\n        IGnarDescriptorV2 descriptor = IGnarDescriptorV2(gnarsV2.descriptor());\n        IGnarDecorator decorator = IGnarDecorator(descriptor.decorator());\n\n        queryString = string.concat(\n            "?contractAddress=",\n            Strings.toHexString(address(this)),\n            "&tokenId=",\n            Strings.toString(_tokenId),\n            getBackgroundQueryParam(background),\n            getPartQueryParam("BODY", body, artwork.amountBodies),\n            getPartQueryParam("ACCESSORY", accessory, artwork.amountAccessories),\n            getPartQueryParam("HEADS", head, artwork.amountHeads),\n            getPartQueryParam("NOGGLES", glasses, artwork.amountNoggles)\n        );\n\n        resultAttributes = string.concat(\n            getPartTrait("Background", background, decorator.backgrounds),\n            ",",\n            getPartTrait("Body", body, decorator.bodies),\n            ",",\n            getPartTrait("Accessory", accessory, decorator.accessories),\n            ",",\n            getPartTrait("Head", head, decorator.heads),\n            ",",\n            getPartTrait("Glasses", glasses, decorator.glasses)\n        );\n    }\n\n    function getPartQueryParam(string memory folder, uint48 partIndex, uint48 amountOfPart)\n        public\n        view\n        returns (string memory)\n    {\n        if (partIndex >= amountOfPart) {\n            return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/", Strings.toString(partIndex), ".PNG");\n    }\n\n    function getBackgroundQueryParam(uint48 backgroundIndex) public view returns (string memory) {\n        if (backgroundIndex >= artwork.amountBackgrounds) {\n            return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/", Strings.toString(backgroundIndex), ".PNG");\n    }\n\n    function getPartTrait(\n        string memory traitType,\n        uint48 partIndex,\n        function (uint256) external view returns (string memory) getPartDescription\n    ) public view returns (string memory) {\n        try getPartDescription(partIndex) returns (string memory partDescription) {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"\', partDescription, \'"}\');\n        } catch {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"Unknown"}\');\n        }\n    }\n\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\n        if (gnarsV2.ownerOf(_tokenId) == address(0)) {\n            revert TokenDoesNotExist(_tokenId);\n        }\n\n        (string memory attributes, string memory queryString) = getAttributes(_tokenId);\n        return string(\n            abi.encodePacked(\n                "data:application/json;base64,",\n                Base64.encode(\n                    bytes(\n                        abi.encodePacked(\n                            \'{"name":"Gnar HD #\',\n                            Strings.toString(_tokenId),\n                            \'", "description":"High definition Gnar #\',\n                            Strings.toString(_tokenId),\n                            " counterpart",\n                            \'", "attributes": [\',\n                            attributes,\n                            \'], "image": "\',\n                            string.concat(rendererBaseUri, queryString),\n                            \'"}\'\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              PASSTHROUGH METHODS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Returns the total amount of Gnars HD in existence\n    /// @dev Delegates to the Gnars V2 contract\n    function totalSupply() external view returns (uint256) {\n        return gnarsV2.totalSupply();\n    }\n\n    /// @notice Returns the tokenId of the Gnar HD by index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenByIndex(_index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenOfOwnerByIndex(_owner, _index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token id\n    /// @dev Delegates to the Gnars V2 contract\n    function ownerOf(uint256 id) public view returns (address owner) {\n        return gnarsV2.ownerOf(id);\n    }\n\n    /// @notice Returns the amount of Gnars HD owned by the specified address\n    /// @dev Delegates to the Gnars V2 contract\n    function balanceOf(address owner) public view returns (uint256) {\n        return gnarsV2.balanceOf(owner);\n    }\n\n    /// @notice Refresh ownership of specified tokens on marketplaces/datasets that are showing out of date information\n    /// @dev Since this token is not mintable, there\'s no Transfer event. This method emits the Transfer event so that consumers that can detect the creation/new ownership of the token.\n    /// @param tokenIds The ids of tokens to refresh\n    function assertOwnership(uint256[] memory tokenIds) public {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            emit Transfer(address(0), gnarsV2.ownerOf(tokenId), tokenId);\n        }\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC721 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function approve(address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function setApprovalForAll(address, bool) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function transferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256, bytes calldata) public pure {\n        revert Untransferable();\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC6454 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always return false\n    function isTransferable(uint256, address, address) external pure returns (bool) {\n        return false;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC165 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165\n            || interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721\n            || interfaceId == 0x5b5e139f // ERC165 Interface ID for ERC721Metadata\n            || interfaceId == 0x780e9d63 // ERC165 Interface ID for ERC721Enumerable\n            || interfaceId == 0x7f5828d0 // ERC165 Interface ID for ERC173\n            || interfaceId == 0x91a6262f; // ERC165 Interface ID for ERC6454\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'GnarsHD.totalSupply', 'start_line': 233, 'end_line': 235, 'offset_start': 11427, 'offset_end': 11526, 'content': 'function totalSupply() external view returns (uint256) {\n        return gnarsV2.totalSupply();\n    }', 'contract_name': 'GnarsHD', 'contract_code': '{\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STRUCTS / EVENTS / ERRORS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n    struct Artwork {\n        string ipfsFolder;\n        uint48 amountBackgrounds;\n        uint48 amountBodies;\n        uint48 amountAccessories;\n        uint48 amountHeads;\n        uint48 amountNoggles;\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    error Untransferable();\n    error TokenDoesNotExist(uint256 tokenId);\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STORAGE\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    string public name = "Gnars HD";\n\n    string public symbol = "GNARSHD";\n\n    string public rendererBaseUri;\n\n    string public contractURI;\n\n    Artwork public artwork;\n\n    ISkateContractV2 public gnarsV2;\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                        CONSTRUCTOR\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    constructor(\n        address _gnarsV2Address,\n        string memory _rendererBaseUri,\n        Artwork memory _artwork,\n        string memory _contractURI,\n        address _owner\n    ) Owned(_owner) {\n        gnarsV2 = ISkateContractV2(_gnarsV2Address);\n        rendererBaseUri = _rendererBaseUri;\n        artwork = _artwork;\n        contractURI = _contractURI;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         MAIN LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function setArtwork(Artwork memory _artwork) public onlyOwner {\n        artwork = _artwork;\n    }\n\n    function setContractUri(string memory _contractURI) public onlyOwner {\n        contractURI = _contractURI;\n    }\n\n    function setRendererBaseUri(string memory _rendererBaseUri) public onlyOwner {\n        rendererBaseUri = _rendererBaseUri;\n    }\n\n    /// @notice The properties and query string for a generated token\n    /// @param _tokenId The ERC-721 token id\n    function getAttributes(uint256 _tokenId)\n        public\n        view\n        returns (string memory resultAttributes, string memory queryString)\n    {\n        (uint48 background, uint48 body, uint48 accessory, uint48 head, uint48 glasses) = gnarsV2.seeds(_tokenId);\n        IGnarDescriptorV2 descriptor = IGnarDescriptorV2(gnarsV2.descriptor());\n        IGnarDecorator decorator = IGnarDecorator(descriptor.decorator());\n\n        queryString = string.concat(\n            "?contractAddress=",\n            Strings.toHexString(address(this)),\n            "&tokenId=",\n            Strings.toString(_tokenId),\n            getBackgroundQueryParam(background),\n            getPartQueryParam("BODY", body, artwork.amountBodies),\n            getPartQueryParam("ACCESSORY", accessory, artwork.amountAccessories),\n            getPartQueryParam("HEADS", head, artwork.amountHeads),\n            getPartQueryParam("NOGGLES", glasses, artwork.amountNoggles)\n        );\n\n        resultAttributes = string.concat(\n            getPartTrait("Background", background, decorator.backgrounds),\n            ",",\n            getPartTrait("Body", body, decorator.bodies),\n            ",",\n            getPartTrait("Accessory", accessory, decorator.accessories),\n            ",",\n            getPartTrait("Head", head, decorator.heads),\n            ",",\n            getPartTrait("Glasses", glasses, decorator.glasses)\n        );\n    }\n\n    function getPartQueryParam(string memory folder, uint48 partIndex, uint48 amountOfPart)\n        public\n        view\n        returns (string memory)\n    {\n        if (partIndex >= amountOfPart) {\n            return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/", Strings.toString(partIndex), ".PNG");\n    }\n\n    function getBackgroundQueryParam(uint48 backgroundIndex) public view returns (string memory) {\n        if (backgroundIndex >= artwork.amountBackgrounds) {\n            return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/", Strings.toString(backgroundIndex), ".PNG");\n    }\n\n    function getPartTrait(\n        string memory traitType,\n        uint48 partIndex,\n        function (uint256) external view returns (string memory) getPartDescription\n    ) public view returns (string memory) {\n        try getPartDescription(partIndex) returns (string memory partDescription) {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"\', partDescription, \'"}\');\n        } catch {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"Unknown"}\');\n        }\n    }\n\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\n        if (gnarsV2.ownerOf(_tokenId) == address(0)) {\n            revert TokenDoesNotExist(_tokenId);\n        }\n\n        (string memory attributes, string memory queryString) = getAttributes(_tokenId);\n        return string(\n            abi.encodePacked(\n                "data:application/json;base64,",\n                Base64.encode(\n                    bytes(\n                        abi.encodePacked(\n                            \'{"name":"Gnar HD #\',\n                            Strings.toString(_tokenId),\n                            \'", "description":"High definition Gnar #\',\n                            Strings.toString(_tokenId),\n                            " counterpart",\n                            \'", "attributes": [\',\n                            attributes,\n                            \'], "image": "\',\n                            string.concat(rendererBaseUri, queryString),\n                            \'"}\'\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              PASSTHROUGH METHODS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Returns the total amount of Gnars HD in existence\n    /// @dev Delegates to the Gnars V2 contract\n    function totalSupply() external view returns (uint256) {\n        return gnarsV2.totalSupply();\n    }\n\n    /// @notice Returns the tokenId of the Gnar HD by index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenByIndex(_index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenOfOwnerByIndex(_owner, _index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token id\n    /// @dev Delegates to the Gnars V2 contract\n    function ownerOf(uint256 id) public view returns (address owner) {\n        return gnarsV2.ownerOf(id);\n    }\n\n    /// @notice Returns the amount of Gnars HD owned by the specified address\n    /// @dev Delegates to the Gnars V2 contract\n    function balanceOf(address owner) public view returns (uint256) {\n        return gnarsV2.balanceOf(owner);\n    }\n\n    /// @notice Refresh ownership of specified tokens on marketplaces/datasets that are showing out of date information\n    /// @dev Since this token is not mintable, there\'s no Transfer event. This method emits the Transfer event so that consumers that can detect the creation/new ownership of the token.\n    /// @param tokenIds The ids of tokens to refresh\n    function assertOwnership(uint256[] memory tokenIds) public {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            emit Transfer(address(0), gnarsV2.ownerOf(tokenId), tokenId);\n        }\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC721 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function approve(address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function setApprovalForAll(address, bool) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function transferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256, bytes calldata) public pure {\n        revert Untransferable();\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC6454 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always return false\n    function isTransferable(uint256, address, address) external pure returns (bool) {\n        return false;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC165 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165\n            || interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721\n            || interfaceId == 0x5b5e139f // ERC165 Interface ID for ERC721Metadata\n            || interfaceId == 0x780e9d63 // ERC165 Interface ID for ERC721Enumerable\n            || interfaceId == 0x7f5828d0 // ERC165 Interface ID for ERC173\n            || interfaceId == 0x91a6262f; // ERC165 Interface ID for ERC6454\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'GnarsHD.tokenByIndex', 'start_line': 239, 'end_line': 241, 'offset_start': 11641, 'offset_end': 11762, 'content': 'function tokenByIndex(uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenByIndex(_index);\n    }', 'contract_name': 'GnarsHD', 'contract_code': '{\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STRUCTS / EVENTS / ERRORS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n    struct Artwork {\n        string ipfsFolder;\n        uint48 amountBackgrounds;\n        uint48 amountBodies;\n        uint48 amountAccessories;\n        uint48 amountHeads;\n        uint48 amountNoggles;\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    error Untransferable();\n    error TokenDoesNotExist(uint256 tokenId);\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STORAGE\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    string public name = "Gnars HD";\n\n    string public symbol = "GNARSHD";\n\n    string public rendererBaseUri;\n\n    string public contractURI;\n\n    Artwork public artwork;\n\n    ISkateContractV2 public gnarsV2;\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                        CONSTRUCTOR\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    constructor(\n        address _gnarsV2Address,\n        string memory _rendererBaseUri,\n        Artwork memory _artwork,\n        string memory _contractURI,\n        address _owner\n    ) Owned(_owner) {\n        gnarsV2 = ISkateContractV2(_gnarsV2Address);\n        rendererBaseUri = _rendererBaseUri;\n        artwork = _artwork;\n        contractURI = _contractURI;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         MAIN LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function setArtwork(Artwork memory _artwork) public onlyOwner {\n        artwork = _artwork;\n    }\n\n    function setContractUri(string memory _contractURI) public onlyOwner {\n        contractURI = _contractURI;\n    }\n\n    function setRendererBaseUri(string memory _rendererBaseUri) public onlyOwner {\n        rendererBaseUri = _rendererBaseUri;\n    }\n\n    /// @notice The properties and query string for a generated token\n    /// @param _tokenId The ERC-721 token id\n    function getAttributes(uint256 _tokenId)\n        public\n        view\n        returns (string memory resultAttributes, string memory queryString)\n    {\n        (uint48 background, uint48 body, uint48 accessory, uint48 head, uint48 glasses) = gnarsV2.seeds(_tokenId);\n        IGnarDescriptorV2 descriptor = IGnarDescriptorV2(gnarsV2.descriptor());\n        IGnarDecorator decorator = IGnarDecorator(descriptor.decorator());\n\n        queryString = string.concat(\n            "?contractAddress=",\n            Strings.toHexString(address(this)),\n            "&tokenId=",\n            Strings.toString(_tokenId),\n            getBackgroundQueryParam(background),\n            getPartQueryParam("BODY", body, artwork.amountBodies),\n            getPartQueryParam("ACCESSORY", accessory, artwork.amountAccessories),\n            getPartQueryParam("HEADS", head, artwork.amountHeads),\n            getPartQueryParam("NOGGLES", glasses, artwork.amountNoggles)\n        );\n\n        resultAttributes = string.concat(\n            getPartTrait("Background", background, decorator.backgrounds),\n            ",",\n            getPartTrait("Body", body, decorator.bodies),\n            ",",\n            getPartTrait("Accessory", accessory, decorator.accessories),\n            ",",\n            getPartTrait("Head", head, decorator.heads),\n            ",",\n            getPartTrait("Glasses", glasses, decorator.glasses)\n        );\n    }\n\n    function getPartQueryParam(string memory folder, uint48 partIndex, uint48 amountOfPart)\n        public\n        view\n        returns (string memory)\n    {\n        if (partIndex >= amountOfPart) {\n            return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/", Strings.toString(partIndex), ".PNG");\n    }\n\n    function getBackgroundQueryParam(uint48 backgroundIndex) public view returns (string memory) {\n        if (backgroundIndex >= artwork.amountBackgrounds) {\n            return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/", Strings.toString(backgroundIndex), ".PNG");\n    }\n\n    function getPartTrait(\n        string memory traitType,\n        uint48 partIndex,\n        function (uint256) external view returns (string memory) getPartDescription\n    ) public view returns (string memory) {\n        try getPartDescription(partIndex) returns (string memory partDescription) {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"\', partDescription, \'"}\');\n        } catch {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"Unknown"}\');\n        }\n    }\n\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\n        if (gnarsV2.ownerOf(_tokenId) == address(0)) {\n            revert TokenDoesNotExist(_tokenId);\n        }\n\n        (string memory attributes, string memory queryString) = getAttributes(_tokenId);\n        return string(\n            abi.encodePacked(\n                "data:application/json;base64,",\n                Base64.encode(\n                    bytes(\n                        abi.encodePacked(\n                            \'{"name":"Gnar HD #\',\n                            Strings.toString(_tokenId),\n                            \'", "description":"High definition Gnar #\',\n                            Strings.toString(_tokenId),\n                            " counterpart",\n                            \'", "attributes": [\',\n                            attributes,\n                            \'], "image": "\',\n                            string.concat(rendererBaseUri, queryString),\n                            \'"}\'\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              PASSTHROUGH METHODS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Returns the total amount of Gnars HD in existence\n    /// @dev Delegates to the Gnars V2 contract\n    function totalSupply() external view returns (uint256) {\n        return gnarsV2.totalSupply();\n    }\n\n    /// @notice Returns the tokenId of the Gnar HD by index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenByIndex(_index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenOfOwnerByIndex(_owner, _index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token id\n    /// @dev Delegates to the Gnars V2 contract\n    function ownerOf(uint256 id) public view returns (address owner) {\n        return gnarsV2.ownerOf(id);\n    }\n\n    /// @notice Returns the amount of Gnars HD owned by the specified address\n    /// @dev Delegates to the Gnars V2 contract\n    function balanceOf(address owner) public view returns (uint256) {\n        return gnarsV2.balanceOf(owner);\n    }\n\n    /// @notice Refresh ownership of specified tokens on marketplaces/datasets that are showing out of date information\n    /// @dev Since this token is not mintable, there\'s no Transfer event. This method emits the Transfer event so that consumers that can detect the creation/new ownership of the token.\n    /// @param tokenIds The ids of tokens to refresh\n    function assertOwnership(uint256[] memory tokenIds) public {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            emit Transfer(address(0), gnarsV2.ownerOf(tokenId), tokenId);\n        }\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC721 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function approve(address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function setApprovalForAll(address, bool) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function transferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256, bytes calldata) public pure {\n        revert Untransferable();\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC6454 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always return false\n    function isTransferable(uint256, address, address) external pure returns (bool) {\n        return false;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC165 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165\n            || interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721\n            || interfaceId == 0x5b5e139f // ERC165 Interface ID for ERC721Metadata\n            || interfaceId == 0x780e9d63 // ERC165 Interface ID for ERC721Enumerable\n            || interfaceId == 0x7f5828d0 // ERC165 Interface ID for ERC173\n            || interfaceId == 0x91a6262f; // ERC165 Interface ID for ERC6454\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'GnarsHD.tokenOfOwnerByIndex', 'start_line': 245, 'end_line': 247, 'offset_start': 11884, 'offset_end': 12043, 'content': 'function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenOfOwnerByIndex(_owner, _index);\n    }', 'contract_name': 'GnarsHD', 'contract_code': '{\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STRUCTS / EVENTS / ERRORS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n    struct Artwork {\n        string ipfsFolder;\n        uint48 amountBackgrounds;\n        uint48 amountBodies;\n        uint48 amountAccessories;\n        uint48 amountHeads;\n        uint48 amountNoggles;\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    error Untransferable();\n    error TokenDoesNotExist(uint256 tokenId);\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STORAGE\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    string public name = "Gnars HD";\n\n    string public symbol = "GNARSHD";\n\n    string public rendererBaseUri;\n\n    string public contractURI;\n\n    Artwork public artwork;\n\n    ISkateContractV2 public gnarsV2;\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                        CONSTRUCTOR\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    constructor(\n        address _gnarsV2Address,\n        string memory _rendererBaseUri,\n        Artwork memory _artwork,\n        string memory _contractURI,\n        address _owner\n    ) Owned(_owner) {\n        gnarsV2 = ISkateContractV2(_gnarsV2Address);\n        rendererBaseUri = _rendererBaseUri;\n        artwork = _artwork;\n        contractURI = _contractURI;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         MAIN LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function setArtwork(Artwork memory _artwork) public onlyOwner {\n        artwork = _artwork;\n    }\n\n    function setContractUri(string memory _contractURI) public onlyOwner {\n        contractURI = _contractURI;\n    }\n\n    function setRendererBaseUri(string memory _rendererBaseUri) public onlyOwner {\n        rendererBaseUri = _rendererBaseUri;\n    }\n\n    /// @notice The properties and query string for a generated token\n    /// @param _tokenId The ERC-721 token id\n    function getAttributes(uint256 _tokenId)\n        public\n        view\n        returns (string memory resultAttributes, string memory queryString)\n    {\n        (uint48 background, uint48 body, uint48 accessory, uint48 head, uint48 glasses) = gnarsV2.seeds(_tokenId);\n        IGnarDescriptorV2 descriptor = IGnarDescriptorV2(gnarsV2.descriptor());\n        IGnarDecorator decorator = IGnarDecorator(descriptor.decorator());\n\n        queryString = string.concat(\n            "?contractAddress=",\n            Strings.toHexString(address(this)),\n            "&tokenId=",\n            Strings.toString(_tokenId),\n            getBackgroundQueryParam(background),\n            getPartQueryParam("BODY", body, artwork.amountBodies),\n            getPartQueryParam("ACCESSORY", accessory, artwork.amountAccessories),\n            getPartQueryParam("HEADS", head, artwork.amountHeads),\n            getPartQueryParam("NOGGLES", glasses, artwork.amountNoggles)\n        );\n\n        resultAttributes = string.concat(\n            getPartTrait("Background", background, decorator.backgrounds),\n            ",",\n            getPartTrait("Body", body, decorator.bodies),\n            ",",\n            getPartTrait("Accessory", accessory, decorator.accessories),\n            ",",\n            getPartTrait("Head", head, decorator.heads),\n            ",",\n            getPartTrait("Glasses", glasses, decorator.glasses)\n        );\n    }\n\n    function getPartQueryParam(string memory folder, uint48 partIndex, uint48 amountOfPart)\n        public\n        view\n        returns (string memory)\n    {\n        if (partIndex >= amountOfPart) {\n            return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/", Strings.toString(partIndex), ".PNG");\n    }\n\n    function getBackgroundQueryParam(uint48 backgroundIndex) public view returns (string memory) {\n        if (backgroundIndex >= artwork.amountBackgrounds) {\n            return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/", Strings.toString(backgroundIndex), ".PNG");\n    }\n\n    function getPartTrait(\n        string memory traitType,\n        uint48 partIndex,\n        function (uint256) external view returns (string memory) getPartDescription\n    ) public view returns (string memory) {\n        try getPartDescription(partIndex) returns (string memory partDescription) {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"\', partDescription, \'"}\');\n        } catch {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"Unknown"}\');\n        }\n    }\n\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\n        if (gnarsV2.ownerOf(_tokenId) == address(0)) {\n            revert TokenDoesNotExist(_tokenId);\n        }\n\n        (string memory attributes, string memory queryString) = getAttributes(_tokenId);\n        return string(\n            abi.encodePacked(\n                "data:application/json;base64,",\n                Base64.encode(\n                    bytes(\n                        abi.encodePacked(\n                            \'{"name":"Gnar HD #\',\n                            Strings.toString(_tokenId),\n                            \'", "description":"High definition Gnar #\',\n                            Strings.toString(_tokenId),\n                            " counterpart",\n                            \'", "attributes": [\',\n                            attributes,\n                            \'], "image": "\',\n                            string.concat(rendererBaseUri, queryString),\n                            \'"}\'\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              PASSTHROUGH METHODS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Returns the total amount of Gnars HD in existence\n    /// @dev Delegates to the Gnars V2 contract\n    function totalSupply() external view returns (uint256) {\n        return gnarsV2.totalSupply();\n    }\n\n    /// @notice Returns the tokenId of the Gnar HD by index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenByIndex(_index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenOfOwnerByIndex(_owner, _index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token id\n    /// @dev Delegates to the Gnars V2 contract\n    function ownerOf(uint256 id) public view returns (address owner) {\n        return gnarsV2.ownerOf(id);\n    }\n\n    /// @notice Returns the amount of Gnars HD owned by the specified address\n    /// @dev Delegates to the Gnars V2 contract\n    function balanceOf(address owner) public view returns (uint256) {\n        return gnarsV2.balanceOf(owner);\n    }\n\n    /// @notice Refresh ownership of specified tokens on marketplaces/datasets that are showing out of date information\n    /// @dev Since this token is not mintable, there\'s no Transfer event. This method emits the Transfer event so that consumers that can detect the creation/new ownership of the token.\n    /// @param tokenIds The ids of tokens to refresh\n    function assertOwnership(uint256[] memory tokenIds) public {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            emit Transfer(address(0), gnarsV2.ownerOf(tokenId), tokenId);\n        }\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC721 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function approve(address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function setApprovalForAll(address, bool) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function transferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256, bytes calldata) public pure {\n        revert Untransferable();\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC6454 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always return false\n    function isTransferable(uint256, address, address) external pure returns (bool) {\n        return false;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC165 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165\n            || interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721\n            || interfaceId == 0x5b5e139f // ERC165 Interface ID for ERC721Metadata\n            || interfaceId == 0x780e9d63 // ERC165 Interface ID for ERC721Enumerable\n            || interfaceId == 0x7f5828d0 // ERC165 Interface ID for ERC173\n            || interfaceId == 0x91a6262f; // ERC165 Interface ID for ERC6454\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'GnarsHD.ownerOf', 'start_line': 251, 'end_line': 253, 'offset_start': 12162, 'offset_end': 12269, 'content': 'function ownerOf(uint256 id) public view returns (address owner) {\n        return gnarsV2.ownerOf(id);\n    }', 'contract_name': 'GnarsHD', 'contract_code': '{\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STRUCTS / EVENTS / ERRORS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n    struct Artwork {\n        string ipfsFolder;\n        uint48 amountBackgrounds;\n        uint48 amountBodies;\n        uint48 amountAccessories;\n        uint48 amountHeads;\n        uint48 amountNoggles;\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    error Untransferable();\n    error TokenDoesNotExist(uint256 tokenId);\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STORAGE\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    string public name = "Gnars HD";\n\n    string public symbol = "GNARSHD";\n\n    string public rendererBaseUri;\n\n    string public contractURI;\n\n    Artwork public artwork;\n\n    ISkateContractV2 public gnarsV2;\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                        CONSTRUCTOR\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    constructor(\n        address _gnarsV2Address,\n        string memory _rendererBaseUri,\n        Artwork memory _artwork,\n        string memory _contractURI,\n        address _owner\n    ) Owned(_owner) {\n        gnarsV2 = ISkateContractV2(_gnarsV2Address);\n        rendererBaseUri = _rendererBaseUri;\n        artwork = _artwork;\n        contractURI = _contractURI;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         MAIN LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function setArtwork(Artwork memory _artwork) public onlyOwner {\n        artwork = _artwork;\n    }\n\n    function setContractUri(string memory _contractURI) public onlyOwner {\n        contractURI = _contractURI;\n    }\n\n    function setRendererBaseUri(string memory _rendererBaseUri) public onlyOwner {\n        rendererBaseUri = _rendererBaseUri;\n    }\n\n    /// @notice The properties and query string for a generated token\n    /// @param _tokenId The ERC-721 token id\n    function getAttributes(uint256 _tokenId)\n        public\n        view\n        returns (string memory resultAttributes, string memory queryString)\n    {\n        (uint48 background, uint48 body, uint48 accessory, uint48 head, uint48 glasses) = gnarsV2.seeds(_tokenId);\n        IGnarDescriptorV2 descriptor = IGnarDescriptorV2(gnarsV2.descriptor());\n        IGnarDecorator decorator = IGnarDecorator(descriptor.decorator());\n\n        queryString = string.concat(\n            "?contractAddress=",\n            Strings.toHexString(address(this)),\n            "&tokenId=",\n            Strings.toString(_tokenId),\n            getBackgroundQueryParam(background),\n            getPartQueryParam("BODY", body, artwork.amountBodies),\n            getPartQueryParam("ACCESSORY", accessory, artwork.amountAccessories),\n            getPartQueryParam("HEADS", head, artwork.amountHeads),\n            getPartQueryParam("NOGGLES", glasses, artwork.amountNoggles)\n        );\n\n        resultAttributes = string.concat(\n            getPartTrait("Background", background, decorator.backgrounds),\n            ",",\n            getPartTrait("Body", body, decorator.bodies),\n            ",",\n            getPartTrait("Accessory", accessory, decorator.accessories),\n            ",",\n            getPartTrait("Head", head, decorator.heads),\n            ",",\n            getPartTrait("Glasses", glasses, decorator.glasses)\n        );\n    }\n\n    function getPartQueryParam(string memory folder, uint48 partIndex, uint48 amountOfPart)\n        public\n        view\n        returns (string memory)\n    {\n        if (partIndex >= amountOfPart) {\n            return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/", Strings.toString(partIndex), ".PNG");\n    }\n\n    function getBackgroundQueryParam(uint48 backgroundIndex) public view returns (string memory) {\n        if (backgroundIndex >= artwork.amountBackgrounds) {\n            return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/", Strings.toString(backgroundIndex), ".PNG");\n    }\n\n    function getPartTrait(\n        string memory traitType,\n        uint48 partIndex,\n        function (uint256) external view returns (string memory) getPartDescription\n    ) public view returns (string memory) {\n        try getPartDescription(partIndex) returns (string memory partDescription) {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"\', partDescription, \'"}\');\n        } catch {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"Unknown"}\');\n        }\n    }\n\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\n        if (gnarsV2.ownerOf(_tokenId) == address(0)) {\n            revert TokenDoesNotExist(_tokenId);\n        }\n\n        (string memory attributes, string memory queryString) = getAttributes(_tokenId);\n        return string(\n            abi.encodePacked(\n                "data:application/json;base64,",\n                Base64.encode(\n                    bytes(\n                        abi.encodePacked(\n                            \'{"name":"Gnar HD #\',\n                            Strings.toString(_tokenId),\n                            \'", "description":"High definition Gnar #\',\n                            Strings.toString(_tokenId),\n                            " counterpart",\n                            \'", "attributes": [\',\n                            attributes,\n                            \'], "image": "\',\n                            string.concat(rendererBaseUri, queryString),\n                            \'"}\'\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              PASSTHROUGH METHODS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Returns the total amount of Gnars HD in existence\n    /// @dev Delegates to the Gnars V2 contract\n    function totalSupply() external view returns (uint256) {\n        return gnarsV2.totalSupply();\n    }\n\n    /// @notice Returns the tokenId of the Gnar HD by index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenByIndex(_index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenOfOwnerByIndex(_owner, _index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token id\n    /// @dev Delegates to the Gnars V2 contract\n    function ownerOf(uint256 id) public view returns (address owner) {\n        return gnarsV2.ownerOf(id);\n    }\n\n    /// @notice Returns the amount of Gnars HD owned by the specified address\n    /// @dev Delegates to the Gnars V2 contract\n    function balanceOf(address owner) public view returns (uint256) {\n        return gnarsV2.balanceOf(owner);\n    }\n\n    /// @notice Refresh ownership of specified tokens on marketplaces/datasets that are showing out of date information\n    /// @dev Since this token is not mintable, there\'s no Transfer event. This method emits the Transfer event so that consumers that can detect the creation/new ownership of the token.\n    /// @param tokenIds The ids of tokens to refresh\n    function assertOwnership(uint256[] memory tokenIds) public {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            emit Transfer(address(0), gnarsV2.ownerOf(tokenId), tokenId);\n        }\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC721 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function approve(address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function setApprovalForAll(address, bool) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function transferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256, bytes calldata) public pure {\n        revert Untransferable();\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC6454 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always return false\n    function isTransferable(uint256, address, address) external pure returns (bool) {\n        return false;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC165 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165\n            || interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721\n            || interfaceId == 0x5b5e139f // ERC165 Interface ID for ERC721Metadata\n            || interfaceId == 0x780e9d63 // ERC165 Interface ID for ERC721Enumerable\n            || interfaceId == 0x7f5828d0 // ERC165 Interface ID for ERC173\n            || interfaceId == 0x91a6262f; // ERC165 Interface ID for ERC6454\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'GnarsHD.balanceOf', 'start_line': 257, 'end_line': 259, 'offset_start': 12402, 'offset_end': 12513, 'content': 'function balanceOf(address owner) public view returns (uint256) {\n        return gnarsV2.balanceOf(owner);\n    }', 'contract_name': 'GnarsHD', 'contract_code': '{\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STRUCTS / EVENTS / ERRORS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n    struct Artwork {\n        string ipfsFolder;\n        uint48 amountBackgrounds;\n        uint48 amountBodies;\n        uint48 amountAccessories;\n        uint48 amountHeads;\n        uint48 amountNoggles;\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    error Untransferable();\n    error TokenDoesNotExist(uint256 tokenId);\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STORAGE\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    string public name = "Gnars HD";\n\n    string public symbol = "GNARSHD";\n\n    string public rendererBaseUri;\n\n    string public contractURI;\n\n    Artwork public artwork;\n\n    ISkateContractV2 public gnarsV2;\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                        CONSTRUCTOR\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    constructor(\n        address _gnarsV2Address,\n        string memory _rendererBaseUri,\n        Artwork memory _artwork,\n        string memory _contractURI,\n        address _owner\n    ) Owned(_owner) {\n        gnarsV2 = ISkateContractV2(_gnarsV2Address);\n        rendererBaseUri = _rendererBaseUri;\n        artwork = _artwork;\n        contractURI = _contractURI;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         MAIN LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function setArtwork(Artwork memory _artwork) public onlyOwner {\n        artwork = _artwork;\n    }\n\n    function setContractUri(string memory _contractURI) public onlyOwner {\n        contractURI = _contractURI;\n    }\n\n    function setRendererBaseUri(string memory _rendererBaseUri) public onlyOwner {\n        rendererBaseUri = _rendererBaseUri;\n    }\n\n    /// @notice The properties and query string for a generated token\n    /// @param _tokenId The ERC-721 token id\n    function getAttributes(uint256 _tokenId)\n        public\n        view\n        returns (string memory resultAttributes, string memory queryString)\n    {\n        (uint48 background, uint48 body, uint48 accessory, uint48 head, uint48 glasses) = gnarsV2.seeds(_tokenId);\n        IGnarDescriptorV2 descriptor = IGnarDescriptorV2(gnarsV2.descriptor());\n        IGnarDecorator decorator = IGnarDecorator(descriptor.decorator());\n\n        queryString = string.concat(\n            "?contractAddress=",\n            Strings.toHexString(address(this)),\n            "&tokenId=",\n            Strings.toString(_tokenId),\n            getBackgroundQueryParam(background),\n            getPartQueryParam("BODY", body, artwork.amountBodies),\n            getPartQueryParam("ACCESSORY", accessory, artwork.amountAccessories),\n            getPartQueryParam("HEADS", head, artwork.amountHeads),\n            getPartQueryParam("NOGGLES", glasses, artwork.amountNoggles)\n        );\n\n        resultAttributes = string.concat(\n            getPartTrait("Background", background, decorator.backgrounds),\n            ",",\n            getPartTrait("Body", body, decorator.bodies),\n            ",",\n            getPartTrait("Accessory", accessory, decorator.accessories),\n            ",",\n            getPartTrait("Head", head, decorator.heads),\n            ",",\n            getPartTrait("Glasses", glasses, decorator.glasses)\n        );\n    }\n\n    function getPartQueryParam(string memory folder, uint48 partIndex, uint48 amountOfPart)\n        public\n        view\n        returns (string memory)\n    {\n        if (partIndex >= amountOfPart) {\n            return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/", Strings.toString(partIndex), ".PNG");\n    }\n\n    function getBackgroundQueryParam(uint48 backgroundIndex) public view returns (string memory) {\n        if (backgroundIndex >= artwork.amountBackgrounds) {\n            return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/", Strings.toString(backgroundIndex), ".PNG");\n    }\n\n    function getPartTrait(\n        string memory traitType,\n        uint48 partIndex,\n        function (uint256) external view returns (string memory) getPartDescription\n    ) public view returns (string memory) {\n        try getPartDescription(partIndex) returns (string memory partDescription) {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"\', partDescription, \'"}\');\n        } catch {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"Unknown"}\');\n        }\n    }\n\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\n        if (gnarsV2.ownerOf(_tokenId) == address(0)) {\n            revert TokenDoesNotExist(_tokenId);\n        }\n\n        (string memory attributes, string memory queryString) = getAttributes(_tokenId);\n        return string(\n            abi.encodePacked(\n                "data:application/json;base64,",\n                Base64.encode(\n                    bytes(\n                        abi.encodePacked(\n                            \'{"name":"Gnar HD #\',\n                            Strings.toString(_tokenId),\n                            \'", "description":"High definition Gnar #\',\n                            Strings.toString(_tokenId),\n                            " counterpart",\n                            \'", "attributes": [\',\n                            attributes,\n                            \'], "image": "\',\n                            string.concat(rendererBaseUri, queryString),\n                            \'"}\'\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              PASSTHROUGH METHODS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Returns the total amount of Gnars HD in existence\n    /// @dev Delegates to the Gnars V2 contract\n    function totalSupply() external view returns (uint256) {\n        return gnarsV2.totalSupply();\n    }\n\n    /// @notice Returns the tokenId of the Gnar HD by index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenByIndex(_index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenOfOwnerByIndex(_owner, _index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token id\n    /// @dev Delegates to the Gnars V2 contract\n    function ownerOf(uint256 id) public view returns (address owner) {\n        return gnarsV2.ownerOf(id);\n    }\n\n    /// @notice Returns the amount of Gnars HD owned by the specified address\n    /// @dev Delegates to the Gnars V2 contract\n    function balanceOf(address owner) public view returns (uint256) {\n        return gnarsV2.balanceOf(owner);\n    }\n\n    /// @notice Refresh ownership of specified tokens on marketplaces/datasets that are showing out of date information\n    /// @dev Since this token is not mintable, there\'s no Transfer event. This method emits the Transfer event so that consumers that can detect the creation/new ownership of the token.\n    /// @param tokenIds The ids of tokens to refresh\n    function assertOwnership(uint256[] memory tokenIds) public {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            emit Transfer(address(0), gnarsV2.ownerOf(tokenId), tokenId);\n        }\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC721 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function approve(address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function setApprovalForAll(address, bool) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function transferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256, bytes calldata) public pure {\n        revert Untransferable();\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC6454 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always return false\n    function isTransferable(uint256, address, address) external pure returns (bool) {\n        return false;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC165 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165\n            || interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721\n            || interfaceId == 0x5b5e139f // ERC165 Interface ID for ERC721Metadata\n            || interfaceId == 0x780e9d63 // ERC165 Interface ID for ERC721Enumerable\n            || interfaceId == 0x7f5828d0 // ERC165 Interface ID for ERC173\n            || interfaceId == 0x91a6262f; // ERC165 Interface ID for ERC6454\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'GnarsHD.assertOwnership', 'start_line': 264, 'end_line': 269, 'offset_start': 12879, 'offset_end': 13127, 'content': 'function assertOwnership(uint256[] memory tokenIds) public {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            emit Transfer(address(0), gnarsV2.ownerOf(tokenId), tokenId);\n        }\n    }', 'contract_name': 'GnarsHD', 'contract_code': '{\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STRUCTS / EVENTS / ERRORS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n    struct Artwork {\n        string ipfsFolder;\n        uint48 amountBackgrounds;\n        uint48 amountBodies;\n        uint48 amountAccessories;\n        uint48 amountHeads;\n        uint48 amountNoggles;\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    error Untransferable();\n    error TokenDoesNotExist(uint256 tokenId);\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STORAGE\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    string public name = "Gnars HD";\n\n    string public symbol = "GNARSHD";\n\n    string public rendererBaseUri;\n\n    string public contractURI;\n\n    Artwork public artwork;\n\n    ISkateContractV2 public gnarsV2;\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                        CONSTRUCTOR\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    constructor(\n        address _gnarsV2Address,\n        string memory _rendererBaseUri,\n        Artwork memory _artwork,\n        string memory _contractURI,\n        address _owner\n    ) Owned(_owner) {\n        gnarsV2 = ISkateContractV2(_gnarsV2Address);\n        rendererBaseUri = _rendererBaseUri;\n        artwork = _artwork;\n        contractURI = _contractURI;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         MAIN LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function setArtwork(Artwork memory _artwork) public onlyOwner {\n        artwork = _artwork;\n    }\n\n    function setContractUri(string memory _contractURI) public onlyOwner {\n        contractURI = _contractURI;\n    }\n\n    function setRendererBaseUri(string memory _rendererBaseUri) public onlyOwner {\n        rendererBaseUri = _rendererBaseUri;\n    }\n\n    /// @notice The properties and query string for a generated token\n    /// @param _tokenId The ERC-721 token id\n    function getAttributes(uint256 _tokenId)\n        public\n        view\n        returns (string memory resultAttributes, string memory queryString)\n    {\n        (uint48 background, uint48 body, uint48 accessory, uint48 head, uint48 glasses) = gnarsV2.seeds(_tokenId);\n        IGnarDescriptorV2 descriptor = IGnarDescriptorV2(gnarsV2.descriptor());\n        IGnarDecorator decorator = IGnarDecorator(descriptor.decorator());\n\n        queryString = string.concat(\n            "?contractAddress=",\n            Strings.toHexString(address(this)),\n            "&tokenId=",\n            Strings.toString(_tokenId),\n            getBackgroundQueryParam(background),\n            getPartQueryParam("BODY", body, artwork.amountBodies),\n            getPartQueryParam("ACCESSORY", accessory, artwork.amountAccessories),\n            getPartQueryParam("HEADS", head, artwork.amountHeads),\n            getPartQueryParam("NOGGLES", glasses, artwork.amountNoggles)\n        );\n\n        resultAttributes = string.concat(\n            getPartTrait("Background", background, decorator.backgrounds),\n            ",",\n            getPartTrait("Body", body, decorator.bodies),\n            ",",\n            getPartTrait("Accessory", accessory, decorator.accessories),\n            ",",\n            getPartTrait("Head", head, decorator.heads),\n            ",",\n            getPartTrait("Glasses", glasses, decorator.glasses)\n        );\n    }\n\n    function getPartQueryParam(string memory folder, uint48 partIndex, uint48 amountOfPart)\n        public\n        view\n        returns (string memory)\n    {\n        if (partIndex >= amountOfPart) {\n            return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/", Strings.toString(partIndex), ".PNG");\n    }\n\n    function getBackgroundQueryParam(uint48 backgroundIndex) public view returns (string memory) {\n        if (backgroundIndex >= artwork.amountBackgrounds) {\n            return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/", Strings.toString(backgroundIndex), ".PNG");\n    }\n\n    function getPartTrait(\n        string memory traitType,\n        uint48 partIndex,\n        function (uint256) external view returns (string memory) getPartDescription\n    ) public view returns (string memory) {\n        try getPartDescription(partIndex) returns (string memory partDescription) {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"\', partDescription, \'"}\');\n        } catch {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"Unknown"}\');\n        }\n    }\n\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\n        if (gnarsV2.ownerOf(_tokenId) == address(0)) {\n            revert TokenDoesNotExist(_tokenId);\n        }\n\n        (string memory attributes, string memory queryString) = getAttributes(_tokenId);\n        return string(\n            abi.encodePacked(\n                "data:application/json;base64,",\n                Base64.encode(\n                    bytes(\n                        abi.encodePacked(\n                            \'{"name":"Gnar HD #\',\n                            Strings.toString(_tokenId),\n                            \'", "description":"High definition Gnar #\',\n                            Strings.toString(_tokenId),\n                            " counterpart",\n                            \'", "attributes": [\',\n                            attributes,\n                            \'], "image": "\',\n                            string.concat(rendererBaseUri, queryString),\n                            \'"}\'\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              PASSTHROUGH METHODS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Returns the total amount of Gnars HD in existence\n    /// @dev Delegates to the Gnars V2 contract\n    function totalSupply() external view returns (uint256) {\n        return gnarsV2.totalSupply();\n    }\n\n    /// @notice Returns the tokenId of the Gnar HD by index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenByIndex(_index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenOfOwnerByIndex(_owner, _index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token id\n    /// @dev Delegates to the Gnars V2 contract\n    function ownerOf(uint256 id) public view returns (address owner) {\n        return gnarsV2.ownerOf(id);\n    }\n\n    /// @notice Returns the amount of Gnars HD owned by the specified address\n    /// @dev Delegates to the Gnars V2 contract\n    function balanceOf(address owner) public view returns (uint256) {\n        return gnarsV2.balanceOf(owner);\n    }\n\n    /// @notice Refresh ownership of specified tokens on marketplaces/datasets that are showing out of date information\n    /// @dev Since this token is not mintable, there\'s no Transfer event. This method emits the Transfer event so that consumers that can detect the creation/new ownership of the token.\n    /// @param tokenIds The ids of tokens to refresh\n    function assertOwnership(uint256[] memory tokenIds) public {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            emit Transfer(address(0), gnarsV2.ownerOf(tokenId), tokenId);\n        }\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC721 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function approve(address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function setApprovalForAll(address, bool) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function transferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256, bytes calldata) public pure {\n        revert Untransferable();\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC6454 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always return false\n    function isTransferable(uint256, address, address) external pure returns (bool) {\n        return false;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC165 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165\n            || interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721\n            || interfaceId == 0x5b5e139f // ERC165 Interface ID for ERC721Metadata\n            || interfaceId == 0x780e9d63 // ERC165 Interface ID for ERC721Enumerable\n            || interfaceId == 0x7f5828d0 // ERC165 Interface ID for ERC173\n            || interfaceId == 0x91a6262f; // ERC165 Interface ID for ERC6454\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'GnarsHD.approve', 'start_line': 277, 'end_line': 279, 'offset_start': 13403, 'offset_end': 13489, 'content': 'function approve(address, uint256) public pure {\n        revert Untransferable();\n    }', 'contract_name': 'GnarsHD', 'contract_code': '{\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STRUCTS / EVENTS / ERRORS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n    struct Artwork {\n        string ipfsFolder;\n        uint48 amountBackgrounds;\n        uint48 amountBodies;\n        uint48 amountAccessories;\n        uint48 amountHeads;\n        uint48 amountNoggles;\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    error Untransferable();\n    error TokenDoesNotExist(uint256 tokenId);\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STORAGE\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    string public name = "Gnars HD";\n\n    string public symbol = "GNARSHD";\n\n    string public rendererBaseUri;\n\n    string public contractURI;\n\n    Artwork public artwork;\n\n    ISkateContractV2 public gnarsV2;\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                        CONSTRUCTOR\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    constructor(\n        address _gnarsV2Address,\n        string memory _rendererBaseUri,\n        Artwork memory _artwork,\n        string memory _contractURI,\n        address _owner\n    ) Owned(_owner) {\n        gnarsV2 = ISkateContractV2(_gnarsV2Address);\n        rendererBaseUri = _rendererBaseUri;\n        artwork = _artwork;\n        contractURI = _contractURI;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         MAIN LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function setArtwork(Artwork memory _artwork) public onlyOwner {\n        artwork = _artwork;\n    }\n\n    function setContractUri(string memory _contractURI) public onlyOwner {\n        contractURI = _contractURI;\n    }\n\n    function setRendererBaseUri(string memory _rendererBaseUri) public onlyOwner {\n        rendererBaseUri = _rendererBaseUri;\n    }\n\n    /// @notice The properties and query string for a generated token\n    /// @param _tokenId The ERC-721 token id\n    function getAttributes(uint256 _tokenId)\n        public\n        view\n        returns (string memory resultAttributes, string memory queryString)\n    {\n        (uint48 background, uint48 body, uint48 accessory, uint48 head, uint48 glasses) = gnarsV2.seeds(_tokenId);\n        IGnarDescriptorV2 descriptor = IGnarDescriptorV2(gnarsV2.descriptor());\n        IGnarDecorator decorator = IGnarDecorator(descriptor.decorator());\n\n        queryString = string.concat(\n            "?contractAddress=",\n            Strings.toHexString(address(this)),\n            "&tokenId=",\n            Strings.toString(_tokenId),\n            getBackgroundQueryParam(background),\n            getPartQueryParam("BODY", body, artwork.amountBodies),\n            getPartQueryParam("ACCESSORY", accessory, artwork.amountAccessories),\n            getPartQueryParam("HEADS", head, artwork.amountHeads),\n            getPartQueryParam("NOGGLES", glasses, artwork.amountNoggles)\n        );\n\n        resultAttributes = string.concat(\n            getPartTrait("Background", background, decorator.backgrounds),\n            ",",\n            getPartTrait("Body", body, decorator.bodies),\n            ",",\n            getPartTrait("Accessory", accessory, decorator.accessories),\n            ",",\n            getPartTrait("Head", head, decorator.heads),\n            ",",\n            getPartTrait("Glasses", glasses, decorator.glasses)\n        );\n    }\n\n    function getPartQueryParam(string memory folder, uint48 partIndex, uint48 amountOfPart)\n        public\n        view\n        returns (string memory)\n    {\n        if (partIndex >= amountOfPart) {\n            return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/", Strings.toString(partIndex), ".PNG");\n    }\n\n    function getBackgroundQueryParam(uint48 backgroundIndex) public view returns (string memory) {\n        if (backgroundIndex >= artwork.amountBackgrounds) {\n            return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/", Strings.toString(backgroundIndex), ".PNG");\n    }\n\n    function getPartTrait(\n        string memory traitType,\n        uint48 partIndex,\n        function (uint256) external view returns (string memory) getPartDescription\n    ) public view returns (string memory) {\n        try getPartDescription(partIndex) returns (string memory partDescription) {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"\', partDescription, \'"}\');\n        } catch {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"Unknown"}\');\n        }\n    }\n\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\n        if (gnarsV2.ownerOf(_tokenId) == address(0)) {\n            revert TokenDoesNotExist(_tokenId);\n        }\n\n        (string memory attributes, string memory queryString) = getAttributes(_tokenId);\n        return string(\n            abi.encodePacked(\n                "data:application/json;base64,",\n                Base64.encode(\n                    bytes(\n                        abi.encodePacked(\n                            \'{"name":"Gnar HD #\',\n                            Strings.toString(_tokenId),\n                            \'", "description":"High definition Gnar #\',\n                            Strings.toString(_tokenId),\n                            " counterpart",\n                            \'", "attributes": [\',\n                            attributes,\n                            \'], "image": "\',\n                            string.concat(rendererBaseUri, queryString),\n                            \'"}\'\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              PASSTHROUGH METHODS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Returns the total amount of Gnars HD in existence\n    /// @dev Delegates to the Gnars V2 contract\n    function totalSupply() external view returns (uint256) {\n        return gnarsV2.totalSupply();\n    }\n\n    /// @notice Returns the tokenId of the Gnar HD by index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenByIndex(_index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenOfOwnerByIndex(_owner, _index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token id\n    /// @dev Delegates to the Gnars V2 contract\n    function ownerOf(uint256 id) public view returns (address owner) {\n        return gnarsV2.ownerOf(id);\n    }\n\n    /// @notice Returns the amount of Gnars HD owned by the specified address\n    /// @dev Delegates to the Gnars V2 contract\n    function balanceOf(address owner) public view returns (uint256) {\n        return gnarsV2.balanceOf(owner);\n    }\n\n    /// @notice Refresh ownership of specified tokens on marketplaces/datasets that are showing out of date information\n    /// @dev Since this token is not mintable, there\'s no Transfer event. This method emits the Transfer event so that consumers that can detect the creation/new ownership of the token.\n    /// @param tokenIds The ids of tokens to refresh\n    function assertOwnership(uint256[] memory tokenIds) public {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            emit Transfer(address(0), gnarsV2.ownerOf(tokenId), tokenId);\n        }\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC721 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function approve(address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function setApprovalForAll(address, bool) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function transferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256, bytes calldata) public pure {\n        revert Untransferable();\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC6454 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always return false\n    function isTransferable(uint256, address, address) external pure returns (bool) {\n        return false;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC165 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165\n            || interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721\n            || interfaceId == 0x5b5e139f // ERC165 Interface ID for ERC721Metadata\n            || interfaceId == 0x780e9d63 // ERC165 Interface ID for ERC721Enumerable\n            || interfaceId == 0x7f5828d0 // ERC165 Interface ID for ERC173\n            || interfaceId == 0x91a6262f; // ERC165 Interface ID for ERC6454\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'GnarsHD.setApprovalForAll', 'start_line': 283, 'end_line': 285, 'offset_start': 13574, 'offset_end': 13667, 'content': 'function setApprovalForAll(address, bool) public pure {\n        revert Untransferable();\n    }', 'contract_name': 'GnarsHD', 'contract_code': '{\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STRUCTS / EVENTS / ERRORS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n    struct Artwork {\n        string ipfsFolder;\n        uint48 amountBackgrounds;\n        uint48 amountBodies;\n        uint48 amountAccessories;\n        uint48 amountHeads;\n        uint48 amountNoggles;\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    error Untransferable();\n    error TokenDoesNotExist(uint256 tokenId);\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STORAGE\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    string public name = "Gnars HD";\n\n    string public symbol = "GNARSHD";\n\n    string public rendererBaseUri;\n\n    string public contractURI;\n\n    Artwork public artwork;\n\n    ISkateContractV2 public gnarsV2;\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                        CONSTRUCTOR\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    constructor(\n        address _gnarsV2Address,\n        string memory _rendererBaseUri,\n        Artwork memory _artwork,\n        string memory _contractURI,\n        address _owner\n    ) Owned(_owner) {\n        gnarsV2 = ISkateContractV2(_gnarsV2Address);\n        rendererBaseUri = _rendererBaseUri;\n        artwork = _artwork;\n        contractURI = _contractURI;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         MAIN LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function setArtwork(Artwork memory _artwork) public onlyOwner {\n        artwork = _artwork;\n    }\n\n    function setContractUri(string memory _contractURI) public onlyOwner {\n        contractURI = _contractURI;\n    }\n\n    function setRendererBaseUri(string memory _rendererBaseUri) public onlyOwner {\n        rendererBaseUri = _rendererBaseUri;\n    }\n\n    /// @notice The properties and query string for a generated token\n    /// @param _tokenId The ERC-721 token id\n    function getAttributes(uint256 _tokenId)\n        public\n        view\n        returns (string memory resultAttributes, string memory queryString)\n    {\n        (uint48 background, uint48 body, uint48 accessory, uint48 head, uint48 glasses) = gnarsV2.seeds(_tokenId);\n        IGnarDescriptorV2 descriptor = IGnarDescriptorV2(gnarsV2.descriptor());\n        IGnarDecorator decorator = IGnarDecorator(descriptor.decorator());\n\n        queryString = string.concat(\n            "?contractAddress=",\n            Strings.toHexString(address(this)),\n            "&tokenId=",\n            Strings.toString(_tokenId),\n            getBackgroundQueryParam(background),\n            getPartQueryParam("BODY", body, artwork.amountBodies),\n            getPartQueryParam("ACCESSORY", accessory, artwork.amountAccessories),\n            getPartQueryParam("HEADS", head, artwork.amountHeads),\n            getPartQueryParam("NOGGLES", glasses, artwork.amountNoggles)\n        );\n\n        resultAttributes = string.concat(\n            getPartTrait("Background", background, decorator.backgrounds),\n            ",",\n            getPartTrait("Body", body, decorator.bodies),\n            ",",\n            getPartTrait("Accessory", accessory, decorator.accessories),\n            ",",\n            getPartTrait("Head", head, decorator.heads),\n            ",",\n            getPartTrait("Glasses", glasses, decorator.glasses)\n        );\n    }\n\n    function getPartQueryParam(string memory folder, uint48 partIndex, uint48 amountOfPart)\n        public\n        view\n        returns (string memory)\n    {\n        if (partIndex >= amountOfPart) {\n            return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/", Strings.toString(partIndex), ".PNG");\n    }\n\n    function getBackgroundQueryParam(uint48 backgroundIndex) public view returns (string memory) {\n        if (backgroundIndex >= artwork.amountBackgrounds) {\n            return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/", Strings.toString(backgroundIndex), ".PNG");\n    }\n\n    function getPartTrait(\n        string memory traitType,\n        uint48 partIndex,\n        function (uint256) external view returns (string memory) getPartDescription\n    ) public view returns (string memory) {\n        try getPartDescription(partIndex) returns (string memory partDescription) {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"\', partDescription, \'"}\');\n        } catch {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"Unknown"}\');\n        }\n    }\n\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\n        if (gnarsV2.ownerOf(_tokenId) == address(0)) {\n            revert TokenDoesNotExist(_tokenId);\n        }\n\n        (string memory attributes, string memory queryString) = getAttributes(_tokenId);\n        return string(\n            abi.encodePacked(\n                "data:application/json;base64,",\n                Base64.encode(\n                    bytes(\n                        abi.encodePacked(\n                            \'{"name":"Gnar HD #\',\n                            Strings.toString(_tokenId),\n                            \'", "description":"High definition Gnar #\',\n                            Strings.toString(_tokenId),\n                            " counterpart",\n                            \'", "attributes": [\',\n                            attributes,\n                            \'], "image": "\',\n                            string.concat(rendererBaseUri, queryString),\n                            \'"}\'\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              PASSTHROUGH METHODS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Returns the total amount of Gnars HD in existence\n    /// @dev Delegates to the Gnars V2 contract\n    function totalSupply() external view returns (uint256) {\n        return gnarsV2.totalSupply();\n    }\n\n    /// @notice Returns the tokenId of the Gnar HD by index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenByIndex(_index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenOfOwnerByIndex(_owner, _index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token id\n    /// @dev Delegates to the Gnars V2 contract\n    function ownerOf(uint256 id) public view returns (address owner) {\n        return gnarsV2.ownerOf(id);\n    }\n\n    /// @notice Returns the amount of Gnars HD owned by the specified address\n    /// @dev Delegates to the Gnars V2 contract\n    function balanceOf(address owner) public view returns (uint256) {\n        return gnarsV2.balanceOf(owner);\n    }\n\n    /// @notice Refresh ownership of specified tokens on marketplaces/datasets that are showing out of date information\n    /// @dev Since this token is not mintable, there\'s no Transfer event. This method emits the Transfer event so that consumers that can detect the creation/new ownership of the token.\n    /// @param tokenIds The ids of tokens to refresh\n    function assertOwnership(uint256[] memory tokenIds) public {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            emit Transfer(address(0), gnarsV2.ownerOf(tokenId), tokenId);\n        }\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC721 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function approve(address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function setApprovalForAll(address, bool) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function transferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256, bytes calldata) public pure {\n        revert Untransferable();\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC6454 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always return false\n    function isTransferable(uint256, address, address) external pure returns (bool) {\n        return false;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC165 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165\n            || interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721\n            || interfaceId == 0x5b5e139f // ERC165 Interface ID for ERC721Metadata\n            || interfaceId == 0x780e9d63 // ERC165 Interface ID for ERC721Enumerable\n            || interfaceId == 0x7f5828d0 // ERC165 Interface ID for ERC173\n            || interfaceId == 0x91a6262f; // ERC165 Interface ID for ERC6454\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'GnarsHD.transferFrom', 'start_line': 289, 'end_line': 291, 'offset_start': 13752, 'offset_end': 13852, 'content': 'function transferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }', 'contract_name': 'GnarsHD', 'contract_code': '{\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STRUCTS / EVENTS / ERRORS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n    struct Artwork {\n        string ipfsFolder;\n        uint48 amountBackgrounds;\n        uint48 amountBodies;\n        uint48 amountAccessories;\n        uint48 amountHeads;\n        uint48 amountNoggles;\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    error Untransferable();\n    error TokenDoesNotExist(uint256 tokenId);\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STORAGE\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    string public name = "Gnars HD";\n\n    string public symbol = "GNARSHD";\n\n    string public rendererBaseUri;\n\n    string public contractURI;\n\n    Artwork public artwork;\n\n    ISkateContractV2 public gnarsV2;\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                        CONSTRUCTOR\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    constructor(\n        address _gnarsV2Address,\n        string memory _rendererBaseUri,\n        Artwork memory _artwork,\n        string memory _contractURI,\n        address _owner\n    ) Owned(_owner) {\n        gnarsV2 = ISkateContractV2(_gnarsV2Address);\n        rendererBaseUri = _rendererBaseUri;\n        artwork = _artwork;\n        contractURI = _contractURI;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         MAIN LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function setArtwork(Artwork memory _artwork) public onlyOwner {\n        artwork = _artwork;\n    }\n\n    function setContractUri(string memory _contractURI) public onlyOwner {\n        contractURI = _contractURI;\n    }\n\n    function setRendererBaseUri(string memory _rendererBaseUri) public onlyOwner {\n        rendererBaseUri = _rendererBaseUri;\n    }\n\n    /// @notice The properties and query string for a generated token\n    /// @param _tokenId The ERC-721 token id\n    function getAttributes(uint256 _tokenId)\n        public\n        view\n        returns (string memory resultAttributes, string memory queryString)\n    {\n        (uint48 background, uint48 body, uint48 accessory, uint48 head, uint48 glasses) = gnarsV2.seeds(_tokenId);\n        IGnarDescriptorV2 descriptor = IGnarDescriptorV2(gnarsV2.descriptor());\n        IGnarDecorator decorator = IGnarDecorator(descriptor.decorator());\n\n        queryString = string.concat(\n            "?contractAddress=",\n            Strings.toHexString(address(this)),\n            "&tokenId=",\n            Strings.toString(_tokenId),\n            getBackgroundQueryParam(background),\n            getPartQueryParam("BODY", body, artwork.amountBodies),\n            getPartQueryParam("ACCESSORY", accessory, artwork.amountAccessories),\n            getPartQueryParam("HEADS", head, artwork.amountHeads),\n            getPartQueryParam("NOGGLES", glasses, artwork.amountNoggles)\n        );\n\n        resultAttributes = string.concat(\n            getPartTrait("Background", background, decorator.backgrounds),\n            ",",\n            getPartTrait("Body", body, decorator.bodies),\n            ",",\n            getPartTrait("Accessory", accessory, decorator.accessories),\n            ",",\n            getPartTrait("Head", head, decorator.heads),\n            ",",\n            getPartTrait("Glasses", glasses, decorator.glasses)\n        );\n    }\n\n    function getPartQueryParam(string memory folder, uint48 partIndex, uint48 amountOfPart)\n        public\n        view\n        returns (string memory)\n    {\n        if (partIndex >= amountOfPart) {\n            return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/", Strings.toString(partIndex), ".PNG");\n    }\n\n    function getBackgroundQueryParam(uint48 backgroundIndex) public view returns (string memory) {\n        if (backgroundIndex >= artwork.amountBackgrounds) {\n            return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/", Strings.toString(backgroundIndex), ".PNG");\n    }\n\n    function getPartTrait(\n        string memory traitType,\n        uint48 partIndex,\n        function (uint256) external view returns (string memory) getPartDescription\n    ) public view returns (string memory) {\n        try getPartDescription(partIndex) returns (string memory partDescription) {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"\', partDescription, \'"}\');\n        } catch {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"Unknown"}\');\n        }\n    }\n\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\n        if (gnarsV2.ownerOf(_tokenId) == address(0)) {\n            revert TokenDoesNotExist(_tokenId);\n        }\n\n        (string memory attributes, string memory queryString) = getAttributes(_tokenId);\n        return string(\n            abi.encodePacked(\n                "data:application/json;base64,",\n                Base64.encode(\n                    bytes(\n                        abi.encodePacked(\n                            \'{"name":"Gnar HD #\',\n                            Strings.toString(_tokenId),\n                            \'", "description":"High definition Gnar #\',\n                            Strings.toString(_tokenId),\n                            " counterpart",\n                            \'", "attributes": [\',\n                            attributes,\n                            \'], "image": "\',\n                            string.concat(rendererBaseUri, queryString),\n                            \'"}\'\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              PASSTHROUGH METHODS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Returns the total amount of Gnars HD in existence\n    /// @dev Delegates to the Gnars V2 contract\n    function totalSupply() external view returns (uint256) {\n        return gnarsV2.totalSupply();\n    }\n\n    /// @notice Returns the tokenId of the Gnar HD by index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenByIndex(_index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenOfOwnerByIndex(_owner, _index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token id\n    /// @dev Delegates to the Gnars V2 contract\n    function ownerOf(uint256 id) public view returns (address owner) {\n        return gnarsV2.ownerOf(id);\n    }\n\n    /// @notice Returns the amount of Gnars HD owned by the specified address\n    /// @dev Delegates to the Gnars V2 contract\n    function balanceOf(address owner) public view returns (uint256) {\n        return gnarsV2.balanceOf(owner);\n    }\n\n    /// @notice Refresh ownership of specified tokens on marketplaces/datasets that are showing out of date information\n    /// @dev Since this token is not mintable, there\'s no Transfer event. This method emits the Transfer event so that consumers that can detect the creation/new ownership of the token.\n    /// @param tokenIds The ids of tokens to refresh\n    function assertOwnership(uint256[] memory tokenIds) public {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            emit Transfer(address(0), gnarsV2.ownerOf(tokenId), tokenId);\n        }\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC721 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function approve(address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function setApprovalForAll(address, bool) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function transferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256, bytes calldata) public pure {\n        revert Untransferable();\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC6454 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always return false\n    function isTransferable(uint256, address, address) external pure returns (bool) {\n        return false;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC165 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165\n            || interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721\n            || interfaceId == 0x5b5e139f // ERC165 Interface ID for ERC721Metadata\n            || interfaceId == 0x780e9d63 // ERC165 Interface ID for ERC721Enumerable\n            || interfaceId == 0x7f5828d0 // ERC165 Interface ID for ERC173\n            || interfaceId == 0x91a6262f; // ERC165 Interface ID for ERC6454\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'GnarsHD.safeTransferFrom', 'start_line': 295, 'end_line': 297, 'offset_start': 13937, 'offset_end': 14041, 'content': 'function safeTransferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }', 'contract_name': 'GnarsHD', 'contract_code': '{\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STRUCTS / EVENTS / ERRORS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n    struct Artwork {\n        string ipfsFolder;\n        uint48 amountBackgrounds;\n        uint48 amountBodies;\n        uint48 amountAccessories;\n        uint48 amountHeads;\n        uint48 amountNoggles;\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    error Untransferable();\n    error TokenDoesNotExist(uint256 tokenId);\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STORAGE\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    string public name = "Gnars HD";\n\n    string public symbol = "GNARSHD";\n\n    string public rendererBaseUri;\n\n    string public contractURI;\n\n    Artwork public artwork;\n\n    ISkateContractV2 public gnarsV2;\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                        CONSTRUCTOR\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    constructor(\n        address _gnarsV2Address,\n        string memory _rendererBaseUri,\n        Artwork memory _artwork,\n        string memory _contractURI,\n        address _owner\n    ) Owned(_owner) {\n        gnarsV2 = ISkateContractV2(_gnarsV2Address);\n        rendererBaseUri = _rendererBaseUri;\n        artwork = _artwork;\n        contractURI = _contractURI;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         MAIN LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function setArtwork(Artwork memory _artwork) public onlyOwner {\n        artwork = _artwork;\n    }\n\n    function setContractUri(string memory _contractURI) public onlyOwner {\n        contractURI = _contractURI;\n    }\n\n    function setRendererBaseUri(string memory _rendererBaseUri) public onlyOwner {\n        rendererBaseUri = _rendererBaseUri;\n    }\n\n    /// @notice The properties and query string for a generated token\n    /// @param _tokenId The ERC-721 token id\n    function getAttributes(uint256 _tokenId)\n        public\n        view\n        returns (string memory resultAttributes, string memory queryString)\n    {\n        (uint48 background, uint48 body, uint48 accessory, uint48 head, uint48 glasses) = gnarsV2.seeds(_tokenId);\n        IGnarDescriptorV2 descriptor = IGnarDescriptorV2(gnarsV2.descriptor());\n        IGnarDecorator decorator = IGnarDecorator(descriptor.decorator());\n\n        queryString = string.concat(\n            "?contractAddress=",\n            Strings.toHexString(address(this)),\n            "&tokenId=",\n            Strings.toString(_tokenId),\n            getBackgroundQueryParam(background),\n            getPartQueryParam("BODY", body, artwork.amountBodies),\n            getPartQueryParam("ACCESSORY", accessory, artwork.amountAccessories),\n            getPartQueryParam("HEADS", head, artwork.amountHeads),\n            getPartQueryParam("NOGGLES", glasses, artwork.amountNoggles)\n        );\n\n        resultAttributes = string.concat(\n            getPartTrait("Background", background, decorator.backgrounds),\n            ",",\n            getPartTrait("Body", body, decorator.bodies),\n            ",",\n            getPartTrait("Accessory", accessory, decorator.accessories),\n            ",",\n            getPartTrait("Head", head, decorator.heads),\n            ",",\n            getPartTrait("Glasses", glasses, decorator.glasses)\n        );\n    }\n\n    function getPartQueryParam(string memory folder, uint48 partIndex, uint48 amountOfPart)\n        public\n        view\n        returns (string memory)\n    {\n        if (partIndex >= amountOfPart) {\n            return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/", Strings.toString(partIndex), ".PNG");\n    }\n\n    function getBackgroundQueryParam(uint48 backgroundIndex) public view returns (string memory) {\n        if (backgroundIndex >= artwork.amountBackgrounds) {\n            return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/", Strings.toString(backgroundIndex), ".PNG");\n    }\n\n    function getPartTrait(\n        string memory traitType,\n        uint48 partIndex,\n        function (uint256) external view returns (string memory) getPartDescription\n    ) public view returns (string memory) {\n        try getPartDescription(partIndex) returns (string memory partDescription) {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"\', partDescription, \'"}\');\n        } catch {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"Unknown"}\');\n        }\n    }\n\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\n        if (gnarsV2.ownerOf(_tokenId) == address(0)) {\n            revert TokenDoesNotExist(_tokenId);\n        }\n\n        (string memory attributes, string memory queryString) = getAttributes(_tokenId);\n        return string(\n            abi.encodePacked(\n                "data:application/json;base64,",\n                Base64.encode(\n                    bytes(\n                        abi.encodePacked(\n                            \'{"name":"Gnar HD #\',\n                            Strings.toString(_tokenId),\n                            \'", "description":"High definition Gnar #\',\n                            Strings.toString(_tokenId),\n                            " counterpart",\n                            \'", "attributes": [\',\n                            attributes,\n                            \'], "image": "\',\n                            string.concat(rendererBaseUri, queryString),\n                            \'"}\'\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              PASSTHROUGH METHODS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Returns the total amount of Gnars HD in existence\n    /// @dev Delegates to the Gnars V2 contract\n    function totalSupply() external view returns (uint256) {\n        return gnarsV2.totalSupply();\n    }\n\n    /// @notice Returns the tokenId of the Gnar HD by index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenByIndex(_index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenOfOwnerByIndex(_owner, _index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token id\n    /// @dev Delegates to the Gnars V2 contract\n    function ownerOf(uint256 id) public view returns (address owner) {\n        return gnarsV2.ownerOf(id);\n    }\n\n    /// @notice Returns the amount of Gnars HD owned by the specified address\n    /// @dev Delegates to the Gnars V2 contract\n    function balanceOf(address owner) public view returns (uint256) {\n        return gnarsV2.balanceOf(owner);\n    }\n\n    /// @notice Refresh ownership of specified tokens on marketplaces/datasets that are showing out of date information\n    /// @dev Since this token is not mintable, there\'s no Transfer event. This method emits the Transfer event so that consumers that can detect the creation/new ownership of the token.\n    /// @param tokenIds The ids of tokens to refresh\n    function assertOwnership(uint256[] memory tokenIds) public {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            emit Transfer(address(0), gnarsV2.ownerOf(tokenId), tokenId);\n        }\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC721 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function approve(address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function setApprovalForAll(address, bool) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function transferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256, bytes calldata) public pure {\n        revert Untransferable();\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC6454 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always return false\n    function isTransferable(uint256, address, address) external pure returns (bool) {\n        return false;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC165 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165\n            || interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721\n            || interfaceId == 0x5b5e139f // ERC165 Interface ID for ERC721Metadata\n            || interfaceId == 0x780e9d63 // ERC165 Interface ID for ERC721Enumerable\n            || interfaceId == 0x7f5828d0 // ERC165 Interface ID for ERC173\n            || interfaceId == 0x91a6262f; // ERC165 Interface ID for ERC6454\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'GnarsHD.safeTransferFrom', 'start_line': 301, 'end_line': 303, 'offset_start': 14126, 'offset_end': 14246, 'content': 'function safeTransferFrom(address, address, uint256, bytes calldata) public pure {\n        revert Untransferable();\n    }', 'contract_name': 'GnarsHD', 'contract_code': '{\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STRUCTS / EVENTS / ERRORS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n    struct Artwork {\n        string ipfsFolder;\n        uint48 amountBackgrounds;\n        uint48 amountBodies;\n        uint48 amountAccessories;\n        uint48 amountHeads;\n        uint48 amountNoggles;\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    error Untransferable();\n    error TokenDoesNotExist(uint256 tokenId);\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STORAGE\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    string public name = "Gnars HD";\n\n    string public symbol = "GNARSHD";\n\n    string public rendererBaseUri;\n\n    string public contractURI;\n\n    Artwork public artwork;\n\n    ISkateContractV2 public gnarsV2;\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                        CONSTRUCTOR\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    constructor(\n        address _gnarsV2Address,\n        string memory _rendererBaseUri,\n        Artwork memory _artwork,\n        string memory _contractURI,\n        address _owner\n    ) Owned(_owner) {\n        gnarsV2 = ISkateContractV2(_gnarsV2Address);\n        rendererBaseUri = _rendererBaseUri;\n        artwork = _artwork;\n        contractURI = _contractURI;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         MAIN LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function setArtwork(Artwork memory _artwork) public onlyOwner {\n        artwork = _artwork;\n    }\n\n    function setContractUri(string memory _contractURI) public onlyOwner {\n        contractURI = _contractURI;\n    }\n\n    function setRendererBaseUri(string memory _rendererBaseUri) public onlyOwner {\n        rendererBaseUri = _rendererBaseUri;\n    }\n\n    /// @notice The properties and query string for a generated token\n    /// @param _tokenId The ERC-721 token id\n    function getAttributes(uint256 _tokenId)\n        public\n        view\n        returns (string memory resultAttributes, string memory queryString)\n    {\n        (uint48 background, uint48 body, uint48 accessory, uint48 head, uint48 glasses) = gnarsV2.seeds(_tokenId);\n        IGnarDescriptorV2 descriptor = IGnarDescriptorV2(gnarsV2.descriptor());\n        IGnarDecorator decorator = IGnarDecorator(descriptor.decorator());\n\n        queryString = string.concat(\n            "?contractAddress=",\n            Strings.toHexString(address(this)),\n            "&tokenId=",\n            Strings.toString(_tokenId),\n            getBackgroundQueryParam(background),\n            getPartQueryParam("BODY", body, artwork.amountBodies),\n            getPartQueryParam("ACCESSORY", accessory, artwork.amountAccessories),\n            getPartQueryParam("HEADS", head, artwork.amountHeads),\n            getPartQueryParam("NOGGLES", glasses, artwork.amountNoggles)\n        );\n\n        resultAttributes = string.concat(\n            getPartTrait("Background", background, decorator.backgrounds),\n            ",",\n            getPartTrait("Body", body, decorator.bodies),\n            ",",\n            getPartTrait("Accessory", accessory, decorator.accessories),\n            ",",\n            getPartTrait("Head", head, decorator.heads),\n            ",",\n            getPartTrait("Glasses", glasses, decorator.glasses)\n        );\n    }\n\n    function getPartQueryParam(string memory folder, uint48 partIndex, uint48 amountOfPart)\n        public\n        view\n        returns (string memory)\n    {\n        if (partIndex >= amountOfPart) {\n            return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/", Strings.toString(partIndex), ".PNG");\n    }\n\n    function getBackgroundQueryParam(uint48 backgroundIndex) public view returns (string memory) {\n        if (backgroundIndex >= artwork.amountBackgrounds) {\n            return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/", Strings.toString(backgroundIndex), ".PNG");\n    }\n\n    function getPartTrait(\n        string memory traitType,\n        uint48 partIndex,\n        function (uint256) external view returns (string memory) getPartDescription\n    ) public view returns (string memory) {\n        try getPartDescription(partIndex) returns (string memory partDescription) {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"\', partDescription, \'"}\');\n        } catch {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"Unknown"}\');\n        }\n    }\n\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\n        if (gnarsV2.ownerOf(_tokenId) == address(0)) {\n            revert TokenDoesNotExist(_tokenId);\n        }\n\n        (string memory attributes, string memory queryString) = getAttributes(_tokenId);\n        return string(\n            abi.encodePacked(\n                "data:application/json;base64,",\n                Base64.encode(\n                    bytes(\n                        abi.encodePacked(\n                            \'{"name":"Gnar HD #\',\n                            Strings.toString(_tokenId),\n                            \'", "description":"High definition Gnar #\',\n                            Strings.toString(_tokenId),\n                            " counterpart",\n                            \'", "attributes": [\',\n                            attributes,\n                            \'], "image": "\',\n                            string.concat(rendererBaseUri, queryString),\n                            \'"}\'\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              PASSTHROUGH METHODS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Returns the total amount of Gnars HD in existence\n    /// @dev Delegates to the Gnars V2 contract\n    function totalSupply() external view returns (uint256) {\n        return gnarsV2.totalSupply();\n    }\n\n    /// @notice Returns the tokenId of the Gnar HD by index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenByIndex(_index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenOfOwnerByIndex(_owner, _index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token id\n    /// @dev Delegates to the Gnars V2 contract\n    function ownerOf(uint256 id) public view returns (address owner) {\n        return gnarsV2.ownerOf(id);\n    }\n\n    /// @notice Returns the amount of Gnars HD owned by the specified address\n    /// @dev Delegates to the Gnars V2 contract\n    function balanceOf(address owner) public view returns (uint256) {\n        return gnarsV2.balanceOf(owner);\n    }\n\n    /// @notice Refresh ownership of specified tokens on marketplaces/datasets that are showing out of date information\n    /// @dev Since this token is not mintable, there\'s no Transfer event. This method emits the Transfer event so that consumers that can detect the creation/new ownership of the token.\n    /// @param tokenIds The ids of tokens to refresh\n    function assertOwnership(uint256[] memory tokenIds) public {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            emit Transfer(address(0), gnarsV2.ownerOf(tokenId), tokenId);\n        }\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC721 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function approve(address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function setApprovalForAll(address, bool) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function transferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256, bytes calldata) public pure {\n        revert Untransferable();\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC6454 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always return false\n    function isTransferable(uint256, address, address) external pure returns (bool) {\n        return false;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC165 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165\n            || interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721\n            || interfaceId == 0x5b5e139f // ERC165 Interface ID for ERC721Metadata\n            || interfaceId == 0x780e9d63 // ERC165 Interface ID for ERC721Enumerable\n            || interfaceId == 0x7f5828d0 // ERC165 Interface ID for ERC173\n            || interfaceId == 0x91a6262f; // ERC165 Interface ID for ERC6454\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'GnarsHD.isTransferable', 'start_line': 311, 'end_line': 313, 'offset_start': 14529, 'offset_end': 14637, 'content': 'function isTransferable(uint256, address, address) external pure returns (bool) {\n        return false;\n    }', 'contract_name': 'GnarsHD', 'contract_code': '{\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STRUCTS / EVENTS / ERRORS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n    struct Artwork {\n        string ipfsFolder;\n        uint48 amountBackgrounds;\n        uint48 amountBodies;\n        uint48 amountAccessories;\n        uint48 amountHeads;\n        uint48 amountNoggles;\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    error Untransferable();\n    error TokenDoesNotExist(uint256 tokenId);\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STORAGE\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    string public name = "Gnars HD";\n\n    string public symbol = "GNARSHD";\n\n    string public rendererBaseUri;\n\n    string public contractURI;\n\n    Artwork public artwork;\n\n    ISkateContractV2 public gnarsV2;\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                        CONSTRUCTOR\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    constructor(\n        address _gnarsV2Address,\n        string memory _rendererBaseUri,\n        Artwork memory _artwork,\n        string memory _contractURI,\n        address _owner\n    ) Owned(_owner) {\n        gnarsV2 = ISkateContractV2(_gnarsV2Address);\n        rendererBaseUri = _rendererBaseUri;\n        artwork = _artwork;\n        contractURI = _contractURI;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         MAIN LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function setArtwork(Artwork memory _artwork) public onlyOwner {\n        artwork = _artwork;\n    }\n\n    function setContractUri(string memory _contractURI) public onlyOwner {\n        contractURI = _contractURI;\n    }\n\n    function setRendererBaseUri(string memory _rendererBaseUri) public onlyOwner {\n        rendererBaseUri = _rendererBaseUri;\n    }\n\n    /// @notice The properties and query string for a generated token\n    /// @param _tokenId The ERC-721 token id\n    function getAttributes(uint256 _tokenId)\n        public\n        view\n        returns (string memory resultAttributes, string memory queryString)\n    {\n        (uint48 background, uint48 body, uint48 accessory, uint48 head, uint48 glasses) = gnarsV2.seeds(_tokenId);\n        IGnarDescriptorV2 descriptor = IGnarDescriptorV2(gnarsV2.descriptor());\n        IGnarDecorator decorator = IGnarDecorator(descriptor.decorator());\n\n        queryString = string.concat(\n            "?contractAddress=",\n            Strings.toHexString(address(this)),\n            "&tokenId=",\n            Strings.toString(_tokenId),\n            getBackgroundQueryParam(background),\n            getPartQueryParam("BODY", body, artwork.amountBodies),\n            getPartQueryParam("ACCESSORY", accessory, artwork.amountAccessories),\n            getPartQueryParam("HEADS", head, artwork.amountHeads),\n            getPartQueryParam("NOGGLES", glasses, artwork.amountNoggles)\n        );\n\n        resultAttributes = string.concat(\n            getPartTrait("Background", background, decorator.backgrounds),\n            ",",\n            getPartTrait("Body", body, decorator.bodies),\n            ",",\n            getPartTrait("Accessory", accessory, decorator.accessories),\n            ",",\n            getPartTrait("Head", head, decorator.heads),\n            ",",\n            getPartTrait("Glasses", glasses, decorator.glasses)\n        );\n    }\n\n    function getPartQueryParam(string memory folder, uint48 partIndex, uint48 amountOfPart)\n        public\n        view\n        returns (string memory)\n    {\n        if (partIndex >= amountOfPart) {\n            return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/", Strings.toString(partIndex), ".PNG");\n    }\n\n    function getBackgroundQueryParam(uint48 backgroundIndex) public view returns (string memory) {\n        if (backgroundIndex >= artwork.amountBackgrounds) {\n            return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/", Strings.toString(backgroundIndex), ".PNG");\n    }\n\n    function getPartTrait(\n        string memory traitType,\n        uint48 partIndex,\n        function (uint256) external view returns (string memory) getPartDescription\n    ) public view returns (string memory) {\n        try getPartDescription(partIndex) returns (string memory partDescription) {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"\', partDescription, \'"}\');\n        } catch {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"Unknown"}\');\n        }\n    }\n\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\n        if (gnarsV2.ownerOf(_tokenId) == address(0)) {\n            revert TokenDoesNotExist(_tokenId);\n        }\n\n        (string memory attributes, string memory queryString) = getAttributes(_tokenId);\n        return string(\n            abi.encodePacked(\n                "data:application/json;base64,",\n                Base64.encode(\n                    bytes(\n                        abi.encodePacked(\n                            \'{"name":"Gnar HD #\',\n                            Strings.toString(_tokenId),\n                            \'", "description":"High definition Gnar #\',\n                            Strings.toString(_tokenId),\n                            " counterpart",\n                            \'", "attributes": [\',\n                            attributes,\n                            \'], "image": "\',\n                            string.concat(rendererBaseUri, queryString),\n                            \'"}\'\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              PASSTHROUGH METHODS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Returns the total amount of Gnars HD in existence\n    /// @dev Delegates to the Gnars V2 contract\n    function totalSupply() external view returns (uint256) {\n        return gnarsV2.totalSupply();\n    }\n\n    /// @notice Returns the tokenId of the Gnar HD by index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenByIndex(_index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenOfOwnerByIndex(_owner, _index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token id\n    /// @dev Delegates to the Gnars V2 contract\n    function ownerOf(uint256 id) public view returns (address owner) {\n        return gnarsV2.ownerOf(id);\n    }\n\n    /// @notice Returns the amount of Gnars HD owned by the specified address\n    /// @dev Delegates to the Gnars V2 contract\n    function balanceOf(address owner) public view returns (uint256) {\n        return gnarsV2.balanceOf(owner);\n    }\n\n    /// @notice Refresh ownership of specified tokens on marketplaces/datasets that are showing out of date information\n    /// @dev Since this token is not mintable, there\'s no Transfer event. This method emits the Transfer event so that consumers that can detect the creation/new ownership of the token.\n    /// @param tokenIds The ids of tokens to refresh\n    function assertOwnership(uint256[] memory tokenIds) public {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            emit Transfer(address(0), gnarsV2.ownerOf(tokenId), tokenId);\n        }\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC721 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function approve(address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function setApprovalForAll(address, bool) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function transferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256, bytes calldata) public pure {\n        revert Untransferable();\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC6454 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always return false\n    function isTransferable(uint256, address, address) external pure returns (bool) {\n        return false;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC165 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165\n            || interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721\n            || interfaceId == 0x5b5e139f // ERC165 Interface ID for ERC721Metadata\n            || interfaceId == 0x780e9d63 // ERC165 Interface ID for ERC721Enumerable\n            || interfaceId == 0x7f5828d0 // ERC165 Interface ID for ERC173\n            || interfaceId == 0x91a6262f; // ERC165 Interface ID for ERC6454\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'GnarsHD.supportsInterface', 'start_line': 319, 'end_line': 326, 'offset_start': 14835, 'offset_end': 15393, 'content': 'function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165\n            || interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721\n            || interfaceId == 0x5b5e139f // ERC165 Interface ID for ERC721Metadata\n            || interfaceId == 0x780e9d63 // ERC165 Interface ID for ERC721Enumerable\n            || interfaceId == 0x7f5828d0 // ERC165 Interface ID for ERC173\n            || interfaceId == 0x91a6262f; // ERC165 Interface ID for ERC6454\n    }', 'contract_name': 'GnarsHD', 'contract_code': '{\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STRUCTS / EVENTS / ERRORS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n    struct Artwork {\n        string ipfsFolder;\n        uint48 amountBackgrounds;\n        uint48 amountBodies;\n        uint48 amountAccessories;\n        uint48 amountHeads;\n        uint48 amountNoggles;\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    error Untransferable();\n    error TokenDoesNotExist(uint256 tokenId);\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         STORAGE\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    string public name = "Gnars HD";\n\n    string public symbol = "GNARSHD";\n\n    string public rendererBaseUri;\n\n    string public contractURI;\n\n    Artwork public artwork;\n\n    ISkateContractV2 public gnarsV2;\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                        CONSTRUCTOR\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    constructor(\n        address _gnarsV2Address,\n        string memory _rendererBaseUri,\n        Artwork memory _artwork,\n        string memory _contractURI,\n        address _owner\n    ) Owned(_owner) {\n        gnarsV2 = ISkateContractV2(_gnarsV2Address);\n        rendererBaseUri = _rendererBaseUri;\n        artwork = _artwork;\n        contractURI = _contractURI;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                         MAIN LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function setArtwork(Artwork memory _artwork) public onlyOwner {\n        artwork = _artwork;\n    }\n\n    function setContractUri(string memory _contractURI) public onlyOwner {\n        contractURI = _contractURI;\n    }\n\n    function setRendererBaseUri(string memory _rendererBaseUri) public onlyOwner {\n        rendererBaseUri = _rendererBaseUri;\n    }\n\n    /// @notice The properties and query string for a generated token\n    /// @param _tokenId The ERC-721 token id\n    function getAttributes(uint256 _tokenId)\n        public\n        view\n        returns (string memory resultAttributes, string memory queryString)\n    {\n        (uint48 background, uint48 body, uint48 accessory, uint48 head, uint48 glasses) = gnarsV2.seeds(_tokenId);\n        IGnarDescriptorV2 descriptor = IGnarDescriptorV2(gnarsV2.descriptor());\n        IGnarDecorator decorator = IGnarDecorator(descriptor.decorator());\n\n        queryString = string.concat(\n            "?contractAddress=",\n            Strings.toHexString(address(this)),\n            "&tokenId=",\n            Strings.toString(_tokenId),\n            getBackgroundQueryParam(background),\n            getPartQueryParam("BODY", body, artwork.amountBodies),\n            getPartQueryParam("ACCESSORY", accessory, artwork.amountAccessories),\n            getPartQueryParam("HEADS", head, artwork.amountHeads),\n            getPartQueryParam("NOGGLES", glasses, artwork.amountNoggles)\n        );\n\n        resultAttributes = string.concat(\n            getPartTrait("Background", background, decorator.backgrounds),\n            ",",\n            getPartTrait("Body", body, decorator.bodies),\n            ",",\n            getPartTrait("Accessory", accessory, decorator.accessories),\n            ",",\n            getPartTrait("Head", head, decorator.heads),\n            ",",\n            getPartTrait("Glasses", glasses, decorator.glasses)\n        );\n    }\n\n    function getPartQueryParam(string memory folder, uint48 partIndex, uint48 amountOfPart)\n        public\n        view\n        returns (string memory)\n    {\n        if (partIndex >= amountOfPart) {\n            return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/", folder, "/", Strings.toString(partIndex), ".PNG");\n    }\n\n    function getBackgroundQueryParam(uint48 backgroundIndex) public view returns (string memory) {\n        if (backgroundIndex >= artwork.amountBackgrounds) {\n            return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/FALLBACK.PNG");\n        }\n\n        return string.concat("&images=", artwork.ipfsFolder, "/BACKGROUND/", Strings.toString(backgroundIndex), ".PNG");\n    }\n\n    function getPartTrait(\n        string memory traitType,\n        uint48 partIndex,\n        function (uint256) external view returns (string memory) getPartDescription\n    ) public view returns (string memory) {\n        try getPartDescription(partIndex) returns (string memory partDescription) {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"\', partDescription, \'"}\');\n        } catch {\n            return string.concat(\'{"trait_type":"\', traitType, \'","value":"Unknown"}\');\n        }\n    }\n\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\n        if (gnarsV2.ownerOf(_tokenId) == address(0)) {\n            revert TokenDoesNotExist(_tokenId);\n        }\n\n        (string memory attributes, string memory queryString) = getAttributes(_tokenId);\n        return string(\n            abi.encodePacked(\n                "data:application/json;base64,",\n                Base64.encode(\n                    bytes(\n                        abi.encodePacked(\n                            \'{"name":"Gnar HD #\',\n                            Strings.toString(_tokenId),\n                            \'", "description":"High definition Gnar #\',\n                            Strings.toString(_tokenId),\n                            " counterpart",\n                            \'", "attributes": [\',\n                            attributes,\n                            \'], "image": "\',\n                            string.concat(rendererBaseUri, queryString),\n                            \'"}\'\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              PASSTHROUGH METHODS\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Returns the total amount of Gnars HD in existence\n    /// @dev Delegates to the Gnars V2 contract\n    function totalSupply() external view returns (uint256) {\n        return gnarsV2.totalSupply();\n    }\n\n    /// @notice Returns the tokenId of the Gnar HD by index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenByIndex(_index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token index\n    /// @dev Delegates to the Gnars V2 contract\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n        return gnarsV2.tokenOfOwnerByIndex(_owner, _index);\n    }\n\n    /// @notice Returns the Gnar HD owner\'s address by token id\n    /// @dev Delegates to the Gnars V2 contract\n    function ownerOf(uint256 id) public view returns (address owner) {\n        return gnarsV2.ownerOf(id);\n    }\n\n    /// @notice Returns the amount of Gnars HD owned by the specified address\n    /// @dev Delegates to the Gnars V2 contract\n    function balanceOf(address owner) public view returns (uint256) {\n        return gnarsV2.balanceOf(owner);\n    }\n\n    /// @notice Refresh ownership of specified tokens on marketplaces/datasets that are showing out of date information\n    /// @dev Since this token is not mintable, there\'s no Transfer event. This method emits the Transfer event so that consumers that can detect the creation/new ownership of the token.\n    /// @param tokenIds The ids of tokens to refresh\n    function assertOwnership(uint256[] memory tokenIds) public {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            emit Transfer(address(0), gnarsV2.ownerOf(tokenId), tokenId);\n        }\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC721 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function approve(address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function setApprovalForAll(address, bool) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function transferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256) public pure {\n        revert Untransferable();\n    }\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always revert\n    function safeTransferFrom(address, address, uint256, bytes calldata) public pure {\n        revert Untransferable();\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC6454 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    /// @notice Gnars HD are not transferable\n    /// @dev Will always return false\n    function isTransferable(uint256, address, address) external pure returns (bool) {\n        return false;\n    }\n\n    /* ⌐◨—————————————————————————————————————————————————————————————◨\n                              ERC165 LOGIC\n       ⌐◨—————————————————————————————————————————————————————————————◨ */\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165\n            || interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721\n            || interfaceId == 0x5b5e139f // ERC165 Interface ID for ERC721Metadata\n            || interfaceId == 0x780e9d63 // ERC165 Interface ID for ERC721Enumerable\n            || interfaceId == 0x7f5828d0 // ERC165 Interface ID for ERC173\n            || interfaceId == 0x91a6262f; // ERC165 Interface ID for ERC6454\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'IGnarDecorator.accessories', 'start_line': 330, 'end_line': 330, 'offset_start': 15429, 'offset_end': 15496, 'content': 'function accessories(uint256) external view returns (string memory);', 'contract_name': 'IGnarDecorator', 'contract_code': '{\n    function accessories(uint256) external view returns (string memory);\n    function backgrounds(uint256) external view returns (string memory);\n    function bodies(uint256) external view returns (string memory);\n    function glasses(uint256) external view returns (string memory);\n    function heads(uint256) external view returns (string memory);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'IGnarDecorator.backgrounds', 'start_line': 331, 'end_line': 331, 'offset_start': 15502, 'offset_end': 15569, 'content': 'function backgrounds(uint256) external view returns (string memory);', 'contract_name': 'IGnarDecorator', 'contract_code': '{\n    function accessories(uint256) external view returns (string memory);\n    function backgrounds(uint256) external view returns (string memory);\n    function bodies(uint256) external view returns (string memory);\n    function glasses(uint256) external view returns (string memory);\n    function heads(uint256) external view returns (string memory);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'IGnarDecorator.bodies', 'start_line': 332, 'end_line': 332, 'offset_start': 15575, 'offset_end': 15637, 'content': 'function bodies(uint256) external view returns (string memory);', 'contract_name': 'IGnarDecorator', 'contract_code': '{\n    function accessories(uint256) external view returns (string memory);\n    function backgrounds(uint256) external view returns (string memory);\n    function bodies(uint256) external view returns (string memory);\n    function glasses(uint256) external view returns (string memory);\n    function heads(uint256) external view returns (string memory);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'IGnarDecorator.glasses', 'start_line': 333, 'end_line': 333, 'offset_start': 15643, 'offset_end': 15706, 'content': 'function glasses(uint256) external view returns (string memory);', 'contract_name': 'IGnarDecorator', 'contract_code': '{\n    function accessories(uint256) external view returns (string memory);\n    function backgrounds(uint256) external view returns (string memory);\n    function bodies(uint256) external view returns (string memory);\n    function glasses(uint256) external view returns (string memory);\n    function heads(uint256) external view returns (string memory);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'IGnarDecorator.heads', 'start_line': 334, 'end_line': 334, 'offset_start': 15712, 'offset_end': 15773, 'content': 'function heads(uint256) external view returns (string memory);', 'contract_name': 'IGnarDecorator', 'contract_code': '{\n    function accessories(uint256) external view returns (string memory);\n    function backgrounds(uint256) external view returns (string memory);\n    function bodies(uint256) external view returns (string memory);\n    function glasses(uint256) external view returns (string memory);\n    function heads(uint256) external view returns (string memory);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'IGnarDescriptorV2.decorator', 'start_line': 338, 'end_line': 338, 'offset_start': 15812, 'offset_end': 15864, 'content': 'function decorator() external view returns (address);', 'contract_name': 'IGnarDescriptorV2', 'contract_code': '{\n    function decorator() external view returns (address);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'ISkateContractV2.balanceOf', 'start_line': 342, 'end_line': 342, 'offset_start': 15902, 'offset_end': 15967, 'content': 'function balanceOf(address owner) external view returns (uint256);', 'contract_name': 'ISkateContractV2', 'contract_code': '{\n    function balanceOf(address owner) external view returns (uint256);\n    function descriptor() external view returns (address);\n    function ownerOf(uint256 tokenId) external view returns (address);\n    function seeds(uint256)\n        external\n        view\n        returns (uint48 background, uint48 body, uint48 accessory, uint48 head, uint48 glasses);\n    function tokenByIndex(uint256 index) external view returns (uint256);\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n    function totalSupply() external view returns (uint256);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'ISkateContractV2.descriptor', 'start_line': 343, 'end_line': 343, 'offset_start': 15973, 'offset_end': 16026, 'content': 'function descriptor() external view returns (address);', 'contract_name': 'ISkateContractV2', 'contract_code': '{\n    function balanceOf(address owner) external view returns (uint256);\n    function descriptor() external view returns (address);\n    function ownerOf(uint256 tokenId) external view returns (address);\n    function seeds(uint256)\n        external\n        view\n        returns (uint48 background, uint48 body, uint48 accessory, uint48 head, uint48 glasses);\n    function tokenByIndex(uint256 index) external view returns (uint256);\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n    function totalSupply() external view returns (uint256);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'ISkateContractV2.ownerOf', 'start_line': 344, 'end_line': 344, 'offset_start': 16032, 'offset_end': 16097, 'content': 'function ownerOf(uint256 tokenId) external view returns (address);', 'contract_name': 'ISkateContractV2', 'contract_code': '{\n    function balanceOf(address owner) external view returns (uint256);\n    function descriptor() external view returns (address);\n    function ownerOf(uint256 tokenId) external view returns (address);\n    function seeds(uint256)\n        external\n        view\n        returns (uint48 background, uint48 body, uint48 accessory, uint48 head, uint48 glasses);\n    function tokenByIndex(uint256 index) external view returns (uint256);\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n    function totalSupply() external view returns (uint256);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'ISkateContractV2.seeds', 'start_line': 345, 'end_line': 348, 'offset_start': 16103, 'offset_end': 16252, 'content': 'function seeds(uint256)\n        external\n        view\n        returns (uint48 background, uint48 body, uint48 accessory, uint48 head, uint48 glasses);', 'contract_name': 'ISkateContractV2', 'contract_code': '{\n    function balanceOf(address owner) external view returns (uint256);\n    function descriptor() external view returns (address);\n    function ownerOf(uint256 tokenId) external view returns (address);\n    function seeds(uint256)\n        external\n        view\n        returns (uint48 background, uint48 body, uint48 accessory, uint48 head, uint48 glasses);\n    function tokenByIndex(uint256 index) external view returns (uint256);\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n    function totalSupply() external view returns (uint256);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'ISkateContractV2.tokenByIndex', 'start_line': 349, 'end_line': 349, 'offset_start': 16258, 'offset_end': 16326, 'content': 'function tokenByIndex(uint256 index) external view returns (uint256);', 'contract_name': 'ISkateContractV2', 'contract_code': '{\n    function balanceOf(address owner) external view returns (uint256);\n    function descriptor() external view returns (address);\n    function ownerOf(uint256 tokenId) external view returns (address);\n    function seeds(uint256)\n        external\n        view\n        returns (uint48 background, uint48 body, uint48 accessory, uint48 head, uint48 glasses);\n    function tokenByIndex(uint256 index) external view returns (uint256);\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n    function totalSupply() external view returns (uint256);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'ISkateContractV2.tokenOfOwnerByIndex', 'start_line': 350, 'end_line': 350, 'offset_start': 16332, 'offset_end': 16422, 'content': 'function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);', 'contract_name': 'ISkateContractV2', 'contract_code': '{\n    function balanceOf(address owner) external view returns (uint256);\n    function descriptor() external view returns (address);\n    function ownerOf(uint256 tokenId) external view returns (address);\n    function seeds(uint256)\n        external\n        view\n        returns (uint48 background, uint48 body, uint48 accessory, uint48 head, uint48 glasses);\n    function tokenByIndex(uint256 index) external view returns (uint256);\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n    function totalSupply() external view returns (uint256);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'ISkateContractV2.totalSupply', 'start_line': 351, 'end_line': 351, 'offset_start': 16428, 'offset_end': 16482, 'content': 'function totalSupply() external view returns (uint256);', 'contract_name': 'ISkateContractV2', 'contract_code': '{\n    function balanceOf(address owner) external view returns (uint256);\n    function descriptor() external view returns (address);\n    function ownerOf(uint256 tokenId) external view returns (address);\n    function seeds(uint256)\n        external\n        view\n        returns (uint48 background, uint48 body, uint48 accessory, uint48 head, uint48 glasses);\n    function tokenByIndex(uint256 index) external view returns (uint256);\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n    function totalSupply() external view returns (uint256);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'Strings.toString', 'start_line': 372, 'end_line': 392, 'offset_start': 16934, 'offset_end': 17629, 'content': 'function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }', 'contract_name': 'Strings', 'contract_code': '{\n    bytes16 private constant _SYMBOLS = "0123456789abcdef";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? "-" : "", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = "0";\n        buffer[1] = "x";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, "Strings: hex length insufficient");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'Strings.toString', 'start_line': 397, 'end_line': 399, 'offset_start': 17730, 'offset_end': 17902, 'content': 'function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? "-" : "", toString(SignedMath.abs(value))));\n    }', 'contract_name': 'Strings', 'contract_code': '{\n    bytes16 private constant _SYMBOLS = "0123456789abcdef";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? "-" : "", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = "0";\n        buffer[1] = "x";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, "Strings: hex length insufficient");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'Strings.toHexString', 'start_line': 404, 'end_line': 408, 'offset_start': 18008, 'offset_end': 18181, 'content': 'function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }', 'contract_name': 'Strings', 'contract_code': '{\n    bytes16 private constant _SYMBOLS = "0123456789abcdef";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? "-" : "", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = "0";\n        buffer[1] = "x";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, "Strings: hex length insufficient");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'Strings.toHexString', 'start_line': 413, 'end_line': 423, 'offset_start': 18305, 'offset_end': 18741, 'content': 'function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = "0";\n        buffer[1] = "x";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, "Strings: hex length insufficient");\n        return string(buffer);\n    }', 'contract_name': 'Strings', 'contract_code': '{\n    bytes16 private constant _SYMBOLS = "0123456789abcdef";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? "-" : "", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = "0";\n        buffer[1] = "x";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, "Strings: hex length insufficient");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'Strings.toHexString', 'start_line': 428, 'end_line': 430, 'offset_start': 18894, 'offset_end': 19042, 'content': 'function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }', 'contract_name': 'Strings', 'contract_code': '{\n    bytes16 private constant _SYMBOLS = "0123456789abcdef";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? "-" : "", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = "0";\n        buffer[1] = "x";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, "Strings: hex length insufficient");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'Strings.equal', 'start_line': 435, 'end_line': 437, 'offset_start': 19120, 'offset_end': 19263, 'content': 'function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }', 'contract_name': 'Strings', 'contract_code': '{\n    bytes16 private constant _SYMBOLS = "0123456789abcdef";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? "-" : "", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = "0";\n        buffer[1] = "x";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, "Strings: hex length insufficient");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'Base64.encode', 'start_line': 454, 'end_line': 505, 'offset_start': 20045, 'offset_end': 21905, 'content': "function encode(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return '';\n\n        // load the table into memory\n        string memory table = TABLE_ENCODE;\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n        // add some extra buffer at the end required for the writing\n        string memory result = new string(encodedLen + 32);\n\n        assembly {\n            // set the actual output length\n            mstore(result, encodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 3 bytes at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n                // read 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // write 4 characters\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\n                resultPtr := add(resultPtr, 1)\n            }\n\n            // padding with '='\n            switch mod(mload(data), 3)\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\n        }\n\n        return result;\n    }", 'contract_name': 'Base64', 'contract_code': '{\n    string internal constant TABLE_ENCODE = \'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\';\n    bytes  internal constant TABLE_DECODE = hex"0000000000000000000000000000000000000000000000000000000000000000"\n                                            hex"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000"\n                                            hex"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000"\n                                            hex"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000";\n\n    function encode(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return \'\';\n\n        // load the table into memory\n        string memory table = TABLE_ENCODE;\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n        // add some extra buffer at the end required for the writing\n        string memory result = new string(encodedLen + 32);\n\n        assembly {\n            // set the actual output length\n            mstore(result, encodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 3 bytes at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n                // read 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // write 4 characters\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\n                resultPtr := add(resultPtr, 1)\n            }\n\n            // padding with \'=\'\n            switch mod(mload(data), 3)\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\n        }\n\n        return result;\n    }\n\n    function decode(string memory _data) internal pure returns (bytes memory) {\n        bytes memory data = bytes(_data);\n\n        if (data.length == 0) return new bytes(0);\n        require(data.length % 4 == 0, "invalid base64 decoder input");\n\n        // load the table into memory\n        bytes memory table = TABLE_DECODE;\n\n        // every 4 characters represent 3 bytes\n        uint256 decodedLen = (data.length / 4) * 3;\n\n        // add some extra buffer at the end required for the writing\n        bytes memory result = new bytes(decodedLen + 32);\n\n        assembly {\n            // padding with \'=\'\n            let lastBytes := mload(add(data, mload(data)))\n            if eq(and(lastBytes, 0xFF), 0x3d) {\n                decodedLen := sub(decodedLen, 1)\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\n                    decodedLen := sub(decodedLen, 1)\n                }\n            }\n\n            // set the actual output length\n            mstore(result, decodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 4 characters at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n               // read 4 characters\n               dataPtr := add(dataPtr, 4)\n               let input := mload(dataPtr)\n\n               // write 3 bytes\n               let output := add(\n                   add(\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\n                   add(\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\n                    )\n                )\n                mstore(resultPtr, shl(232, output))\n                resultPtr := add(resultPtr, 3)\n            }\n        }\n\n        return result;\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'Base64.decode', 'start_line': 507, 'end_line': 568, 'offset_start': 21912, 'offset_end': 24089, 'content': 'function decode(string memory _data) internal pure returns (bytes memory) {\n        bytes memory data = bytes(_data);\n\n        if (data.length == 0) return new bytes(0);\n        require(data.length % 4 == 0, "invalid base64 decoder input");\n\n        // load the table into memory\n        bytes memory table = TABLE_DECODE;\n\n        // every 4 characters represent 3 bytes\n        uint256 decodedLen = (data.length / 4) * 3;\n\n        // add some extra buffer at the end required for the writing\n        bytes memory result = new bytes(decodedLen + 32);\n\n        assembly {\n            // padding with \'=\'\n            let lastBytes := mload(add(data, mload(data)))\n            if eq(and(lastBytes, 0xFF), 0x3d) {\n                decodedLen := sub(decodedLen, 1)\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\n                    decodedLen := sub(decodedLen, 1)\n                }\n            }\n\n            // set the actual output length\n            mstore(result, decodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 4 characters at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n               // read 4 characters\n               dataPtr := add(dataPtr, 4)\n               let input := mload(dataPtr)\n\n               // write 3 bytes\n               let output := add(\n                   add(\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\n                   add(\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\n                    )\n                )\n                mstore(resultPtr, shl(232, output))\n                resultPtr := add(resultPtr, 3)\n            }\n        }\n\n        return result;\n    }', 'contract_name': 'Base64', 'contract_code': '{\n    string internal constant TABLE_ENCODE = \'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\';\n    bytes  internal constant TABLE_DECODE = hex"0000000000000000000000000000000000000000000000000000000000000000"\n                                            hex"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000"\n                                            hex"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000"\n                                            hex"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000";\n\n    function encode(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return \'\';\n\n        // load the table into memory\n        string memory table = TABLE_ENCODE;\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n        // add some extra buffer at the end required for the writing\n        string memory result = new string(encodedLen + 32);\n\n        assembly {\n            // set the actual output length\n            mstore(result, encodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 3 bytes at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n                // read 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // write 4 characters\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\n                resultPtr := add(resultPtr, 1)\n            }\n\n            // padding with \'=\'\n            switch mod(mload(data), 3)\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\n        }\n\n        return result;\n    }\n\n    function decode(string memory _data) internal pure returns (bytes memory) {\n        bytes memory data = bytes(_data);\n\n        if (data.length == 0) return new bytes(0);\n        require(data.length % 4 == 0, "invalid base64 decoder input");\n\n        // load the table into memory\n        bytes memory table = TABLE_DECODE;\n\n        // every 4 characters represent 3 bytes\n        uint256 decodedLen = (data.length / 4) * 3;\n\n        // add some extra buffer at the end required for the writing\n        bytes memory result = new bytes(decodedLen + 32);\n\n        assembly {\n            // padding with \'=\'\n            let lastBytes := mload(add(data, mload(data)))\n            if eq(and(lastBytes, 0xFF), 0x3d) {\n                decodedLen := sub(decodedLen, 1)\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\n                    decodedLen := sub(decodedLen, 1)\n                }\n            }\n\n            // set the actual output length\n            mstore(result, decodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 4 characters at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n               // read 4 characters\n               dataPtr := add(dataPtr, 4)\n               let input := mload(dataPtr)\n\n               // write 3 bytes\n               let output := add(\n                   add(\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\n                   add(\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\n                    )\n                )\n                mstore(resultPtr, shl(232, output))\n                resultPtr := add(resultPtr, 3)\n            }\n        }\n\n        return result;\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'Math.max', 'start_line': 589, 'end_line': 591, 'offset_start': 24507, 'offset_end': 24610, 'content': 'function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }', 'contract_name': 'Math', 'contract_code': '{\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, "Math: mulDiv overflow");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'Math.min', 'start_line': 596, 'end_line': 598, 'offset_start': 24682, 'offset_end': 24785, 'content': 'function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }', 'contract_name': 'Math', 'contract_code': '{\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, "Math: mulDiv overflow");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'Math.average', 'start_line': 604, 'end_line': 607, 'offset_start': 24899, 'offset_end': 25051, 'content': 'function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }', 'contract_name': 'Math', 'contract_code': '{\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, "Math: mulDiv overflow");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'Math.ceilDiv', 'start_line': 615, 'end_line': 618, 'offset_start': 25251, 'offset_end': 25444, 'content': 'function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }', 'contract_name': 'Math', 'contract_code': '{\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, "Math: mulDiv overflow");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'Math.mulDiv', 'start_line': 625, 'end_line': 704, 'offset_start': 25761, 'offset_end': 29973, 'content': 'function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, "Math: mulDiv overflow");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }', 'contract_name': 'Math', 'contract_code': '{\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, "Math: mulDiv overflow");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'Math.mulDiv', 'start_line': 709, 'end_line': 715, 'offset_start': 30106, 'offset_end': 30404, 'content': 'function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }', 'contract_name': 'Math', 'contract_code': '{\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, "Math: mulDiv overflow");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'Math.sqrt', 'start_line': 722, 'end_line': 753, 'offset_start': 30624, 'offset_end': 32261, 'content': 'function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }', 'contract_name': 'Math', 'contract_code': '{\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, "Math: mulDiv overflow");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'Math.sqrt', 'start_line': 758, 'end_line': 763, 'offset_start': 32362, 'offset_end': 32598, 'content': 'function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }', 'contract_name': 'Math', 'contract_code': '{\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, "Math: mulDiv overflow");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'Math.log2', 'start_line': 769, 'end_line': 805, 'offset_start': 32723, 'offset_end': 33705, 'content': 'function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }', 'contract_name': 'Math', 'contract_code': '{\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, "Math: mulDiv overflow");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'Math.log2', 'start_line': 811, 'end_line': 816, 'offset_start': 33859, 'offset_end': 34103, 'content': 'function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }', 'contract_name': 'Math', 'contract_code': '{\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, "Math: mulDiv overflow");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'Math.log10', 'start_line': 822, 'end_line': 854, 'offset_start': 34229, 'offset_end': 35144, 'content': 'function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }', 'contract_name': 'Math', 'contract_code': '{\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, "Math: mulDiv overflow");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'Math.log10', 'start_line': 860, 'end_line': 865, 'offset_start': 35299, 'offset_end': 35546, 'content': 'function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }', 'contract_name': 'Math', 'contract_code': '{\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, "Math: mulDiv overflow");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'Math.log256', 'start_line': 873, 'end_line': 897, 'offset_start': 35798, 'offset_end': 36460, 'content': 'function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }', 'contract_name': 'Math', 'contract_code': '{\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, "Math: mulDiv overflow");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'Math.log256', 'start_line': 903, 'end_line': 908, 'offset_start': 36616, 'offset_end': 36871, 'content': 'function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }', 'contract_name': 'Math', 'contract_code': '{\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, "Math: mulDiv overflow");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'SignedMath.max', 'start_line': 923, 'end_line': 925, 'offset_start': 37187, 'offset_end': 37287, 'content': 'function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }', 'contract_name': 'SignedMath', 'contract_code': '{\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book "Hacker\'s Delight"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'SignedMath.min', 'start_line': 930, 'end_line': 932, 'offset_start': 37366, 'offset_end': 37466, 'content': 'function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }', 'contract_name': 'SignedMath', 'contract_code': '{\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book "Hacker\'s Delight"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'SignedMath.average', 'start_line': 938, 'end_line': 942, 'offset_start': 37604, 'offset_end': 37833, 'content': 'function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book "Hacker\'s Delight"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }', 'contract_name': 'SignedMath', 'contract_code': '{\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book "Hacker\'s Delight"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'SignedMath.abs', 'start_line': 947, 'end_line': 952, 'offset_start': 37923, 'offset_end': 38135, 'content': 'function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }', 'contract_name': 'SignedMath', 'contract_code': '{\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book "Hacker\'s Delight"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'Owned.tor', 'start_line': 983, 'end_line': 987, 'offset_start': 39147, 'offset_end': 39261, 'content': 'constructor(address _owner) {\n        owner = _owner;\n\n        emit OwnershipTransferred(address(0), _owner);\n    }', 'contract_name': 'Owned', 'contract_code': '{\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\n\n    /*//////////////////////////////////////////////////////////////\n                            OWNERSHIP STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    address public owner;\n\n    modifier onlyOwner() virtual {\n        require(msg.sender == owner, "UNAUTHORIZED");\n\n        _;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(address _owner) {\n        owner = _owner;\n\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             OWNERSHIP LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        owner = newOwner;\n\n        emit OwnershipTransferred(msg.sender, newOwner);\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'default', 'node_count': 4, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
{'type': 'FunctionDefinition', 'name': 'Owned.transferOwnership', 'start_line': 993, 'end_line': 997, 'offset_start': 39452, 'offset_end': 39612, 'content': 'function transferOwnership(address newOwner) public virtual onlyOwner {\n        owner = newOwner;\n\n        emit OwnershipTransferred(msg.sender, newOwner);\n    }', 'contract_name': 'Owned', 'contract_code': '{\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\n\n    /*//////////////////////////////////////////////////////////////\n                            OWNERSHIP STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    address public owner;\n\n    modifier onlyOwner() virtual {\n        require(msg.sender == owner, "UNAUTHORIZED");\n\n        _;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(address _owner) {\n        owner = _owner;\n\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             OWNERSHIP LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        owner = newOwner;\n\n        emit OwnershipTransferred(msg.sender, newOwner);\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x75cd3f538c091c1d514ab1ad9832f54198cacec0/0x75cd3f538c091c1d514ab1ad9832f54198cacec0.sol'}
