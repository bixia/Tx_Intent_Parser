{'type': 'FunctionDefinition', 'name': 'Initializable._checkInitializing', 'start_line': 178, 'end_line': 182, 'offset_start': 7084, 'offset_end': 7224, 'content': 'function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }', 'contract_name': 'Initializable', 'contract_code': '{\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It\'s implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.Initializable")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn\'t been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Initializable._disableInitializers', 'start_line': 192, 'end_line': 203, 'offset_start': 7711, 'offset_end': 8132, 'content': 'function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }', 'contract_name': 'Initializable', 'contract_code': '{\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It\'s implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.Initializable")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn\'t been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Initializable._getInitializedVersion', 'start_line': 208, 'end_line': 210, 'offset_start': 8243, 'offset_end': 8370, 'content': 'function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }', 'contract_name': 'Initializable', 'contract_code': '{\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It\'s implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.Initializable")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn\'t been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Initializable._isInitializing', 'start_line': 215, 'end_line': 217, 'offset_start': 8487, 'offset_end': 8606, 'content': 'function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }', 'contract_name': 'Initializable', 'contract_code': '{\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It\'s implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.Initializable")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn\'t been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Initializable._getInitializableStorage', 'start_line': 223, 'end_line': 227, 'offset_start': 8737, 'offset_end': 8906, 'content': 'function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }', 'contract_name': 'Initializable', 'contract_code': '{\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It\'s implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.Initializable")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn\'t been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'private', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC4626Vault.tor', 'start_line': 322, 'end_line': 333, 'offset_start': 12472, 'offset_end': 12925, 'content': 'constructor(IERC1155 erc1155StakedALT_, uint256 erc1155TokenID_, IERC20 altToken_) {\n        if (address(erc1155StakedALT_) == address(0) || address(altToken_) == address(0)) {\n            revert ZeroAddress();\n        }\n        if (erc1155TokenID_ == 0) {\n            revert InvalidID();\n        }\n        erc1155StakedALT = erc1155StakedALT_;\n        erc1155TokenID = erc1155TokenID_;\n        altToken = altToken_;\n        _disableInitializers();\n    }', 'contract_name': 'ERC4626Vault', 'contract_code': '{\n    using Math for uint256;\n\n    /**\n     * @notice Emitted when a user opts into an action or agreement.\n     * @param id The unique identifier of the opt-in action.\n     * @param user The address of the user who opted in.\n     */\n    event OptedIn(uint256 indexed id, address user);\n\n    /**\n     * @notice Emitted when a reward pool is created.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     */\n    event RewardPoolCreated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @notice Emitted when a reward pool is updated.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The new start timestamp of the reward pool.\n     * @param endTimestamp_ The new end timestamp of the reward pool.\n     * @param name_ The new name of the reward pool.\n     */\n    event RewardPoolUpdated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    IERC20 public immutable altToken;\n    IERC1155 public immutable erc1155StakedALT;\n    uint256 public immutable erc1155TokenID;\n\n    struct RewardPoolData {\n        uint64 startTimestamp;\n        uint64 endTimestamp;\n        string name;\n    }\n\n    uint256 public totalRewardPools;\n    mapping(uint256 => RewardPoolData) public RewardPools;\n    mapping(uint256 => mapping(address => bool)) public optedInUsers;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IERC1155 erc1155StakedALT_, uint256 erc1155TokenID_, IERC20 altToken_) {\n        if (address(erc1155StakedALT_) == address(0) || address(altToken_) == address(0)) {\n            revert ZeroAddress();\n        }\n        if (erc1155TokenID_ == 0) {\n            revert InvalidID();\n        }\n        erc1155StakedALT = erc1155StakedALT_;\n        erc1155TokenID = erc1155TokenID_;\n        altToken = altToken_;\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner, string memory name_, string memory symbol_) external initializer {\n        __Ownable_init(initialOwner);\n        __ERC20_init(name_, symbol_);\n    }\n\n    /**\n     * @notice Creates a new reward pool with the specified name, start, and end timestamps.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can create a reward pool.\n     */\n    function createRewardPool(uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) external onlyOwner {\n        if (block.timestamp > startTimestamp_) {\n            revert InvalidStartTime();\n        }\n        if (startTimestamp_ >= endTimestamp_) {\n            revert InvalidEndTime();\n        }\n        ++totalRewardPools;\n        uint256 id = totalRewardPools;\n\n        emit RewardPoolCreated(id, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @notice Updates an existing reward pool with the specified ID, name, start, and end timestamps.\n     * @param id_ The ID of the reward pool to set or update.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can set or update a reward pool.\n     */\n    function updateRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_)\n        external\n        onlyOwner\n    {\n        emit RewardPoolUpdated(id_, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id_, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @dev Allows a user to opt into a specific opt-in period.\n     * @param id The identifier of the opt-in period.\n     */\n    function optIn(uint256 id) external {\n        RewardPoolData memory rewardPoolData = RewardPools[id];\n\n        // If the rewardPoolData is not initialized\n        if (rewardPoolData.endTimestamp == 0) {\n            // Note: When initialized, endTimestamp is greater than startTimestamp\n            // Therefore. endTimestamp is always greater than 0.\n            revert InvalidID();\n        }\n\n        if (block.timestamp < rewardPoolData.startTimestamp) {\n            revert OptInPeriodNotStarted();\n        }\n\n        if (block.timestamp > rewardPoolData.endTimestamp) {\n            revert OptInPeriodEnded();\n        }\n\n        address sender = _msgSender();\n\n        if (balanceOf(sender) == 0) {\n            revert ZeroShare();\n        }\n\n        optedInUsers[id][sender] = true;\n        emit OptedIn(id, sender);\n    }\n\n    /**\n     * @notice Stakes all available alternative tokens into the staking contract.\n     * @dev This function will approve and then stake the total balance of altTokens held by this vault.\n     */\n    function stake() public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n\n        uint256 balance = altToken.balanceOf(thisVault);\n        altToken.approve(address(stk), balance);\n        stk.stake(thisVault, operator, balance);\n    }\n\n    /**\n     * @notice Claims rewards from the staking contract.\n     */\n    function claim(uint16 distributionId) public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n        stk.claimRewards(distributionId, thisVault, operator, type(uint256).max);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset\'s decimals. This\n     * "original" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset\'s decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC4626-asset}.\n     */\n    function asset() public view virtual returns (address) {\n        return address(erc1155StakedALT);\n    }\n\n    /**\n     * @dev See {IERC4626-totalAssets}.\n     */\n    function totalAssets() public view virtual returns (uint256) {\n        return erc1155StakedALT.balanceOf(address(this), erc1155TokenID);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToShares}.\n     */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToAssets}.\n     */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxDeposit}.\n     */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxMint}.\n     */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxWithdraw}.\n     */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxRedeem}.\n     */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /**\n     * @dev See {IERC4626-previewDeposit}.\n     */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-previewMint}.\n     */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewWithdraw}.\n     */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewRedeem}.\n     */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-deposit}.\n     */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev See {IERC4626-withdraw}.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-redeem}.\n     */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory)\n        external\n        pure\n        returns (bytes4)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 1, totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 1, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        erc1155StakedALT.safeTransferFrom(caller, address(this), erc1155TokenID, assets, "");\n\n        _mint(receiver, shares);\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares)\n        internal\n        virtual\n    {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If erc1155StakedALT is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        emit Withdraw(caller, receiver, owner, assets, shares);\n        erc1155StakedALT.safeTransferFrom(address(this), receiver, erc1155TokenID, assets, "");\n    }\n\n    function _setRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) internal {\n        RewardPools[id_] = RewardPoolData({startTimestamp: startTimestamp_, endTimestamp: endTimestamp_, name: name_});\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'default', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC4626Vault.initialize', 'start_line': 335, 'end_line': 338, 'offset_start': 12932, 'offset_end': 13121, 'content': 'function initialize(address initialOwner, string memory name_, string memory symbol_) external initializer {\n        __Ownable_init(initialOwner);\n        __ERC20_init(name_, symbol_);\n    }', 'contract_name': 'ERC4626Vault', 'contract_code': '{\n    using Math for uint256;\n\n    /**\n     * @notice Emitted when a user opts into an action or agreement.\n     * @param id The unique identifier of the opt-in action.\n     * @param user The address of the user who opted in.\n     */\n    event OptedIn(uint256 indexed id, address user);\n\n    /**\n     * @notice Emitted when a reward pool is created.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     */\n    event RewardPoolCreated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @notice Emitted when a reward pool is updated.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The new start timestamp of the reward pool.\n     * @param endTimestamp_ The new end timestamp of the reward pool.\n     * @param name_ The new name of the reward pool.\n     */\n    event RewardPoolUpdated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    IERC20 public immutable altToken;\n    IERC1155 public immutable erc1155StakedALT;\n    uint256 public immutable erc1155TokenID;\n\n    struct RewardPoolData {\n        uint64 startTimestamp;\n        uint64 endTimestamp;\n        string name;\n    }\n\n    uint256 public totalRewardPools;\n    mapping(uint256 => RewardPoolData) public RewardPools;\n    mapping(uint256 => mapping(address => bool)) public optedInUsers;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IERC1155 erc1155StakedALT_, uint256 erc1155TokenID_, IERC20 altToken_) {\n        if (address(erc1155StakedALT_) == address(0) || address(altToken_) == address(0)) {\n            revert ZeroAddress();\n        }\n        if (erc1155TokenID_ == 0) {\n            revert InvalidID();\n        }\n        erc1155StakedALT = erc1155StakedALT_;\n        erc1155TokenID = erc1155TokenID_;\n        altToken = altToken_;\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner, string memory name_, string memory symbol_) external initializer {\n        __Ownable_init(initialOwner);\n        __ERC20_init(name_, symbol_);\n    }\n\n    /**\n     * @notice Creates a new reward pool with the specified name, start, and end timestamps.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can create a reward pool.\n     */\n    function createRewardPool(uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) external onlyOwner {\n        if (block.timestamp > startTimestamp_) {\n            revert InvalidStartTime();\n        }\n        if (startTimestamp_ >= endTimestamp_) {\n            revert InvalidEndTime();\n        }\n        ++totalRewardPools;\n        uint256 id = totalRewardPools;\n\n        emit RewardPoolCreated(id, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @notice Updates an existing reward pool with the specified ID, name, start, and end timestamps.\n     * @param id_ The ID of the reward pool to set or update.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can set or update a reward pool.\n     */\n    function updateRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_)\n        external\n        onlyOwner\n    {\n        emit RewardPoolUpdated(id_, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id_, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @dev Allows a user to opt into a specific opt-in period.\n     * @param id The identifier of the opt-in period.\n     */\n    function optIn(uint256 id) external {\n        RewardPoolData memory rewardPoolData = RewardPools[id];\n\n        // If the rewardPoolData is not initialized\n        if (rewardPoolData.endTimestamp == 0) {\n            // Note: When initialized, endTimestamp is greater than startTimestamp\n            // Therefore. endTimestamp is always greater than 0.\n            revert InvalidID();\n        }\n\n        if (block.timestamp < rewardPoolData.startTimestamp) {\n            revert OptInPeriodNotStarted();\n        }\n\n        if (block.timestamp > rewardPoolData.endTimestamp) {\n            revert OptInPeriodEnded();\n        }\n\n        address sender = _msgSender();\n\n        if (balanceOf(sender) == 0) {\n            revert ZeroShare();\n        }\n\n        optedInUsers[id][sender] = true;\n        emit OptedIn(id, sender);\n    }\n\n    /**\n     * @notice Stakes all available alternative tokens into the staking contract.\n     * @dev This function will approve and then stake the total balance of altTokens held by this vault.\n     */\n    function stake() public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n\n        uint256 balance = altToken.balanceOf(thisVault);\n        altToken.approve(address(stk), balance);\n        stk.stake(thisVault, operator, balance);\n    }\n\n    /**\n     * @notice Claims rewards from the staking contract.\n     */\n    function claim(uint16 distributionId) public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n        stk.claimRewards(distributionId, thisVault, operator, type(uint256).max);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset\'s decimals. This\n     * "original" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset\'s decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC4626-asset}.\n     */\n    function asset() public view virtual returns (address) {\n        return address(erc1155StakedALT);\n    }\n\n    /**\n     * @dev See {IERC4626-totalAssets}.\n     */\n    function totalAssets() public view virtual returns (uint256) {\n        return erc1155StakedALT.balanceOf(address(this), erc1155TokenID);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToShares}.\n     */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToAssets}.\n     */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxDeposit}.\n     */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxMint}.\n     */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxWithdraw}.\n     */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxRedeem}.\n     */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /**\n     * @dev See {IERC4626-previewDeposit}.\n     */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-previewMint}.\n     */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewWithdraw}.\n     */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewRedeem}.\n     */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-deposit}.\n     */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev See {IERC4626-withdraw}.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-redeem}.\n     */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory)\n        external\n        pure\n        returns (bytes4)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 1, totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 1, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        erc1155StakedALT.safeTransferFrom(caller, address(this), erc1155TokenID, assets, "");\n\n        _mint(receiver, shares);\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares)\n        internal\n        virtual\n    {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If erc1155StakedALT is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        emit Withdraw(caller, receiver, owner, assets, shares);\n        erc1155StakedALT.safeTransferFrom(address(this), receiver, erc1155TokenID, assets, "");\n    }\n\n    function _setRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) internal {\n        RewardPools[id_] = RewardPoolData({startTimestamp: startTimestamp_, endTimestamp: endTimestamp_, name: name_});\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC4626Vault.createRewardPool', 'start_line': 347, 'end_line': 359, 'offset_start': 13484, 'offset_end': 14005, 'content': 'function createRewardPool(uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) external onlyOwner {\n        if (block.timestamp > startTimestamp_) {\n            revert InvalidStartTime();\n        }\n        if (startTimestamp_ >= endTimestamp_) {\n            revert InvalidEndTime();\n        }\n        ++totalRewardPools;\n        uint256 id = totalRewardPools;\n\n        emit RewardPoolCreated(id, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id, startTimestamp_, endTimestamp_, name_);\n    }', 'contract_name': 'ERC4626Vault', 'contract_code': '{\n    using Math for uint256;\n\n    /**\n     * @notice Emitted when a user opts into an action or agreement.\n     * @param id The unique identifier of the opt-in action.\n     * @param user The address of the user who opted in.\n     */\n    event OptedIn(uint256 indexed id, address user);\n\n    /**\n     * @notice Emitted when a reward pool is created.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     */\n    event RewardPoolCreated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @notice Emitted when a reward pool is updated.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The new start timestamp of the reward pool.\n     * @param endTimestamp_ The new end timestamp of the reward pool.\n     * @param name_ The new name of the reward pool.\n     */\n    event RewardPoolUpdated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    IERC20 public immutable altToken;\n    IERC1155 public immutable erc1155StakedALT;\n    uint256 public immutable erc1155TokenID;\n\n    struct RewardPoolData {\n        uint64 startTimestamp;\n        uint64 endTimestamp;\n        string name;\n    }\n\n    uint256 public totalRewardPools;\n    mapping(uint256 => RewardPoolData) public RewardPools;\n    mapping(uint256 => mapping(address => bool)) public optedInUsers;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IERC1155 erc1155StakedALT_, uint256 erc1155TokenID_, IERC20 altToken_) {\n        if (address(erc1155StakedALT_) == address(0) || address(altToken_) == address(0)) {\n            revert ZeroAddress();\n        }\n        if (erc1155TokenID_ == 0) {\n            revert InvalidID();\n        }\n        erc1155StakedALT = erc1155StakedALT_;\n        erc1155TokenID = erc1155TokenID_;\n        altToken = altToken_;\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner, string memory name_, string memory symbol_) external initializer {\n        __Ownable_init(initialOwner);\n        __ERC20_init(name_, symbol_);\n    }\n\n    /**\n     * @notice Creates a new reward pool with the specified name, start, and end timestamps.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can create a reward pool.\n     */\n    function createRewardPool(uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) external onlyOwner {\n        if (block.timestamp > startTimestamp_) {\n            revert InvalidStartTime();\n        }\n        if (startTimestamp_ >= endTimestamp_) {\n            revert InvalidEndTime();\n        }\n        ++totalRewardPools;\n        uint256 id = totalRewardPools;\n\n        emit RewardPoolCreated(id, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @notice Updates an existing reward pool with the specified ID, name, start, and end timestamps.\n     * @param id_ The ID of the reward pool to set or update.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can set or update a reward pool.\n     */\n    function updateRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_)\n        external\n        onlyOwner\n    {\n        emit RewardPoolUpdated(id_, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id_, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @dev Allows a user to opt into a specific opt-in period.\n     * @param id The identifier of the opt-in period.\n     */\n    function optIn(uint256 id) external {\n        RewardPoolData memory rewardPoolData = RewardPools[id];\n\n        // If the rewardPoolData is not initialized\n        if (rewardPoolData.endTimestamp == 0) {\n            // Note: When initialized, endTimestamp is greater than startTimestamp\n            // Therefore. endTimestamp is always greater than 0.\n            revert InvalidID();\n        }\n\n        if (block.timestamp < rewardPoolData.startTimestamp) {\n            revert OptInPeriodNotStarted();\n        }\n\n        if (block.timestamp > rewardPoolData.endTimestamp) {\n            revert OptInPeriodEnded();\n        }\n\n        address sender = _msgSender();\n\n        if (balanceOf(sender) == 0) {\n            revert ZeroShare();\n        }\n\n        optedInUsers[id][sender] = true;\n        emit OptedIn(id, sender);\n    }\n\n    /**\n     * @notice Stakes all available alternative tokens into the staking contract.\n     * @dev This function will approve and then stake the total balance of altTokens held by this vault.\n     */\n    function stake() public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n\n        uint256 balance = altToken.balanceOf(thisVault);\n        altToken.approve(address(stk), balance);\n        stk.stake(thisVault, operator, balance);\n    }\n\n    /**\n     * @notice Claims rewards from the staking contract.\n     */\n    function claim(uint16 distributionId) public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n        stk.claimRewards(distributionId, thisVault, operator, type(uint256).max);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset\'s decimals. This\n     * "original" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset\'s decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC4626-asset}.\n     */\n    function asset() public view virtual returns (address) {\n        return address(erc1155StakedALT);\n    }\n\n    /**\n     * @dev See {IERC4626-totalAssets}.\n     */\n    function totalAssets() public view virtual returns (uint256) {\n        return erc1155StakedALT.balanceOf(address(this), erc1155TokenID);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToShares}.\n     */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToAssets}.\n     */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxDeposit}.\n     */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxMint}.\n     */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxWithdraw}.\n     */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxRedeem}.\n     */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /**\n     * @dev See {IERC4626-previewDeposit}.\n     */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-previewMint}.\n     */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewWithdraw}.\n     */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewRedeem}.\n     */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-deposit}.\n     */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev See {IERC4626-withdraw}.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-redeem}.\n     */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory)\n        external\n        pure\n        returns (bytes4)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 1, totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 1, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        erc1155StakedALT.safeTransferFrom(caller, address(this), erc1155TokenID, assets, "");\n\n        _mint(receiver, shares);\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares)\n        internal\n        virtual\n    {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If erc1155StakedALT is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        emit Withdraw(caller, receiver, owner, assets, shares);\n        erc1155StakedALT.safeTransferFrom(address(this), receiver, erc1155TokenID, assets, "");\n    }\n\n    function _setRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) internal {\n        RewardPools[id_] = RewardPoolData({startTimestamp: startTimestamp_, endTimestamp: endTimestamp_, name: name_});\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC4626Vault.updateRewardPool', 'start_line': 369, 'end_line': 375, 'offset_start': 14447, 'offset_end': 14742, 'content': 'function updateRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_)\n        external\n        onlyOwner\n    {\n        emit RewardPoolUpdated(id_, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id_, startTimestamp_, endTimestamp_, name_);\n    }', 'contract_name': 'ERC4626Vault', 'contract_code': '{\n    using Math for uint256;\n\n    /**\n     * @notice Emitted when a user opts into an action or agreement.\n     * @param id The unique identifier of the opt-in action.\n     * @param user The address of the user who opted in.\n     */\n    event OptedIn(uint256 indexed id, address user);\n\n    /**\n     * @notice Emitted when a reward pool is created.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     */\n    event RewardPoolCreated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @notice Emitted when a reward pool is updated.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The new start timestamp of the reward pool.\n     * @param endTimestamp_ The new end timestamp of the reward pool.\n     * @param name_ The new name of the reward pool.\n     */\n    event RewardPoolUpdated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    IERC20 public immutable altToken;\n    IERC1155 public immutable erc1155StakedALT;\n    uint256 public immutable erc1155TokenID;\n\n    struct RewardPoolData {\n        uint64 startTimestamp;\n        uint64 endTimestamp;\n        string name;\n    }\n\n    uint256 public totalRewardPools;\n    mapping(uint256 => RewardPoolData) public RewardPools;\n    mapping(uint256 => mapping(address => bool)) public optedInUsers;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IERC1155 erc1155StakedALT_, uint256 erc1155TokenID_, IERC20 altToken_) {\n        if (address(erc1155StakedALT_) == address(0) || address(altToken_) == address(0)) {\n            revert ZeroAddress();\n        }\n        if (erc1155TokenID_ == 0) {\n            revert InvalidID();\n        }\n        erc1155StakedALT = erc1155StakedALT_;\n        erc1155TokenID = erc1155TokenID_;\n        altToken = altToken_;\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner, string memory name_, string memory symbol_) external initializer {\n        __Ownable_init(initialOwner);\n        __ERC20_init(name_, symbol_);\n    }\n\n    /**\n     * @notice Creates a new reward pool with the specified name, start, and end timestamps.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can create a reward pool.\n     */\n    function createRewardPool(uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) external onlyOwner {\n        if (block.timestamp > startTimestamp_) {\n            revert InvalidStartTime();\n        }\n        if (startTimestamp_ >= endTimestamp_) {\n            revert InvalidEndTime();\n        }\n        ++totalRewardPools;\n        uint256 id = totalRewardPools;\n\n        emit RewardPoolCreated(id, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @notice Updates an existing reward pool with the specified ID, name, start, and end timestamps.\n     * @param id_ The ID of the reward pool to set or update.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can set or update a reward pool.\n     */\n    function updateRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_)\n        external\n        onlyOwner\n    {\n        emit RewardPoolUpdated(id_, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id_, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @dev Allows a user to opt into a specific opt-in period.\n     * @param id The identifier of the opt-in period.\n     */\n    function optIn(uint256 id) external {\n        RewardPoolData memory rewardPoolData = RewardPools[id];\n\n        // If the rewardPoolData is not initialized\n        if (rewardPoolData.endTimestamp == 0) {\n            // Note: When initialized, endTimestamp is greater than startTimestamp\n            // Therefore. endTimestamp is always greater than 0.\n            revert InvalidID();\n        }\n\n        if (block.timestamp < rewardPoolData.startTimestamp) {\n            revert OptInPeriodNotStarted();\n        }\n\n        if (block.timestamp > rewardPoolData.endTimestamp) {\n            revert OptInPeriodEnded();\n        }\n\n        address sender = _msgSender();\n\n        if (balanceOf(sender) == 0) {\n            revert ZeroShare();\n        }\n\n        optedInUsers[id][sender] = true;\n        emit OptedIn(id, sender);\n    }\n\n    /**\n     * @notice Stakes all available alternative tokens into the staking contract.\n     * @dev This function will approve and then stake the total balance of altTokens held by this vault.\n     */\n    function stake() public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n\n        uint256 balance = altToken.balanceOf(thisVault);\n        altToken.approve(address(stk), balance);\n        stk.stake(thisVault, operator, balance);\n    }\n\n    /**\n     * @notice Claims rewards from the staking contract.\n     */\n    function claim(uint16 distributionId) public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n        stk.claimRewards(distributionId, thisVault, operator, type(uint256).max);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset\'s decimals. This\n     * "original" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset\'s decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC4626-asset}.\n     */\n    function asset() public view virtual returns (address) {\n        return address(erc1155StakedALT);\n    }\n\n    /**\n     * @dev See {IERC4626-totalAssets}.\n     */\n    function totalAssets() public view virtual returns (uint256) {\n        return erc1155StakedALT.balanceOf(address(this), erc1155TokenID);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToShares}.\n     */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToAssets}.\n     */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxDeposit}.\n     */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxMint}.\n     */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxWithdraw}.\n     */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxRedeem}.\n     */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /**\n     * @dev See {IERC4626-previewDeposit}.\n     */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-previewMint}.\n     */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewWithdraw}.\n     */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewRedeem}.\n     */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-deposit}.\n     */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev See {IERC4626-withdraw}.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-redeem}.\n     */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory)\n        external\n        pure\n        returns (bytes4)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 1, totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 1, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        erc1155StakedALT.safeTransferFrom(caller, address(this), erc1155TokenID, assets, "");\n\n        _mint(receiver, shares);\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares)\n        internal\n        virtual\n    {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If erc1155StakedALT is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        emit Withdraw(caller, receiver, owner, assets, shares);\n        erc1155StakedALT.safeTransferFrom(address(this), receiver, erc1155TokenID, assets, "");\n    }\n\n    function _setRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) internal {\n        RewardPools[id_] = RewardPoolData({startTimestamp: startTimestamp_, endTimestamp: endTimestamp_, name: name_});\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC4626Vault.optIn', 'start_line': 381, 'end_line': 407, 'offset_start': 14883, 'offset_end': 15706, 'content': 'function optIn(uint256 id) external {\n        RewardPoolData memory rewardPoolData = RewardPools[id];\n\n        // If the rewardPoolData is not initialized\n        if (rewardPoolData.endTimestamp == 0) {\n            // Note: When initialized, endTimestamp is greater than startTimestamp\n            // Therefore. endTimestamp is always greater than 0.\n            revert InvalidID();\n        }\n\n        if (block.timestamp < rewardPoolData.startTimestamp) {\n            revert OptInPeriodNotStarted();\n        }\n\n        if (block.timestamp > rewardPoolData.endTimestamp) {\n            revert OptInPeriodEnded();\n        }\n\n        address sender = _msgSender();\n\n        if (balanceOf(sender) == 0) {\n            revert ZeroShare();\n        }\n\n        optedInUsers[id][sender] = true;\n        emit OptedIn(id, sender);\n    }', 'contract_name': 'ERC4626Vault', 'contract_code': '{\n    using Math for uint256;\n\n    /**\n     * @notice Emitted when a user opts into an action or agreement.\n     * @param id The unique identifier of the opt-in action.\n     * @param user The address of the user who opted in.\n     */\n    event OptedIn(uint256 indexed id, address user);\n\n    /**\n     * @notice Emitted when a reward pool is created.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     */\n    event RewardPoolCreated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @notice Emitted when a reward pool is updated.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The new start timestamp of the reward pool.\n     * @param endTimestamp_ The new end timestamp of the reward pool.\n     * @param name_ The new name of the reward pool.\n     */\n    event RewardPoolUpdated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    IERC20 public immutable altToken;\n    IERC1155 public immutable erc1155StakedALT;\n    uint256 public immutable erc1155TokenID;\n\n    struct RewardPoolData {\n        uint64 startTimestamp;\n        uint64 endTimestamp;\n        string name;\n    }\n\n    uint256 public totalRewardPools;\n    mapping(uint256 => RewardPoolData) public RewardPools;\n    mapping(uint256 => mapping(address => bool)) public optedInUsers;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IERC1155 erc1155StakedALT_, uint256 erc1155TokenID_, IERC20 altToken_) {\n        if (address(erc1155StakedALT_) == address(0) || address(altToken_) == address(0)) {\n            revert ZeroAddress();\n        }\n        if (erc1155TokenID_ == 0) {\n            revert InvalidID();\n        }\n        erc1155StakedALT = erc1155StakedALT_;\n        erc1155TokenID = erc1155TokenID_;\n        altToken = altToken_;\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner, string memory name_, string memory symbol_) external initializer {\n        __Ownable_init(initialOwner);\n        __ERC20_init(name_, symbol_);\n    }\n\n    /**\n     * @notice Creates a new reward pool with the specified name, start, and end timestamps.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can create a reward pool.\n     */\n    function createRewardPool(uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) external onlyOwner {\n        if (block.timestamp > startTimestamp_) {\n            revert InvalidStartTime();\n        }\n        if (startTimestamp_ >= endTimestamp_) {\n            revert InvalidEndTime();\n        }\n        ++totalRewardPools;\n        uint256 id = totalRewardPools;\n\n        emit RewardPoolCreated(id, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @notice Updates an existing reward pool with the specified ID, name, start, and end timestamps.\n     * @param id_ The ID of the reward pool to set or update.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can set or update a reward pool.\n     */\n    function updateRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_)\n        external\n        onlyOwner\n    {\n        emit RewardPoolUpdated(id_, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id_, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @dev Allows a user to opt into a specific opt-in period.\n     * @param id The identifier of the opt-in period.\n     */\n    function optIn(uint256 id) external {\n        RewardPoolData memory rewardPoolData = RewardPools[id];\n\n        // If the rewardPoolData is not initialized\n        if (rewardPoolData.endTimestamp == 0) {\n            // Note: When initialized, endTimestamp is greater than startTimestamp\n            // Therefore. endTimestamp is always greater than 0.\n            revert InvalidID();\n        }\n\n        if (block.timestamp < rewardPoolData.startTimestamp) {\n            revert OptInPeriodNotStarted();\n        }\n\n        if (block.timestamp > rewardPoolData.endTimestamp) {\n            revert OptInPeriodEnded();\n        }\n\n        address sender = _msgSender();\n\n        if (balanceOf(sender) == 0) {\n            revert ZeroShare();\n        }\n\n        optedInUsers[id][sender] = true;\n        emit OptedIn(id, sender);\n    }\n\n    /**\n     * @notice Stakes all available alternative tokens into the staking contract.\n     * @dev This function will approve and then stake the total balance of altTokens held by this vault.\n     */\n    function stake() public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n\n        uint256 balance = altToken.balanceOf(thisVault);\n        altToken.approve(address(stk), balance);\n        stk.stake(thisVault, operator, balance);\n    }\n\n    /**\n     * @notice Claims rewards from the staking contract.\n     */\n    function claim(uint16 distributionId) public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n        stk.claimRewards(distributionId, thisVault, operator, type(uint256).max);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset\'s decimals. This\n     * "original" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset\'s decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC4626-asset}.\n     */\n    function asset() public view virtual returns (address) {\n        return address(erc1155StakedALT);\n    }\n\n    /**\n     * @dev See {IERC4626-totalAssets}.\n     */\n    function totalAssets() public view virtual returns (uint256) {\n        return erc1155StakedALT.balanceOf(address(this), erc1155TokenID);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToShares}.\n     */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToAssets}.\n     */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxDeposit}.\n     */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxMint}.\n     */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxWithdraw}.\n     */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxRedeem}.\n     */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /**\n     * @dev See {IERC4626-previewDeposit}.\n     */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-previewMint}.\n     */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewWithdraw}.\n     */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewRedeem}.\n     */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-deposit}.\n     */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev See {IERC4626-withdraw}.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-redeem}.\n     */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory)\n        external\n        pure\n        returns (bytes4)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 1, totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 1, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        erc1155StakedALT.safeTransferFrom(caller, address(this), erc1155TokenID, assets, "");\n\n        _mint(receiver, shares);\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares)\n        internal\n        virtual\n    {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If erc1155StakedALT is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        emit Withdraw(caller, receiver, owner, assets, shares);\n        erc1155StakedALT.safeTransferFrom(address(this), receiver, erc1155TokenID, assets, "");\n    }\n\n    function _setRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) internal {\n        RewardPools[id_] = RewardPoolData({startTimestamp: startTimestamp_, endTimestamp: endTimestamp_, name: name_});\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC4626Vault.stake', 'start_line': 413, 'end_line': 421, 'offset_start': 15916, 'offset_end': 16284, 'content': 'function stake() public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n\n        uint256 balance = altToken.balanceOf(thisVault);\n        altToken.approve(address(stk), balance);\n        stk.stake(thisVault, operator, balance);\n    }', 'contract_name': 'ERC4626Vault', 'contract_code': '{\n    using Math for uint256;\n\n    /**\n     * @notice Emitted when a user opts into an action or agreement.\n     * @param id The unique identifier of the opt-in action.\n     * @param user The address of the user who opted in.\n     */\n    event OptedIn(uint256 indexed id, address user);\n\n    /**\n     * @notice Emitted when a reward pool is created.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     */\n    event RewardPoolCreated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @notice Emitted when a reward pool is updated.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The new start timestamp of the reward pool.\n     * @param endTimestamp_ The new end timestamp of the reward pool.\n     * @param name_ The new name of the reward pool.\n     */\n    event RewardPoolUpdated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    IERC20 public immutable altToken;\n    IERC1155 public immutable erc1155StakedALT;\n    uint256 public immutable erc1155TokenID;\n\n    struct RewardPoolData {\n        uint64 startTimestamp;\n        uint64 endTimestamp;\n        string name;\n    }\n\n    uint256 public totalRewardPools;\n    mapping(uint256 => RewardPoolData) public RewardPools;\n    mapping(uint256 => mapping(address => bool)) public optedInUsers;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IERC1155 erc1155StakedALT_, uint256 erc1155TokenID_, IERC20 altToken_) {\n        if (address(erc1155StakedALT_) == address(0) || address(altToken_) == address(0)) {\n            revert ZeroAddress();\n        }\n        if (erc1155TokenID_ == 0) {\n            revert InvalidID();\n        }\n        erc1155StakedALT = erc1155StakedALT_;\n        erc1155TokenID = erc1155TokenID_;\n        altToken = altToken_;\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner, string memory name_, string memory symbol_) external initializer {\n        __Ownable_init(initialOwner);\n        __ERC20_init(name_, symbol_);\n    }\n\n    /**\n     * @notice Creates a new reward pool with the specified name, start, and end timestamps.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can create a reward pool.\n     */\n    function createRewardPool(uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) external onlyOwner {\n        if (block.timestamp > startTimestamp_) {\n            revert InvalidStartTime();\n        }\n        if (startTimestamp_ >= endTimestamp_) {\n            revert InvalidEndTime();\n        }\n        ++totalRewardPools;\n        uint256 id = totalRewardPools;\n\n        emit RewardPoolCreated(id, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @notice Updates an existing reward pool with the specified ID, name, start, and end timestamps.\n     * @param id_ The ID of the reward pool to set or update.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can set or update a reward pool.\n     */\n    function updateRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_)\n        external\n        onlyOwner\n    {\n        emit RewardPoolUpdated(id_, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id_, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @dev Allows a user to opt into a specific opt-in period.\n     * @param id The identifier of the opt-in period.\n     */\n    function optIn(uint256 id) external {\n        RewardPoolData memory rewardPoolData = RewardPools[id];\n\n        // If the rewardPoolData is not initialized\n        if (rewardPoolData.endTimestamp == 0) {\n            // Note: When initialized, endTimestamp is greater than startTimestamp\n            // Therefore. endTimestamp is always greater than 0.\n            revert InvalidID();\n        }\n\n        if (block.timestamp < rewardPoolData.startTimestamp) {\n            revert OptInPeriodNotStarted();\n        }\n\n        if (block.timestamp > rewardPoolData.endTimestamp) {\n            revert OptInPeriodEnded();\n        }\n\n        address sender = _msgSender();\n\n        if (balanceOf(sender) == 0) {\n            revert ZeroShare();\n        }\n\n        optedInUsers[id][sender] = true;\n        emit OptedIn(id, sender);\n    }\n\n    /**\n     * @notice Stakes all available alternative tokens into the staking contract.\n     * @dev This function will approve and then stake the total balance of altTokens held by this vault.\n     */\n    function stake() public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n\n        uint256 balance = altToken.balanceOf(thisVault);\n        altToken.approve(address(stk), balance);\n        stk.stake(thisVault, operator, balance);\n    }\n\n    /**\n     * @notice Claims rewards from the staking contract.\n     */\n    function claim(uint16 distributionId) public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n        stk.claimRewards(distributionId, thisVault, operator, type(uint256).max);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset\'s decimals. This\n     * "original" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset\'s decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC4626-asset}.\n     */\n    function asset() public view virtual returns (address) {\n        return address(erc1155StakedALT);\n    }\n\n    /**\n     * @dev See {IERC4626-totalAssets}.\n     */\n    function totalAssets() public view virtual returns (uint256) {\n        return erc1155StakedALT.balanceOf(address(this), erc1155TokenID);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToShares}.\n     */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToAssets}.\n     */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxDeposit}.\n     */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxMint}.\n     */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxWithdraw}.\n     */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxRedeem}.\n     */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /**\n     * @dev See {IERC4626-previewDeposit}.\n     */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-previewMint}.\n     */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewWithdraw}.\n     */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewRedeem}.\n     */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-deposit}.\n     */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev See {IERC4626-withdraw}.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-redeem}.\n     */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory)\n        external\n        pure\n        returns (bytes4)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 1, totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 1, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        erc1155StakedALT.safeTransferFrom(caller, address(this), erc1155TokenID, assets, "");\n\n        _mint(receiver, shares);\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares)\n        internal\n        virtual\n    {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If erc1155StakedALT is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        emit Withdraw(caller, receiver, owner, assets, shares);\n        erc1155StakedALT.safeTransferFrom(address(this), receiver, erc1155TokenID, assets, "");\n    }\n\n    function _setRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) internal {\n        RewardPools[id_] = RewardPoolData({startTimestamp: startTimestamp_, endTimestamp: endTimestamp_, name: name_});\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC4626Vault.claim', 'start_line': 426, 'end_line': 431, 'offset_start': 16364, 'offset_end': 16679, 'content': 'function claim(uint16 distributionId) public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n        stk.claimRewards(distributionId, thisVault, operator, type(uint256).max);\n    }', 'contract_name': 'ERC4626Vault', 'contract_code': '{\n    using Math for uint256;\n\n    /**\n     * @notice Emitted when a user opts into an action or agreement.\n     * @param id The unique identifier of the opt-in action.\n     * @param user The address of the user who opted in.\n     */\n    event OptedIn(uint256 indexed id, address user);\n\n    /**\n     * @notice Emitted when a reward pool is created.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     */\n    event RewardPoolCreated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @notice Emitted when a reward pool is updated.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The new start timestamp of the reward pool.\n     * @param endTimestamp_ The new end timestamp of the reward pool.\n     * @param name_ The new name of the reward pool.\n     */\n    event RewardPoolUpdated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    IERC20 public immutable altToken;\n    IERC1155 public immutable erc1155StakedALT;\n    uint256 public immutable erc1155TokenID;\n\n    struct RewardPoolData {\n        uint64 startTimestamp;\n        uint64 endTimestamp;\n        string name;\n    }\n\n    uint256 public totalRewardPools;\n    mapping(uint256 => RewardPoolData) public RewardPools;\n    mapping(uint256 => mapping(address => bool)) public optedInUsers;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IERC1155 erc1155StakedALT_, uint256 erc1155TokenID_, IERC20 altToken_) {\n        if (address(erc1155StakedALT_) == address(0) || address(altToken_) == address(0)) {\n            revert ZeroAddress();\n        }\n        if (erc1155TokenID_ == 0) {\n            revert InvalidID();\n        }\n        erc1155StakedALT = erc1155StakedALT_;\n        erc1155TokenID = erc1155TokenID_;\n        altToken = altToken_;\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner, string memory name_, string memory symbol_) external initializer {\n        __Ownable_init(initialOwner);\n        __ERC20_init(name_, symbol_);\n    }\n\n    /**\n     * @notice Creates a new reward pool with the specified name, start, and end timestamps.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can create a reward pool.\n     */\n    function createRewardPool(uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) external onlyOwner {\n        if (block.timestamp > startTimestamp_) {\n            revert InvalidStartTime();\n        }\n        if (startTimestamp_ >= endTimestamp_) {\n            revert InvalidEndTime();\n        }\n        ++totalRewardPools;\n        uint256 id = totalRewardPools;\n\n        emit RewardPoolCreated(id, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @notice Updates an existing reward pool with the specified ID, name, start, and end timestamps.\n     * @param id_ The ID of the reward pool to set or update.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can set or update a reward pool.\n     */\n    function updateRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_)\n        external\n        onlyOwner\n    {\n        emit RewardPoolUpdated(id_, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id_, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @dev Allows a user to opt into a specific opt-in period.\n     * @param id The identifier of the opt-in period.\n     */\n    function optIn(uint256 id) external {\n        RewardPoolData memory rewardPoolData = RewardPools[id];\n\n        // If the rewardPoolData is not initialized\n        if (rewardPoolData.endTimestamp == 0) {\n            // Note: When initialized, endTimestamp is greater than startTimestamp\n            // Therefore. endTimestamp is always greater than 0.\n            revert InvalidID();\n        }\n\n        if (block.timestamp < rewardPoolData.startTimestamp) {\n            revert OptInPeriodNotStarted();\n        }\n\n        if (block.timestamp > rewardPoolData.endTimestamp) {\n            revert OptInPeriodEnded();\n        }\n\n        address sender = _msgSender();\n\n        if (balanceOf(sender) == 0) {\n            revert ZeroShare();\n        }\n\n        optedInUsers[id][sender] = true;\n        emit OptedIn(id, sender);\n    }\n\n    /**\n     * @notice Stakes all available alternative tokens into the staking contract.\n     * @dev This function will approve and then stake the total balance of altTokens held by this vault.\n     */\n    function stake() public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n\n        uint256 balance = altToken.balanceOf(thisVault);\n        altToken.approve(address(stk), balance);\n        stk.stake(thisVault, operator, balance);\n    }\n\n    /**\n     * @notice Claims rewards from the staking contract.\n     */\n    function claim(uint16 distributionId) public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n        stk.claimRewards(distributionId, thisVault, operator, type(uint256).max);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset\'s decimals. This\n     * "original" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset\'s decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC4626-asset}.\n     */\n    function asset() public view virtual returns (address) {\n        return address(erc1155StakedALT);\n    }\n\n    /**\n     * @dev See {IERC4626-totalAssets}.\n     */\n    function totalAssets() public view virtual returns (uint256) {\n        return erc1155StakedALT.balanceOf(address(this), erc1155TokenID);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToShares}.\n     */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToAssets}.\n     */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxDeposit}.\n     */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxMint}.\n     */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxWithdraw}.\n     */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxRedeem}.\n     */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /**\n     * @dev See {IERC4626-previewDeposit}.\n     */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-previewMint}.\n     */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewWithdraw}.\n     */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewRedeem}.\n     */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-deposit}.\n     */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev See {IERC4626-withdraw}.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-redeem}.\n     */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory)\n        external\n        pure\n        returns (bytes4)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 1, totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 1, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        erc1155StakedALT.safeTransferFrom(caller, address(this), erc1155TokenID, assets, "");\n\n        _mint(receiver, shares);\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares)\n        internal\n        virtual\n    {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If erc1155StakedALT is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        emit Withdraw(caller, receiver, owner, assets, shares);\n        erc1155StakedALT.safeTransferFrom(address(this), receiver, erc1155TokenID, assets, "");\n    }\n\n    function _setRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) internal {\n        RewardPools[id_] = RewardPoolData({startTimestamp: startTimestamp_, endTimestamp: endTimestamp_, name: name_});\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC4626Vault.decimals', 'start_line': 440, 'end_line': 442, 'offset_start': 17085, 'offset_end': 17209, 'content': 'function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n        return 18;\n    }', 'contract_name': 'ERC4626Vault', 'contract_code': '{\n    using Math for uint256;\n\n    /**\n     * @notice Emitted when a user opts into an action or agreement.\n     * @param id The unique identifier of the opt-in action.\n     * @param user The address of the user who opted in.\n     */\n    event OptedIn(uint256 indexed id, address user);\n\n    /**\n     * @notice Emitted when a reward pool is created.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     */\n    event RewardPoolCreated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @notice Emitted when a reward pool is updated.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The new start timestamp of the reward pool.\n     * @param endTimestamp_ The new end timestamp of the reward pool.\n     * @param name_ The new name of the reward pool.\n     */\n    event RewardPoolUpdated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    IERC20 public immutable altToken;\n    IERC1155 public immutable erc1155StakedALT;\n    uint256 public immutable erc1155TokenID;\n\n    struct RewardPoolData {\n        uint64 startTimestamp;\n        uint64 endTimestamp;\n        string name;\n    }\n\n    uint256 public totalRewardPools;\n    mapping(uint256 => RewardPoolData) public RewardPools;\n    mapping(uint256 => mapping(address => bool)) public optedInUsers;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IERC1155 erc1155StakedALT_, uint256 erc1155TokenID_, IERC20 altToken_) {\n        if (address(erc1155StakedALT_) == address(0) || address(altToken_) == address(0)) {\n            revert ZeroAddress();\n        }\n        if (erc1155TokenID_ == 0) {\n            revert InvalidID();\n        }\n        erc1155StakedALT = erc1155StakedALT_;\n        erc1155TokenID = erc1155TokenID_;\n        altToken = altToken_;\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner, string memory name_, string memory symbol_) external initializer {\n        __Ownable_init(initialOwner);\n        __ERC20_init(name_, symbol_);\n    }\n\n    /**\n     * @notice Creates a new reward pool with the specified name, start, and end timestamps.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can create a reward pool.\n     */\n    function createRewardPool(uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) external onlyOwner {\n        if (block.timestamp > startTimestamp_) {\n            revert InvalidStartTime();\n        }\n        if (startTimestamp_ >= endTimestamp_) {\n            revert InvalidEndTime();\n        }\n        ++totalRewardPools;\n        uint256 id = totalRewardPools;\n\n        emit RewardPoolCreated(id, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @notice Updates an existing reward pool with the specified ID, name, start, and end timestamps.\n     * @param id_ The ID of the reward pool to set or update.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can set or update a reward pool.\n     */\n    function updateRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_)\n        external\n        onlyOwner\n    {\n        emit RewardPoolUpdated(id_, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id_, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @dev Allows a user to opt into a specific opt-in period.\n     * @param id The identifier of the opt-in period.\n     */\n    function optIn(uint256 id) external {\n        RewardPoolData memory rewardPoolData = RewardPools[id];\n\n        // If the rewardPoolData is not initialized\n        if (rewardPoolData.endTimestamp == 0) {\n            // Note: When initialized, endTimestamp is greater than startTimestamp\n            // Therefore. endTimestamp is always greater than 0.\n            revert InvalidID();\n        }\n\n        if (block.timestamp < rewardPoolData.startTimestamp) {\n            revert OptInPeriodNotStarted();\n        }\n\n        if (block.timestamp > rewardPoolData.endTimestamp) {\n            revert OptInPeriodEnded();\n        }\n\n        address sender = _msgSender();\n\n        if (balanceOf(sender) == 0) {\n            revert ZeroShare();\n        }\n\n        optedInUsers[id][sender] = true;\n        emit OptedIn(id, sender);\n    }\n\n    /**\n     * @notice Stakes all available alternative tokens into the staking contract.\n     * @dev This function will approve and then stake the total balance of altTokens held by this vault.\n     */\n    function stake() public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n\n        uint256 balance = altToken.balanceOf(thisVault);\n        altToken.approve(address(stk), balance);\n        stk.stake(thisVault, operator, balance);\n    }\n\n    /**\n     * @notice Claims rewards from the staking contract.\n     */\n    function claim(uint16 distributionId) public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n        stk.claimRewards(distributionId, thisVault, operator, type(uint256).max);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset\'s decimals. This\n     * "original" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset\'s decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC4626-asset}.\n     */\n    function asset() public view virtual returns (address) {\n        return address(erc1155StakedALT);\n    }\n\n    /**\n     * @dev See {IERC4626-totalAssets}.\n     */\n    function totalAssets() public view virtual returns (uint256) {\n        return erc1155StakedALT.balanceOf(address(this), erc1155TokenID);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToShares}.\n     */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToAssets}.\n     */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxDeposit}.\n     */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxMint}.\n     */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxWithdraw}.\n     */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxRedeem}.\n     */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /**\n     * @dev See {IERC4626-previewDeposit}.\n     */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-previewMint}.\n     */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewWithdraw}.\n     */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewRedeem}.\n     */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-deposit}.\n     */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev See {IERC4626-withdraw}.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-redeem}.\n     */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory)\n        external\n        pure\n        returns (bytes4)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 1, totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 1, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        erc1155StakedALT.safeTransferFrom(caller, address(this), erc1155TokenID, assets, "");\n\n        _mint(receiver, shares);\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares)\n        internal\n        virtual\n    {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If erc1155StakedALT is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        emit Withdraw(caller, receiver, owner, assets, shares);\n        erc1155StakedALT.safeTransferFrom(address(this), receiver, erc1155TokenID, assets, "");\n    }\n\n    function _setRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) internal {\n        RewardPools[id_] = RewardPoolData({startTimestamp: startTimestamp_, endTimestamp: endTimestamp_, name: name_});\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC4626Vault.asset', 'start_line': 447, 'end_line': 449, 'offset_start': 17266, 'offset_end': 17369, 'content': 'function asset() public view virtual returns (address) {\n        return address(erc1155StakedALT);\n    }', 'contract_name': 'ERC4626Vault', 'contract_code': '{\n    using Math for uint256;\n\n    /**\n     * @notice Emitted when a user opts into an action or agreement.\n     * @param id The unique identifier of the opt-in action.\n     * @param user The address of the user who opted in.\n     */\n    event OptedIn(uint256 indexed id, address user);\n\n    /**\n     * @notice Emitted when a reward pool is created.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     */\n    event RewardPoolCreated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @notice Emitted when a reward pool is updated.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The new start timestamp of the reward pool.\n     * @param endTimestamp_ The new end timestamp of the reward pool.\n     * @param name_ The new name of the reward pool.\n     */\n    event RewardPoolUpdated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    IERC20 public immutable altToken;\n    IERC1155 public immutable erc1155StakedALT;\n    uint256 public immutable erc1155TokenID;\n\n    struct RewardPoolData {\n        uint64 startTimestamp;\n        uint64 endTimestamp;\n        string name;\n    }\n\n    uint256 public totalRewardPools;\n    mapping(uint256 => RewardPoolData) public RewardPools;\n    mapping(uint256 => mapping(address => bool)) public optedInUsers;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IERC1155 erc1155StakedALT_, uint256 erc1155TokenID_, IERC20 altToken_) {\n        if (address(erc1155StakedALT_) == address(0) || address(altToken_) == address(0)) {\n            revert ZeroAddress();\n        }\n        if (erc1155TokenID_ == 0) {\n            revert InvalidID();\n        }\n        erc1155StakedALT = erc1155StakedALT_;\n        erc1155TokenID = erc1155TokenID_;\n        altToken = altToken_;\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner, string memory name_, string memory symbol_) external initializer {\n        __Ownable_init(initialOwner);\n        __ERC20_init(name_, symbol_);\n    }\n\n    /**\n     * @notice Creates a new reward pool with the specified name, start, and end timestamps.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can create a reward pool.\n     */\n    function createRewardPool(uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) external onlyOwner {\n        if (block.timestamp > startTimestamp_) {\n            revert InvalidStartTime();\n        }\n        if (startTimestamp_ >= endTimestamp_) {\n            revert InvalidEndTime();\n        }\n        ++totalRewardPools;\n        uint256 id = totalRewardPools;\n\n        emit RewardPoolCreated(id, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @notice Updates an existing reward pool with the specified ID, name, start, and end timestamps.\n     * @param id_ The ID of the reward pool to set or update.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can set or update a reward pool.\n     */\n    function updateRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_)\n        external\n        onlyOwner\n    {\n        emit RewardPoolUpdated(id_, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id_, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @dev Allows a user to opt into a specific opt-in period.\n     * @param id The identifier of the opt-in period.\n     */\n    function optIn(uint256 id) external {\n        RewardPoolData memory rewardPoolData = RewardPools[id];\n\n        // If the rewardPoolData is not initialized\n        if (rewardPoolData.endTimestamp == 0) {\n            // Note: When initialized, endTimestamp is greater than startTimestamp\n            // Therefore. endTimestamp is always greater than 0.\n            revert InvalidID();\n        }\n\n        if (block.timestamp < rewardPoolData.startTimestamp) {\n            revert OptInPeriodNotStarted();\n        }\n\n        if (block.timestamp > rewardPoolData.endTimestamp) {\n            revert OptInPeriodEnded();\n        }\n\n        address sender = _msgSender();\n\n        if (balanceOf(sender) == 0) {\n            revert ZeroShare();\n        }\n\n        optedInUsers[id][sender] = true;\n        emit OptedIn(id, sender);\n    }\n\n    /**\n     * @notice Stakes all available alternative tokens into the staking contract.\n     * @dev This function will approve and then stake the total balance of altTokens held by this vault.\n     */\n    function stake() public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n\n        uint256 balance = altToken.balanceOf(thisVault);\n        altToken.approve(address(stk), balance);\n        stk.stake(thisVault, operator, balance);\n    }\n\n    /**\n     * @notice Claims rewards from the staking contract.\n     */\n    function claim(uint16 distributionId) public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n        stk.claimRewards(distributionId, thisVault, operator, type(uint256).max);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset\'s decimals. This\n     * "original" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset\'s decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC4626-asset}.\n     */\n    function asset() public view virtual returns (address) {\n        return address(erc1155StakedALT);\n    }\n\n    /**\n     * @dev See {IERC4626-totalAssets}.\n     */\n    function totalAssets() public view virtual returns (uint256) {\n        return erc1155StakedALT.balanceOf(address(this), erc1155TokenID);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToShares}.\n     */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToAssets}.\n     */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxDeposit}.\n     */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxMint}.\n     */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxWithdraw}.\n     */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxRedeem}.\n     */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /**\n     * @dev See {IERC4626-previewDeposit}.\n     */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-previewMint}.\n     */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewWithdraw}.\n     */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewRedeem}.\n     */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-deposit}.\n     */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev See {IERC4626-withdraw}.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-redeem}.\n     */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory)\n        external\n        pure\n        returns (bytes4)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 1, totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 1, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        erc1155StakedALT.safeTransferFrom(caller, address(this), erc1155TokenID, assets, "");\n\n        _mint(receiver, shares);\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares)\n        internal\n        virtual\n    {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If erc1155StakedALT is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        emit Withdraw(caller, receiver, owner, assets, shares);\n        erc1155StakedALT.safeTransferFrom(address(this), receiver, erc1155TokenID, assets, "");\n    }\n\n    function _setRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) internal {\n        RewardPools[id_] = RewardPoolData({startTimestamp: startTimestamp_, endTimestamp: endTimestamp_, name: name_});\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC4626Vault.totalAssets', 'start_line': 454, 'end_line': 456, 'offset_start': 17432, 'offset_end': 17573, 'content': 'function totalAssets() public view virtual returns (uint256) {\n        return erc1155StakedALT.balanceOf(address(this), erc1155TokenID);\n    }', 'contract_name': 'ERC4626Vault', 'contract_code': '{\n    using Math for uint256;\n\n    /**\n     * @notice Emitted when a user opts into an action or agreement.\n     * @param id The unique identifier of the opt-in action.\n     * @param user The address of the user who opted in.\n     */\n    event OptedIn(uint256 indexed id, address user);\n\n    /**\n     * @notice Emitted when a reward pool is created.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     */\n    event RewardPoolCreated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @notice Emitted when a reward pool is updated.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The new start timestamp of the reward pool.\n     * @param endTimestamp_ The new end timestamp of the reward pool.\n     * @param name_ The new name of the reward pool.\n     */\n    event RewardPoolUpdated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    IERC20 public immutable altToken;\n    IERC1155 public immutable erc1155StakedALT;\n    uint256 public immutable erc1155TokenID;\n\n    struct RewardPoolData {\n        uint64 startTimestamp;\n        uint64 endTimestamp;\n        string name;\n    }\n\n    uint256 public totalRewardPools;\n    mapping(uint256 => RewardPoolData) public RewardPools;\n    mapping(uint256 => mapping(address => bool)) public optedInUsers;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IERC1155 erc1155StakedALT_, uint256 erc1155TokenID_, IERC20 altToken_) {\n        if (address(erc1155StakedALT_) == address(0) || address(altToken_) == address(0)) {\n            revert ZeroAddress();\n        }\n        if (erc1155TokenID_ == 0) {\n            revert InvalidID();\n        }\n        erc1155StakedALT = erc1155StakedALT_;\n        erc1155TokenID = erc1155TokenID_;\n        altToken = altToken_;\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner, string memory name_, string memory symbol_) external initializer {\n        __Ownable_init(initialOwner);\n        __ERC20_init(name_, symbol_);\n    }\n\n    /**\n     * @notice Creates a new reward pool with the specified name, start, and end timestamps.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can create a reward pool.\n     */\n    function createRewardPool(uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) external onlyOwner {\n        if (block.timestamp > startTimestamp_) {\n            revert InvalidStartTime();\n        }\n        if (startTimestamp_ >= endTimestamp_) {\n            revert InvalidEndTime();\n        }\n        ++totalRewardPools;\n        uint256 id = totalRewardPools;\n\n        emit RewardPoolCreated(id, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @notice Updates an existing reward pool with the specified ID, name, start, and end timestamps.\n     * @param id_ The ID of the reward pool to set or update.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can set or update a reward pool.\n     */\n    function updateRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_)\n        external\n        onlyOwner\n    {\n        emit RewardPoolUpdated(id_, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id_, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @dev Allows a user to opt into a specific opt-in period.\n     * @param id The identifier of the opt-in period.\n     */\n    function optIn(uint256 id) external {\n        RewardPoolData memory rewardPoolData = RewardPools[id];\n\n        // If the rewardPoolData is not initialized\n        if (rewardPoolData.endTimestamp == 0) {\n            // Note: When initialized, endTimestamp is greater than startTimestamp\n            // Therefore. endTimestamp is always greater than 0.\n            revert InvalidID();\n        }\n\n        if (block.timestamp < rewardPoolData.startTimestamp) {\n            revert OptInPeriodNotStarted();\n        }\n\n        if (block.timestamp > rewardPoolData.endTimestamp) {\n            revert OptInPeriodEnded();\n        }\n\n        address sender = _msgSender();\n\n        if (balanceOf(sender) == 0) {\n            revert ZeroShare();\n        }\n\n        optedInUsers[id][sender] = true;\n        emit OptedIn(id, sender);\n    }\n\n    /**\n     * @notice Stakes all available alternative tokens into the staking contract.\n     * @dev This function will approve and then stake the total balance of altTokens held by this vault.\n     */\n    function stake() public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n\n        uint256 balance = altToken.balanceOf(thisVault);\n        altToken.approve(address(stk), balance);\n        stk.stake(thisVault, operator, balance);\n    }\n\n    /**\n     * @notice Claims rewards from the staking contract.\n     */\n    function claim(uint16 distributionId) public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n        stk.claimRewards(distributionId, thisVault, operator, type(uint256).max);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset\'s decimals. This\n     * "original" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset\'s decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC4626-asset}.\n     */\n    function asset() public view virtual returns (address) {\n        return address(erc1155StakedALT);\n    }\n\n    /**\n     * @dev See {IERC4626-totalAssets}.\n     */\n    function totalAssets() public view virtual returns (uint256) {\n        return erc1155StakedALT.balanceOf(address(this), erc1155TokenID);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToShares}.\n     */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToAssets}.\n     */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxDeposit}.\n     */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxMint}.\n     */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxWithdraw}.\n     */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxRedeem}.\n     */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /**\n     * @dev See {IERC4626-previewDeposit}.\n     */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-previewMint}.\n     */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewWithdraw}.\n     */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewRedeem}.\n     */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-deposit}.\n     */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev See {IERC4626-withdraw}.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-redeem}.\n     */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory)\n        external\n        pure\n        returns (bytes4)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 1, totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 1, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        erc1155StakedALT.safeTransferFrom(caller, address(this), erc1155TokenID, assets, "");\n\n        _mint(receiver, shares);\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares)\n        internal\n        virtual\n    {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If erc1155StakedALT is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        emit Withdraw(caller, receiver, owner, assets, shares);\n        erc1155StakedALT.safeTransferFrom(address(this), receiver, erc1155TokenID, assets, "");\n    }\n\n    function _setRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) internal {\n        RewardPools[id_] = RewardPoolData({startTimestamp: startTimestamp_, endTimestamp: endTimestamp_, name: name_});\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC4626Vault.convertToShares', 'start_line': 461, 'end_line': 463, 'offset_start': 17640, 'offset_end': 17787, 'content': 'function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }', 'contract_name': 'ERC4626Vault', 'contract_code': '{\n    using Math for uint256;\n\n    /**\n     * @notice Emitted when a user opts into an action or agreement.\n     * @param id The unique identifier of the opt-in action.\n     * @param user The address of the user who opted in.\n     */\n    event OptedIn(uint256 indexed id, address user);\n\n    /**\n     * @notice Emitted when a reward pool is created.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     */\n    event RewardPoolCreated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @notice Emitted when a reward pool is updated.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The new start timestamp of the reward pool.\n     * @param endTimestamp_ The new end timestamp of the reward pool.\n     * @param name_ The new name of the reward pool.\n     */\n    event RewardPoolUpdated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    IERC20 public immutable altToken;\n    IERC1155 public immutable erc1155StakedALT;\n    uint256 public immutable erc1155TokenID;\n\n    struct RewardPoolData {\n        uint64 startTimestamp;\n        uint64 endTimestamp;\n        string name;\n    }\n\n    uint256 public totalRewardPools;\n    mapping(uint256 => RewardPoolData) public RewardPools;\n    mapping(uint256 => mapping(address => bool)) public optedInUsers;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IERC1155 erc1155StakedALT_, uint256 erc1155TokenID_, IERC20 altToken_) {\n        if (address(erc1155StakedALT_) == address(0) || address(altToken_) == address(0)) {\n            revert ZeroAddress();\n        }\n        if (erc1155TokenID_ == 0) {\n            revert InvalidID();\n        }\n        erc1155StakedALT = erc1155StakedALT_;\n        erc1155TokenID = erc1155TokenID_;\n        altToken = altToken_;\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner, string memory name_, string memory symbol_) external initializer {\n        __Ownable_init(initialOwner);\n        __ERC20_init(name_, symbol_);\n    }\n\n    /**\n     * @notice Creates a new reward pool with the specified name, start, and end timestamps.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can create a reward pool.\n     */\n    function createRewardPool(uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) external onlyOwner {\n        if (block.timestamp > startTimestamp_) {\n            revert InvalidStartTime();\n        }\n        if (startTimestamp_ >= endTimestamp_) {\n            revert InvalidEndTime();\n        }\n        ++totalRewardPools;\n        uint256 id = totalRewardPools;\n\n        emit RewardPoolCreated(id, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @notice Updates an existing reward pool with the specified ID, name, start, and end timestamps.\n     * @param id_ The ID of the reward pool to set or update.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can set or update a reward pool.\n     */\n    function updateRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_)\n        external\n        onlyOwner\n    {\n        emit RewardPoolUpdated(id_, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id_, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @dev Allows a user to opt into a specific opt-in period.\n     * @param id The identifier of the opt-in period.\n     */\n    function optIn(uint256 id) external {\n        RewardPoolData memory rewardPoolData = RewardPools[id];\n\n        // If the rewardPoolData is not initialized\n        if (rewardPoolData.endTimestamp == 0) {\n            // Note: When initialized, endTimestamp is greater than startTimestamp\n            // Therefore. endTimestamp is always greater than 0.\n            revert InvalidID();\n        }\n\n        if (block.timestamp < rewardPoolData.startTimestamp) {\n            revert OptInPeriodNotStarted();\n        }\n\n        if (block.timestamp > rewardPoolData.endTimestamp) {\n            revert OptInPeriodEnded();\n        }\n\n        address sender = _msgSender();\n\n        if (balanceOf(sender) == 0) {\n            revert ZeroShare();\n        }\n\n        optedInUsers[id][sender] = true;\n        emit OptedIn(id, sender);\n    }\n\n    /**\n     * @notice Stakes all available alternative tokens into the staking contract.\n     * @dev This function will approve and then stake the total balance of altTokens held by this vault.\n     */\n    function stake() public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n\n        uint256 balance = altToken.balanceOf(thisVault);\n        altToken.approve(address(stk), balance);\n        stk.stake(thisVault, operator, balance);\n    }\n\n    /**\n     * @notice Claims rewards from the staking contract.\n     */\n    function claim(uint16 distributionId) public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n        stk.claimRewards(distributionId, thisVault, operator, type(uint256).max);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset\'s decimals. This\n     * "original" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset\'s decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC4626-asset}.\n     */\n    function asset() public view virtual returns (address) {\n        return address(erc1155StakedALT);\n    }\n\n    /**\n     * @dev See {IERC4626-totalAssets}.\n     */\n    function totalAssets() public view virtual returns (uint256) {\n        return erc1155StakedALT.balanceOf(address(this), erc1155TokenID);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToShares}.\n     */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToAssets}.\n     */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxDeposit}.\n     */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxMint}.\n     */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxWithdraw}.\n     */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxRedeem}.\n     */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /**\n     * @dev See {IERC4626-previewDeposit}.\n     */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-previewMint}.\n     */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewWithdraw}.\n     */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewRedeem}.\n     */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-deposit}.\n     */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev See {IERC4626-withdraw}.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-redeem}.\n     */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory)\n        external\n        pure\n        returns (bytes4)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 1, totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 1, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        erc1155StakedALT.safeTransferFrom(caller, address(this), erc1155TokenID, assets, "");\n\n        _mint(receiver, shares);\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares)\n        internal\n        virtual\n    {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If erc1155StakedALT is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        emit Withdraw(caller, receiver, owner, assets, shares);\n        erc1155StakedALT.safeTransferFrom(address(this), receiver, erc1155TokenID, assets, "");\n    }\n\n    function _setRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) internal {\n        RewardPools[id_] = RewardPoolData({startTimestamp: startTimestamp_, endTimestamp: endTimestamp_, name: name_});\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC4626Vault.convertToAssets', 'start_line': 468, 'end_line': 470, 'offset_start': 17854, 'offset_end': 18001, 'content': 'function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }', 'contract_name': 'ERC4626Vault', 'contract_code': '{\n    using Math for uint256;\n\n    /**\n     * @notice Emitted when a user opts into an action or agreement.\n     * @param id The unique identifier of the opt-in action.\n     * @param user The address of the user who opted in.\n     */\n    event OptedIn(uint256 indexed id, address user);\n\n    /**\n     * @notice Emitted when a reward pool is created.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     */\n    event RewardPoolCreated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @notice Emitted when a reward pool is updated.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The new start timestamp of the reward pool.\n     * @param endTimestamp_ The new end timestamp of the reward pool.\n     * @param name_ The new name of the reward pool.\n     */\n    event RewardPoolUpdated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    IERC20 public immutable altToken;\n    IERC1155 public immutable erc1155StakedALT;\n    uint256 public immutable erc1155TokenID;\n\n    struct RewardPoolData {\n        uint64 startTimestamp;\n        uint64 endTimestamp;\n        string name;\n    }\n\n    uint256 public totalRewardPools;\n    mapping(uint256 => RewardPoolData) public RewardPools;\n    mapping(uint256 => mapping(address => bool)) public optedInUsers;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IERC1155 erc1155StakedALT_, uint256 erc1155TokenID_, IERC20 altToken_) {\n        if (address(erc1155StakedALT_) == address(0) || address(altToken_) == address(0)) {\n            revert ZeroAddress();\n        }\n        if (erc1155TokenID_ == 0) {\n            revert InvalidID();\n        }\n        erc1155StakedALT = erc1155StakedALT_;\n        erc1155TokenID = erc1155TokenID_;\n        altToken = altToken_;\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner, string memory name_, string memory symbol_) external initializer {\n        __Ownable_init(initialOwner);\n        __ERC20_init(name_, symbol_);\n    }\n\n    /**\n     * @notice Creates a new reward pool with the specified name, start, and end timestamps.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can create a reward pool.\n     */\n    function createRewardPool(uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) external onlyOwner {\n        if (block.timestamp > startTimestamp_) {\n            revert InvalidStartTime();\n        }\n        if (startTimestamp_ >= endTimestamp_) {\n            revert InvalidEndTime();\n        }\n        ++totalRewardPools;\n        uint256 id = totalRewardPools;\n\n        emit RewardPoolCreated(id, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @notice Updates an existing reward pool with the specified ID, name, start, and end timestamps.\n     * @param id_ The ID of the reward pool to set or update.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can set or update a reward pool.\n     */\n    function updateRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_)\n        external\n        onlyOwner\n    {\n        emit RewardPoolUpdated(id_, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id_, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @dev Allows a user to opt into a specific opt-in period.\n     * @param id The identifier of the opt-in period.\n     */\n    function optIn(uint256 id) external {\n        RewardPoolData memory rewardPoolData = RewardPools[id];\n\n        // If the rewardPoolData is not initialized\n        if (rewardPoolData.endTimestamp == 0) {\n            // Note: When initialized, endTimestamp is greater than startTimestamp\n            // Therefore. endTimestamp is always greater than 0.\n            revert InvalidID();\n        }\n\n        if (block.timestamp < rewardPoolData.startTimestamp) {\n            revert OptInPeriodNotStarted();\n        }\n\n        if (block.timestamp > rewardPoolData.endTimestamp) {\n            revert OptInPeriodEnded();\n        }\n\n        address sender = _msgSender();\n\n        if (balanceOf(sender) == 0) {\n            revert ZeroShare();\n        }\n\n        optedInUsers[id][sender] = true;\n        emit OptedIn(id, sender);\n    }\n\n    /**\n     * @notice Stakes all available alternative tokens into the staking contract.\n     * @dev This function will approve and then stake the total balance of altTokens held by this vault.\n     */\n    function stake() public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n\n        uint256 balance = altToken.balanceOf(thisVault);\n        altToken.approve(address(stk), balance);\n        stk.stake(thisVault, operator, balance);\n    }\n\n    /**\n     * @notice Claims rewards from the staking contract.\n     */\n    function claim(uint16 distributionId) public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n        stk.claimRewards(distributionId, thisVault, operator, type(uint256).max);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset\'s decimals. This\n     * "original" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset\'s decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC4626-asset}.\n     */\n    function asset() public view virtual returns (address) {\n        return address(erc1155StakedALT);\n    }\n\n    /**\n     * @dev See {IERC4626-totalAssets}.\n     */\n    function totalAssets() public view virtual returns (uint256) {\n        return erc1155StakedALT.balanceOf(address(this), erc1155TokenID);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToShares}.\n     */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToAssets}.\n     */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxDeposit}.\n     */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxMint}.\n     */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxWithdraw}.\n     */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxRedeem}.\n     */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /**\n     * @dev See {IERC4626-previewDeposit}.\n     */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-previewMint}.\n     */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewWithdraw}.\n     */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewRedeem}.\n     */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-deposit}.\n     */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev See {IERC4626-withdraw}.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-redeem}.\n     */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory)\n        external\n        pure\n        returns (bytes4)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 1, totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 1, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        erc1155StakedALT.safeTransferFrom(caller, address(this), erc1155TokenID, assets, "");\n\n        _mint(receiver, shares);\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares)\n        internal\n        virtual\n    {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If erc1155StakedALT is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        emit Withdraw(caller, receiver, owner, assets, shares);\n        erc1155StakedALT.safeTransferFrom(address(this), receiver, erc1155TokenID, assets, "");\n    }\n\n    function _setRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) internal {\n        RewardPools[id_] = RewardPoolData({startTimestamp: startTimestamp_, endTimestamp: endTimestamp_, name: name_});\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC4626Vault.maxDeposit', 'start_line': 475, 'end_line': 477, 'offset_start': 18063, 'offset_end': 18170, 'content': 'function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }', 'contract_name': 'ERC4626Vault', 'contract_code': '{\n    using Math for uint256;\n\n    /**\n     * @notice Emitted when a user opts into an action or agreement.\n     * @param id The unique identifier of the opt-in action.\n     * @param user The address of the user who opted in.\n     */\n    event OptedIn(uint256 indexed id, address user);\n\n    /**\n     * @notice Emitted when a reward pool is created.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     */\n    event RewardPoolCreated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @notice Emitted when a reward pool is updated.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The new start timestamp of the reward pool.\n     * @param endTimestamp_ The new end timestamp of the reward pool.\n     * @param name_ The new name of the reward pool.\n     */\n    event RewardPoolUpdated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    IERC20 public immutable altToken;\n    IERC1155 public immutable erc1155StakedALT;\n    uint256 public immutable erc1155TokenID;\n\n    struct RewardPoolData {\n        uint64 startTimestamp;\n        uint64 endTimestamp;\n        string name;\n    }\n\n    uint256 public totalRewardPools;\n    mapping(uint256 => RewardPoolData) public RewardPools;\n    mapping(uint256 => mapping(address => bool)) public optedInUsers;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IERC1155 erc1155StakedALT_, uint256 erc1155TokenID_, IERC20 altToken_) {\n        if (address(erc1155StakedALT_) == address(0) || address(altToken_) == address(0)) {\n            revert ZeroAddress();\n        }\n        if (erc1155TokenID_ == 0) {\n            revert InvalidID();\n        }\n        erc1155StakedALT = erc1155StakedALT_;\n        erc1155TokenID = erc1155TokenID_;\n        altToken = altToken_;\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner, string memory name_, string memory symbol_) external initializer {\n        __Ownable_init(initialOwner);\n        __ERC20_init(name_, symbol_);\n    }\n\n    /**\n     * @notice Creates a new reward pool with the specified name, start, and end timestamps.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can create a reward pool.\n     */\n    function createRewardPool(uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) external onlyOwner {\n        if (block.timestamp > startTimestamp_) {\n            revert InvalidStartTime();\n        }\n        if (startTimestamp_ >= endTimestamp_) {\n            revert InvalidEndTime();\n        }\n        ++totalRewardPools;\n        uint256 id = totalRewardPools;\n\n        emit RewardPoolCreated(id, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @notice Updates an existing reward pool with the specified ID, name, start, and end timestamps.\n     * @param id_ The ID of the reward pool to set or update.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can set or update a reward pool.\n     */\n    function updateRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_)\n        external\n        onlyOwner\n    {\n        emit RewardPoolUpdated(id_, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id_, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @dev Allows a user to opt into a specific opt-in period.\n     * @param id The identifier of the opt-in period.\n     */\n    function optIn(uint256 id) external {\n        RewardPoolData memory rewardPoolData = RewardPools[id];\n\n        // If the rewardPoolData is not initialized\n        if (rewardPoolData.endTimestamp == 0) {\n            // Note: When initialized, endTimestamp is greater than startTimestamp\n            // Therefore. endTimestamp is always greater than 0.\n            revert InvalidID();\n        }\n\n        if (block.timestamp < rewardPoolData.startTimestamp) {\n            revert OptInPeriodNotStarted();\n        }\n\n        if (block.timestamp > rewardPoolData.endTimestamp) {\n            revert OptInPeriodEnded();\n        }\n\n        address sender = _msgSender();\n\n        if (balanceOf(sender) == 0) {\n            revert ZeroShare();\n        }\n\n        optedInUsers[id][sender] = true;\n        emit OptedIn(id, sender);\n    }\n\n    /**\n     * @notice Stakes all available alternative tokens into the staking contract.\n     * @dev This function will approve and then stake the total balance of altTokens held by this vault.\n     */\n    function stake() public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n\n        uint256 balance = altToken.balanceOf(thisVault);\n        altToken.approve(address(stk), balance);\n        stk.stake(thisVault, operator, balance);\n    }\n\n    /**\n     * @notice Claims rewards from the staking contract.\n     */\n    function claim(uint16 distributionId) public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n        stk.claimRewards(distributionId, thisVault, operator, type(uint256).max);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset\'s decimals. This\n     * "original" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset\'s decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC4626-asset}.\n     */\n    function asset() public view virtual returns (address) {\n        return address(erc1155StakedALT);\n    }\n\n    /**\n     * @dev See {IERC4626-totalAssets}.\n     */\n    function totalAssets() public view virtual returns (uint256) {\n        return erc1155StakedALT.balanceOf(address(this), erc1155TokenID);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToShares}.\n     */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToAssets}.\n     */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxDeposit}.\n     */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxMint}.\n     */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxWithdraw}.\n     */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxRedeem}.\n     */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /**\n     * @dev See {IERC4626-previewDeposit}.\n     */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-previewMint}.\n     */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewWithdraw}.\n     */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewRedeem}.\n     */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-deposit}.\n     */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev See {IERC4626-withdraw}.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-redeem}.\n     */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory)\n        external\n        pure\n        returns (bytes4)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 1, totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 1, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        erc1155StakedALT.safeTransferFrom(caller, address(this), erc1155TokenID, assets, "");\n\n        _mint(receiver, shares);\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares)\n        internal\n        virtual\n    {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If erc1155StakedALT is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        emit Withdraw(caller, receiver, owner, assets, shares);\n        erc1155StakedALT.safeTransferFrom(address(this), receiver, erc1155TokenID, assets, "");\n    }\n\n    function _setRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) internal {\n        RewardPools[id_] = RewardPoolData({startTimestamp: startTimestamp_, endTimestamp: endTimestamp_, name: name_});\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC4626Vault.maxMint', 'start_line': 482, 'end_line': 484, 'offset_start': 18229, 'offset_end': 18333, 'content': 'function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }', 'contract_name': 'ERC4626Vault', 'contract_code': '{\n    using Math for uint256;\n\n    /**\n     * @notice Emitted when a user opts into an action or agreement.\n     * @param id The unique identifier of the opt-in action.\n     * @param user The address of the user who opted in.\n     */\n    event OptedIn(uint256 indexed id, address user);\n\n    /**\n     * @notice Emitted when a reward pool is created.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     */\n    event RewardPoolCreated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @notice Emitted when a reward pool is updated.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The new start timestamp of the reward pool.\n     * @param endTimestamp_ The new end timestamp of the reward pool.\n     * @param name_ The new name of the reward pool.\n     */\n    event RewardPoolUpdated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    IERC20 public immutable altToken;\n    IERC1155 public immutable erc1155StakedALT;\n    uint256 public immutable erc1155TokenID;\n\n    struct RewardPoolData {\n        uint64 startTimestamp;\n        uint64 endTimestamp;\n        string name;\n    }\n\n    uint256 public totalRewardPools;\n    mapping(uint256 => RewardPoolData) public RewardPools;\n    mapping(uint256 => mapping(address => bool)) public optedInUsers;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IERC1155 erc1155StakedALT_, uint256 erc1155TokenID_, IERC20 altToken_) {\n        if (address(erc1155StakedALT_) == address(0) || address(altToken_) == address(0)) {\n            revert ZeroAddress();\n        }\n        if (erc1155TokenID_ == 0) {\n            revert InvalidID();\n        }\n        erc1155StakedALT = erc1155StakedALT_;\n        erc1155TokenID = erc1155TokenID_;\n        altToken = altToken_;\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner, string memory name_, string memory symbol_) external initializer {\n        __Ownable_init(initialOwner);\n        __ERC20_init(name_, symbol_);\n    }\n\n    /**\n     * @notice Creates a new reward pool with the specified name, start, and end timestamps.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can create a reward pool.\n     */\n    function createRewardPool(uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) external onlyOwner {\n        if (block.timestamp > startTimestamp_) {\n            revert InvalidStartTime();\n        }\n        if (startTimestamp_ >= endTimestamp_) {\n            revert InvalidEndTime();\n        }\n        ++totalRewardPools;\n        uint256 id = totalRewardPools;\n\n        emit RewardPoolCreated(id, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @notice Updates an existing reward pool with the specified ID, name, start, and end timestamps.\n     * @param id_ The ID of the reward pool to set or update.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can set or update a reward pool.\n     */\n    function updateRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_)\n        external\n        onlyOwner\n    {\n        emit RewardPoolUpdated(id_, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id_, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @dev Allows a user to opt into a specific opt-in period.\n     * @param id The identifier of the opt-in period.\n     */\n    function optIn(uint256 id) external {\n        RewardPoolData memory rewardPoolData = RewardPools[id];\n\n        // If the rewardPoolData is not initialized\n        if (rewardPoolData.endTimestamp == 0) {\n            // Note: When initialized, endTimestamp is greater than startTimestamp\n            // Therefore. endTimestamp is always greater than 0.\n            revert InvalidID();\n        }\n\n        if (block.timestamp < rewardPoolData.startTimestamp) {\n            revert OptInPeriodNotStarted();\n        }\n\n        if (block.timestamp > rewardPoolData.endTimestamp) {\n            revert OptInPeriodEnded();\n        }\n\n        address sender = _msgSender();\n\n        if (balanceOf(sender) == 0) {\n            revert ZeroShare();\n        }\n\n        optedInUsers[id][sender] = true;\n        emit OptedIn(id, sender);\n    }\n\n    /**\n     * @notice Stakes all available alternative tokens into the staking contract.\n     * @dev This function will approve and then stake the total balance of altTokens held by this vault.\n     */\n    function stake() public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n\n        uint256 balance = altToken.balanceOf(thisVault);\n        altToken.approve(address(stk), balance);\n        stk.stake(thisVault, operator, balance);\n    }\n\n    /**\n     * @notice Claims rewards from the staking contract.\n     */\n    function claim(uint16 distributionId) public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n        stk.claimRewards(distributionId, thisVault, operator, type(uint256).max);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset\'s decimals. This\n     * "original" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset\'s decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC4626-asset}.\n     */\n    function asset() public view virtual returns (address) {\n        return address(erc1155StakedALT);\n    }\n\n    /**\n     * @dev See {IERC4626-totalAssets}.\n     */\n    function totalAssets() public view virtual returns (uint256) {\n        return erc1155StakedALT.balanceOf(address(this), erc1155TokenID);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToShares}.\n     */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToAssets}.\n     */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxDeposit}.\n     */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxMint}.\n     */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxWithdraw}.\n     */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxRedeem}.\n     */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /**\n     * @dev See {IERC4626-previewDeposit}.\n     */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-previewMint}.\n     */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewWithdraw}.\n     */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewRedeem}.\n     */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-deposit}.\n     */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev See {IERC4626-withdraw}.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-redeem}.\n     */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory)\n        external\n        pure\n        returns (bytes4)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 1, totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 1, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        erc1155StakedALT.safeTransferFrom(caller, address(this), erc1155TokenID, assets, "");\n\n        _mint(receiver, shares);\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares)\n        internal\n        virtual\n    {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If erc1155StakedALT is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        emit Withdraw(caller, receiver, owner, assets, shares);\n        erc1155StakedALT.safeTransferFrom(address(this), receiver, erc1155TokenID, assets, "");\n    }\n\n    function _setRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) internal {\n        RewardPools[id_] = RewardPoolData({startTimestamp: startTimestamp_, endTimestamp: endTimestamp_, name: name_});\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC4626Vault.maxWithdraw', 'start_line': 489, 'end_line': 491, 'offset_start': 18396, 'offset_end': 18548, 'content': 'function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }', 'contract_name': 'ERC4626Vault', 'contract_code': '{\n    using Math for uint256;\n\n    /**\n     * @notice Emitted when a user opts into an action or agreement.\n     * @param id The unique identifier of the opt-in action.\n     * @param user The address of the user who opted in.\n     */\n    event OptedIn(uint256 indexed id, address user);\n\n    /**\n     * @notice Emitted when a reward pool is created.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     */\n    event RewardPoolCreated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @notice Emitted when a reward pool is updated.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The new start timestamp of the reward pool.\n     * @param endTimestamp_ The new end timestamp of the reward pool.\n     * @param name_ The new name of the reward pool.\n     */\n    event RewardPoolUpdated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    IERC20 public immutable altToken;\n    IERC1155 public immutable erc1155StakedALT;\n    uint256 public immutable erc1155TokenID;\n\n    struct RewardPoolData {\n        uint64 startTimestamp;\n        uint64 endTimestamp;\n        string name;\n    }\n\n    uint256 public totalRewardPools;\n    mapping(uint256 => RewardPoolData) public RewardPools;\n    mapping(uint256 => mapping(address => bool)) public optedInUsers;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IERC1155 erc1155StakedALT_, uint256 erc1155TokenID_, IERC20 altToken_) {\n        if (address(erc1155StakedALT_) == address(0) || address(altToken_) == address(0)) {\n            revert ZeroAddress();\n        }\n        if (erc1155TokenID_ == 0) {\n            revert InvalidID();\n        }\n        erc1155StakedALT = erc1155StakedALT_;\n        erc1155TokenID = erc1155TokenID_;\n        altToken = altToken_;\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner, string memory name_, string memory symbol_) external initializer {\n        __Ownable_init(initialOwner);\n        __ERC20_init(name_, symbol_);\n    }\n\n    /**\n     * @notice Creates a new reward pool with the specified name, start, and end timestamps.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can create a reward pool.\n     */\n    function createRewardPool(uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) external onlyOwner {\n        if (block.timestamp > startTimestamp_) {\n            revert InvalidStartTime();\n        }\n        if (startTimestamp_ >= endTimestamp_) {\n            revert InvalidEndTime();\n        }\n        ++totalRewardPools;\n        uint256 id = totalRewardPools;\n\n        emit RewardPoolCreated(id, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @notice Updates an existing reward pool with the specified ID, name, start, and end timestamps.\n     * @param id_ The ID of the reward pool to set or update.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can set or update a reward pool.\n     */\n    function updateRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_)\n        external\n        onlyOwner\n    {\n        emit RewardPoolUpdated(id_, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id_, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @dev Allows a user to opt into a specific opt-in period.\n     * @param id The identifier of the opt-in period.\n     */\n    function optIn(uint256 id) external {\n        RewardPoolData memory rewardPoolData = RewardPools[id];\n\n        // If the rewardPoolData is not initialized\n        if (rewardPoolData.endTimestamp == 0) {\n            // Note: When initialized, endTimestamp is greater than startTimestamp\n            // Therefore. endTimestamp is always greater than 0.\n            revert InvalidID();\n        }\n\n        if (block.timestamp < rewardPoolData.startTimestamp) {\n            revert OptInPeriodNotStarted();\n        }\n\n        if (block.timestamp > rewardPoolData.endTimestamp) {\n            revert OptInPeriodEnded();\n        }\n\n        address sender = _msgSender();\n\n        if (balanceOf(sender) == 0) {\n            revert ZeroShare();\n        }\n\n        optedInUsers[id][sender] = true;\n        emit OptedIn(id, sender);\n    }\n\n    /**\n     * @notice Stakes all available alternative tokens into the staking contract.\n     * @dev This function will approve and then stake the total balance of altTokens held by this vault.\n     */\n    function stake() public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n\n        uint256 balance = altToken.balanceOf(thisVault);\n        altToken.approve(address(stk), balance);\n        stk.stake(thisVault, operator, balance);\n    }\n\n    /**\n     * @notice Claims rewards from the staking contract.\n     */\n    function claim(uint16 distributionId) public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n        stk.claimRewards(distributionId, thisVault, operator, type(uint256).max);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset\'s decimals. This\n     * "original" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset\'s decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC4626-asset}.\n     */\n    function asset() public view virtual returns (address) {\n        return address(erc1155StakedALT);\n    }\n\n    /**\n     * @dev See {IERC4626-totalAssets}.\n     */\n    function totalAssets() public view virtual returns (uint256) {\n        return erc1155StakedALT.balanceOf(address(this), erc1155TokenID);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToShares}.\n     */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToAssets}.\n     */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxDeposit}.\n     */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxMint}.\n     */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxWithdraw}.\n     */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxRedeem}.\n     */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /**\n     * @dev See {IERC4626-previewDeposit}.\n     */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-previewMint}.\n     */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewWithdraw}.\n     */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewRedeem}.\n     */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-deposit}.\n     */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev See {IERC4626-withdraw}.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-redeem}.\n     */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory)\n        external\n        pure\n        returns (bytes4)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 1, totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 1, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        erc1155StakedALT.safeTransferFrom(caller, address(this), erc1155TokenID, assets, "");\n\n        _mint(receiver, shares);\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares)\n        internal\n        virtual\n    {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If erc1155StakedALT is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        emit Withdraw(caller, receiver, owner, assets, shares);\n        erc1155StakedALT.safeTransferFrom(address(this), receiver, erc1155TokenID, assets, "");\n    }\n\n    function _setRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) internal {\n        RewardPools[id_] = RewardPoolData({startTimestamp: startTimestamp_, endTimestamp: endTimestamp_, name: name_});\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC4626Vault.maxRedeem', 'start_line': 496, 'end_line': 498, 'offset_start': 18609, 'offset_end': 18720, 'content': 'function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }', 'contract_name': 'ERC4626Vault', 'contract_code': '{\n    using Math for uint256;\n\n    /**\n     * @notice Emitted when a user opts into an action or agreement.\n     * @param id The unique identifier of the opt-in action.\n     * @param user The address of the user who opted in.\n     */\n    event OptedIn(uint256 indexed id, address user);\n\n    /**\n     * @notice Emitted when a reward pool is created.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     */\n    event RewardPoolCreated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @notice Emitted when a reward pool is updated.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The new start timestamp of the reward pool.\n     * @param endTimestamp_ The new end timestamp of the reward pool.\n     * @param name_ The new name of the reward pool.\n     */\n    event RewardPoolUpdated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    IERC20 public immutable altToken;\n    IERC1155 public immutable erc1155StakedALT;\n    uint256 public immutable erc1155TokenID;\n\n    struct RewardPoolData {\n        uint64 startTimestamp;\n        uint64 endTimestamp;\n        string name;\n    }\n\n    uint256 public totalRewardPools;\n    mapping(uint256 => RewardPoolData) public RewardPools;\n    mapping(uint256 => mapping(address => bool)) public optedInUsers;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IERC1155 erc1155StakedALT_, uint256 erc1155TokenID_, IERC20 altToken_) {\n        if (address(erc1155StakedALT_) == address(0) || address(altToken_) == address(0)) {\n            revert ZeroAddress();\n        }\n        if (erc1155TokenID_ == 0) {\n            revert InvalidID();\n        }\n        erc1155StakedALT = erc1155StakedALT_;\n        erc1155TokenID = erc1155TokenID_;\n        altToken = altToken_;\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner, string memory name_, string memory symbol_) external initializer {\n        __Ownable_init(initialOwner);\n        __ERC20_init(name_, symbol_);\n    }\n\n    /**\n     * @notice Creates a new reward pool with the specified name, start, and end timestamps.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can create a reward pool.\n     */\n    function createRewardPool(uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) external onlyOwner {\n        if (block.timestamp > startTimestamp_) {\n            revert InvalidStartTime();\n        }\n        if (startTimestamp_ >= endTimestamp_) {\n            revert InvalidEndTime();\n        }\n        ++totalRewardPools;\n        uint256 id = totalRewardPools;\n\n        emit RewardPoolCreated(id, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @notice Updates an existing reward pool with the specified ID, name, start, and end timestamps.\n     * @param id_ The ID of the reward pool to set or update.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can set or update a reward pool.\n     */\n    function updateRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_)\n        external\n        onlyOwner\n    {\n        emit RewardPoolUpdated(id_, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id_, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @dev Allows a user to opt into a specific opt-in period.\n     * @param id The identifier of the opt-in period.\n     */\n    function optIn(uint256 id) external {\n        RewardPoolData memory rewardPoolData = RewardPools[id];\n\n        // If the rewardPoolData is not initialized\n        if (rewardPoolData.endTimestamp == 0) {\n            // Note: When initialized, endTimestamp is greater than startTimestamp\n            // Therefore. endTimestamp is always greater than 0.\n            revert InvalidID();\n        }\n\n        if (block.timestamp < rewardPoolData.startTimestamp) {\n            revert OptInPeriodNotStarted();\n        }\n\n        if (block.timestamp > rewardPoolData.endTimestamp) {\n            revert OptInPeriodEnded();\n        }\n\n        address sender = _msgSender();\n\n        if (balanceOf(sender) == 0) {\n            revert ZeroShare();\n        }\n\n        optedInUsers[id][sender] = true;\n        emit OptedIn(id, sender);\n    }\n\n    /**\n     * @notice Stakes all available alternative tokens into the staking contract.\n     * @dev This function will approve and then stake the total balance of altTokens held by this vault.\n     */\n    function stake() public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n\n        uint256 balance = altToken.balanceOf(thisVault);\n        altToken.approve(address(stk), balance);\n        stk.stake(thisVault, operator, balance);\n    }\n\n    /**\n     * @notice Claims rewards from the staking contract.\n     */\n    function claim(uint16 distributionId) public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n        stk.claimRewards(distributionId, thisVault, operator, type(uint256).max);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset\'s decimals. This\n     * "original" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset\'s decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC4626-asset}.\n     */\n    function asset() public view virtual returns (address) {\n        return address(erc1155StakedALT);\n    }\n\n    /**\n     * @dev See {IERC4626-totalAssets}.\n     */\n    function totalAssets() public view virtual returns (uint256) {\n        return erc1155StakedALT.balanceOf(address(this), erc1155TokenID);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToShares}.\n     */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToAssets}.\n     */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxDeposit}.\n     */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxMint}.\n     */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxWithdraw}.\n     */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxRedeem}.\n     */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /**\n     * @dev See {IERC4626-previewDeposit}.\n     */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-previewMint}.\n     */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewWithdraw}.\n     */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewRedeem}.\n     */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-deposit}.\n     */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev See {IERC4626-withdraw}.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-redeem}.\n     */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory)\n        external\n        pure\n        returns (bytes4)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 1, totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 1, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        erc1155StakedALT.safeTransferFrom(caller, address(this), erc1155TokenID, assets, "");\n\n        _mint(receiver, shares);\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares)\n        internal\n        virtual\n    {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If erc1155StakedALT is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        emit Withdraw(caller, receiver, owner, assets, shares);\n        erc1155StakedALT.safeTransferFrom(address(this), receiver, erc1155TokenID, assets, "");\n    }\n\n    function _setRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) internal {\n        RewardPools[id_] = RewardPoolData({startTimestamp: startTimestamp_, endTimestamp: endTimestamp_, name: name_});\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC4626Vault.previewDeposit', 'start_line': 503, 'end_line': 505, 'offset_start': 18786, 'offset_end': 18932, 'content': 'function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }', 'contract_name': 'ERC4626Vault', 'contract_code': '{\n    using Math for uint256;\n\n    /**\n     * @notice Emitted when a user opts into an action or agreement.\n     * @param id The unique identifier of the opt-in action.\n     * @param user The address of the user who opted in.\n     */\n    event OptedIn(uint256 indexed id, address user);\n\n    /**\n     * @notice Emitted when a reward pool is created.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     */\n    event RewardPoolCreated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @notice Emitted when a reward pool is updated.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The new start timestamp of the reward pool.\n     * @param endTimestamp_ The new end timestamp of the reward pool.\n     * @param name_ The new name of the reward pool.\n     */\n    event RewardPoolUpdated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    IERC20 public immutable altToken;\n    IERC1155 public immutable erc1155StakedALT;\n    uint256 public immutable erc1155TokenID;\n\n    struct RewardPoolData {\n        uint64 startTimestamp;\n        uint64 endTimestamp;\n        string name;\n    }\n\n    uint256 public totalRewardPools;\n    mapping(uint256 => RewardPoolData) public RewardPools;\n    mapping(uint256 => mapping(address => bool)) public optedInUsers;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IERC1155 erc1155StakedALT_, uint256 erc1155TokenID_, IERC20 altToken_) {\n        if (address(erc1155StakedALT_) == address(0) || address(altToken_) == address(0)) {\n            revert ZeroAddress();\n        }\n        if (erc1155TokenID_ == 0) {\n            revert InvalidID();\n        }\n        erc1155StakedALT = erc1155StakedALT_;\n        erc1155TokenID = erc1155TokenID_;\n        altToken = altToken_;\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner, string memory name_, string memory symbol_) external initializer {\n        __Ownable_init(initialOwner);\n        __ERC20_init(name_, symbol_);\n    }\n\n    /**\n     * @notice Creates a new reward pool with the specified name, start, and end timestamps.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can create a reward pool.\n     */\n    function createRewardPool(uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) external onlyOwner {\n        if (block.timestamp > startTimestamp_) {\n            revert InvalidStartTime();\n        }\n        if (startTimestamp_ >= endTimestamp_) {\n            revert InvalidEndTime();\n        }\n        ++totalRewardPools;\n        uint256 id = totalRewardPools;\n\n        emit RewardPoolCreated(id, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @notice Updates an existing reward pool with the specified ID, name, start, and end timestamps.\n     * @param id_ The ID of the reward pool to set or update.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can set or update a reward pool.\n     */\n    function updateRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_)\n        external\n        onlyOwner\n    {\n        emit RewardPoolUpdated(id_, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id_, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @dev Allows a user to opt into a specific opt-in period.\n     * @param id The identifier of the opt-in period.\n     */\n    function optIn(uint256 id) external {\n        RewardPoolData memory rewardPoolData = RewardPools[id];\n\n        // If the rewardPoolData is not initialized\n        if (rewardPoolData.endTimestamp == 0) {\n            // Note: When initialized, endTimestamp is greater than startTimestamp\n            // Therefore. endTimestamp is always greater than 0.\n            revert InvalidID();\n        }\n\n        if (block.timestamp < rewardPoolData.startTimestamp) {\n            revert OptInPeriodNotStarted();\n        }\n\n        if (block.timestamp > rewardPoolData.endTimestamp) {\n            revert OptInPeriodEnded();\n        }\n\n        address sender = _msgSender();\n\n        if (balanceOf(sender) == 0) {\n            revert ZeroShare();\n        }\n\n        optedInUsers[id][sender] = true;\n        emit OptedIn(id, sender);\n    }\n\n    /**\n     * @notice Stakes all available alternative tokens into the staking contract.\n     * @dev This function will approve and then stake the total balance of altTokens held by this vault.\n     */\n    function stake() public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n\n        uint256 balance = altToken.balanceOf(thisVault);\n        altToken.approve(address(stk), balance);\n        stk.stake(thisVault, operator, balance);\n    }\n\n    /**\n     * @notice Claims rewards from the staking contract.\n     */\n    function claim(uint16 distributionId) public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n        stk.claimRewards(distributionId, thisVault, operator, type(uint256).max);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset\'s decimals. This\n     * "original" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset\'s decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC4626-asset}.\n     */\n    function asset() public view virtual returns (address) {\n        return address(erc1155StakedALT);\n    }\n\n    /**\n     * @dev See {IERC4626-totalAssets}.\n     */\n    function totalAssets() public view virtual returns (uint256) {\n        return erc1155StakedALT.balanceOf(address(this), erc1155TokenID);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToShares}.\n     */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToAssets}.\n     */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxDeposit}.\n     */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxMint}.\n     */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxWithdraw}.\n     */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxRedeem}.\n     */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /**\n     * @dev See {IERC4626-previewDeposit}.\n     */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-previewMint}.\n     */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewWithdraw}.\n     */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewRedeem}.\n     */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-deposit}.\n     */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev See {IERC4626-withdraw}.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-redeem}.\n     */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory)\n        external\n        pure\n        returns (bytes4)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 1, totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 1, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        erc1155StakedALT.safeTransferFrom(caller, address(this), erc1155TokenID, assets, "");\n\n        _mint(receiver, shares);\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares)\n        internal\n        virtual\n    {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If erc1155StakedALT is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        emit Withdraw(caller, receiver, owner, assets, shares);\n        erc1155StakedALT.safeTransferFrom(address(this), receiver, erc1155TokenID, assets, "");\n    }\n\n    function _setRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) internal {\n        RewardPools[id_] = RewardPoolData({startTimestamp: startTimestamp_, endTimestamp: endTimestamp_, name: name_});\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC4626Vault.previewMint', 'start_line': 510, 'end_line': 512, 'offset_start': 18995, 'offset_end': 19137, 'content': 'function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }', 'contract_name': 'ERC4626Vault', 'contract_code': '{\n    using Math for uint256;\n\n    /**\n     * @notice Emitted when a user opts into an action or agreement.\n     * @param id The unique identifier of the opt-in action.\n     * @param user The address of the user who opted in.\n     */\n    event OptedIn(uint256 indexed id, address user);\n\n    /**\n     * @notice Emitted when a reward pool is created.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     */\n    event RewardPoolCreated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @notice Emitted when a reward pool is updated.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The new start timestamp of the reward pool.\n     * @param endTimestamp_ The new end timestamp of the reward pool.\n     * @param name_ The new name of the reward pool.\n     */\n    event RewardPoolUpdated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    IERC20 public immutable altToken;\n    IERC1155 public immutable erc1155StakedALT;\n    uint256 public immutable erc1155TokenID;\n\n    struct RewardPoolData {\n        uint64 startTimestamp;\n        uint64 endTimestamp;\n        string name;\n    }\n\n    uint256 public totalRewardPools;\n    mapping(uint256 => RewardPoolData) public RewardPools;\n    mapping(uint256 => mapping(address => bool)) public optedInUsers;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IERC1155 erc1155StakedALT_, uint256 erc1155TokenID_, IERC20 altToken_) {\n        if (address(erc1155StakedALT_) == address(0) || address(altToken_) == address(0)) {\n            revert ZeroAddress();\n        }\n        if (erc1155TokenID_ == 0) {\n            revert InvalidID();\n        }\n        erc1155StakedALT = erc1155StakedALT_;\n        erc1155TokenID = erc1155TokenID_;\n        altToken = altToken_;\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner, string memory name_, string memory symbol_) external initializer {\n        __Ownable_init(initialOwner);\n        __ERC20_init(name_, symbol_);\n    }\n\n    /**\n     * @notice Creates a new reward pool with the specified name, start, and end timestamps.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can create a reward pool.\n     */\n    function createRewardPool(uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) external onlyOwner {\n        if (block.timestamp > startTimestamp_) {\n            revert InvalidStartTime();\n        }\n        if (startTimestamp_ >= endTimestamp_) {\n            revert InvalidEndTime();\n        }\n        ++totalRewardPools;\n        uint256 id = totalRewardPools;\n\n        emit RewardPoolCreated(id, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @notice Updates an existing reward pool with the specified ID, name, start, and end timestamps.\n     * @param id_ The ID of the reward pool to set or update.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can set or update a reward pool.\n     */\n    function updateRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_)\n        external\n        onlyOwner\n    {\n        emit RewardPoolUpdated(id_, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id_, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @dev Allows a user to opt into a specific opt-in period.\n     * @param id The identifier of the opt-in period.\n     */\n    function optIn(uint256 id) external {\n        RewardPoolData memory rewardPoolData = RewardPools[id];\n\n        // If the rewardPoolData is not initialized\n        if (rewardPoolData.endTimestamp == 0) {\n            // Note: When initialized, endTimestamp is greater than startTimestamp\n            // Therefore. endTimestamp is always greater than 0.\n            revert InvalidID();\n        }\n\n        if (block.timestamp < rewardPoolData.startTimestamp) {\n            revert OptInPeriodNotStarted();\n        }\n\n        if (block.timestamp > rewardPoolData.endTimestamp) {\n            revert OptInPeriodEnded();\n        }\n\n        address sender = _msgSender();\n\n        if (balanceOf(sender) == 0) {\n            revert ZeroShare();\n        }\n\n        optedInUsers[id][sender] = true;\n        emit OptedIn(id, sender);\n    }\n\n    /**\n     * @notice Stakes all available alternative tokens into the staking contract.\n     * @dev This function will approve and then stake the total balance of altTokens held by this vault.\n     */\n    function stake() public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n\n        uint256 balance = altToken.balanceOf(thisVault);\n        altToken.approve(address(stk), balance);\n        stk.stake(thisVault, operator, balance);\n    }\n\n    /**\n     * @notice Claims rewards from the staking contract.\n     */\n    function claim(uint16 distributionId) public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n        stk.claimRewards(distributionId, thisVault, operator, type(uint256).max);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset\'s decimals. This\n     * "original" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset\'s decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC4626-asset}.\n     */\n    function asset() public view virtual returns (address) {\n        return address(erc1155StakedALT);\n    }\n\n    /**\n     * @dev See {IERC4626-totalAssets}.\n     */\n    function totalAssets() public view virtual returns (uint256) {\n        return erc1155StakedALT.balanceOf(address(this), erc1155TokenID);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToShares}.\n     */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToAssets}.\n     */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxDeposit}.\n     */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxMint}.\n     */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxWithdraw}.\n     */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxRedeem}.\n     */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /**\n     * @dev See {IERC4626-previewDeposit}.\n     */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-previewMint}.\n     */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewWithdraw}.\n     */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewRedeem}.\n     */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-deposit}.\n     */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev See {IERC4626-withdraw}.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-redeem}.\n     */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory)\n        external\n        pure\n        returns (bytes4)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 1, totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 1, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        erc1155StakedALT.safeTransferFrom(caller, address(this), erc1155TokenID, assets, "");\n\n        _mint(receiver, shares);\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares)\n        internal\n        virtual\n    {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If erc1155StakedALT is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        emit Withdraw(caller, receiver, owner, assets, shares);\n        erc1155StakedALT.safeTransferFrom(address(this), receiver, erc1155TokenID, assets, "");\n    }\n\n    function _setRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) internal {\n        RewardPools[id_] = RewardPoolData({startTimestamp: startTimestamp_, endTimestamp: endTimestamp_, name: name_});\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC4626Vault.previewWithdraw', 'start_line': 517, 'end_line': 519, 'offset_start': 19204, 'offset_end': 19350, 'content': 'function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }', 'contract_name': 'ERC4626Vault', 'contract_code': '{\n    using Math for uint256;\n\n    /**\n     * @notice Emitted when a user opts into an action or agreement.\n     * @param id The unique identifier of the opt-in action.\n     * @param user The address of the user who opted in.\n     */\n    event OptedIn(uint256 indexed id, address user);\n\n    /**\n     * @notice Emitted when a reward pool is created.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     */\n    event RewardPoolCreated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @notice Emitted when a reward pool is updated.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The new start timestamp of the reward pool.\n     * @param endTimestamp_ The new end timestamp of the reward pool.\n     * @param name_ The new name of the reward pool.\n     */\n    event RewardPoolUpdated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    IERC20 public immutable altToken;\n    IERC1155 public immutable erc1155StakedALT;\n    uint256 public immutable erc1155TokenID;\n\n    struct RewardPoolData {\n        uint64 startTimestamp;\n        uint64 endTimestamp;\n        string name;\n    }\n\n    uint256 public totalRewardPools;\n    mapping(uint256 => RewardPoolData) public RewardPools;\n    mapping(uint256 => mapping(address => bool)) public optedInUsers;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IERC1155 erc1155StakedALT_, uint256 erc1155TokenID_, IERC20 altToken_) {\n        if (address(erc1155StakedALT_) == address(0) || address(altToken_) == address(0)) {\n            revert ZeroAddress();\n        }\n        if (erc1155TokenID_ == 0) {\n            revert InvalidID();\n        }\n        erc1155StakedALT = erc1155StakedALT_;\n        erc1155TokenID = erc1155TokenID_;\n        altToken = altToken_;\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner, string memory name_, string memory symbol_) external initializer {\n        __Ownable_init(initialOwner);\n        __ERC20_init(name_, symbol_);\n    }\n\n    /**\n     * @notice Creates a new reward pool with the specified name, start, and end timestamps.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can create a reward pool.\n     */\n    function createRewardPool(uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) external onlyOwner {\n        if (block.timestamp > startTimestamp_) {\n            revert InvalidStartTime();\n        }\n        if (startTimestamp_ >= endTimestamp_) {\n            revert InvalidEndTime();\n        }\n        ++totalRewardPools;\n        uint256 id = totalRewardPools;\n\n        emit RewardPoolCreated(id, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @notice Updates an existing reward pool with the specified ID, name, start, and end timestamps.\n     * @param id_ The ID of the reward pool to set or update.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can set or update a reward pool.\n     */\n    function updateRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_)\n        external\n        onlyOwner\n    {\n        emit RewardPoolUpdated(id_, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id_, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @dev Allows a user to opt into a specific opt-in period.\n     * @param id The identifier of the opt-in period.\n     */\n    function optIn(uint256 id) external {\n        RewardPoolData memory rewardPoolData = RewardPools[id];\n\n        // If the rewardPoolData is not initialized\n        if (rewardPoolData.endTimestamp == 0) {\n            // Note: When initialized, endTimestamp is greater than startTimestamp\n            // Therefore. endTimestamp is always greater than 0.\n            revert InvalidID();\n        }\n\n        if (block.timestamp < rewardPoolData.startTimestamp) {\n            revert OptInPeriodNotStarted();\n        }\n\n        if (block.timestamp > rewardPoolData.endTimestamp) {\n            revert OptInPeriodEnded();\n        }\n\n        address sender = _msgSender();\n\n        if (balanceOf(sender) == 0) {\n            revert ZeroShare();\n        }\n\n        optedInUsers[id][sender] = true;\n        emit OptedIn(id, sender);\n    }\n\n    /**\n     * @notice Stakes all available alternative tokens into the staking contract.\n     * @dev This function will approve and then stake the total balance of altTokens held by this vault.\n     */\n    function stake() public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n\n        uint256 balance = altToken.balanceOf(thisVault);\n        altToken.approve(address(stk), balance);\n        stk.stake(thisVault, operator, balance);\n    }\n\n    /**\n     * @notice Claims rewards from the staking contract.\n     */\n    function claim(uint16 distributionId) public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n        stk.claimRewards(distributionId, thisVault, operator, type(uint256).max);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset\'s decimals. This\n     * "original" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset\'s decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC4626-asset}.\n     */\n    function asset() public view virtual returns (address) {\n        return address(erc1155StakedALT);\n    }\n\n    /**\n     * @dev See {IERC4626-totalAssets}.\n     */\n    function totalAssets() public view virtual returns (uint256) {\n        return erc1155StakedALT.balanceOf(address(this), erc1155TokenID);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToShares}.\n     */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToAssets}.\n     */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxDeposit}.\n     */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxMint}.\n     */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxWithdraw}.\n     */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxRedeem}.\n     */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /**\n     * @dev See {IERC4626-previewDeposit}.\n     */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-previewMint}.\n     */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewWithdraw}.\n     */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewRedeem}.\n     */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-deposit}.\n     */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev See {IERC4626-withdraw}.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-redeem}.\n     */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory)\n        external\n        pure\n        returns (bytes4)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 1, totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 1, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        erc1155StakedALT.safeTransferFrom(caller, address(this), erc1155TokenID, assets, "");\n\n        _mint(receiver, shares);\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares)\n        internal\n        virtual\n    {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If erc1155StakedALT is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        emit Withdraw(caller, receiver, owner, assets, shares);\n        erc1155StakedALT.safeTransferFrom(address(this), receiver, erc1155TokenID, assets, "");\n    }\n\n    function _setRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) internal {\n        RewardPools[id_] = RewardPoolData({startTimestamp: startTimestamp_, endTimestamp: endTimestamp_, name: name_});\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC4626Vault.previewRedeem', 'start_line': 524, 'end_line': 526, 'offset_start': 19415, 'offset_end': 19560, 'content': 'function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }', 'contract_name': 'ERC4626Vault', 'contract_code': '{\n    using Math for uint256;\n\n    /**\n     * @notice Emitted when a user opts into an action or agreement.\n     * @param id The unique identifier of the opt-in action.\n     * @param user The address of the user who opted in.\n     */\n    event OptedIn(uint256 indexed id, address user);\n\n    /**\n     * @notice Emitted when a reward pool is created.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     */\n    event RewardPoolCreated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @notice Emitted when a reward pool is updated.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The new start timestamp of the reward pool.\n     * @param endTimestamp_ The new end timestamp of the reward pool.\n     * @param name_ The new name of the reward pool.\n     */\n    event RewardPoolUpdated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    IERC20 public immutable altToken;\n    IERC1155 public immutable erc1155StakedALT;\n    uint256 public immutable erc1155TokenID;\n\n    struct RewardPoolData {\n        uint64 startTimestamp;\n        uint64 endTimestamp;\n        string name;\n    }\n\n    uint256 public totalRewardPools;\n    mapping(uint256 => RewardPoolData) public RewardPools;\n    mapping(uint256 => mapping(address => bool)) public optedInUsers;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IERC1155 erc1155StakedALT_, uint256 erc1155TokenID_, IERC20 altToken_) {\n        if (address(erc1155StakedALT_) == address(0) || address(altToken_) == address(0)) {\n            revert ZeroAddress();\n        }\n        if (erc1155TokenID_ == 0) {\n            revert InvalidID();\n        }\n        erc1155StakedALT = erc1155StakedALT_;\n        erc1155TokenID = erc1155TokenID_;\n        altToken = altToken_;\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner, string memory name_, string memory symbol_) external initializer {\n        __Ownable_init(initialOwner);\n        __ERC20_init(name_, symbol_);\n    }\n\n    /**\n     * @notice Creates a new reward pool with the specified name, start, and end timestamps.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can create a reward pool.\n     */\n    function createRewardPool(uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) external onlyOwner {\n        if (block.timestamp > startTimestamp_) {\n            revert InvalidStartTime();\n        }\n        if (startTimestamp_ >= endTimestamp_) {\n            revert InvalidEndTime();\n        }\n        ++totalRewardPools;\n        uint256 id = totalRewardPools;\n\n        emit RewardPoolCreated(id, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @notice Updates an existing reward pool with the specified ID, name, start, and end timestamps.\n     * @param id_ The ID of the reward pool to set or update.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can set or update a reward pool.\n     */\n    function updateRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_)\n        external\n        onlyOwner\n    {\n        emit RewardPoolUpdated(id_, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id_, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @dev Allows a user to opt into a specific opt-in period.\n     * @param id The identifier of the opt-in period.\n     */\n    function optIn(uint256 id) external {\n        RewardPoolData memory rewardPoolData = RewardPools[id];\n\n        // If the rewardPoolData is not initialized\n        if (rewardPoolData.endTimestamp == 0) {\n            // Note: When initialized, endTimestamp is greater than startTimestamp\n            // Therefore. endTimestamp is always greater than 0.\n            revert InvalidID();\n        }\n\n        if (block.timestamp < rewardPoolData.startTimestamp) {\n            revert OptInPeriodNotStarted();\n        }\n\n        if (block.timestamp > rewardPoolData.endTimestamp) {\n            revert OptInPeriodEnded();\n        }\n\n        address sender = _msgSender();\n\n        if (balanceOf(sender) == 0) {\n            revert ZeroShare();\n        }\n\n        optedInUsers[id][sender] = true;\n        emit OptedIn(id, sender);\n    }\n\n    /**\n     * @notice Stakes all available alternative tokens into the staking contract.\n     * @dev This function will approve and then stake the total balance of altTokens held by this vault.\n     */\n    function stake() public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n\n        uint256 balance = altToken.balanceOf(thisVault);\n        altToken.approve(address(stk), balance);\n        stk.stake(thisVault, operator, balance);\n    }\n\n    /**\n     * @notice Claims rewards from the staking contract.\n     */\n    function claim(uint16 distributionId) public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n        stk.claimRewards(distributionId, thisVault, operator, type(uint256).max);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset\'s decimals. This\n     * "original" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset\'s decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC4626-asset}.\n     */\n    function asset() public view virtual returns (address) {\n        return address(erc1155StakedALT);\n    }\n\n    /**\n     * @dev See {IERC4626-totalAssets}.\n     */\n    function totalAssets() public view virtual returns (uint256) {\n        return erc1155StakedALT.balanceOf(address(this), erc1155TokenID);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToShares}.\n     */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToAssets}.\n     */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxDeposit}.\n     */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxMint}.\n     */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxWithdraw}.\n     */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxRedeem}.\n     */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /**\n     * @dev See {IERC4626-previewDeposit}.\n     */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-previewMint}.\n     */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewWithdraw}.\n     */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewRedeem}.\n     */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-deposit}.\n     */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev See {IERC4626-withdraw}.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-redeem}.\n     */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory)\n        external\n        pure\n        returns (bytes4)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 1, totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 1, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        erc1155StakedALT.safeTransferFrom(caller, address(this), erc1155TokenID, assets, "");\n\n        _mint(receiver, shares);\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares)\n        internal\n        virtual\n    {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If erc1155StakedALT is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        emit Withdraw(caller, receiver, owner, assets, shares);\n        erc1155StakedALT.safeTransferFrom(address(this), receiver, erc1155TokenID, assets, "");\n    }\n\n    function _setRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) internal {\n        RewardPools[id_] = RewardPoolData({startTimestamp: startTimestamp_, endTimestamp: endTimestamp_, name: name_});\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC4626Vault.deposit', 'start_line': 531, 'end_line': 541, 'offset_start': 19619, 'offset_end': 20010, 'content': 'function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }', 'contract_name': 'ERC4626Vault', 'contract_code': '{\n    using Math for uint256;\n\n    /**\n     * @notice Emitted when a user opts into an action or agreement.\n     * @param id The unique identifier of the opt-in action.\n     * @param user The address of the user who opted in.\n     */\n    event OptedIn(uint256 indexed id, address user);\n\n    /**\n     * @notice Emitted when a reward pool is created.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     */\n    event RewardPoolCreated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @notice Emitted when a reward pool is updated.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The new start timestamp of the reward pool.\n     * @param endTimestamp_ The new end timestamp of the reward pool.\n     * @param name_ The new name of the reward pool.\n     */\n    event RewardPoolUpdated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    IERC20 public immutable altToken;\n    IERC1155 public immutable erc1155StakedALT;\n    uint256 public immutable erc1155TokenID;\n\n    struct RewardPoolData {\n        uint64 startTimestamp;\n        uint64 endTimestamp;\n        string name;\n    }\n\n    uint256 public totalRewardPools;\n    mapping(uint256 => RewardPoolData) public RewardPools;\n    mapping(uint256 => mapping(address => bool)) public optedInUsers;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IERC1155 erc1155StakedALT_, uint256 erc1155TokenID_, IERC20 altToken_) {\n        if (address(erc1155StakedALT_) == address(0) || address(altToken_) == address(0)) {\n            revert ZeroAddress();\n        }\n        if (erc1155TokenID_ == 0) {\n            revert InvalidID();\n        }\n        erc1155StakedALT = erc1155StakedALT_;\n        erc1155TokenID = erc1155TokenID_;\n        altToken = altToken_;\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner, string memory name_, string memory symbol_) external initializer {\n        __Ownable_init(initialOwner);\n        __ERC20_init(name_, symbol_);\n    }\n\n    /**\n     * @notice Creates a new reward pool with the specified name, start, and end timestamps.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can create a reward pool.\n     */\n    function createRewardPool(uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) external onlyOwner {\n        if (block.timestamp > startTimestamp_) {\n            revert InvalidStartTime();\n        }\n        if (startTimestamp_ >= endTimestamp_) {\n            revert InvalidEndTime();\n        }\n        ++totalRewardPools;\n        uint256 id = totalRewardPools;\n\n        emit RewardPoolCreated(id, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @notice Updates an existing reward pool with the specified ID, name, start, and end timestamps.\n     * @param id_ The ID of the reward pool to set or update.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can set or update a reward pool.\n     */\n    function updateRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_)\n        external\n        onlyOwner\n    {\n        emit RewardPoolUpdated(id_, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id_, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @dev Allows a user to opt into a specific opt-in period.\n     * @param id The identifier of the opt-in period.\n     */\n    function optIn(uint256 id) external {\n        RewardPoolData memory rewardPoolData = RewardPools[id];\n\n        // If the rewardPoolData is not initialized\n        if (rewardPoolData.endTimestamp == 0) {\n            // Note: When initialized, endTimestamp is greater than startTimestamp\n            // Therefore. endTimestamp is always greater than 0.\n            revert InvalidID();\n        }\n\n        if (block.timestamp < rewardPoolData.startTimestamp) {\n            revert OptInPeriodNotStarted();\n        }\n\n        if (block.timestamp > rewardPoolData.endTimestamp) {\n            revert OptInPeriodEnded();\n        }\n\n        address sender = _msgSender();\n\n        if (balanceOf(sender) == 0) {\n            revert ZeroShare();\n        }\n\n        optedInUsers[id][sender] = true;\n        emit OptedIn(id, sender);\n    }\n\n    /**\n     * @notice Stakes all available alternative tokens into the staking contract.\n     * @dev This function will approve and then stake the total balance of altTokens held by this vault.\n     */\n    function stake() public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n\n        uint256 balance = altToken.balanceOf(thisVault);\n        altToken.approve(address(stk), balance);\n        stk.stake(thisVault, operator, balance);\n    }\n\n    /**\n     * @notice Claims rewards from the staking contract.\n     */\n    function claim(uint16 distributionId) public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n        stk.claimRewards(distributionId, thisVault, operator, type(uint256).max);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset\'s decimals. This\n     * "original" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset\'s decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC4626-asset}.\n     */\n    function asset() public view virtual returns (address) {\n        return address(erc1155StakedALT);\n    }\n\n    /**\n     * @dev See {IERC4626-totalAssets}.\n     */\n    function totalAssets() public view virtual returns (uint256) {\n        return erc1155StakedALT.balanceOf(address(this), erc1155TokenID);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToShares}.\n     */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToAssets}.\n     */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxDeposit}.\n     */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxMint}.\n     */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxWithdraw}.\n     */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxRedeem}.\n     */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /**\n     * @dev See {IERC4626-previewDeposit}.\n     */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-previewMint}.\n     */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewWithdraw}.\n     */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewRedeem}.\n     */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-deposit}.\n     */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev See {IERC4626-withdraw}.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-redeem}.\n     */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory)\n        external\n        pure\n        returns (bytes4)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 1, totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 1, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        erc1155StakedALT.safeTransferFrom(caller, address(this), erc1155TokenID, assets, "");\n\n        _mint(receiver, shares);\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares)\n        internal\n        virtual\n    {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If erc1155StakedALT is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        emit Withdraw(caller, receiver, owner, assets, shares);\n        erc1155StakedALT.safeTransferFrom(address(this), receiver, erc1155TokenID, assets, "");\n    }\n\n    function _setRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) internal {\n        RewardPools[id_] = RewardPoolData({startTimestamp: startTimestamp_, endTimestamp: endTimestamp_, name: name_});\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC4626Vault.mint', 'start_line': 549, 'end_line': 559, 'offset_start': 20285, 'offset_end': 20664, 'content': 'function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }', 'contract_name': 'ERC4626Vault', 'contract_code': '{\n    using Math for uint256;\n\n    /**\n     * @notice Emitted when a user opts into an action or agreement.\n     * @param id The unique identifier of the opt-in action.\n     * @param user The address of the user who opted in.\n     */\n    event OptedIn(uint256 indexed id, address user);\n\n    /**\n     * @notice Emitted when a reward pool is created.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     */\n    event RewardPoolCreated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @notice Emitted when a reward pool is updated.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The new start timestamp of the reward pool.\n     * @param endTimestamp_ The new end timestamp of the reward pool.\n     * @param name_ The new name of the reward pool.\n     */\n    event RewardPoolUpdated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    IERC20 public immutable altToken;\n    IERC1155 public immutable erc1155StakedALT;\n    uint256 public immutable erc1155TokenID;\n\n    struct RewardPoolData {\n        uint64 startTimestamp;\n        uint64 endTimestamp;\n        string name;\n    }\n\n    uint256 public totalRewardPools;\n    mapping(uint256 => RewardPoolData) public RewardPools;\n    mapping(uint256 => mapping(address => bool)) public optedInUsers;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IERC1155 erc1155StakedALT_, uint256 erc1155TokenID_, IERC20 altToken_) {\n        if (address(erc1155StakedALT_) == address(0) || address(altToken_) == address(0)) {\n            revert ZeroAddress();\n        }\n        if (erc1155TokenID_ == 0) {\n            revert InvalidID();\n        }\n        erc1155StakedALT = erc1155StakedALT_;\n        erc1155TokenID = erc1155TokenID_;\n        altToken = altToken_;\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner, string memory name_, string memory symbol_) external initializer {\n        __Ownable_init(initialOwner);\n        __ERC20_init(name_, symbol_);\n    }\n\n    /**\n     * @notice Creates a new reward pool with the specified name, start, and end timestamps.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can create a reward pool.\n     */\n    function createRewardPool(uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) external onlyOwner {\n        if (block.timestamp > startTimestamp_) {\n            revert InvalidStartTime();\n        }\n        if (startTimestamp_ >= endTimestamp_) {\n            revert InvalidEndTime();\n        }\n        ++totalRewardPools;\n        uint256 id = totalRewardPools;\n\n        emit RewardPoolCreated(id, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @notice Updates an existing reward pool with the specified ID, name, start, and end timestamps.\n     * @param id_ The ID of the reward pool to set or update.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can set or update a reward pool.\n     */\n    function updateRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_)\n        external\n        onlyOwner\n    {\n        emit RewardPoolUpdated(id_, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id_, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @dev Allows a user to opt into a specific opt-in period.\n     * @param id The identifier of the opt-in period.\n     */\n    function optIn(uint256 id) external {\n        RewardPoolData memory rewardPoolData = RewardPools[id];\n\n        // If the rewardPoolData is not initialized\n        if (rewardPoolData.endTimestamp == 0) {\n            // Note: When initialized, endTimestamp is greater than startTimestamp\n            // Therefore. endTimestamp is always greater than 0.\n            revert InvalidID();\n        }\n\n        if (block.timestamp < rewardPoolData.startTimestamp) {\n            revert OptInPeriodNotStarted();\n        }\n\n        if (block.timestamp > rewardPoolData.endTimestamp) {\n            revert OptInPeriodEnded();\n        }\n\n        address sender = _msgSender();\n\n        if (balanceOf(sender) == 0) {\n            revert ZeroShare();\n        }\n\n        optedInUsers[id][sender] = true;\n        emit OptedIn(id, sender);\n    }\n\n    /**\n     * @notice Stakes all available alternative tokens into the staking contract.\n     * @dev This function will approve and then stake the total balance of altTokens held by this vault.\n     */\n    function stake() public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n\n        uint256 balance = altToken.balanceOf(thisVault);\n        altToken.approve(address(stk), balance);\n        stk.stake(thisVault, operator, balance);\n    }\n\n    /**\n     * @notice Claims rewards from the staking contract.\n     */\n    function claim(uint16 distributionId) public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n        stk.claimRewards(distributionId, thisVault, operator, type(uint256).max);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset\'s decimals. This\n     * "original" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset\'s decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC4626-asset}.\n     */\n    function asset() public view virtual returns (address) {\n        return address(erc1155StakedALT);\n    }\n\n    /**\n     * @dev See {IERC4626-totalAssets}.\n     */\n    function totalAssets() public view virtual returns (uint256) {\n        return erc1155StakedALT.balanceOf(address(this), erc1155TokenID);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToShares}.\n     */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToAssets}.\n     */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxDeposit}.\n     */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxMint}.\n     */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxWithdraw}.\n     */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxRedeem}.\n     */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /**\n     * @dev See {IERC4626-previewDeposit}.\n     */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-previewMint}.\n     */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewWithdraw}.\n     */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewRedeem}.\n     */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-deposit}.\n     */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev See {IERC4626-withdraw}.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-redeem}.\n     */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory)\n        external\n        pure\n        returns (bytes4)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 1, totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 1, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        erc1155StakedALT.safeTransferFrom(caller, address(this), erc1155TokenID, assets, "");\n\n        _mint(receiver, shares);\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares)\n        internal\n        virtual\n    {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If erc1155StakedALT is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        emit Withdraw(caller, receiver, owner, assets, shares);\n        erc1155StakedALT.safeTransferFrom(address(this), receiver, erc1155TokenID, assets, "");\n    }\n\n    function _setRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) internal {\n        RewardPools[id_] = RewardPoolData({startTimestamp: startTimestamp_, endTimestamp: endTimestamp_, name: name_});\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC4626Vault.withdraw', 'start_line': 564, 'end_line': 574, 'offset_start': 20724, 'offset_end': 21136, 'content': 'function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }', 'contract_name': 'ERC4626Vault', 'contract_code': '{\n    using Math for uint256;\n\n    /**\n     * @notice Emitted when a user opts into an action or agreement.\n     * @param id The unique identifier of the opt-in action.\n     * @param user The address of the user who opted in.\n     */\n    event OptedIn(uint256 indexed id, address user);\n\n    /**\n     * @notice Emitted when a reward pool is created.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     */\n    event RewardPoolCreated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @notice Emitted when a reward pool is updated.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The new start timestamp of the reward pool.\n     * @param endTimestamp_ The new end timestamp of the reward pool.\n     * @param name_ The new name of the reward pool.\n     */\n    event RewardPoolUpdated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    IERC20 public immutable altToken;\n    IERC1155 public immutable erc1155StakedALT;\n    uint256 public immutable erc1155TokenID;\n\n    struct RewardPoolData {\n        uint64 startTimestamp;\n        uint64 endTimestamp;\n        string name;\n    }\n\n    uint256 public totalRewardPools;\n    mapping(uint256 => RewardPoolData) public RewardPools;\n    mapping(uint256 => mapping(address => bool)) public optedInUsers;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IERC1155 erc1155StakedALT_, uint256 erc1155TokenID_, IERC20 altToken_) {\n        if (address(erc1155StakedALT_) == address(0) || address(altToken_) == address(0)) {\n            revert ZeroAddress();\n        }\n        if (erc1155TokenID_ == 0) {\n            revert InvalidID();\n        }\n        erc1155StakedALT = erc1155StakedALT_;\n        erc1155TokenID = erc1155TokenID_;\n        altToken = altToken_;\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner, string memory name_, string memory symbol_) external initializer {\n        __Ownable_init(initialOwner);\n        __ERC20_init(name_, symbol_);\n    }\n\n    /**\n     * @notice Creates a new reward pool with the specified name, start, and end timestamps.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can create a reward pool.\n     */\n    function createRewardPool(uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) external onlyOwner {\n        if (block.timestamp > startTimestamp_) {\n            revert InvalidStartTime();\n        }\n        if (startTimestamp_ >= endTimestamp_) {\n            revert InvalidEndTime();\n        }\n        ++totalRewardPools;\n        uint256 id = totalRewardPools;\n\n        emit RewardPoolCreated(id, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @notice Updates an existing reward pool with the specified ID, name, start, and end timestamps.\n     * @param id_ The ID of the reward pool to set or update.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can set or update a reward pool.\n     */\n    function updateRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_)\n        external\n        onlyOwner\n    {\n        emit RewardPoolUpdated(id_, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id_, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @dev Allows a user to opt into a specific opt-in period.\n     * @param id The identifier of the opt-in period.\n     */\n    function optIn(uint256 id) external {\n        RewardPoolData memory rewardPoolData = RewardPools[id];\n\n        // If the rewardPoolData is not initialized\n        if (rewardPoolData.endTimestamp == 0) {\n            // Note: When initialized, endTimestamp is greater than startTimestamp\n            // Therefore. endTimestamp is always greater than 0.\n            revert InvalidID();\n        }\n\n        if (block.timestamp < rewardPoolData.startTimestamp) {\n            revert OptInPeriodNotStarted();\n        }\n\n        if (block.timestamp > rewardPoolData.endTimestamp) {\n            revert OptInPeriodEnded();\n        }\n\n        address sender = _msgSender();\n\n        if (balanceOf(sender) == 0) {\n            revert ZeroShare();\n        }\n\n        optedInUsers[id][sender] = true;\n        emit OptedIn(id, sender);\n    }\n\n    /**\n     * @notice Stakes all available alternative tokens into the staking contract.\n     * @dev This function will approve and then stake the total balance of altTokens held by this vault.\n     */\n    function stake() public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n\n        uint256 balance = altToken.balanceOf(thisVault);\n        altToken.approve(address(stk), balance);\n        stk.stake(thisVault, operator, balance);\n    }\n\n    /**\n     * @notice Claims rewards from the staking contract.\n     */\n    function claim(uint16 distributionId) public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n        stk.claimRewards(distributionId, thisVault, operator, type(uint256).max);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset\'s decimals. This\n     * "original" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset\'s decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC4626-asset}.\n     */\n    function asset() public view virtual returns (address) {\n        return address(erc1155StakedALT);\n    }\n\n    /**\n     * @dev See {IERC4626-totalAssets}.\n     */\n    function totalAssets() public view virtual returns (uint256) {\n        return erc1155StakedALT.balanceOf(address(this), erc1155TokenID);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToShares}.\n     */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToAssets}.\n     */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxDeposit}.\n     */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxMint}.\n     */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxWithdraw}.\n     */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxRedeem}.\n     */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /**\n     * @dev See {IERC4626-previewDeposit}.\n     */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-previewMint}.\n     */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewWithdraw}.\n     */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewRedeem}.\n     */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-deposit}.\n     */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev See {IERC4626-withdraw}.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-redeem}.\n     */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory)\n        external\n        pure\n        returns (bytes4)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 1, totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 1, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        erc1155StakedALT.safeTransferFrom(caller, address(this), erc1155TokenID, assets, "");\n\n        _mint(receiver, shares);\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares)\n        internal\n        virtual\n    {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If erc1155StakedALT is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        emit Withdraw(caller, receiver, owner, assets, shares);\n        erc1155StakedALT.safeTransferFrom(address(this), receiver, erc1155TokenID, assets, "");\n    }\n\n    function _setRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) internal {\n        RewardPools[id_] = RewardPoolData({startTimestamp: startTimestamp_, endTimestamp: endTimestamp_, name: name_});\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC4626Vault.redeem', 'start_line': 579, 'end_line': 589, 'offset_start': 21194, 'offset_end': 21598, 'content': 'function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }', 'contract_name': 'ERC4626Vault', 'contract_code': '{\n    using Math for uint256;\n\n    /**\n     * @notice Emitted when a user opts into an action or agreement.\n     * @param id The unique identifier of the opt-in action.\n     * @param user The address of the user who opted in.\n     */\n    event OptedIn(uint256 indexed id, address user);\n\n    /**\n     * @notice Emitted when a reward pool is created.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     */\n    event RewardPoolCreated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @notice Emitted when a reward pool is updated.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The new start timestamp of the reward pool.\n     * @param endTimestamp_ The new end timestamp of the reward pool.\n     * @param name_ The new name of the reward pool.\n     */\n    event RewardPoolUpdated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    IERC20 public immutable altToken;\n    IERC1155 public immutable erc1155StakedALT;\n    uint256 public immutable erc1155TokenID;\n\n    struct RewardPoolData {\n        uint64 startTimestamp;\n        uint64 endTimestamp;\n        string name;\n    }\n\n    uint256 public totalRewardPools;\n    mapping(uint256 => RewardPoolData) public RewardPools;\n    mapping(uint256 => mapping(address => bool)) public optedInUsers;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IERC1155 erc1155StakedALT_, uint256 erc1155TokenID_, IERC20 altToken_) {\n        if (address(erc1155StakedALT_) == address(0) || address(altToken_) == address(0)) {\n            revert ZeroAddress();\n        }\n        if (erc1155TokenID_ == 0) {\n            revert InvalidID();\n        }\n        erc1155StakedALT = erc1155StakedALT_;\n        erc1155TokenID = erc1155TokenID_;\n        altToken = altToken_;\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner, string memory name_, string memory symbol_) external initializer {\n        __Ownable_init(initialOwner);\n        __ERC20_init(name_, symbol_);\n    }\n\n    /**\n     * @notice Creates a new reward pool with the specified name, start, and end timestamps.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can create a reward pool.\n     */\n    function createRewardPool(uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) external onlyOwner {\n        if (block.timestamp > startTimestamp_) {\n            revert InvalidStartTime();\n        }\n        if (startTimestamp_ >= endTimestamp_) {\n            revert InvalidEndTime();\n        }\n        ++totalRewardPools;\n        uint256 id = totalRewardPools;\n\n        emit RewardPoolCreated(id, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @notice Updates an existing reward pool with the specified ID, name, start, and end timestamps.\n     * @param id_ The ID of the reward pool to set or update.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can set or update a reward pool.\n     */\n    function updateRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_)\n        external\n        onlyOwner\n    {\n        emit RewardPoolUpdated(id_, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id_, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @dev Allows a user to opt into a specific opt-in period.\n     * @param id The identifier of the opt-in period.\n     */\n    function optIn(uint256 id) external {\n        RewardPoolData memory rewardPoolData = RewardPools[id];\n\n        // If the rewardPoolData is not initialized\n        if (rewardPoolData.endTimestamp == 0) {\n            // Note: When initialized, endTimestamp is greater than startTimestamp\n            // Therefore. endTimestamp is always greater than 0.\n            revert InvalidID();\n        }\n\n        if (block.timestamp < rewardPoolData.startTimestamp) {\n            revert OptInPeriodNotStarted();\n        }\n\n        if (block.timestamp > rewardPoolData.endTimestamp) {\n            revert OptInPeriodEnded();\n        }\n\n        address sender = _msgSender();\n\n        if (balanceOf(sender) == 0) {\n            revert ZeroShare();\n        }\n\n        optedInUsers[id][sender] = true;\n        emit OptedIn(id, sender);\n    }\n\n    /**\n     * @notice Stakes all available alternative tokens into the staking contract.\n     * @dev This function will approve and then stake the total balance of altTokens held by this vault.\n     */\n    function stake() public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n\n        uint256 balance = altToken.balanceOf(thisVault);\n        altToken.approve(address(stk), balance);\n        stk.stake(thisVault, operator, balance);\n    }\n\n    /**\n     * @notice Claims rewards from the staking contract.\n     */\n    function claim(uint16 distributionId) public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n        stk.claimRewards(distributionId, thisVault, operator, type(uint256).max);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset\'s decimals. This\n     * "original" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset\'s decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC4626-asset}.\n     */\n    function asset() public view virtual returns (address) {\n        return address(erc1155StakedALT);\n    }\n\n    /**\n     * @dev See {IERC4626-totalAssets}.\n     */\n    function totalAssets() public view virtual returns (uint256) {\n        return erc1155StakedALT.balanceOf(address(this), erc1155TokenID);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToShares}.\n     */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToAssets}.\n     */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxDeposit}.\n     */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxMint}.\n     */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxWithdraw}.\n     */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxRedeem}.\n     */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /**\n     * @dev See {IERC4626-previewDeposit}.\n     */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-previewMint}.\n     */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewWithdraw}.\n     */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewRedeem}.\n     */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-deposit}.\n     */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev See {IERC4626-withdraw}.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-redeem}.\n     */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory)\n        external\n        pure\n        returns (bytes4)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 1, totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 1, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        erc1155StakedALT.safeTransferFrom(caller, address(this), erc1155TokenID, assets, "");\n\n        _mint(receiver, shares);\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares)\n        internal\n        virtual\n    {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If erc1155StakedALT is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        emit Withdraw(caller, receiver, owner, assets, shares);\n        erc1155StakedALT.safeTransferFrom(address(this), receiver, erc1155TokenID, assets, "");\n    }\n\n    function _setRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) internal {\n        RewardPools[id_] = RewardPoolData({startTimestamp: startTimestamp_, endTimestamp: endTimestamp_, name: name_});\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC4626Vault.onERC1155Received', 'start_line': 591, 'end_line': 593, 'offset_start': 21605, 'offset_end': 21767, 'content': 'function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }', 'contract_name': 'ERC4626Vault', 'contract_code': '{\n    using Math for uint256;\n\n    /**\n     * @notice Emitted when a user opts into an action or agreement.\n     * @param id The unique identifier of the opt-in action.\n     * @param user The address of the user who opted in.\n     */\n    event OptedIn(uint256 indexed id, address user);\n\n    /**\n     * @notice Emitted when a reward pool is created.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     */\n    event RewardPoolCreated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @notice Emitted when a reward pool is updated.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The new start timestamp of the reward pool.\n     * @param endTimestamp_ The new end timestamp of the reward pool.\n     * @param name_ The new name of the reward pool.\n     */\n    event RewardPoolUpdated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    IERC20 public immutable altToken;\n    IERC1155 public immutable erc1155StakedALT;\n    uint256 public immutable erc1155TokenID;\n\n    struct RewardPoolData {\n        uint64 startTimestamp;\n        uint64 endTimestamp;\n        string name;\n    }\n\n    uint256 public totalRewardPools;\n    mapping(uint256 => RewardPoolData) public RewardPools;\n    mapping(uint256 => mapping(address => bool)) public optedInUsers;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IERC1155 erc1155StakedALT_, uint256 erc1155TokenID_, IERC20 altToken_) {\n        if (address(erc1155StakedALT_) == address(0) || address(altToken_) == address(0)) {\n            revert ZeroAddress();\n        }\n        if (erc1155TokenID_ == 0) {\n            revert InvalidID();\n        }\n        erc1155StakedALT = erc1155StakedALT_;\n        erc1155TokenID = erc1155TokenID_;\n        altToken = altToken_;\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner, string memory name_, string memory symbol_) external initializer {\n        __Ownable_init(initialOwner);\n        __ERC20_init(name_, symbol_);\n    }\n\n    /**\n     * @notice Creates a new reward pool with the specified name, start, and end timestamps.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can create a reward pool.\n     */\n    function createRewardPool(uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) external onlyOwner {\n        if (block.timestamp > startTimestamp_) {\n            revert InvalidStartTime();\n        }\n        if (startTimestamp_ >= endTimestamp_) {\n            revert InvalidEndTime();\n        }\n        ++totalRewardPools;\n        uint256 id = totalRewardPools;\n\n        emit RewardPoolCreated(id, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @notice Updates an existing reward pool with the specified ID, name, start, and end timestamps.\n     * @param id_ The ID of the reward pool to set or update.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can set or update a reward pool.\n     */\n    function updateRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_)\n        external\n        onlyOwner\n    {\n        emit RewardPoolUpdated(id_, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id_, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @dev Allows a user to opt into a specific opt-in period.\n     * @param id The identifier of the opt-in period.\n     */\n    function optIn(uint256 id) external {\n        RewardPoolData memory rewardPoolData = RewardPools[id];\n\n        // If the rewardPoolData is not initialized\n        if (rewardPoolData.endTimestamp == 0) {\n            // Note: When initialized, endTimestamp is greater than startTimestamp\n            // Therefore. endTimestamp is always greater than 0.\n            revert InvalidID();\n        }\n\n        if (block.timestamp < rewardPoolData.startTimestamp) {\n            revert OptInPeriodNotStarted();\n        }\n\n        if (block.timestamp > rewardPoolData.endTimestamp) {\n            revert OptInPeriodEnded();\n        }\n\n        address sender = _msgSender();\n\n        if (balanceOf(sender) == 0) {\n            revert ZeroShare();\n        }\n\n        optedInUsers[id][sender] = true;\n        emit OptedIn(id, sender);\n    }\n\n    /**\n     * @notice Stakes all available alternative tokens into the staking contract.\n     * @dev This function will approve and then stake the total balance of altTokens held by this vault.\n     */\n    function stake() public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n\n        uint256 balance = altToken.balanceOf(thisVault);\n        altToken.approve(address(stk), balance);\n        stk.stake(thisVault, operator, balance);\n    }\n\n    /**\n     * @notice Claims rewards from the staking contract.\n     */\n    function claim(uint16 distributionId) public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n        stk.claimRewards(distributionId, thisVault, operator, type(uint256).max);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset\'s decimals. This\n     * "original" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset\'s decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC4626-asset}.\n     */\n    function asset() public view virtual returns (address) {\n        return address(erc1155StakedALT);\n    }\n\n    /**\n     * @dev See {IERC4626-totalAssets}.\n     */\n    function totalAssets() public view virtual returns (uint256) {\n        return erc1155StakedALT.balanceOf(address(this), erc1155TokenID);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToShares}.\n     */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToAssets}.\n     */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxDeposit}.\n     */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxMint}.\n     */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxWithdraw}.\n     */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxRedeem}.\n     */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /**\n     * @dev See {IERC4626-previewDeposit}.\n     */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-previewMint}.\n     */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewWithdraw}.\n     */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewRedeem}.\n     */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-deposit}.\n     */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev See {IERC4626-withdraw}.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-redeem}.\n     */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory)\n        external\n        pure\n        returns (bytes4)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 1, totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 1, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        erc1155StakedALT.safeTransferFrom(caller, address(this), erc1155TokenID, assets, "");\n\n        _mint(receiver, shares);\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares)\n        internal\n        virtual\n    {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If erc1155StakedALT is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        emit Withdraw(caller, receiver, owner, assets, shares);\n        erc1155StakedALT.safeTransferFrom(address(this), receiver, erc1155TokenID, assets, "");\n    }\n\n    function _setRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) internal {\n        RewardPools[id_] = RewardPoolData({startTimestamp: startTimestamp_, endTimestamp: endTimestamp_, name: name_});\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC4626Vault.onERC1155BatchReceived', 'start_line': 595, 'end_line': 601, 'offset_start': 21774, 'offset_end': 21992, 'content': 'function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory)\n        external\n        pure\n        returns (bytes4)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }', 'contract_name': 'ERC4626Vault', 'contract_code': '{\n    using Math for uint256;\n\n    /**\n     * @notice Emitted when a user opts into an action or agreement.\n     * @param id The unique identifier of the opt-in action.\n     * @param user The address of the user who opted in.\n     */\n    event OptedIn(uint256 indexed id, address user);\n\n    /**\n     * @notice Emitted when a reward pool is created.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     */\n    event RewardPoolCreated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @notice Emitted when a reward pool is updated.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The new start timestamp of the reward pool.\n     * @param endTimestamp_ The new end timestamp of the reward pool.\n     * @param name_ The new name of the reward pool.\n     */\n    event RewardPoolUpdated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    IERC20 public immutable altToken;\n    IERC1155 public immutable erc1155StakedALT;\n    uint256 public immutable erc1155TokenID;\n\n    struct RewardPoolData {\n        uint64 startTimestamp;\n        uint64 endTimestamp;\n        string name;\n    }\n\n    uint256 public totalRewardPools;\n    mapping(uint256 => RewardPoolData) public RewardPools;\n    mapping(uint256 => mapping(address => bool)) public optedInUsers;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IERC1155 erc1155StakedALT_, uint256 erc1155TokenID_, IERC20 altToken_) {\n        if (address(erc1155StakedALT_) == address(0) || address(altToken_) == address(0)) {\n            revert ZeroAddress();\n        }\n        if (erc1155TokenID_ == 0) {\n            revert InvalidID();\n        }\n        erc1155StakedALT = erc1155StakedALT_;\n        erc1155TokenID = erc1155TokenID_;\n        altToken = altToken_;\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner, string memory name_, string memory symbol_) external initializer {\n        __Ownable_init(initialOwner);\n        __ERC20_init(name_, symbol_);\n    }\n\n    /**\n     * @notice Creates a new reward pool with the specified name, start, and end timestamps.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can create a reward pool.\n     */\n    function createRewardPool(uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) external onlyOwner {\n        if (block.timestamp > startTimestamp_) {\n            revert InvalidStartTime();\n        }\n        if (startTimestamp_ >= endTimestamp_) {\n            revert InvalidEndTime();\n        }\n        ++totalRewardPools;\n        uint256 id = totalRewardPools;\n\n        emit RewardPoolCreated(id, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @notice Updates an existing reward pool with the specified ID, name, start, and end timestamps.\n     * @param id_ The ID of the reward pool to set or update.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can set or update a reward pool.\n     */\n    function updateRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_)\n        external\n        onlyOwner\n    {\n        emit RewardPoolUpdated(id_, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id_, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @dev Allows a user to opt into a specific opt-in period.\n     * @param id The identifier of the opt-in period.\n     */\n    function optIn(uint256 id) external {\n        RewardPoolData memory rewardPoolData = RewardPools[id];\n\n        // If the rewardPoolData is not initialized\n        if (rewardPoolData.endTimestamp == 0) {\n            // Note: When initialized, endTimestamp is greater than startTimestamp\n            // Therefore. endTimestamp is always greater than 0.\n            revert InvalidID();\n        }\n\n        if (block.timestamp < rewardPoolData.startTimestamp) {\n            revert OptInPeriodNotStarted();\n        }\n\n        if (block.timestamp > rewardPoolData.endTimestamp) {\n            revert OptInPeriodEnded();\n        }\n\n        address sender = _msgSender();\n\n        if (balanceOf(sender) == 0) {\n            revert ZeroShare();\n        }\n\n        optedInUsers[id][sender] = true;\n        emit OptedIn(id, sender);\n    }\n\n    /**\n     * @notice Stakes all available alternative tokens into the staking contract.\n     * @dev This function will approve and then stake the total balance of altTokens held by this vault.\n     */\n    function stake() public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n\n        uint256 balance = altToken.balanceOf(thisVault);\n        altToken.approve(address(stk), balance);\n        stk.stake(thisVault, operator, balance);\n    }\n\n    /**\n     * @notice Claims rewards from the staking contract.\n     */\n    function claim(uint16 distributionId) public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n        stk.claimRewards(distributionId, thisVault, operator, type(uint256).max);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset\'s decimals. This\n     * "original" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset\'s decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC4626-asset}.\n     */\n    function asset() public view virtual returns (address) {\n        return address(erc1155StakedALT);\n    }\n\n    /**\n     * @dev See {IERC4626-totalAssets}.\n     */\n    function totalAssets() public view virtual returns (uint256) {\n        return erc1155StakedALT.balanceOf(address(this), erc1155TokenID);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToShares}.\n     */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToAssets}.\n     */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxDeposit}.\n     */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxMint}.\n     */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxWithdraw}.\n     */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxRedeem}.\n     */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /**\n     * @dev See {IERC4626-previewDeposit}.\n     */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-previewMint}.\n     */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewWithdraw}.\n     */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewRedeem}.\n     */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-deposit}.\n     */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev See {IERC4626-withdraw}.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-redeem}.\n     */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory)\n        external\n        pure\n        returns (bytes4)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 1, totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 1, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        erc1155StakedALT.safeTransferFrom(caller, address(this), erc1155TokenID, assets, "");\n\n        _mint(receiver, shares);\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares)\n        internal\n        virtual\n    {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If erc1155StakedALT is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        emit Withdraw(caller, receiver, owner, assets, shares);\n        erc1155StakedALT.safeTransferFrom(address(this), receiver, erc1155TokenID, assets, "");\n    }\n\n    function _setRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) internal {\n        RewardPools[id_] = RewardPoolData({startTimestamp: startTimestamp_, endTimestamp: endTimestamp_, name: name_});\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC4626Vault.supportsInterface', 'start_line': 606, 'end_line': 608, 'offset_start': 22060, 'offset_end': 22223, 'content': 'function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId;\n    }', 'contract_name': 'ERC4626Vault', 'contract_code': '{\n    using Math for uint256;\n\n    /**\n     * @notice Emitted when a user opts into an action or agreement.\n     * @param id The unique identifier of the opt-in action.\n     * @param user The address of the user who opted in.\n     */\n    event OptedIn(uint256 indexed id, address user);\n\n    /**\n     * @notice Emitted when a reward pool is created.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     */\n    event RewardPoolCreated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @notice Emitted when a reward pool is updated.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The new start timestamp of the reward pool.\n     * @param endTimestamp_ The new end timestamp of the reward pool.\n     * @param name_ The new name of the reward pool.\n     */\n    event RewardPoolUpdated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    IERC20 public immutable altToken;\n    IERC1155 public immutable erc1155StakedALT;\n    uint256 public immutable erc1155TokenID;\n\n    struct RewardPoolData {\n        uint64 startTimestamp;\n        uint64 endTimestamp;\n        string name;\n    }\n\n    uint256 public totalRewardPools;\n    mapping(uint256 => RewardPoolData) public RewardPools;\n    mapping(uint256 => mapping(address => bool)) public optedInUsers;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IERC1155 erc1155StakedALT_, uint256 erc1155TokenID_, IERC20 altToken_) {\n        if (address(erc1155StakedALT_) == address(0) || address(altToken_) == address(0)) {\n            revert ZeroAddress();\n        }\n        if (erc1155TokenID_ == 0) {\n            revert InvalidID();\n        }\n        erc1155StakedALT = erc1155StakedALT_;\n        erc1155TokenID = erc1155TokenID_;\n        altToken = altToken_;\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner, string memory name_, string memory symbol_) external initializer {\n        __Ownable_init(initialOwner);\n        __ERC20_init(name_, symbol_);\n    }\n\n    /**\n     * @notice Creates a new reward pool with the specified name, start, and end timestamps.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can create a reward pool.\n     */\n    function createRewardPool(uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) external onlyOwner {\n        if (block.timestamp > startTimestamp_) {\n            revert InvalidStartTime();\n        }\n        if (startTimestamp_ >= endTimestamp_) {\n            revert InvalidEndTime();\n        }\n        ++totalRewardPools;\n        uint256 id = totalRewardPools;\n\n        emit RewardPoolCreated(id, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @notice Updates an existing reward pool with the specified ID, name, start, and end timestamps.\n     * @param id_ The ID of the reward pool to set or update.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can set or update a reward pool.\n     */\n    function updateRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_)\n        external\n        onlyOwner\n    {\n        emit RewardPoolUpdated(id_, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id_, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @dev Allows a user to opt into a specific opt-in period.\n     * @param id The identifier of the opt-in period.\n     */\n    function optIn(uint256 id) external {\n        RewardPoolData memory rewardPoolData = RewardPools[id];\n\n        // If the rewardPoolData is not initialized\n        if (rewardPoolData.endTimestamp == 0) {\n            // Note: When initialized, endTimestamp is greater than startTimestamp\n            // Therefore. endTimestamp is always greater than 0.\n            revert InvalidID();\n        }\n\n        if (block.timestamp < rewardPoolData.startTimestamp) {\n            revert OptInPeriodNotStarted();\n        }\n\n        if (block.timestamp > rewardPoolData.endTimestamp) {\n            revert OptInPeriodEnded();\n        }\n\n        address sender = _msgSender();\n\n        if (balanceOf(sender) == 0) {\n            revert ZeroShare();\n        }\n\n        optedInUsers[id][sender] = true;\n        emit OptedIn(id, sender);\n    }\n\n    /**\n     * @notice Stakes all available alternative tokens into the staking contract.\n     * @dev This function will approve and then stake the total balance of altTokens held by this vault.\n     */\n    function stake() public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n\n        uint256 balance = altToken.balanceOf(thisVault);\n        altToken.approve(address(stk), balance);\n        stk.stake(thisVault, operator, balance);\n    }\n\n    /**\n     * @notice Claims rewards from the staking contract.\n     */\n    function claim(uint16 distributionId) public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n        stk.claimRewards(distributionId, thisVault, operator, type(uint256).max);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset\'s decimals. This\n     * "original" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset\'s decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC4626-asset}.\n     */\n    function asset() public view virtual returns (address) {\n        return address(erc1155StakedALT);\n    }\n\n    /**\n     * @dev See {IERC4626-totalAssets}.\n     */\n    function totalAssets() public view virtual returns (uint256) {\n        return erc1155StakedALT.balanceOf(address(this), erc1155TokenID);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToShares}.\n     */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToAssets}.\n     */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxDeposit}.\n     */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxMint}.\n     */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxWithdraw}.\n     */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxRedeem}.\n     */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /**\n     * @dev See {IERC4626-previewDeposit}.\n     */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-previewMint}.\n     */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewWithdraw}.\n     */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewRedeem}.\n     */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-deposit}.\n     */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev See {IERC4626-withdraw}.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-redeem}.\n     */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory)\n        external\n        pure\n        returns (bytes4)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 1, totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 1, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        erc1155StakedALT.safeTransferFrom(caller, address(this), erc1155TokenID, assets, "");\n\n        _mint(receiver, shares);\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares)\n        internal\n        virtual\n    {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If erc1155StakedALT is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        emit Withdraw(caller, receiver, owner, assets, shares);\n        erc1155StakedALT.safeTransferFrom(address(this), receiver, erc1155TokenID, assets, "");\n    }\n\n    function _setRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) internal {\n        RewardPools[id_] = RewardPoolData({startTimestamp: startTimestamp_, endTimestamp: endTimestamp_, name: name_});\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC4626Vault._convertToShares', 'start_line': 613, 'end_line': 615, 'offset_start': 22348, 'offset_end': 22538, 'content': 'function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 1, totalAssets() + 1, rounding);\n    }', 'contract_name': 'ERC4626Vault', 'contract_code': '{\n    using Math for uint256;\n\n    /**\n     * @notice Emitted when a user opts into an action or agreement.\n     * @param id The unique identifier of the opt-in action.\n     * @param user The address of the user who opted in.\n     */\n    event OptedIn(uint256 indexed id, address user);\n\n    /**\n     * @notice Emitted when a reward pool is created.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     */\n    event RewardPoolCreated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @notice Emitted when a reward pool is updated.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The new start timestamp of the reward pool.\n     * @param endTimestamp_ The new end timestamp of the reward pool.\n     * @param name_ The new name of the reward pool.\n     */\n    event RewardPoolUpdated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    IERC20 public immutable altToken;\n    IERC1155 public immutable erc1155StakedALT;\n    uint256 public immutable erc1155TokenID;\n\n    struct RewardPoolData {\n        uint64 startTimestamp;\n        uint64 endTimestamp;\n        string name;\n    }\n\n    uint256 public totalRewardPools;\n    mapping(uint256 => RewardPoolData) public RewardPools;\n    mapping(uint256 => mapping(address => bool)) public optedInUsers;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IERC1155 erc1155StakedALT_, uint256 erc1155TokenID_, IERC20 altToken_) {\n        if (address(erc1155StakedALT_) == address(0) || address(altToken_) == address(0)) {\n            revert ZeroAddress();\n        }\n        if (erc1155TokenID_ == 0) {\n            revert InvalidID();\n        }\n        erc1155StakedALT = erc1155StakedALT_;\n        erc1155TokenID = erc1155TokenID_;\n        altToken = altToken_;\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner, string memory name_, string memory symbol_) external initializer {\n        __Ownable_init(initialOwner);\n        __ERC20_init(name_, symbol_);\n    }\n\n    /**\n     * @notice Creates a new reward pool with the specified name, start, and end timestamps.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can create a reward pool.\n     */\n    function createRewardPool(uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) external onlyOwner {\n        if (block.timestamp > startTimestamp_) {\n            revert InvalidStartTime();\n        }\n        if (startTimestamp_ >= endTimestamp_) {\n            revert InvalidEndTime();\n        }\n        ++totalRewardPools;\n        uint256 id = totalRewardPools;\n\n        emit RewardPoolCreated(id, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @notice Updates an existing reward pool with the specified ID, name, start, and end timestamps.\n     * @param id_ The ID of the reward pool to set or update.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can set or update a reward pool.\n     */\n    function updateRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_)\n        external\n        onlyOwner\n    {\n        emit RewardPoolUpdated(id_, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id_, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @dev Allows a user to opt into a specific opt-in period.\n     * @param id The identifier of the opt-in period.\n     */\n    function optIn(uint256 id) external {\n        RewardPoolData memory rewardPoolData = RewardPools[id];\n\n        // If the rewardPoolData is not initialized\n        if (rewardPoolData.endTimestamp == 0) {\n            // Note: When initialized, endTimestamp is greater than startTimestamp\n            // Therefore. endTimestamp is always greater than 0.\n            revert InvalidID();\n        }\n\n        if (block.timestamp < rewardPoolData.startTimestamp) {\n            revert OptInPeriodNotStarted();\n        }\n\n        if (block.timestamp > rewardPoolData.endTimestamp) {\n            revert OptInPeriodEnded();\n        }\n\n        address sender = _msgSender();\n\n        if (balanceOf(sender) == 0) {\n            revert ZeroShare();\n        }\n\n        optedInUsers[id][sender] = true;\n        emit OptedIn(id, sender);\n    }\n\n    /**\n     * @notice Stakes all available alternative tokens into the staking contract.\n     * @dev This function will approve and then stake the total balance of altTokens held by this vault.\n     */\n    function stake() public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n\n        uint256 balance = altToken.balanceOf(thisVault);\n        altToken.approve(address(stk), balance);\n        stk.stake(thisVault, operator, balance);\n    }\n\n    /**\n     * @notice Claims rewards from the staking contract.\n     */\n    function claim(uint16 distributionId) public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n        stk.claimRewards(distributionId, thisVault, operator, type(uint256).max);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset\'s decimals. This\n     * "original" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset\'s decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC4626-asset}.\n     */\n    function asset() public view virtual returns (address) {\n        return address(erc1155StakedALT);\n    }\n\n    /**\n     * @dev See {IERC4626-totalAssets}.\n     */\n    function totalAssets() public view virtual returns (uint256) {\n        return erc1155StakedALT.balanceOf(address(this), erc1155TokenID);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToShares}.\n     */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToAssets}.\n     */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxDeposit}.\n     */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxMint}.\n     */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxWithdraw}.\n     */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxRedeem}.\n     */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /**\n     * @dev See {IERC4626-previewDeposit}.\n     */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-previewMint}.\n     */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewWithdraw}.\n     */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewRedeem}.\n     */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-deposit}.\n     */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev See {IERC4626-withdraw}.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-redeem}.\n     */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory)\n        external\n        pure\n        returns (bytes4)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 1, totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 1, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        erc1155StakedALT.safeTransferFrom(caller, address(this), erc1155TokenID, assets, "");\n\n        _mint(receiver, shares);\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares)\n        internal\n        virtual\n    {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If erc1155StakedALT is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        emit Withdraw(caller, receiver, owner, assets, shares);\n        erc1155StakedALT.safeTransferFrom(address(this), receiver, erc1155TokenID, assets, "");\n    }\n\n    function _setRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) internal {\n        RewardPools[id_] = RewardPoolData({startTimestamp: startTimestamp_, endTimestamp: endTimestamp_, name: name_});\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC4626Vault._convertToAssets', 'start_line': 620, 'end_line': 622, 'offset_start': 22663, 'offset_end': 22853, 'content': 'function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 1, rounding);\n    }', 'contract_name': 'ERC4626Vault', 'contract_code': '{\n    using Math for uint256;\n\n    /**\n     * @notice Emitted when a user opts into an action or agreement.\n     * @param id The unique identifier of the opt-in action.\n     * @param user The address of the user who opted in.\n     */\n    event OptedIn(uint256 indexed id, address user);\n\n    /**\n     * @notice Emitted when a reward pool is created.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     */\n    event RewardPoolCreated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @notice Emitted when a reward pool is updated.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The new start timestamp of the reward pool.\n     * @param endTimestamp_ The new end timestamp of the reward pool.\n     * @param name_ The new name of the reward pool.\n     */\n    event RewardPoolUpdated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    IERC20 public immutable altToken;\n    IERC1155 public immutable erc1155StakedALT;\n    uint256 public immutable erc1155TokenID;\n\n    struct RewardPoolData {\n        uint64 startTimestamp;\n        uint64 endTimestamp;\n        string name;\n    }\n\n    uint256 public totalRewardPools;\n    mapping(uint256 => RewardPoolData) public RewardPools;\n    mapping(uint256 => mapping(address => bool)) public optedInUsers;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IERC1155 erc1155StakedALT_, uint256 erc1155TokenID_, IERC20 altToken_) {\n        if (address(erc1155StakedALT_) == address(0) || address(altToken_) == address(0)) {\n            revert ZeroAddress();\n        }\n        if (erc1155TokenID_ == 0) {\n            revert InvalidID();\n        }\n        erc1155StakedALT = erc1155StakedALT_;\n        erc1155TokenID = erc1155TokenID_;\n        altToken = altToken_;\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner, string memory name_, string memory symbol_) external initializer {\n        __Ownable_init(initialOwner);\n        __ERC20_init(name_, symbol_);\n    }\n\n    /**\n     * @notice Creates a new reward pool with the specified name, start, and end timestamps.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can create a reward pool.\n     */\n    function createRewardPool(uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) external onlyOwner {\n        if (block.timestamp > startTimestamp_) {\n            revert InvalidStartTime();\n        }\n        if (startTimestamp_ >= endTimestamp_) {\n            revert InvalidEndTime();\n        }\n        ++totalRewardPools;\n        uint256 id = totalRewardPools;\n\n        emit RewardPoolCreated(id, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @notice Updates an existing reward pool with the specified ID, name, start, and end timestamps.\n     * @param id_ The ID of the reward pool to set or update.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can set or update a reward pool.\n     */\n    function updateRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_)\n        external\n        onlyOwner\n    {\n        emit RewardPoolUpdated(id_, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id_, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @dev Allows a user to opt into a specific opt-in period.\n     * @param id The identifier of the opt-in period.\n     */\n    function optIn(uint256 id) external {\n        RewardPoolData memory rewardPoolData = RewardPools[id];\n\n        // If the rewardPoolData is not initialized\n        if (rewardPoolData.endTimestamp == 0) {\n            // Note: When initialized, endTimestamp is greater than startTimestamp\n            // Therefore. endTimestamp is always greater than 0.\n            revert InvalidID();\n        }\n\n        if (block.timestamp < rewardPoolData.startTimestamp) {\n            revert OptInPeriodNotStarted();\n        }\n\n        if (block.timestamp > rewardPoolData.endTimestamp) {\n            revert OptInPeriodEnded();\n        }\n\n        address sender = _msgSender();\n\n        if (balanceOf(sender) == 0) {\n            revert ZeroShare();\n        }\n\n        optedInUsers[id][sender] = true;\n        emit OptedIn(id, sender);\n    }\n\n    /**\n     * @notice Stakes all available alternative tokens into the staking contract.\n     * @dev This function will approve and then stake the total balance of altTokens held by this vault.\n     */\n    function stake() public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n\n        uint256 balance = altToken.balanceOf(thisVault);\n        altToken.approve(address(stk), balance);\n        stk.stake(thisVault, operator, balance);\n    }\n\n    /**\n     * @notice Claims rewards from the staking contract.\n     */\n    function claim(uint16 distributionId) public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n        stk.claimRewards(distributionId, thisVault, operator, type(uint256).max);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset\'s decimals. This\n     * "original" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset\'s decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC4626-asset}.\n     */\n    function asset() public view virtual returns (address) {\n        return address(erc1155StakedALT);\n    }\n\n    /**\n     * @dev See {IERC4626-totalAssets}.\n     */\n    function totalAssets() public view virtual returns (uint256) {\n        return erc1155StakedALT.balanceOf(address(this), erc1155TokenID);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToShares}.\n     */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToAssets}.\n     */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxDeposit}.\n     */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxMint}.\n     */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxWithdraw}.\n     */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxRedeem}.\n     */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /**\n     * @dev See {IERC4626-previewDeposit}.\n     */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-previewMint}.\n     */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewWithdraw}.\n     */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewRedeem}.\n     */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-deposit}.\n     */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev See {IERC4626-withdraw}.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-redeem}.\n     */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory)\n        external\n        pure\n        returns (bytes4)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 1, totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 1, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        erc1155StakedALT.safeTransferFrom(caller, address(this), erc1155TokenID, assets, "");\n\n        _mint(receiver, shares);\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares)\n        internal\n        virtual\n    {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If erc1155StakedALT is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        emit Withdraw(caller, receiver, owner, assets, shares);\n        erc1155StakedALT.safeTransferFrom(address(this), receiver, erc1155TokenID, assets, "");\n    }\n\n    function _setRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) internal {\n        RewardPools[id_] = RewardPoolData({startTimestamp: startTimestamp_, endTimestamp: endTimestamp_, name: name_});\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC4626Vault._deposit', 'start_line': 627, 'end_line': 639, 'offset_start': 22918, 'offset_end': 23767, 'content': 'function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        erc1155StakedALT.safeTransferFrom(caller, address(this), erc1155TokenID, assets, "");\n\n        _mint(receiver, shares);\n        emit Deposit(caller, receiver, assets, shares);\n    }', 'contract_name': 'ERC4626Vault', 'contract_code': '{\n    using Math for uint256;\n\n    /**\n     * @notice Emitted when a user opts into an action or agreement.\n     * @param id The unique identifier of the opt-in action.\n     * @param user The address of the user who opted in.\n     */\n    event OptedIn(uint256 indexed id, address user);\n\n    /**\n     * @notice Emitted when a reward pool is created.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     */\n    event RewardPoolCreated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @notice Emitted when a reward pool is updated.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The new start timestamp of the reward pool.\n     * @param endTimestamp_ The new end timestamp of the reward pool.\n     * @param name_ The new name of the reward pool.\n     */\n    event RewardPoolUpdated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    IERC20 public immutable altToken;\n    IERC1155 public immutable erc1155StakedALT;\n    uint256 public immutable erc1155TokenID;\n\n    struct RewardPoolData {\n        uint64 startTimestamp;\n        uint64 endTimestamp;\n        string name;\n    }\n\n    uint256 public totalRewardPools;\n    mapping(uint256 => RewardPoolData) public RewardPools;\n    mapping(uint256 => mapping(address => bool)) public optedInUsers;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IERC1155 erc1155StakedALT_, uint256 erc1155TokenID_, IERC20 altToken_) {\n        if (address(erc1155StakedALT_) == address(0) || address(altToken_) == address(0)) {\n            revert ZeroAddress();\n        }\n        if (erc1155TokenID_ == 0) {\n            revert InvalidID();\n        }\n        erc1155StakedALT = erc1155StakedALT_;\n        erc1155TokenID = erc1155TokenID_;\n        altToken = altToken_;\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner, string memory name_, string memory symbol_) external initializer {\n        __Ownable_init(initialOwner);\n        __ERC20_init(name_, symbol_);\n    }\n\n    /**\n     * @notice Creates a new reward pool with the specified name, start, and end timestamps.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can create a reward pool.\n     */\n    function createRewardPool(uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) external onlyOwner {\n        if (block.timestamp > startTimestamp_) {\n            revert InvalidStartTime();\n        }\n        if (startTimestamp_ >= endTimestamp_) {\n            revert InvalidEndTime();\n        }\n        ++totalRewardPools;\n        uint256 id = totalRewardPools;\n\n        emit RewardPoolCreated(id, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @notice Updates an existing reward pool with the specified ID, name, start, and end timestamps.\n     * @param id_ The ID of the reward pool to set or update.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can set or update a reward pool.\n     */\n    function updateRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_)\n        external\n        onlyOwner\n    {\n        emit RewardPoolUpdated(id_, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id_, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @dev Allows a user to opt into a specific opt-in period.\n     * @param id The identifier of the opt-in period.\n     */\n    function optIn(uint256 id) external {\n        RewardPoolData memory rewardPoolData = RewardPools[id];\n\n        // If the rewardPoolData is not initialized\n        if (rewardPoolData.endTimestamp == 0) {\n            // Note: When initialized, endTimestamp is greater than startTimestamp\n            // Therefore. endTimestamp is always greater than 0.\n            revert InvalidID();\n        }\n\n        if (block.timestamp < rewardPoolData.startTimestamp) {\n            revert OptInPeriodNotStarted();\n        }\n\n        if (block.timestamp > rewardPoolData.endTimestamp) {\n            revert OptInPeriodEnded();\n        }\n\n        address sender = _msgSender();\n\n        if (balanceOf(sender) == 0) {\n            revert ZeroShare();\n        }\n\n        optedInUsers[id][sender] = true;\n        emit OptedIn(id, sender);\n    }\n\n    /**\n     * @notice Stakes all available alternative tokens into the staking contract.\n     * @dev This function will approve and then stake the total balance of altTokens held by this vault.\n     */\n    function stake() public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n\n        uint256 balance = altToken.balanceOf(thisVault);\n        altToken.approve(address(stk), balance);\n        stk.stake(thisVault, operator, balance);\n    }\n\n    /**\n     * @notice Claims rewards from the staking contract.\n     */\n    function claim(uint16 distributionId) public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n        stk.claimRewards(distributionId, thisVault, operator, type(uint256).max);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset\'s decimals. This\n     * "original" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset\'s decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC4626-asset}.\n     */\n    function asset() public view virtual returns (address) {\n        return address(erc1155StakedALT);\n    }\n\n    /**\n     * @dev See {IERC4626-totalAssets}.\n     */\n    function totalAssets() public view virtual returns (uint256) {\n        return erc1155StakedALT.balanceOf(address(this), erc1155TokenID);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToShares}.\n     */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToAssets}.\n     */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxDeposit}.\n     */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxMint}.\n     */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxWithdraw}.\n     */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxRedeem}.\n     */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /**\n     * @dev See {IERC4626-previewDeposit}.\n     */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-previewMint}.\n     */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewWithdraw}.\n     */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewRedeem}.\n     */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-deposit}.\n     */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev See {IERC4626-withdraw}.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-redeem}.\n     */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory)\n        external\n        pure\n        returns (bytes4)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 1, totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 1, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        erc1155StakedALT.safeTransferFrom(caller, address(this), erc1155TokenID, assets, "");\n\n        _mint(receiver, shares);\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares)\n        internal\n        virtual\n    {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If erc1155StakedALT is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        emit Withdraw(caller, receiver, owner, assets, shares);\n        erc1155StakedALT.safeTransferFrom(address(this), receiver, erc1155TokenID, assets, "");\n    }\n\n    function _setRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) internal {\n        RewardPools[id_] = RewardPoolData({startTimestamp: startTimestamp_, endTimestamp: endTimestamp_, name: name_});\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC4626Vault._withdraw', 'start_line': 644, 'end_line': 661, 'offset_start': 23835, 'offset_end': 24770, 'content': 'function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares)\n        internal\n        virtual\n    {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If erc1155StakedALT is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        emit Withdraw(caller, receiver, owner, assets, shares);\n        erc1155StakedALT.safeTransferFrom(address(this), receiver, erc1155TokenID, assets, "");\n    }', 'contract_name': 'ERC4626Vault', 'contract_code': '{\n    using Math for uint256;\n\n    /**\n     * @notice Emitted when a user opts into an action or agreement.\n     * @param id The unique identifier of the opt-in action.\n     * @param user The address of the user who opted in.\n     */\n    event OptedIn(uint256 indexed id, address user);\n\n    /**\n     * @notice Emitted when a reward pool is created.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     */\n    event RewardPoolCreated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @notice Emitted when a reward pool is updated.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The new start timestamp of the reward pool.\n     * @param endTimestamp_ The new end timestamp of the reward pool.\n     * @param name_ The new name of the reward pool.\n     */\n    event RewardPoolUpdated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    IERC20 public immutable altToken;\n    IERC1155 public immutable erc1155StakedALT;\n    uint256 public immutable erc1155TokenID;\n\n    struct RewardPoolData {\n        uint64 startTimestamp;\n        uint64 endTimestamp;\n        string name;\n    }\n\n    uint256 public totalRewardPools;\n    mapping(uint256 => RewardPoolData) public RewardPools;\n    mapping(uint256 => mapping(address => bool)) public optedInUsers;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IERC1155 erc1155StakedALT_, uint256 erc1155TokenID_, IERC20 altToken_) {\n        if (address(erc1155StakedALT_) == address(0) || address(altToken_) == address(0)) {\n            revert ZeroAddress();\n        }\n        if (erc1155TokenID_ == 0) {\n            revert InvalidID();\n        }\n        erc1155StakedALT = erc1155StakedALT_;\n        erc1155TokenID = erc1155TokenID_;\n        altToken = altToken_;\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner, string memory name_, string memory symbol_) external initializer {\n        __Ownable_init(initialOwner);\n        __ERC20_init(name_, symbol_);\n    }\n\n    /**\n     * @notice Creates a new reward pool with the specified name, start, and end timestamps.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can create a reward pool.\n     */\n    function createRewardPool(uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) external onlyOwner {\n        if (block.timestamp > startTimestamp_) {\n            revert InvalidStartTime();\n        }\n        if (startTimestamp_ >= endTimestamp_) {\n            revert InvalidEndTime();\n        }\n        ++totalRewardPools;\n        uint256 id = totalRewardPools;\n\n        emit RewardPoolCreated(id, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @notice Updates an existing reward pool with the specified ID, name, start, and end timestamps.\n     * @param id_ The ID of the reward pool to set or update.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can set or update a reward pool.\n     */\n    function updateRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_)\n        external\n        onlyOwner\n    {\n        emit RewardPoolUpdated(id_, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id_, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @dev Allows a user to opt into a specific opt-in period.\n     * @param id The identifier of the opt-in period.\n     */\n    function optIn(uint256 id) external {\n        RewardPoolData memory rewardPoolData = RewardPools[id];\n\n        // If the rewardPoolData is not initialized\n        if (rewardPoolData.endTimestamp == 0) {\n            // Note: When initialized, endTimestamp is greater than startTimestamp\n            // Therefore. endTimestamp is always greater than 0.\n            revert InvalidID();\n        }\n\n        if (block.timestamp < rewardPoolData.startTimestamp) {\n            revert OptInPeriodNotStarted();\n        }\n\n        if (block.timestamp > rewardPoolData.endTimestamp) {\n            revert OptInPeriodEnded();\n        }\n\n        address sender = _msgSender();\n\n        if (balanceOf(sender) == 0) {\n            revert ZeroShare();\n        }\n\n        optedInUsers[id][sender] = true;\n        emit OptedIn(id, sender);\n    }\n\n    /**\n     * @notice Stakes all available alternative tokens into the staking contract.\n     * @dev This function will approve and then stake the total balance of altTokens held by this vault.\n     */\n    function stake() public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n\n        uint256 balance = altToken.balanceOf(thisVault);\n        altToken.approve(address(stk), balance);\n        stk.stake(thisVault, operator, balance);\n    }\n\n    /**\n     * @notice Claims rewards from the staking contract.\n     */\n    function claim(uint16 distributionId) public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n        stk.claimRewards(distributionId, thisVault, operator, type(uint256).max);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset\'s decimals. This\n     * "original" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset\'s decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC4626-asset}.\n     */\n    function asset() public view virtual returns (address) {\n        return address(erc1155StakedALT);\n    }\n\n    /**\n     * @dev See {IERC4626-totalAssets}.\n     */\n    function totalAssets() public view virtual returns (uint256) {\n        return erc1155StakedALT.balanceOf(address(this), erc1155TokenID);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToShares}.\n     */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToAssets}.\n     */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxDeposit}.\n     */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxMint}.\n     */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxWithdraw}.\n     */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxRedeem}.\n     */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /**\n     * @dev See {IERC4626-previewDeposit}.\n     */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-previewMint}.\n     */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewWithdraw}.\n     */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewRedeem}.\n     */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-deposit}.\n     */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev See {IERC4626-withdraw}.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-redeem}.\n     */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory)\n        external\n        pure\n        returns (bytes4)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 1, totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 1, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        erc1155StakedALT.safeTransferFrom(caller, address(this), erc1155TokenID, assets, "");\n\n        _mint(receiver, shares);\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares)\n        internal\n        virtual\n    {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If erc1155StakedALT is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        emit Withdraw(caller, receiver, owner, assets, shares);\n        erc1155StakedALT.safeTransferFrom(address(this), receiver, erc1155TokenID, assets, "");\n    }\n\n    function _setRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) internal {\n        RewardPools[id_] = RewardPoolData({startTimestamp: startTimestamp_, endTimestamp: endTimestamp_, name: name_});\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC4626Vault._setRewardPool', 'start_line': 663, 'end_line': 665, 'offset_start': 24777, 'offset_end': 25016, 'content': 'function _setRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) internal {\n        RewardPools[id_] = RewardPoolData({startTimestamp: startTimestamp_, endTimestamp: endTimestamp_, name: name_});\n    }', 'contract_name': 'ERC4626Vault', 'contract_code': '{\n    using Math for uint256;\n\n    /**\n     * @notice Emitted when a user opts into an action or agreement.\n     * @param id The unique identifier of the opt-in action.\n     * @param user The address of the user who opted in.\n     */\n    event OptedIn(uint256 indexed id, address user);\n\n    /**\n     * @notice Emitted when a reward pool is created.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     */\n    event RewardPoolCreated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @notice Emitted when a reward pool is updated.\n     * @param id The unique identifier of the reward pool.\n     * @param startTimestamp_ The new start timestamp of the reward pool.\n     * @param endTimestamp_ The new end timestamp of the reward pool.\n     * @param name_ The new name of the reward pool.\n     */\n    event RewardPoolUpdated(uint256 indexed id, uint64 startTimestamp_, uint64 endTimestamp_, string name_);\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    IERC20 public immutable altToken;\n    IERC1155 public immutable erc1155StakedALT;\n    uint256 public immutable erc1155TokenID;\n\n    struct RewardPoolData {\n        uint64 startTimestamp;\n        uint64 endTimestamp;\n        string name;\n    }\n\n    uint256 public totalRewardPools;\n    mapping(uint256 => RewardPoolData) public RewardPools;\n    mapping(uint256 => mapping(address => bool)) public optedInUsers;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IERC1155 erc1155StakedALT_, uint256 erc1155TokenID_, IERC20 altToken_) {\n        if (address(erc1155StakedALT_) == address(0) || address(altToken_) == address(0)) {\n            revert ZeroAddress();\n        }\n        if (erc1155TokenID_ == 0) {\n            revert InvalidID();\n        }\n        erc1155StakedALT = erc1155StakedALT_;\n        erc1155TokenID = erc1155TokenID_;\n        altToken = altToken_;\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner, string memory name_, string memory symbol_) external initializer {\n        __Ownable_init(initialOwner);\n        __ERC20_init(name_, symbol_);\n    }\n\n    /**\n     * @notice Creates a new reward pool with the specified name, start, and end timestamps.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can create a reward pool.\n     */\n    function createRewardPool(uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) external onlyOwner {\n        if (block.timestamp > startTimestamp_) {\n            revert InvalidStartTime();\n        }\n        if (startTimestamp_ >= endTimestamp_) {\n            revert InvalidEndTime();\n        }\n        ++totalRewardPools;\n        uint256 id = totalRewardPools;\n\n        emit RewardPoolCreated(id, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @notice Updates an existing reward pool with the specified ID, name, start, and end timestamps.\n     * @param id_ The ID of the reward pool to set or update.\n     * @param startTimestamp_ The start timestamp of the reward pool.\n     * @param endTimestamp_ The end timestamp of the reward pool.\n     * @param name_ The name of the reward pool.\n     * @dev Only the contract owner can set or update a reward pool.\n     */\n    function updateRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_)\n        external\n        onlyOwner\n    {\n        emit RewardPoolUpdated(id_, startTimestamp_, endTimestamp_, name_);\n        _setRewardPool(id_, startTimestamp_, endTimestamp_, name_);\n    }\n\n    /**\n     * @dev Allows a user to opt into a specific opt-in period.\n     * @param id The identifier of the opt-in period.\n     */\n    function optIn(uint256 id) external {\n        RewardPoolData memory rewardPoolData = RewardPools[id];\n\n        // If the rewardPoolData is not initialized\n        if (rewardPoolData.endTimestamp == 0) {\n            // Note: When initialized, endTimestamp is greater than startTimestamp\n            // Therefore. endTimestamp is always greater than 0.\n            revert InvalidID();\n        }\n\n        if (block.timestamp < rewardPoolData.startTimestamp) {\n            revert OptInPeriodNotStarted();\n        }\n\n        if (block.timestamp > rewardPoolData.endTimestamp) {\n            revert OptInPeriodEnded();\n        }\n\n        address sender = _msgSender();\n\n        if (balanceOf(sender) == 0) {\n            revert ZeroShare();\n        }\n\n        optedInUsers[id][sender] = true;\n        emit OptedIn(id, sender);\n    }\n\n    /**\n     * @notice Stakes all available alternative tokens into the staking contract.\n     * @dev This function will approve and then stake the total balance of altTokens held by this vault.\n     */\n    function stake() public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n\n        uint256 balance = altToken.balanceOf(thisVault);\n        altToken.approve(address(stk), balance);\n        stk.stake(thisVault, operator, balance);\n    }\n\n    /**\n     * @notice Claims rewards from the staking contract.\n     */\n    function claim(uint16 distributionId) public {\n        address operator = address(uint160(erc1155TokenID));\n        address thisVault = address(this);\n        IStakedMultiToken stk = IStakedMultiToken(address(erc1155StakedALT));\n        stk.claimRewards(distributionId, thisVault, operator, type(uint256).max);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset\'s decimals. This\n     * "original" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset\'s decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC4626-asset}.\n     */\n    function asset() public view virtual returns (address) {\n        return address(erc1155StakedALT);\n    }\n\n    /**\n     * @dev See {IERC4626-totalAssets}.\n     */\n    function totalAssets() public view virtual returns (uint256) {\n        return erc1155StakedALT.balanceOf(address(this), erc1155TokenID);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToShares}.\n     */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-convertToAssets}.\n     */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxDeposit}.\n     */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxMint}.\n     */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev See {IERC4626-maxWithdraw}.\n     */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-maxRedeem}.\n     */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /**\n     * @dev See {IERC4626-previewDeposit}.\n     */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-previewMint}.\n     */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewWithdraw}.\n     */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /**\n     * @dev See {IERC4626-previewRedeem}.\n     */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /**\n     * @dev See {IERC4626-deposit}.\n     */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev See {IERC4626-withdraw}.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /**\n     * @dev See {IERC4626-redeem}.\n     */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory)\n        external\n        pure\n        returns (bytes4)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 1, totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 1, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        erc1155StakedALT.safeTransferFrom(caller, address(this), erc1155TokenID, assets, "");\n\n        _mint(receiver, shares);\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares)\n        internal\n        virtual\n    {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If erc1155StakedALT is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        emit Withdraw(caller, receiver, owner, assets, shares);\n        erc1155StakedALT.safeTransferFrom(address(this), receiver, erc1155TokenID, assets, "");\n    }\n\n    function _setRewardPool(uint256 id_, uint64 startTimestamp_, uint64 endTimestamp_, string memory name_) internal {\n        RewardPools[id_] = RewardPoolData({startTimestamp: startTimestamp_, endTimestamp: endTimestamp_, name: name_});\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Ownable2StepUpgradeable._getOwnable2StepStorage', 'start_line': 696, 'end_line': 700, 'offset_start': 26208, 'offset_end': 26381, 'content': 'function _getOwnable2StepStorage() private pure returns (Ownable2StepStorage storage $) {\n        assembly {\n            $.slot := Ownable2StepStorageLocation\n        }\n    }', 'contract_name': 'Ownable2StepUpgradeable', 'contract_code': '{\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable2Step\n    struct Ownable2StepStorage {\n        address _pendingOwner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.Ownable2Step")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant Ownable2StepStorageLocation = 0x237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00;\n\n    function _getOwnable2StepStorage() private pure returns (Ownable2StepStorage storage $) {\n        assembly {\n            $.slot := Ownable2StepStorageLocation\n        }\n    }\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    function __Ownable2Step_init() internal onlyInitializing {\n    }\n\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\n        return $._pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\n        $._pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\n        delete $._pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        if (pendingOwner() != sender) {\n            revert OwnableUnauthorizedAccount(sender);\n        }\n        _transferOwnership(sender);\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'private', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Ownable2StepUpgradeable.__Ownable2Step_init', 'start_line': 704, 'end_line': 705, 'offset_start': 26482, 'offset_end': 26545, 'content': 'function __Ownable2Step_init() internal onlyInitializing {\n    }', 'contract_name': 'Ownable2StepUpgradeable', 'contract_code': '{\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable2Step\n    struct Ownable2StepStorage {\n        address _pendingOwner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.Ownable2Step")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant Ownable2StepStorageLocation = 0x237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00;\n\n    function _getOwnable2StepStorage() private pure returns (Ownable2StepStorage storage $) {\n        assembly {\n            $.slot := Ownable2StepStorageLocation\n        }\n    }\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    function __Ownable2Step_init() internal onlyInitializing {\n    }\n\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\n        return $._pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\n        $._pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\n        delete $._pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        if (pendingOwner() != sender) {\n            revert OwnableUnauthorizedAccount(sender);\n        }\n        _transferOwnership(sender);\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Ownable2StepUpgradeable.__Ownable2Step_init_unchained', 'start_line': 707, 'end_line': 708, 'offset_start': 26552, 'offset_end': 26625, 'content': 'function __Ownable2Step_init_unchained() internal onlyInitializing {\n    }', 'contract_name': 'Ownable2StepUpgradeable', 'contract_code': '{\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable2Step\n    struct Ownable2StepStorage {\n        address _pendingOwner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.Ownable2Step")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant Ownable2StepStorageLocation = 0x237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00;\n\n    function _getOwnable2StepStorage() private pure returns (Ownable2StepStorage storage $) {\n        assembly {\n            $.slot := Ownable2StepStorageLocation\n        }\n    }\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    function __Ownable2Step_init() internal onlyInitializing {\n    }\n\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\n        return $._pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\n        $._pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\n        delete $._pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        if (pendingOwner() != sender) {\n            revert OwnableUnauthorizedAccount(sender);\n        }\n        _transferOwnership(sender);\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Ownable2StepUpgradeable.pendingOwner', 'start_line': 712, 'end_line': 715, 'offset_start': 26701, 'offset_end': 26868, 'content': 'function pendingOwner() public view virtual returns (address) {\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\n        return $._pendingOwner;\n    }', 'contract_name': 'Ownable2StepUpgradeable', 'contract_code': '{\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable2Step\n    struct Ownable2StepStorage {\n        address _pendingOwner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.Ownable2Step")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant Ownable2StepStorageLocation = 0x237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00;\n\n    function _getOwnable2StepStorage() private pure returns (Ownable2StepStorage storage $) {\n        assembly {\n            $.slot := Ownable2StepStorageLocation\n        }\n    }\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    function __Ownable2Step_init() internal onlyInitializing {\n    }\n\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\n        return $._pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\n        $._pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\n        delete $._pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        if (pendingOwner() != sender) {\n            revert OwnableUnauthorizedAccount(sender);\n        }\n        _transferOwnership(sender);\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Ownable2StepUpgradeable.transferOwnership', 'start_line': 721, 'end_line': 725, 'offset_start': 27062, 'offset_end': 27308, 'content': 'function transferOwnership(address newOwner) public virtual override onlyOwner {\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\n        $._pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }', 'contract_name': 'Ownable2StepUpgradeable', 'contract_code': '{\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable2Step\n    struct Ownable2StepStorage {\n        address _pendingOwner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.Ownable2Step")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant Ownable2StepStorageLocation = 0x237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00;\n\n    function _getOwnable2StepStorage() private pure returns (Ownable2StepStorage storage $) {\n        assembly {\n            $.slot := Ownable2StepStorageLocation\n        }\n    }\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    function __Ownable2Step_init() internal onlyInitializing {\n    }\n\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\n        return $._pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\n        $._pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\n        delete $._pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        if (pendingOwner() != sender) {\n            revert OwnableUnauthorizedAccount(sender);\n        }\n        _transferOwnership(sender);\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Ownable2StepUpgradeable._transferOwnership', 'start_line': 731, 'end_line': 735, 'offset_start': 27493, 'offset_end': 27714, 'content': 'function _transferOwnership(address newOwner) internal virtual override {\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\n        delete $._pendingOwner;\n        super._transferOwnership(newOwner);\n    }', 'contract_name': 'Ownable2StepUpgradeable', 'contract_code': '{\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable2Step\n    struct Ownable2StepStorage {\n        address _pendingOwner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.Ownable2Step")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant Ownable2StepStorageLocation = 0x237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00;\n\n    function _getOwnable2StepStorage() private pure returns (Ownable2StepStorage storage $) {\n        assembly {\n            $.slot := Ownable2StepStorageLocation\n        }\n    }\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    function __Ownable2Step_init() internal onlyInitializing {\n    }\n\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\n        return $._pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\n        $._pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\n        delete $._pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        if (pendingOwner() != sender) {\n            revert OwnableUnauthorizedAccount(sender);\n        }\n        _transferOwnership(sender);\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Ownable2StepUpgradeable.acceptOwnership', 'start_line': 740, 'end_line': 746, 'offset_start': 27795, 'offset_end': 28023, 'content': 'function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        if (pendingOwner() != sender) {\n            revert OwnableUnauthorizedAccount(sender);\n        }\n        _transferOwnership(sender);\n    }', 'contract_name': 'Ownable2StepUpgradeable', 'contract_code': '{\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable2Step\n    struct Ownable2StepStorage {\n        address _pendingOwner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.Ownable2Step")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant Ownable2StepStorageLocation = 0x237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00;\n\n    function _getOwnable2StepStorage() private pure returns (Ownable2StepStorage storage $) {\n        assembly {\n            $.slot := Ownable2StepStorageLocation\n        }\n    }\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    function __Ownable2Step_init() internal onlyInitializing {\n    }\n\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\n        return $._pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\n        $._pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\n        delete $._pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        if (pendingOwner() != sender) {\n            revert OwnableUnauthorizedAccount(sender);\n        }\n        _transferOwnership(sender);\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC20Upgradeable._getERC20Storage', 'start_line': 799, 'end_line': 803, 'offset_start': 30270, 'offset_end': 30422, 'content': 'function _getERC20Storage() private pure returns (ERC20Storage storage $) {\n        assembly {\n            $.slot := ERC20StorageLocation\n        }\n    }', 'contract_name': 'ERC20Upgradeable', 'contract_code': '{\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\n    struct ERC20Storage {\n        mapping(address account => uint256) _balances;\n\n        mapping(address account => mapping(address spender => uint256)) _allowances;\n\n        uint256 _totalSupply;\n\n        string _name;\n        string _symbol;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.ERC20")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\n\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\n        assembly {\n            $.slot := ERC20StorageLocation\n        }\n    }\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        ERC20Storage storage $ = _getERC20Storage();\n        $._name = name_;\n        $._symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it\'s overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``\'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            $._totalSupply += value;\n        } else {\n            uint256 fromBalance = $._balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                $._balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                $._totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                $._balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        $._allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'private', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC20Upgradeable.__ERC20_init', 'start_line': 811, 'end_line': 813, 'offset_start': 30605, 'offset_end': 30751, 'content': 'function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }', 'contract_name': 'ERC20Upgradeable', 'contract_code': '{\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\n    struct ERC20Storage {\n        mapping(address account => uint256) _balances;\n\n        mapping(address account => mapping(address spender => uint256)) _allowances;\n\n        uint256 _totalSupply;\n\n        string _name;\n        string _symbol;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.ERC20")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\n\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\n        assembly {\n            $.slot := ERC20StorageLocation\n        }\n    }\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        ERC20Storage storage $ = _getERC20Storage();\n        $._name = name_;\n        $._symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it\'s overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``\'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            $._totalSupply += value;\n        } else {\n            uint256 fromBalance = $._balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                $._balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                $._totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                $._balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        $._allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC20Upgradeable.__ERC20_init_unchained', 'start_line': 815, 'end_line': 819, 'offset_start': 30758, 'offset_end': 30973, 'content': 'function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        ERC20Storage storage $ = _getERC20Storage();\n        $._name = name_;\n        $._symbol = symbol_;\n    }', 'contract_name': 'ERC20Upgradeable', 'contract_code': '{\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\n    struct ERC20Storage {\n        mapping(address account => uint256) _balances;\n\n        mapping(address account => mapping(address spender => uint256)) _allowances;\n\n        uint256 _totalSupply;\n\n        string _name;\n        string _symbol;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.ERC20")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\n\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\n        assembly {\n            $.slot := ERC20StorageLocation\n        }\n    }\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        ERC20Storage storage $ = _getERC20Storage();\n        $._name = name_;\n        $._symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it\'s overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``\'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            $._totalSupply += value;\n        } else {\n            uint256 fromBalance = $._balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                $._balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                $._totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                $._balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        $._allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC20Upgradeable.name', 'start_line': 824, 'end_line': 827, 'offset_start': 31039, 'offset_end': 31182, 'content': 'function name() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._name;\n    }', 'contract_name': 'ERC20Upgradeable', 'contract_code': '{\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\n    struct ERC20Storage {\n        mapping(address account => uint256) _balances;\n\n        mapping(address account => mapping(address spender => uint256)) _allowances;\n\n        uint256 _totalSupply;\n\n        string _name;\n        string _symbol;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.ERC20")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\n\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\n        assembly {\n            $.slot := ERC20StorageLocation\n        }\n    }\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        ERC20Storage storage $ = _getERC20Storage();\n        $._name = name_;\n        $._symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it\'s overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``\'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            $._totalSupply += value;\n        } else {\n            uint256 fromBalance = $._balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                $._balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                $._totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                $._balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        $._allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC20Upgradeable.symbol', 'start_line': 833, 'end_line': 836, 'offset_start': 31296, 'offset_end': 31443, 'content': 'function symbol() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._symbol;\n    }', 'contract_name': 'ERC20Upgradeable', 'contract_code': '{\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\n    struct ERC20Storage {\n        mapping(address account => uint256) _balances;\n\n        mapping(address account => mapping(address spender => uint256)) _allowances;\n\n        uint256 _totalSupply;\n\n        string _name;\n        string _symbol;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.ERC20")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\n\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\n        assembly {\n            $.slot := ERC20StorageLocation\n        }\n    }\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        ERC20Storage storage $ = _getERC20Storage();\n        $._name = name_;\n        $._symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it\'s overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``\'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            $._totalSupply += value;\n        } else {\n            uint256 fromBalance = $._balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                $._balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                $._totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                $._balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        $._allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC20Upgradeable.decimals', 'start_line': 851, 'end_line': 853, 'offset_start': 32077, 'offset_end': 32158, 'content': 'function decimals() public view virtual returns (uint8) {\n        return 18;\n    }', 'contract_name': 'ERC20Upgradeable', 'contract_code': '{\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\n    struct ERC20Storage {\n        mapping(address account => uint256) _balances;\n\n        mapping(address account => mapping(address spender => uint256)) _allowances;\n\n        uint256 _totalSupply;\n\n        string _name;\n        string _symbol;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.ERC20")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\n\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\n        assembly {\n            $.slot := ERC20StorageLocation\n        }\n    }\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        ERC20Storage storage $ = _getERC20Storage();\n        $._name = name_;\n        $._symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it\'s overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``\'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            $._totalSupply += value;\n        } else {\n            uint256 fromBalance = $._balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                $._balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                $._totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                $._balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        $._allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC20Upgradeable.totalSupply', 'start_line': 858, 'end_line': 861, 'offset_start': 32219, 'offset_end': 32370, 'content': 'function totalSupply() public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._totalSupply;\n    }', 'contract_name': 'ERC20Upgradeable', 'contract_code': '{\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\n    struct ERC20Storage {\n        mapping(address account => uint256) _balances;\n\n        mapping(address account => mapping(address spender => uint256)) _allowances;\n\n        uint256 _totalSupply;\n\n        string _name;\n        string _symbol;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.ERC20")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\n\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\n        assembly {\n            $.slot := ERC20StorageLocation\n        }\n    }\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        ERC20Storage storage $ = _getERC20Storage();\n        $._name = name_;\n        $._symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it\'s overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``\'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            $._totalSupply += value;\n        } else {\n            uint256 fromBalance = $._balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                $._balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                $._totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                $._balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        $._allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC20Upgradeable.balanceOf', 'start_line': 866, 'end_line': 869, 'offset_start': 32429, 'offset_end': 32599, 'content': 'function balanceOf(address account) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._balances[account];\n    }', 'contract_name': 'ERC20Upgradeable', 'contract_code': '{\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\n    struct ERC20Storage {\n        mapping(address account => uint256) _balances;\n\n        mapping(address account => mapping(address spender => uint256)) _allowances;\n\n        uint256 _totalSupply;\n\n        string _name;\n        string _symbol;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.ERC20")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\n\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\n        assembly {\n            $.slot := ERC20StorageLocation\n        }\n    }\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        ERC20Storage storage $ = _getERC20Storage();\n        $._name = name_;\n        $._symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it\'s overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``\'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            $._totalSupply += value;\n        } else {\n            uint256 fromBalance = $._balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                $._balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                $._totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                $._balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        $._allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC20Upgradeable.transfer', 'start_line': 879, 'end_line': 883, 'offset_start': 32795, 'offset_end': 32972, 'content': 'function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }', 'contract_name': 'ERC20Upgradeable', 'contract_code': '{\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\n    struct ERC20Storage {\n        mapping(address account => uint256) _balances;\n\n        mapping(address account => mapping(address spender => uint256)) _allowances;\n\n        uint256 _totalSupply;\n\n        string _name;\n        string _symbol;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.ERC20")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\n\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\n        assembly {\n            $.slot := ERC20StorageLocation\n        }\n    }\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        ERC20Storage storage $ = _getERC20Storage();\n        $._name = name_;\n        $._symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it\'s overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``\'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            $._totalSupply += value;\n        } else {\n            uint256 fromBalance = $._balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                $._balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                $._totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                $._balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        $._allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC20Upgradeable.allowance', 'start_line': 888, 'end_line': 891, 'offset_start': 33031, 'offset_end': 33225, 'content': 'function allowance(address owner, address spender) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._allowances[owner][spender];\n    }', 'contract_name': 'ERC20Upgradeable', 'contract_code': '{\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\n    struct ERC20Storage {\n        mapping(address account => uint256) _balances;\n\n        mapping(address account => mapping(address spender => uint256)) _allowances;\n\n        uint256 _totalSupply;\n\n        string _name;\n        string _symbol;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.ERC20")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\n\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\n        assembly {\n            $.slot := ERC20StorageLocation\n        }\n    }\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        ERC20Storage storage $ = _getERC20Storage();\n        $._name = name_;\n        $._symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it\'s overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``\'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            $._totalSupply += value;\n        } else {\n            uint256 fromBalance = $._balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                $._balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                $._totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                $._balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        $._allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC20Upgradeable.approve', 'start_line': 903, 'end_line': 907, 'offset_start': 33533, 'offset_end': 33718, 'content': 'function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }', 'contract_name': 'ERC20Upgradeable', 'contract_code': '{\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\n    struct ERC20Storage {\n        mapping(address account => uint256) _balances;\n\n        mapping(address account => mapping(address spender => uint256)) _allowances;\n\n        uint256 _totalSupply;\n\n        string _name;\n        string _symbol;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.ERC20")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\n\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\n        assembly {\n            $.slot := ERC20StorageLocation\n        }\n    }\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        ERC20Storage storage $ = _getERC20Storage();\n        $._name = name_;\n        $._symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it\'s overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``\'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            $._totalSupply += value;\n        } else {\n            uint256 fromBalance = $._balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                $._balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                $._totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                $._balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        $._allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC20Upgradeable.transferFrom', 'start_line': 925, 'end_line': 930, 'offset_start': 34279, 'offset_end': 34522, 'content': 'function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }', 'contract_name': 'ERC20Upgradeable', 'contract_code': '{\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\n    struct ERC20Storage {\n        mapping(address account => uint256) _balances;\n\n        mapping(address account => mapping(address spender => uint256)) _allowances;\n\n        uint256 _totalSupply;\n\n        string _name;\n        string _symbol;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.ERC20")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\n\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\n        assembly {\n            $.slot := ERC20StorageLocation\n        }\n    }\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        ERC20Storage storage $ = _getERC20Storage();\n        $._name = name_;\n        $._symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it\'s overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``\'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            $._totalSupply += value;\n        } else {\n            uint256 fromBalance = $._balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                $._balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                $._totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                $._balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        $._allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC20Upgradeable._transfer', 'start_line': 942, 'end_line': 950, 'offset_start': 34896, 'offset_end': 35195, 'content': 'function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }', 'contract_name': 'ERC20Upgradeable', 'contract_code': '{\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\n    struct ERC20Storage {\n        mapping(address account => uint256) _balances;\n\n        mapping(address account => mapping(address spender => uint256)) _allowances;\n\n        uint256 _totalSupply;\n\n        string _name;\n        string _symbol;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.ERC20")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\n\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\n        assembly {\n            $.slot := ERC20StorageLocation\n        }\n    }\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        ERC20Storage storage $ = _getERC20Storage();\n        $._name = name_;\n        $._symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it\'s overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``\'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            $._totalSupply += value;\n        } else {\n            uint256 fromBalance = $._balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                $._balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                $._totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                $._balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        $._allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC20Upgradeable._update', 'start_line': 959, 'end_line': 988, 'offset_start': 35511, 'offset_end': 36680, 'content': 'function _update(address from, address to, uint256 value) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            $._totalSupply += value;\n        } else {\n            uint256 fromBalance = $._balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                $._balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                $._totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                $._balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }', 'contract_name': 'ERC20Upgradeable', 'contract_code': '{\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\n    struct ERC20Storage {\n        mapping(address account => uint256) _balances;\n\n        mapping(address account => mapping(address spender => uint256)) _allowances;\n\n        uint256 _totalSupply;\n\n        string _name;\n        string _symbol;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.ERC20")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\n\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\n        assembly {\n            $.slot := ERC20StorageLocation\n        }\n    }\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        ERC20Storage storage $ = _getERC20Storage();\n        $._name = name_;\n        $._symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it\'s overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``\'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            $._totalSupply += value;\n        } else {\n            uint256 fromBalance = $._balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                $._balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                $._totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                $._balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        $._allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC20Upgradeable._mint', 'start_line': 998, 'end_line': 1003, 'offset_start': 37024, 'offset_end': 37231, 'content': 'function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }', 'contract_name': 'ERC20Upgradeable', 'contract_code': '{\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\n    struct ERC20Storage {\n        mapping(address account => uint256) _balances;\n\n        mapping(address account => mapping(address spender => uint256)) _allowances;\n\n        uint256 _totalSupply;\n\n        string _name;\n        string _symbol;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.ERC20")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\n\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\n        assembly {\n            $.slot := ERC20StorageLocation\n        }\n    }\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        ERC20Storage storage $ = _getERC20Storage();\n        $._name = name_;\n        $._symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it\'s overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``\'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            $._totalSupply += value;\n        } else {\n            uint256 fromBalance = $._balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                $._balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                $._totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                $._balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        $._allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC20Upgradeable._burn', 'start_line': 1013, 'end_line': 1018, 'offset_start': 37550, 'offset_end': 37755, 'content': 'function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }', 'contract_name': 'ERC20Upgradeable', 'contract_code': '{\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\n    struct ERC20Storage {\n        mapping(address account => uint256) _balances;\n\n        mapping(address account => mapping(address spender => uint256)) _allowances;\n\n        uint256 _totalSupply;\n\n        string _name;\n        string _symbol;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.ERC20")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\n\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\n        assembly {\n            $.slot := ERC20StorageLocation\n        }\n    }\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        ERC20Storage storage $ = _getERC20Storage();\n        $._name = name_;\n        $._symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it\'s overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``\'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            $._totalSupply += value;\n        } else {\n            uint256 fromBalance = $._balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                $._balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                $._totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                $._balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        $._allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC20Upgradeable._approve', 'start_line': 1035, 'end_line': 1037, 'offset_start': 38292, 'offset_end': 38419, 'content': 'function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }', 'contract_name': 'ERC20Upgradeable', 'contract_code': '{\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\n    struct ERC20Storage {\n        mapping(address account => uint256) _balances;\n\n        mapping(address account => mapping(address spender => uint256)) _allowances;\n\n        uint256 _totalSupply;\n\n        string _name;\n        string _symbol;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.ERC20")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\n\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\n        assembly {\n            $.slot := ERC20StorageLocation\n        }\n    }\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        ERC20Storage storage $ = _getERC20Storage();\n        $._name = name_;\n        $._symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it\'s overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``\'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            $._totalSupply += value;\n        } else {\n            uint256 fromBalance = $._balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                $._balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                $._totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                $._balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        $._allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC20Upgradeable._approve', 'start_line': 1056, 'end_line': 1068, 'offset_start': 39252, 'offset_end': 39738, 'content': 'function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        $._allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }', 'contract_name': 'ERC20Upgradeable', 'contract_code': '{\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\n    struct ERC20Storage {\n        mapping(address account => uint256) _balances;\n\n        mapping(address account => mapping(address spender => uint256)) _allowances;\n\n        uint256 _totalSupply;\n\n        string _name;\n        string _symbol;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.ERC20")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\n\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\n        assembly {\n            $.slot := ERC20StorageLocation\n        }\n    }\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        ERC20Storage storage $ = _getERC20Storage();\n        $._name = name_;\n        $._symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it\'s overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``\'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            $._totalSupply += value;\n        } else {\n            uint256 fromBalance = $._balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                $._balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                $._totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                $._balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        $._allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC20Upgradeable._spendAllowance', 'start_line': 1078, 'end_line': 1088, 'offset_start': 40021, 'offset_end': 40497, 'content': 'function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }', 'contract_name': 'ERC20Upgradeable', 'contract_code': '{\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\n    struct ERC20Storage {\n        mapping(address account => uint256) _balances;\n\n        mapping(address account => mapping(address spender => uint256)) _allowances;\n\n        uint256 _totalSupply;\n\n        string _name;\n        string _symbol;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.ERC20")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\n\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\n        assembly {\n            $.slot := ERC20StorageLocation\n        }\n    }\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        ERC20Storage storage $ = _getERC20Storage();\n        $._name = name_;\n        $._symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it\'s overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``\'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            $._totalSupply += value;\n        } else {\n            uint256 fromBalance = $._balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                $._balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                $._totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                $._balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        $._allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC20Permit.permit', 'start_line': 1195, 'end_line': 1203, 'offset_start': 44510, 'offset_end': 44692, 'content': 'function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;', 'contract_name': 'IERC20Permit', 'contract_code': "{\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC20Permit.nonces', 'start_line': 1212, 'end_line': 1212, 'offset_start': 44998, 'offset_end': 45060, 'content': 'function nonces(address owner) external view returns (uint256);', 'contract_name': 'IERC20Permit', 'contract_code': "{\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC20Permit.DOMAIN_SEPARATOR', 'start_line': 1218, 'end_line': 1218, 'offset_start': 45253, 'offset_end': 45312, 'content': 'function DOMAIN_SEPARATOR() external view returns (bytes32);', 'contract_name': 'IERC20Permit', 'contract_code': "{\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Math.tryAdd', 'start_line': 1245, 'end_line': 1251, 'offset_start': 45902, 'offset_end': 46117, 'content': 'function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }', 'contract_name': 'Math', 'contract_code': '{\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\n            // benefit is lost if \'b\' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Math.trySub', 'start_line': 1256, 'end_line': 1261, 'offset_start': 46225, 'offset_end': 46413, 'content': 'function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }', 'contract_name': 'Math', 'contract_code': '{\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\n            // benefit is lost if \'b\' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Math.tryMul', 'start_line': 1266, 'end_line': 1276, 'offset_start': 46524, 'offset_end': 47016, 'content': "function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }", 'contract_name': 'Math', 'contract_code': '{\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\n            // benefit is lost if \'b\' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Math.tryDiv', 'start_line': 1281, 'end_line': 1286, 'offset_start': 47128, 'offset_end': 47317, 'content': 'function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }', 'contract_name': 'Math', 'contract_code': '{\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\n            // benefit is lost if \'b\' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Math.tryMod', 'start_line': 1291, 'end_line': 1296, 'offset_start': 47439, 'offset_end': 47628, 'content': 'function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }', 'contract_name': 'Math', 'contract_code': '{\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\n            // benefit is lost if \'b\' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Math.max', 'start_line': 1301, 'end_line': 1303, 'offset_start': 47699, 'offset_end': 47802, 'content': 'function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }', 'contract_name': 'Math', 'contract_code': '{\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\n            // benefit is lost if \'b\' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Math.min', 'start_line': 1308, 'end_line': 1310, 'offset_start': 47874, 'offset_end': 47977, 'content': 'function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }', 'contract_name': 'Math', 'contract_code': '{\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\n            // benefit is lost if \'b\' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Math.average', 'start_line': 1316, 'end_line': 1319, 'offset_start': 48091, 'offset_end': 48243, 'content': 'function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }', 'contract_name': 'Math', 'contract_code': '{\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\n            // benefit is lost if \'b\' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Math.ceilDiv', 'start_line': 1327, 'end_line': 1335, 'offset_start': 48465, 'offset_end': 48795, 'content': 'function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }', 'contract_name': 'Math', 'contract_code': '{\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\n            // benefit is lost if \'b\' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Math.mulDiv', 'start_line': 1343, 'end_line': 1422, 'offset_start': 49120, 'offset_end': 53235, 'content': "function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }", 'contract_name': 'Math', 'contract_code': '{\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\n            // benefit is lost if \'b\' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Math.mulDiv', 'start_line': 1427, 'end_line': 1433, 'offset_start': 53368, 'offset_end': 53669, 'content': 'function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }', 'contract_name': 'Math', 'contract_code': '{\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\n            // benefit is lost if \'b\' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Math.sqrt', 'start_line': 1441, 'end_line': 1472, 'offset_start': 53904, 'offset_end': 55541, 'content': 'function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }', 'contract_name': 'Math', 'contract_code': '{\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\n            // benefit is lost if \'b\' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Math.sqrt', 'start_line': 1477, 'end_line': 1482, 'offset_start': 55642, 'offset_end': 55881, 'content': 'function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }', 'contract_name': 'Math', 'contract_code': '{\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\n            // benefit is lost if \'b\' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Math.log2', 'start_line': 1488, 'end_line': 1524, 'offset_start': 56012, 'offset_end': 56994, 'content': 'function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }', 'contract_name': 'Math', 'contract_code': '{\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\n            // benefit is lost if \'b\' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Math.log2', 'start_line': 1530, 'end_line': 1535, 'offset_start': 57148, 'offset_end': 57395, 'content': 'function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }', 'contract_name': 'Math', 'contract_code': '{\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\n            // benefit is lost if \'b\' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Math.log10', 'start_line': 1541, 'end_line': 1573, 'offset_start': 57527, 'offset_end': 58442, 'content': 'function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }', 'contract_name': 'Math', 'contract_code': '{\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\n            // benefit is lost if \'b\' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Math.log10', 'start_line': 1579, 'end_line': 1584, 'offset_start': 58597, 'offset_end': 58847, 'content': 'function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }', 'contract_name': 'Math', 'contract_code': '{\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\n            // benefit is lost if \'b\' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Math.log256', 'start_line': 1592, 'end_line': 1616, 'offset_start': 59105, 'offset_end': 59767, 'content': 'function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }', 'contract_name': 'Math', 'contract_code': '{\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\n            // benefit is lost if \'b\' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Math.log256', 'start_line': 1622, 'end_line': 1627, 'offset_start': 59923, 'offset_end': 60181, 'content': 'function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }', 'contract_name': 'Math', 'contract_code': '{\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\n            // benefit is lost if \'b\' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Math.unsignedRoundsUp', 'start_line': 1632, 'end_line': 1634, 'offset_start': 60306, 'offset_end': 60427, 'content': 'function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }', 'contract_name': 'Math', 'contract_code': '{\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\n            // benefit is lost if \'b\' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Address.sendValue', 'start_line': 1677, 'end_line': 1686, 'offset_start': 61963, 'offset_end': 62293, 'content': 'function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}("");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }', 'contract_name': 'Address', 'contract_code': '{\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There\'s no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}("");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn\'t, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Address.functionCall', 'start_line': 1706, 'end_line': 1708, 'offset_start': 63137, 'offset_end': 63287, 'content': 'function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }', 'contract_name': 'Address', 'contract_code': '{\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There\'s no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}("");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn\'t, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Address.functionCallWithValue', 'start_line': 1719, 'end_line': 1725, 'offset_start': 63612, 'offset_end': 64003, 'content': 'function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }', 'contract_name': 'Address', 'contract_code': '{\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There\'s no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}("");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn\'t, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Address.functionStaticCall', 'start_line': 1731, 'end_line': 1734, 'offset_start': 64143, 'offset_end': 64396, 'content': 'function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }', 'contract_name': 'Address', 'contract_code': '{\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There\'s no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}("");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn\'t, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Address.functionDelegateCall', 'start_line': 1740, 'end_line': 1743, 'offset_start': 64538, 'offset_end': 64790, 'content': 'function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }', 'contract_name': 'Address', 'contract_code': '{\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There\'s no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}("");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn\'t, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Address.verifyCallResultFromTarget', 'start_line': 1750, 'end_line': 1765, 'offset_start': 65057, 'offset_end': 65638, 'content': 'function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }', 'contract_name': 'Address', 'contract_code': '{\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There\'s no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}("");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn\'t, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Address.verifyCallResult', 'start_line': 1771, 'end_line': 1777, 'offset_start': 65839, 'offset_end': 66062, 'content': 'function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }', 'contract_name': 'Address', 'contract_code': '{\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There\'s no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}("");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn\'t, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'Address._revert', 'start_line': 1782, 'end_line': 1794, 'offset_start': 66175, 'offset_end': 66690, 'content': 'function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }', 'contract_name': 'Address', 'contract_code': '{\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There\'s no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}("");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn\'t, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': [], 'visibility': 'private', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'SafeERC20.safeTransfer', 'start_line': 1832, 'end_line': 1834, 'offset_start': 67998, 'offset_end': 68157, 'content': 'function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }', 'contract_name': 'SafeERC20', 'contract_code': "{\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'SafeERC20.safeTransferFrom', 'start_line': 1840, 'end_line': 1842, 'offset_start': 68397, 'offset_end': 68584, 'content': 'function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }', 'contract_name': 'SafeERC20', 'contract_code': "{\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'SafeERC20.safeIncreaseAllowance', 'start_line': 1848, 'end_line': 1851, 'offset_start': 68776, 'offset_end': 69000, 'content': 'function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }', 'contract_name': 'SafeERC20', 'contract_code': "{\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'SafeERC20.safeDecreaseAllowance', 'start_line': 1857, 'end_line': 1865, 'offset_start': 69204, 'offset_end': 69671, 'content': 'function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }', 'contract_name': 'SafeERC20', 'contract_code': "{\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'SafeERC20.forceApprove', 'start_line': 1872, 'end_line': 1879, 'offset_start': 69991, 'offset_end': 70370, 'content': 'function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }', 'contract_name': 'SafeERC20', 'contract_code': "{\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'SafeERC20._callOptionalReturn', 'start_line': 1887, 'end_line': 1896, 'offset_start': 70754, 'offset_end': 71382, 'content': "function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }", 'contract_name': 'SafeERC20', 'contract_code': "{\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'private', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'SafeERC20._callOptionalReturnBool', 'start_line': 1906, 'end_line': 1913, 'offset_start': 71884, 'offset_end': 72461, 'content': "function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }", 'contract_name': 'SafeERC20', 'contract_code': "{\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'private', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC4626.asset', 'start_line': 1945, 'end_line': 1945, 'offset_start': 73398, 'offset_end': 73464, 'content': 'function asset() external view returns (address assetTokenAddress);', 'contract_name': 'IERC4626', 'contract_code': '{\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC4626.totalAssets', 'start_line': 1954, 'end_line': 1954, 'offset_start': 73758, 'offset_end': 73831, 'content': 'function totalAssets() external view returns (uint256 totalManagedAssets);', 'contract_name': 'IERC4626', 'contract_code': '{\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC4626.convertToShares', 'start_line': 1969, 'end_line': 1969, 'offset_start': 74553, 'offset_end': 74632, 'content': 'function convertToShares(uint256 assets) external view returns (uint256 shares);', 'contract_name': 'IERC4626', 'contract_code': '{\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC4626.convertToAssets', 'start_line': 1984, 'end_line': 1984, 'offset_start': 75354, 'offset_end': 75433, 'content': 'function convertToAssets(uint256 shares) external view returns (uint256 assets);', 'contract_name': 'IERC4626', 'contract_code': '{\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC4626.maxDeposit', 'start_line': 1994, 'end_line': 1994, 'offset_start': 75831, 'offset_end': 75910, 'content': 'function maxDeposit(address receiver) external view returns (uint256 maxAssets);', 'contract_name': 'IERC4626', 'contract_code': '{\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC4626.previewDeposit', 'start_line': 2011, 'end_line': 2011, 'offset_start': 76934, 'offset_end': 77012, 'content': 'function previewDeposit(uint256 assets) external view returns (uint256 shares);', 'contract_name': 'IERC4626', 'contract_code': '{\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC4626.deposit', 'start_line': 2024, 'end_line': 2024, 'offset_start': 77673, 'offset_end': 77757, 'content': 'function deposit(uint256 assets, address receiver) external returns (uint256 shares);', 'contract_name': 'IERC4626', 'contract_code': '{\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC4626.maxMint', 'start_line': 2032, 'end_line': 2032, 'offset_start': 78110, 'offset_end': 78186, 'content': 'function maxMint(address receiver) external view returns (uint256 maxShares);', 'contract_name': 'IERC4626', 'contract_code': '{\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC4626.previewMint', 'start_line': 2049, 'end_line': 2049, 'offset_start': 79182, 'offset_end': 79257, 'content': 'function previewMint(uint256 shares) external view returns (uint256 assets);', 'contract_name': 'IERC4626', 'contract_code': '{\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC4626.mint', 'start_line': 2062, 'end_line': 2062, 'offset_start': 79909, 'offset_end': 79990, 'content': 'function mint(uint256 shares, address receiver) external returns (uint256 assets);', 'contract_name': 'IERC4626', 'contract_code': '{\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC4626.maxWithdraw', 'start_line': 2071, 'end_line': 2071, 'offset_start': 80295, 'offset_end': 80372, 'content': 'function maxWithdraw(address owner) external view returns (uint256 maxAssets);', 'contract_name': 'IERC4626', 'contract_code': '{\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC4626.previewWithdraw', 'start_line': 2089, 'end_line': 2089, 'offset_start': 81418, 'offset_end': 81497, 'content': 'function previewWithdraw(uint256 assets) external view returns (uint256 shares);', 'contract_name': 'IERC4626', 'contract_code': '{\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC4626.withdraw', 'start_line': 2103, 'end_line': 2103, 'offset_start': 82179, 'offset_end': 82279, 'content': 'function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);', 'contract_name': 'IERC4626', 'contract_code': '{\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC4626.maxRedeem', 'start_line': 2113, 'end_line': 2113, 'offset_start': 82672, 'offset_end': 82747, 'content': 'function maxRedeem(address owner) external view returns (uint256 maxShares);', 'contract_name': 'IERC4626', 'contract_code': '{\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC4626.previewRedeem', 'start_line': 2130, 'end_line': 2130, 'offset_start': 83769, 'offset_end': 83846, 'content': 'function previewRedeem(uint256 shares) external view returns (uint256 assets);', 'contract_name': 'IERC4626', 'contract_code': '{\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC4626.redeem', 'start_line': 2144, 'end_line': 2144, 'offset_start': 84519, 'offset_end': 84617, 'content': 'function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);', 'contract_name': 'IERC4626', 'contract_code': '{\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC1155.balanceOf', 'start_line': 2360, 'end_line': 2360, 'offset_start': 92915, 'offset_end': 92994, 'content': 'function balanceOf(address account, uint256 id) external view returns (uint256);', 'contract_name': 'IERC1155', 'contract_code': "{\n    /**\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\n     *\n     * Requirements:\n     *\n     * - `ids` and `values` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external;\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC1155.balanceOfBatch', 'start_line': 2369, 'end_line': 2372, 'offset_start': 93194, 'offset_end': 93333, 'content': 'function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);', 'contract_name': 'IERC1155', 'contract_code': "{\n    /**\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\n     *\n     * Requirements:\n     *\n     * - `ids` and `values` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external;\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC1155.setApprovalForAll', 'start_line': 2383, 'end_line': 2383, 'offset_start': 93593, 'offset_end': 93661, 'content': 'function setApprovalForAll(address operator, bool approved) external;', 'contract_name': 'IERC1155', 'contract_code': "{\n    /**\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\n     *\n     * Requirements:\n     *\n     * - `ids` and `values` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external;\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC1155.isApprovedForAll', 'start_line': 2390, 'end_line': 2390, 'offset_start': 93808, 'offset_end': 93897, 'content': 'function isApprovedForAll(address account, address operator) external view returns (bool);', 'contract_name': 'IERC1155', 'contract_code': "{\n    /**\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\n     *\n     * Requirements:\n     *\n     * - `ids` and `values` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external;\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC1155.safeTransferFrom', 'start_line': 2410, 'end_line': 2410, 'offset_start': 94819, 'offset_end': 94927, 'content': 'function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;', 'contract_name': 'IERC1155', 'contract_code': "{\n    /**\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\n     *\n     * Requirements:\n     *\n     * - `ids` and `values` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external;\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC1155.safeBatchTransferFrom', 'start_line': 2428, 'end_line': 2434, 'offset_start': 95753, 'offset_end': 95936, 'content': 'function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external;', 'contract_name': 'IERC1155', 'contract_code': "{\n    /**\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\n     *\n     * Requirements:\n     *\n     * - `ids` and `values` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external;\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'OwnableUpgradeable._getOwnableStorage', 'start_line': 2466, 'end_line': 2470, 'offset_start': 97133, 'offset_end': 97291, 'content': 'function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\n        assembly {\n            $.slot := OwnableStorageLocation\n        }\n    }', 'contract_name': 'OwnableUpgradeable', 'contract_code': '{\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\n    struct OwnableStorage {\n        address _owner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.Ownable")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\n\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\n        assembly {\n            $.slot := OwnableStorageLocation\n        }\n    }\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\n        __Ownable_init_unchained(initialOwner);\n    }\n\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        OwnableStorage storage $ = _getOwnableStorage();\n        return $._owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        OwnableStorage storage $ = _getOwnableStorage();\n        address oldOwner = $._owner;\n        $._owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'private', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'OwnableUpgradeable.__Ownable_init', 'start_line': 2487, 'end_line': 2489, 'offset_start': 97788, 'offset_end': 97914, 'content': 'function __Ownable_init(address initialOwner) internal onlyInitializing {\n        __Ownable_init_unchained(initialOwner);\n    }', 'contract_name': 'OwnableUpgradeable', 'contract_code': '{\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\n    struct OwnableStorage {\n        address _owner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.Ownable")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\n\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\n        assembly {\n            $.slot := OwnableStorageLocation\n        }\n    }\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\n        __Ownable_init_unchained(initialOwner);\n    }\n\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        OwnableStorage storage $ = _getOwnableStorage();\n        return $._owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        OwnableStorage storage $ = _getOwnableStorage();\n        address oldOwner = $._owner;\n        $._owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'OwnableUpgradeable.__Ownable_init_unchained', 'start_line': 2491, 'end_line': 2496, 'offset_start': 97921, 'offset_end': 98155, 'content': 'function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }', 'contract_name': 'OwnableUpgradeable', 'contract_code': '{\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\n    struct OwnableStorage {\n        address _owner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.Ownable")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\n\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\n        assembly {\n            $.slot := OwnableStorageLocation\n        }\n    }\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\n        __Ownable_init_unchained(initialOwner);\n    }\n\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        OwnableStorage storage $ = _getOwnableStorage();\n        return $._owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        OwnableStorage storage $ = _getOwnableStorage();\n        address oldOwner = $._owner;\n        $._owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'OwnableUpgradeable.owner', 'start_line': 2509, 'end_line': 2512, 'offset_start': 98382, 'offset_end': 98525, 'content': 'function owner() public view virtual returns (address) {\n        OwnableStorage storage $ = _getOwnableStorage();\n        return $._owner;\n    }', 'contract_name': 'OwnableUpgradeable', 'contract_code': '{\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\n    struct OwnableStorage {\n        address _owner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.Ownable")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\n\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\n        assembly {\n            $.slot := OwnableStorageLocation\n        }\n    }\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\n        __Ownable_init_unchained(initialOwner);\n    }\n\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        OwnableStorage storage $ = _getOwnableStorage();\n        return $._owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        OwnableStorage storage $ = _getOwnableStorage();\n        address oldOwner = $._owner;\n        $._owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'OwnableUpgradeable._checkOwner', 'start_line': 2517, 'end_line': 2521, 'offset_start': 98599, 'offset_end': 98760, 'content': 'function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }', 'contract_name': 'OwnableUpgradeable', 'contract_code': '{\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\n    struct OwnableStorage {\n        address _owner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.Ownable")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\n\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\n        assembly {\n            $.slot := OwnableStorageLocation\n        }\n    }\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\n        __Ownable_init_unchained(initialOwner);\n    }\n\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        OwnableStorage storage $ = _getOwnableStorage();\n        return $._owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        OwnableStorage storage $ = _getOwnableStorage();\n        address oldOwner = $._owner;\n        $._owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'OwnableUpgradeable.renounceOwnership', 'start_line': 2530, 'end_line': 2532, 'offset_start': 99096, 'offset_end': 99196, 'content': 'function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }', 'contract_name': 'OwnableUpgradeable', 'contract_code': '{\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\n    struct OwnableStorage {\n        address _owner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.Ownable")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\n\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\n        assembly {\n            $.slot := OwnableStorageLocation\n        }\n    }\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\n        __Ownable_init_unchained(initialOwner);\n    }\n\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        OwnableStorage storage $ = _getOwnableStorage();\n        return $._owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        OwnableStorage storage $ = _getOwnableStorage();\n        address oldOwner = $._owner;\n        $._owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'OwnableUpgradeable.transferOwnership', 'start_line': 2538, 'end_line': 2543, 'offset_start': 99346, 'offset_end': 99560, 'content': 'function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }', 'contract_name': 'OwnableUpgradeable', 'contract_code': '{\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\n    struct OwnableStorage {\n        address _owner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.Ownable")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\n\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\n        assembly {\n            $.slot := OwnableStorageLocation\n        }\n    }\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\n        __Ownable_init_unchained(initialOwner);\n    }\n\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        OwnableStorage storage $ = _getOwnableStorage();\n        return $._owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        OwnableStorage storage $ = _getOwnableStorage();\n        address oldOwner = $._owner;\n        $._owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'OwnableUpgradeable._transferOwnership', 'start_line': 2549, 'end_line': 2554, 'offset_start': 99715, 'offset_end': 99962, 'content': 'function _transferOwnership(address newOwner) internal virtual {\n        OwnableStorage storage $ = _getOwnableStorage();\n        address oldOwner = $._owner;\n        $._owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }', 'contract_name': 'OwnableUpgradeable', 'contract_code': '{\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\n    struct OwnableStorage {\n        address _owner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.Ownable")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\n\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\n        assembly {\n            $.slot := OwnableStorageLocation\n        }\n    }\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\n        __Ownable_init_unchained(initialOwner);\n    }\n\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        OwnableStorage storage $ = _getOwnableStorage();\n        return $._owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        OwnableStorage storage $ = _getOwnableStorage();\n        address oldOwner = $._owner;\n        $._owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC1155Receiver.onERC1155Received', 'start_line': 2584, 'end_line': 2590, 'offset_start': 101169, 'offset_end': 101347, 'content': 'function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);', 'contract_name': 'IERC1155Receiver', 'contract_code': '{\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC1155Receiver.onERC1155BatchReceived', 'start_line': 2608, 'end_line': 2614, 'offset_start': 102353, 'offset_end': 102560, 'content': 'function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);', 'contract_name': 'IERC1155Receiver', 'contract_code': '{\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC20Metadata.name', 'start_line': 2638, 'end_line': 2638, 'offset_start': 103132, 'offset_end': 103185, 'content': 'function name() external view returns (string memory);', 'contract_name': 'IERC20Metadata', 'contract_code': '{\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC20Metadata.symbol', 'start_line': 2643, 'end_line': 2643, 'offset_start': 103253, 'offset_end': 103308, 'content': 'function symbol() external view returns (string memory);', 'contract_name': 'IERC20Metadata', 'contract_code': '{\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC20Metadata.decimals', 'start_line': 2648, 'end_line': 2648, 'offset_start': 103385, 'offset_end': 103434, 'content': 'function decimals() external view returns (uint8);', 'contract_name': 'IERC20Metadata', 'contract_code': '{\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ContextUpgradeable.__Context_init', 'start_line': 2668, 'end_line': 2669, 'offset_start': 104187, 'offset_end': 104245, 'content': 'function __Context_init() internal onlyInitializing {\n    }', 'contract_name': 'ContextUpgradeable', 'contract_code': '{\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ContextUpgradeable.__Context_init_unchained', 'start_line': 2671, 'end_line': 2672, 'offset_start': 104252, 'offset_end': 104320, 'content': 'function __Context_init_unchained() internal onlyInitializing {\n    }', 'contract_name': 'ContextUpgradeable', 'contract_code': '{\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ContextUpgradeable._msgSender', 'start_line': 2673, 'end_line': 2675, 'offset_start': 104326, 'offset_end': 104421, 'content': 'function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }', 'contract_name': 'ContextUpgradeable', 'contract_code': '{\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ContextUpgradeable._msgData', 'start_line': 2677, 'end_line': 2679, 'offset_start': 104428, 'offset_end': 104526, 'content': 'function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }', 'contract_name': 'ContextUpgradeable', 'contract_code': '{\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'ContextUpgradeable._contextSuffixLength', 'start_line': 2681, 'end_line': 2683, 'offset_start': 104533, 'offset_end': 104629, 'content': 'function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }', 'contract_name': 'ContextUpgradeable', 'contract_code': '{\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC20.totalSupply', 'start_line': 2712, 'end_line': 2712, 'offset_start': 105408, 'offset_end': 105462, 'content': 'function totalSupply() external view returns (uint256);', 'contract_name': 'IERC20', 'contract_code': "{\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC20.balanceOf', 'start_line': 2717, 'end_line': 2717, 'offset_start': 105545, 'offset_end': 105612, 'content': 'function balanceOf(address account) external view returns (uint256);', 'contract_name': 'IERC20', 'contract_code': "{\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC20.transfer', 'start_line': 2726, 'end_line': 2726, 'offset_start': 105837, 'offset_end': 105905, 'content': 'function transfer(address to, uint256 value) external returns (bool);', 'contract_name': 'IERC20', 'contract_code': "{\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC20.allowance', 'start_line': 2735, 'end_line': 2735, 'offset_start': 106181, 'offset_end': 106263, 'content': 'function allowance(address owner, address spender) external view returns (uint256);', 'contract_name': 'IERC20', 'contract_code': "{\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC20.approve', 'start_line': 2752, 'end_line': 2752, 'offset_start': 106942, 'offset_end': 107014, 'content': 'function approve(address spender, uint256 value) external returns (bool);', 'contract_name': 'IERC20', 'contract_code': "{\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC20.transferFrom', 'start_line': 2763, 'end_line': 2763, 'offset_start': 107323, 'offset_end': 107409, 'content': 'function transferFrom(address from, address to, uint256 value) external returns (bool);', 'contract_name': 'IERC20', 'contract_code': "{\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC165.supportsInterface', 'start_line': 2789, 'end_line': 2789, 'offset_start': 108204, 'offset_end': 108279, 'content': 'function supportsInterface(bytes4 interfaceId) external view returns (bool);', 'contract_name': 'IERC165', 'contract_code': '{\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IStakedMultiToken.registerOperator', 'start_line': 2838, 'end_line': 2838, 'offset_start': 110258, 'offset_end': 110325, 'content': 'function registerOperator(address operator, uint16 feeBPS) external;', 'contract_name': 'IStakedMultiToken', 'contract_code': "{\n    ////////////////\n    // Events\n    ////////////////\n\n    event OperatorRegistered(address operator);\n    event Stake(address indexed from, address indexed onBehalfOf, address operator, uint256 assets);\n\n    event RewardsAccrued(address user, address operator, uint256 amount);\n    event RewardsClaimed(address indexed from, address indexed to, address operator, uint256 amount);\n\n    event CooldownToUnstake(address indexed user, address indexed operator, uint256 amount);\n    event CooldownToUpdateProtocolFee(uint16 feeBPS, uint40 cooldownEndTimestamp);\n    event CooldownToUpdateOperatorFee(address operator, uint16 feeBPS, uint40 cooldownEndTimestamp);\n\n    event Unstake(address indexed from, address indexed to, address operator, uint256 assets);\n    event SetOperatorFeeBPS(address operator, uint16 feeBPS);\n    event SetProtocolFeeBPS(uint16 feeBPS);\n\n    event SetMinVotingStake(uint256 minVotingStake);\n    event SetCooldownSecForUnstaking(uint40 cooldownSeconds);\n    event SetCooldownSecForOperatorFee(uint40 cooldownSeconds);\n    event SetCooldownSecForProtocolFee(uint40 cooldownSeconds);\n    event CollectFee(\n        uint16 distributionId, address operator, uint256 protocolFee, uint256 operatorFee, uint256 userRewards\n    );\n\n    ////////////////\n    // Functions\n    ////////////////\n\n    /// @notice Registers a new operator and sets their fee in basis points\n    /// @param operator The address of the operator to register\n    /// @param feeBPS The fee in basis points\n    function registerOperator(address operator, uint16 feeBPS) external;\n\n    /// @notice Freezes an operator, preventing them from performing certain actions\n    /// @param operator The address of the operator to freeze\n    function freezeOperator(address operator) external;\n\n    /// @notice Gets the balance of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The balance of staked tokens\n    function balanceOf(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the voting stake of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The voting stake amount\n    function votingStake(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the total voting stake of a operator\n    /// @param operator The address of the operator\n    /// @return The total voting stake amount\n    function totalVotingStake(address operator) external view returns (uint256);\n\n    /// @notice Gets the total supply of staked tokens for a specific operator\n    /// @param operator The address of the operator\n    /// @return The total supply of staked tokens\n    function totalSupply(address operator) external view returns (uint256);\n\n    /// @notice Sets the minimum voting stake\n    /// @param minVotingStake_ The minimum voting stake\n    function setMinVotingStake(uint256 minVotingStake_) external;\n\n    /// @notice Sets the cooldown seconds for operator fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForOperatorFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the cooldown seconds for protocol fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForProtocolFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the general cooldown period in seconds\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForUnstaking(uint40 cooldownSeconds_) external;\n\n    /// @notice Initiates the cooldown period for protocol fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateProtocolFee(uint16 feeBPS) external;\n\n    /// @notice Initiates the cooldown period for operator fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateOperatorFee(uint16 feeBPS) external;\n\n    /// @notice Sets the protocol fee in basis points\n    function setProtocolFeeBPS() external;\n\n    /// @notice Sets the operator fee in basis points\n    function setOperatorFeeBPS() external;\n\n    /// @notice Claims accrued rewards for a staker\n    /// @param distributionId The distribution ID\n    /// @param to The address to send rewards to\n    /// @param operator The address of the operator\n    /// @param amount The amount of rewards to claim\n    function claimRewards(uint16 distributionId, address to, address operator, uint256 amount) external;\n\n    /// @notice Claims accrued rewards for multiple stakers in a single transaction.\n    /// @param ids Array of distribution IDs for which rewards are being claimed.\n    /// @param recipients Array of addresses to receive the claimed rewards, corresponding to each distribution ID.\n    /// @param operators Array of operator addresses associated with each reward distribution, managing the distribution rules and potentially fees.\n    /// @param amounts Array of amounts of rewards to be claimed for each distribution ID.\n    function claimRewardsBatch(\n        uint16[] calldata ids,\n        address[] calldata recipients,\n        address[] calldata operators,\n        uint256[] calldata amounts\n    ) external;\n\n    /// @notice Stakes tokens on behalf of a user\n    /// @param to The address on whose behalf tokens are being staked\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to stake\n    function stake(address to, address operator, uint256 amount) external;\n\n    /// @notice Switches voting power from one operator to another for a specified amount.\n    /// @param fromOperator The address of the current operator from which the voting power is being moved.\n    /// @param toOperator The address of the new operator to which the voting power will be moved.\n    /// @param amount The amount of voting power to transfer.\n    function switchOperator(address fromOperator, address toOperator, uint256 amount) external;\n\n    /// @notice Initiates the cooldown period for a user's staked tokens\n    /// @param operator The address of the operator\n    /// @param amountToAdd The amount of tokens to cooldown. This is additive.\n    function cooldownToUnstake(address operator, uint256 amountToAdd) external;\n\n    /// @notice Unstakes tokens and stops earning rewards\n    /// @param to The address to unstake tokens to\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to unstake\n    function unstake(address to, address operator, uint256 amount) external;\n\n    /// @notice Gets the accrued rewards for a staker within a specific distribution and operator context\n    /// @param distributionId The distribution ID for which to query rewards\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The amount of accrued rewards\n    function getAccruedRewards(uint16 distributionId, address staker, address operator)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Gets the reward balance for a specific distribution, operator, and staker combination\n    /// @param distributionId The ID of the distribution for which the reward balance is queried\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return The amount of accrued rewards\n    function rewardBalance(uint16 distributionId, address operator, address staker) external view returns (uint256);\n\n    /// Gets operator fee information\n    /// @param operator The address of the operator\n    function operatorFee(address operator)\n        external\n        view\n        returns (uint40 cooldownEndTimestamp, uint16 bps, uint16 pendingBPS);\n\n    /// @notice Checks if an operator is active based on their total voting stake.\n    /// @dev An operator is considered active if their total voting stake is at least the minimum required.\n    /// @param operator The address of the operator to check.\n    /// @return True if the operator's total voting stake is at least the minimum required, false otherwise.\n    function isActiveOperator(address operator) external view returns (bool);\n\n    /// @notice Counts the total number of active operators.\n    /// @dev Iterates through all operators and counts those that are active.\n    /// @return The total number of active operators.\n    function totalActiveOperators() external view returns (uint256);\n\n    /// @notice Calculates the activation threshold for alerts.\n    /// @dev The activation threshold is determined as two-thirds of the total number of active operators.\n    /// @return The calculated activation threshold.\n    function activationThreshold() external view returns (uint256);\n\n    /// @notice Determines if an alert is active based on the given vote count.\n    /// @dev An alert is considered active if the vote count meets or exceeds the activation threshold.\n    /// @param voteCount The number of votes to check against the activation threshold.\n    /// @return True if the vote count meets or exceeds the activation threshold, false otherwise.\n    function isActiveAlert(uint128 voteCount) external view returns (bool);\n\n    /// @notice Generates a unique key for a reward balance based on distribution ID, operator, and staker\n    /// @param distributionId The ID of the distribution\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return A unique key for querying reward balances\n    function rewardBalanceKey(uint16 distributionId, address operator, address staker)\n        external\n        pure\n        returns (bytes32);\n\n    /// @notice Converts an address to a `uint256` representation\n    /// @param operator The address to convert\n    /// @return The `uint256` representation of the address\n    function addressToUint256(address operator) external pure returns (uint256);\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IStakedMultiToken.freezeOperator', 'start_line': 2842, 'end_line': 2842, 'offset_start': 110479, 'offset_end': 110529, 'content': 'function freezeOperator(address operator) external;', 'contract_name': 'IStakedMultiToken', 'contract_code': "{\n    ////////////////\n    // Events\n    ////////////////\n\n    event OperatorRegistered(address operator);\n    event Stake(address indexed from, address indexed onBehalfOf, address operator, uint256 assets);\n\n    event RewardsAccrued(address user, address operator, uint256 amount);\n    event RewardsClaimed(address indexed from, address indexed to, address operator, uint256 amount);\n\n    event CooldownToUnstake(address indexed user, address indexed operator, uint256 amount);\n    event CooldownToUpdateProtocolFee(uint16 feeBPS, uint40 cooldownEndTimestamp);\n    event CooldownToUpdateOperatorFee(address operator, uint16 feeBPS, uint40 cooldownEndTimestamp);\n\n    event Unstake(address indexed from, address indexed to, address operator, uint256 assets);\n    event SetOperatorFeeBPS(address operator, uint16 feeBPS);\n    event SetProtocolFeeBPS(uint16 feeBPS);\n\n    event SetMinVotingStake(uint256 minVotingStake);\n    event SetCooldownSecForUnstaking(uint40 cooldownSeconds);\n    event SetCooldownSecForOperatorFee(uint40 cooldownSeconds);\n    event SetCooldownSecForProtocolFee(uint40 cooldownSeconds);\n    event CollectFee(\n        uint16 distributionId, address operator, uint256 protocolFee, uint256 operatorFee, uint256 userRewards\n    );\n\n    ////////////////\n    // Functions\n    ////////////////\n\n    /// @notice Registers a new operator and sets their fee in basis points\n    /// @param operator The address of the operator to register\n    /// @param feeBPS The fee in basis points\n    function registerOperator(address operator, uint16 feeBPS) external;\n\n    /// @notice Freezes an operator, preventing them from performing certain actions\n    /// @param operator The address of the operator to freeze\n    function freezeOperator(address operator) external;\n\n    /// @notice Gets the balance of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The balance of staked tokens\n    function balanceOf(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the voting stake of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The voting stake amount\n    function votingStake(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the total voting stake of a operator\n    /// @param operator The address of the operator\n    /// @return The total voting stake amount\n    function totalVotingStake(address operator) external view returns (uint256);\n\n    /// @notice Gets the total supply of staked tokens for a specific operator\n    /// @param operator The address of the operator\n    /// @return The total supply of staked tokens\n    function totalSupply(address operator) external view returns (uint256);\n\n    /// @notice Sets the minimum voting stake\n    /// @param minVotingStake_ The minimum voting stake\n    function setMinVotingStake(uint256 minVotingStake_) external;\n\n    /// @notice Sets the cooldown seconds for operator fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForOperatorFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the cooldown seconds for protocol fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForProtocolFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the general cooldown period in seconds\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForUnstaking(uint40 cooldownSeconds_) external;\n\n    /// @notice Initiates the cooldown period for protocol fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateProtocolFee(uint16 feeBPS) external;\n\n    /// @notice Initiates the cooldown period for operator fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateOperatorFee(uint16 feeBPS) external;\n\n    /// @notice Sets the protocol fee in basis points\n    function setProtocolFeeBPS() external;\n\n    /// @notice Sets the operator fee in basis points\n    function setOperatorFeeBPS() external;\n\n    /// @notice Claims accrued rewards for a staker\n    /// @param distributionId The distribution ID\n    /// @param to The address to send rewards to\n    /// @param operator The address of the operator\n    /// @param amount The amount of rewards to claim\n    function claimRewards(uint16 distributionId, address to, address operator, uint256 amount) external;\n\n    /// @notice Claims accrued rewards for multiple stakers in a single transaction.\n    /// @param ids Array of distribution IDs for which rewards are being claimed.\n    /// @param recipients Array of addresses to receive the claimed rewards, corresponding to each distribution ID.\n    /// @param operators Array of operator addresses associated with each reward distribution, managing the distribution rules and potentially fees.\n    /// @param amounts Array of amounts of rewards to be claimed for each distribution ID.\n    function claimRewardsBatch(\n        uint16[] calldata ids,\n        address[] calldata recipients,\n        address[] calldata operators,\n        uint256[] calldata amounts\n    ) external;\n\n    /// @notice Stakes tokens on behalf of a user\n    /// @param to The address on whose behalf tokens are being staked\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to stake\n    function stake(address to, address operator, uint256 amount) external;\n\n    /// @notice Switches voting power from one operator to another for a specified amount.\n    /// @param fromOperator The address of the current operator from which the voting power is being moved.\n    /// @param toOperator The address of the new operator to which the voting power will be moved.\n    /// @param amount The amount of voting power to transfer.\n    function switchOperator(address fromOperator, address toOperator, uint256 amount) external;\n\n    /// @notice Initiates the cooldown period for a user's staked tokens\n    /// @param operator The address of the operator\n    /// @param amountToAdd The amount of tokens to cooldown. This is additive.\n    function cooldownToUnstake(address operator, uint256 amountToAdd) external;\n\n    /// @notice Unstakes tokens and stops earning rewards\n    /// @param to The address to unstake tokens to\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to unstake\n    function unstake(address to, address operator, uint256 amount) external;\n\n    /// @notice Gets the accrued rewards for a staker within a specific distribution and operator context\n    /// @param distributionId The distribution ID for which to query rewards\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The amount of accrued rewards\n    function getAccruedRewards(uint16 distributionId, address staker, address operator)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Gets the reward balance for a specific distribution, operator, and staker combination\n    /// @param distributionId The ID of the distribution for which the reward balance is queried\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return The amount of accrued rewards\n    function rewardBalance(uint16 distributionId, address operator, address staker) external view returns (uint256);\n\n    /// Gets operator fee information\n    /// @param operator The address of the operator\n    function operatorFee(address operator)\n        external\n        view\n        returns (uint40 cooldownEndTimestamp, uint16 bps, uint16 pendingBPS);\n\n    /// @notice Checks if an operator is active based on their total voting stake.\n    /// @dev An operator is considered active if their total voting stake is at least the minimum required.\n    /// @param operator The address of the operator to check.\n    /// @return True if the operator's total voting stake is at least the minimum required, false otherwise.\n    function isActiveOperator(address operator) external view returns (bool);\n\n    /// @notice Counts the total number of active operators.\n    /// @dev Iterates through all operators and counts those that are active.\n    /// @return The total number of active operators.\n    function totalActiveOperators() external view returns (uint256);\n\n    /// @notice Calculates the activation threshold for alerts.\n    /// @dev The activation threshold is determined as two-thirds of the total number of active operators.\n    /// @return The calculated activation threshold.\n    function activationThreshold() external view returns (uint256);\n\n    /// @notice Determines if an alert is active based on the given vote count.\n    /// @dev An alert is considered active if the vote count meets or exceeds the activation threshold.\n    /// @param voteCount The number of votes to check against the activation threshold.\n    /// @return True if the vote count meets or exceeds the activation threshold, false otherwise.\n    function isActiveAlert(uint128 voteCount) external view returns (bool);\n\n    /// @notice Generates a unique key for a reward balance based on distribution ID, operator, and staker\n    /// @param distributionId The ID of the distribution\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return A unique key for querying reward balances\n    function rewardBalanceKey(uint16 distributionId, address operator, address staker)\n        external\n        pure\n        returns (bytes32);\n\n    /// @notice Converts an address to a `uint256` representation\n    /// @param operator The address to convert\n    /// @return The `uint256` representation of the address\n    function addressToUint256(address operator) external pure returns (uint256);\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IStakedMultiToken.balanceOf', 'start_line': 2848, 'end_line': 2848, 'offset_start': 110750, 'offset_end': 110834, 'content': 'function balanceOf(address staker, address operator) external view returns (uint256);', 'contract_name': 'IStakedMultiToken', 'contract_code': "{\n    ////////////////\n    // Events\n    ////////////////\n\n    event OperatorRegistered(address operator);\n    event Stake(address indexed from, address indexed onBehalfOf, address operator, uint256 assets);\n\n    event RewardsAccrued(address user, address operator, uint256 amount);\n    event RewardsClaimed(address indexed from, address indexed to, address operator, uint256 amount);\n\n    event CooldownToUnstake(address indexed user, address indexed operator, uint256 amount);\n    event CooldownToUpdateProtocolFee(uint16 feeBPS, uint40 cooldownEndTimestamp);\n    event CooldownToUpdateOperatorFee(address operator, uint16 feeBPS, uint40 cooldownEndTimestamp);\n\n    event Unstake(address indexed from, address indexed to, address operator, uint256 assets);\n    event SetOperatorFeeBPS(address operator, uint16 feeBPS);\n    event SetProtocolFeeBPS(uint16 feeBPS);\n\n    event SetMinVotingStake(uint256 minVotingStake);\n    event SetCooldownSecForUnstaking(uint40 cooldownSeconds);\n    event SetCooldownSecForOperatorFee(uint40 cooldownSeconds);\n    event SetCooldownSecForProtocolFee(uint40 cooldownSeconds);\n    event CollectFee(\n        uint16 distributionId, address operator, uint256 protocolFee, uint256 operatorFee, uint256 userRewards\n    );\n\n    ////////////////\n    // Functions\n    ////////////////\n\n    /// @notice Registers a new operator and sets their fee in basis points\n    /// @param operator The address of the operator to register\n    /// @param feeBPS The fee in basis points\n    function registerOperator(address operator, uint16 feeBPS) external;\n\n    /// @notice Freezes an operator, preventing them from performing certain actions\n    /// @param operator The address of the operator to freeze\n    function freezeOperator(address operator) external;\n\n    /// @notice Gets the balance of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The balance of staked tokens\n    function balanceOf(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the voting stake of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The voting stake amount\n    function votingStake(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the total voting stake of a operator\n    /// @param operator The address of the operator\n    /// @return The total voting stake amount\n    function totalVotingStake(address operator) external view returns (uint256);\n\n    /// @notice Gets the total supply of staked tokens for a specific operator\n    /// @param operator The address of the operator\n    /// @return The total supply of staked tokens\n    function totalSupply(address operator) external view returns (uint256);\n\n    /// @notice Sets the minimum voting stake\n    /// @param minVotingStake_ The minimum voting stake\n    function setMinVotingStake(uint256 minVotingStake_) external;\n\n    /// @notice Sets the cooldown seconds for operator fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForOperatorFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the cooldown seconds for protocol fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForProtocolFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the general cooldown period in seconds\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForUnstaking(uint40 cooldownSeconds_) external;\n\n    /// @notice Initiates the cooldown period for protocol fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateProtocolFee(uint16 feeBPS) external;\n\n    /// @notice Initiates the cooldown period for operator fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateOperatorFee(uint16 feeBPS) external;\n\n    /// @notice Sets the protocol fee in basis points\n    function setProtocolFeeBPS() external;\n\n    /// @notice Sets the operator fee in basis points\n    function setOperatorFeeBPS() external;\n\n    /// @notice Claims accrued rewards for a staker\n    /// @param distributionId The distribution ID\n    /// @param to The address to send rewards to\n    /// @param operator The address of the operator\n    /// @param amount The amount of rewards to claim\n    function claimRewards(uint16 distributionId, address to, address operator, uint256 amount) external;\n\n    /// @notice Claims accrued rewards for multiple stakers in a single transaction.\n    /// @param ids Array of distribution IDs for which rewards are being claimed.\n    /// @param recipients Array of addresses to receive the claimed rewards, corresponding to each distribution ID.\n    /// @param operators Array of operator addresses associated with each reward distribution, managing the distribution rules and potentially fees.\n    /// @param amounts Array of amounts of rewards to be claimed for each distribution ID.\n    function claimRewardsBatch(\n        uint16[] calldata ids,\n        address[] calldata recipients,\n        address[] calldata operators,\n        uint256[] calldata amounts\n    ) external;\n\n    /// @notice Stakes tokens on behalf of a user\n    /// @param to The address on whose behalf tokens are being staked\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to stake\n    function stake(address to, address operator, uint256 amount) external;\n\n    /// @notice Switches voting power from one operator to another for a specified amount.\n    /// @param fromOperator The address of the current operator from which the voting power is being moved.\n    /// @param toOperator The address of the new operator to which the voting power will be moved.\n    /// @param amount The amount of voting power to transfer.\n    function switchOperator(address fromOperator, address toOperator, uint256 amount) external;\n\n    /// @notice Initiates the cooldown period for a user's staked tokens\n    /// @param operator The address of the operator\n    /// @param amountToAdd The amount of tokens to cooldown. This is additive.\n    function cooldownToUnstake(address operator, uint256 amountToAdd) external;\n\n    /// @notice Unstakes tokens and stops earning rewards\n    /// @param to The address to unstake tokens to\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to unstake\n    function unstake(address to, address operator, uint256 amount) external;\n\n    /// @notice Gets the accrued rewards for a staker within a specific distribution and operator context\n    /// @param distributionId The distribution ID for which to query rewards\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The amount of accrued rewards\n    function getAccruedRewards(uint16 distributionId, address staker, address operator)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Gets the reward balance for a specific distribution, operator, and staker combination\n    /// @param distributionId The ID of the distribution for which the reward balance is queried\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return The amount of accrued rewards\n    function rewardBalance(uint16 distributionId, address operator, address staker) external view returns (uint256);\n\n    /// Gets operator fee information\n    /// @param operator The address of the operator\n    function operatorFee(address operator)\n        external\n        view\n        returns (uint40 cooldownEndTimestamp, uint16 bps, uint16 pendingBPS);\n\n    /// @notice Checks if an operator is active based on their total voting stake.\n    /// @dev An operator is considered active if their total voting stake is at least the minimum required.\n    /// @param operator The address of the operator to check.\n    /// @return True if the operator's total voting stake is at least the minimum required, false otherwise.\n    function isActiveOperator(address operator) external view returns (bool);\n\n    /// @notice Counts the total number of active operators.\n    /// @dev Iterates through all operators and counts those that are active.\n    /// @return The total number of active operators.\n    function totalActiveOperators() external view returns (uint256);\n\n    /// @notice Calculates the activation threshold for alerts.\n    /// @dev The activation threshold is determined as two-thirds of the total number of active operators.\n    /// @return The calculated activation threshold.\n    function activationThreshold() external view returns (uint256);\n\n    /// @notice Determines if an alert is active based on the given vote count.\n    /// @dev An alert is considered active if the vote count meets or exceeds the activation threshold.\n    /// @param voteCount The number of votes to check against the activation threshold.\n    /// @return True if the vote count meets or exceeds the activation threshold, false otherwise.\n    function isActiveAlert(uint128 voteCount) external view returns (bool);\n\n    /// @notice Generates a unique key for a reward balance based on distribution ID, operator, and staker\n    /// @param distributionId The ID of the distribution\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return A unique key for querying reward balances\n    function rewardBalanceKey(uint16 distributionId, address operator, address staker)\n        external\n        pure\n        returns (bytes32);\n\n    /// @notice Converts an address to a `uint256` representation\n    /// @param operator The address to convert\n    /// @return The `uint256` representation of the address\n    function addressToUint256(address operator) external pure returns (uint256);\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IStakedMultiToken.votingStake', 'start_line': 2854, 'end_line': 2854, 'offset_start': 111055, 'offset_end': 111141, 'content': 'function votingStake(address staker, address operator) external view returns (uint256);', 'contract_name': 'IStakedMultiToken', 'contract_code': "{\n    ////////////////\n    // Events\n    ////////////////\n\n    event OperatorRegistered(address operator);\n    event Stake(address indexed from, address indexed onBehalfOf, address operator, uint256 assets);\n\n    event RewardsAccrued(address user, address operator, uint256 amount);\n    event RewardsClaimed(address indexed from, address indexed to, address operator, uint256 amount);\n\n    event CooldownToUnstake(address indexed user, address indexed operator, uint256 amount);\n    event CooldownToUpdateProtocolFee(uint16 feeBPS, uint40 cooldownEndTimestamp);\n    event CooldownToUpdateOperatorFee(address operator, uint16 feeBPS, uint40 cooldownEndTimestamp);\n\n    event Unstake(address indexed from, address indexed to, address operator, uint256 assets);\n    event SetOperatorFeeBPS(address operator, uint16 feeBPS);\n    event SetProtocolFeeBPS(uint16 feeBPS);\n\n    event SetMinVotingStake(uint256 minVotingStake);\n    event SetCooldownSecForUnstaking(uint40 cooldownSeconds);\n    event SetCooldownSecForOperatorFee(uint40 cooldownSeconds);\n    event SetCooldownSecForProtocolFee(uint40 cooldownSeconds);\n    event CollectFee(\n        uint16 distributionId, address operator, uint256 protocolFee, uint256 operatorFee, uint256 userRewards\n    );\n\n    ////////////////\n    // Functions\n    ////////////////\n\n    /// @notice Registers a new operator and sets their fee in basis points\n    /// @param operator The address of the operator to register\n    /// @param feeBPS The fee in basis points\n    function registerOperator(address operator, uint16 feeBPS) external;\n\n    /// @notice Freezes an operator, preventing them from performing certain actions\n    /// @param operator The address of the operator to freeze\n    function freezeOperator(address operator) external;\n\n    /// @notice Gets the balance of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The balance of staked tokens\n    function balanceOf(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the voting stake of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The voting stake amount\n    function votingStake(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the total voting stake of a operator\n    /// @param operator The address of the operator\n    /// @return The total voting stake amount\n    function totalVotingStake(address operator) external view returns (uint256);\n\n    /// @notice Gets the total supply of staked tokens for a specific operator\n    /// @param operator The address of the operator\n    /// @return The total supply of staked tokens\n    function totalSupply(address operator) external view returns (uint256);\n\n    /// @notice Sets the minimum voting stake\n    /// @param minVotingStake_ The minimum voting stake\n    function setMinVotingStake(uint256 minVotingStake_) external;\n\n    /// @notice Sets the cooldown seconds for operator fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForOperatorFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the cooldown seconds for protocol fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForProtocolFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the general cooldown period in seconds\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForUnstaking(uint40 cooldownSeconds_) external;\n\n    /// @notice Initiates the cooldown period for protocol fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateProtocolFee(uint16 feeBPS) external;\n\n    /// @notice Initiates the cooldown period for operator fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateOperatorFee(uint16 feeBPS) external;\n\n    /// @notice Sets the protocol fee in basis points\n    function setProtocolFeeBPS() external;\n\n    /// @notice Sets the operator fee in basis points\n    function setOperatorFeeBPS() external;\n\n    /// @notice Claims accrued rewards for a staker\n    /// @param distributionId The distribution ID\n    /// @param to The address to send rewards to\n    /// @param operator The address of the operator\n    /// @param amount The amount of rewards to claim\n    function claimRewards(uint16 distributionId, address to, address operator, uint256 amount) external;\n\n    /// @notice Claims accrued rewards for multiple stakers in a single transaction.\n    /// @param ids Array of distribution IDs for which rewards are being claimed.\n    /// @param recipients Array of addresses to receive the claimed rewards, corresponding to each distribution ID.\n    /// @param operators Array of operator addresses associated with each reward distribution, managing the distribution rules and potentially fees.\n    /// @param amounts Array of amounts of rewards to be claimed for each distribution ID.\n    function claimRewardsBatch(\n        uint16[] calldata ids,\n        address[] calldata recipients,\n        address[] calldata operators,\n        uint256[] calldata amounts\n    ) external;\n\n    /// @notice Stakes tokens on behalf of a user\n    /// @param to The address on whose behalf tokens are being staked\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to stake\n    function stake(address to, address operator, uint256 amount) external;\n\n    /// @notice Switches voting power from one operator to another for a specified amount.\n    /// @param fromOperator The address of the current operator from which the voting power is being moved.\n    /// @param toOperator The address of the new operator to which the voting power will be moved.\n    /// @param amount The amount of voting power to transfer.\n    function switchOperator(address fromOperator, address toOperator, uint256 amount) external;\n\n    /// @notice Initiates the cooldown period for a user's staked tokens\n    /// @param operator The address of the operator\n    /// @param amountToAdd The amount of tokens to cooldown. This is additive.\n    function cooldownToUnstake(address operator, uint256 amountToAdd) external;\n\n    /// @notice Unstakes tokens and stops earning rewards\n    /// @param to The address to unstake tokens to\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to unstake\n    function unstake(address to, address operator, uint256 amount) external;\n\n    /// @notice Gets the accrued rewards for a staker within a specific distribution and operator context\n    /// @param distributionId The distribution ID for which to query rewards\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The amount of accrued rewards\n    function getAccruedRewards(uint16 distributionId, address staker, address operator)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Gets the reward balance for a specific distribution, operator, and staker combination\n    /// @param distributionId The ID of the distribution for which the reward balance is queried\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return The amount of accrued rewards\n    function rewardBalance(uint16 distributionId, address operator, address staker) external view returns (uint256);\n\n    /// Gets operator fee information\n    /// @param operator The address of the operator\n    function operatorFee(address operator)\n        external\n        view\n        returns (uint40 cooldownEndTimestamp, uint16 bps, uint16 pendingBPS);\n\n    /// @notice Checks if an operator is active based on their total voting stake.\n    /// @dev An operator is considered active if their total voting stake is at least the minimum required.\n    /// @param operator The address of the operator to check.\n    /// @return True if the operator's total voting stake is at least the minimum required, false otherwise.\n    function isActiveOperator(address operator) external view returns (bool);\n\n    /// @notice Counts the total number of active operators.\n    /// @dev Iterates through all operators and counts those that are active.\n    /// @return The total number of active operators.\n    function totalActiveOperators() external view returns (uint256);\n\n    /// @notice Calculates the activation threshold for alerts.\n    /// @dev The activation threshold is determined as two-thirds of the total number of active operators.\n    /// @return The calculated activation threshold.\n    function activationThreshold() external view returns (uint256);\n\n    /// @notice Determines if an alert is active based on the given vote count.\n    /// @dev An alert is considered active if the vote count meets or exceeds the activation threshold.\n    /// @param voteCount The number of votes to check against the activation threshold.\n    /// @return True if the vote count meets or exceeds the activation threshold, false otherwise.\n    function isActiveAlert(uint128 voteCount) external view returns (bool);\n\n    /// @notice Generates a unique key for a reward balance based on distribution ID, operator, and staker\n    /// @param distributionId The ID of the distribution\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return A unique key for querying reward balances\n    function rewardBalanceKey(uint16 distributionId, address operator, address staker)\n        external\n        pure\n        returns (bytes32);\n\n    /// @notice Converts an address to a `uint256` representation\n    /// @param operator The address to convert\n    /// @return The `uint256` representation of the address\n    function addressToUint256(address operator) external pure returns (uint256);\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IStakedMultiToken.totalVotingStake', 'start_line': 2859, 'end_line': 2859, 'offset_start': 111304, 'offset_end': 111379, 'content': 'function totalVotingStake(address operator) external view returns (uint256);', 'contract_name': 'IStakedMultiToken', 'contract_code': "{\n    ////////////////\n    // Events\n    ////////////////\n\n    event OperatorRegistered(address operator);\n    event Stake(address indexed from, address indexed onBehalfOf, address operator, uint256 assets);\n\n    event RewardsAccrued(address user, address operator, uint256 amount);\n    event RewardsClaimed(address indexed from, address indexed to, address operator, uint256 amount);\n\n    event CooldownToUnstake(address indexed user, address indexed operator, uint256 amount);\n    event CooldownToUpdateProtocolFee(uint16 feeBPS, uint40 cooldownEndTimestamp);\n    event CooldownToUpdateOperatorFee(address operator, uint16 feeBPS, uint40 cooldownEndTimestamp);\n\n    event Unstake(address indexed from, address indexed to, address operator, uint256 assets);\n    event SetOperatorFeeBPS(address operator, uint16 feeBPS);\n    event SetProtocolFeeBPS(uint16 feeBPS);\n\n    event SetMinVotingStake(uint256 minVotingStake);\n    event SetCooldownSecForUnstaking(uint40 cooldownSeconds);\n    event SetCooldownSecForOperatorFee(uint40 cooldownSeconds);\n    event SetCooldownSecForProtocolFee(uint40 cooldownSeconds);\n    event CollectFee(\n        uint16 distributionId, address operator, uint256 protocolFee, uint256 operatorFee, uint256 userRewards\n    );\n\n    ////////////////\n    // Functions\n    ////////////////\n\n    /// @notice Registers a new operator and sets their fee in basis points\n    /// @param operator The address of the operator to register\n    /// @param feeBPS The fee in basis points\n    function registerOperator(address operator, uint16 feeBPS) external;\n\n    /// @notice Freezes an operator, preventing them from performing certain actions\n    /// @param operator The address of the operator to freeze\n    function freezeOperator(address operator) external;\n\n    /// @notice Gets the balance of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The balance of staked tokens\n    function balanceOf(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the voting stake of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The voting stake amount\n    function votingStake(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the total voting stake of a operator\n    /// @param operator The address of the operator\n    /// @return The total voting stake amount\n    function totalVotingStake(address operator) external view returns (uint256);\n\n    /// @notice Gets the total supply of staked tokens for a specific operator\n    /// @param operator The address of the operator\n    /// @return The total supply of staked tokens\n    function totalSupply(address operator) external view returns (uint256);\n\n    /// @notice Sets the minimum voting stake\n    /// @param minVotingStake_ The minimum voting stake\n    function setMinVotingStake(uint256 minVotingStake_) external;\n\n    /// @notice Sets the cooldown seconds for operator fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForOperatorFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the cooldown seconds for protocol fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForProtocolFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the general cooldown period in seconds\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForUnstaking(uint40 cooldownSeconds_) external;\n\n    /// @notice Initiates the cooldown period for protocol fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateProtocolFee(uint16 feeBPS) external;\n\n    /// @notice Initiates the cooldown period for operator fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateOperatorFee(uint16 feeBPS) external;\n\n    /// @notice Sets the protocol fee in basis points\n    function setProtocolFeeBPS() external;\n\n    /// @notice Sets the operator fee in basis points\n    function setOperatorFeeBPS() external;\n\n    /// @notice Claims accrued rewards for a staker\n    /// @param distributionId The distribution ID\n    /// @param to The address to send rewards to\n    /// @param operator The address of the operator\n    /// @param amount The amount of rewards to claim\n    function claimRewards(uint16 distributionId, address to, address operator, uint256 amount) external;\n\n    /// @notice Claims accrued rewards for multiple stakers in a single transaction.\n    /// @param ids Array of distribution IDs for which rewards are being claimed.\n    /// @param recipients Array of addresses to receive the claimed rewards, corresponding to each distribution ID.\n    /// @param operators Array of operator addresses associated with each reward distribution, managing the distribution rules and potentially fees.\n    /// @param amounts Array of amounts of rewards to be claimed for each distribution ID.\n    function claimRewardsBatch(\n        uint16[] calldata ids,\n        address[] calldata recipients,\n        address[] calldata operators,\n        uint256[] calldata amounts\n    ) external;\n\n    /// @notice Stakes tokens on behalf of a user\n    /// @param to The address on whose behalf tokens are being staked\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to stake\n    function stake(address to, address operator, uint256 amount) external;\n\n    /// @notice Switches voting power from one operator to another for a specified amount.\n    /// @param fromOperator The address of the current operator from which the voting power is being moved.\n    /// @param toOperator The address of the new operator to which the voting power will be moved.\n    /// @param amount The amount of voting power to transfer.\n    function switchOperator(address fromOperator, address toOperator, uint256 amount) external;\n\n    /// @notice Initiates the cooldown period for a user's staked tokens\n    /// @param operator The address of the operator\n    /// @param amountToAdd The amount of tokens to cooldown. This is additive.\n    function cooldownToUnstake(address operator, uint256 amountToAdd) external;\n\n    /// @notice Unstakes tokens and stops earning rewards\n    /// @param to The address to unstake tokens to\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to unstake\n    function unstake(address to, address operator, uint256 amount) external;\n\n    /// @notice Gets the accrued rewards for a staker within a specific distribution and operator context\n    /// @param distributionId The distribution ID for which to query rewards\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The amount of accrued rewards\n    function getAccruedRewards(uint16 distributionId, address staker, address operator)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Gets the reward balance for a specific distribution, operator, and staker combination\n    /// @param distributionId The ID of the distribution for which the reward balance is queried\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return The amount of accrued rewards\n    function rewardBalance(uint16 distributionId, address operator, address staker) external view returns (uint256);\n\n    /// Gets operator fee information\n    /// @param operator The address of the operator\n    function operatorFee(address operator)\n        external\n        view\n        returns (uint40 cooldownEndTimestamp, uint16 bps, uint16 pendingBPS);\n\n    /// @notice Checks if an operator is active based on their total voting stake.\n    /// @dev An operator is considered active if their total voting stake is at least the minimum required.\n    /// @param operator The address of the operator to check.\n    /// @return True if the operator's total voting stake is at least the minimum required, false otherwise.\n    function isActiveOperator(address operator) external view returns (bool);\n\n    /// @notice Counts the total number of active operators.\n    /// @dev Iterates through all operators and counts those that are active.\n    /// @return The total number of active operators.\n    function totalActiveOperators() external view returns (uint256);\n\n    /// @notice Calculates the activation threshold for alerts.\n    /// @dev The activation threshold is determined as two-thirds of the total number of active operators.\n    /// @return The calculated activation threshold.\n    function activationThreshold() external view returns (uint256);\n\n    /// @notice Determines if an alert is active based on the given vote count.\n    /// @dev An alert is considered active if the vote count meets or exceeds the activation threshold.\n    /// @param voteCount The number of votes to check against the activation threshold.\n    /// @return True if the vote count meets or exceeds the activation threshold, false otherwise.\n    function isActiveAlert(uint128 voteCount) external view returns (bool);\n\n    /// @notice Generates a unique key for a reward balance based on distribution ID, operator, and staker\n    /// @param distributionId The ID of the distribution\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return A unique key for querying reward balances\n    function rewardBalanceKey(uint16 distributionId, address operator, address staker)\n        external\n        pure\n        returns (bytes32);\n\n    /// @notice Converts an address to a `uint256` representation\n    /// @param operator The address to convert\n    /// @return The `uint256` representation of the address\n    function addressToUint256(address operator) external pure returns (uint256);\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IStakedMultiToken.totalSupply', 'start_line': 2864, 'end_line': 2864, 'offset_start': 111567, 'offset_end': 111637, 'content': 'function totalSupply(address operator) external view returns (uint256);', 'contract_name': 'IStakedMultiToken', 'contract_code': "{\n    ////////////////\n    // Events\n    ////////////////\n\n    event OperatorRegistered(address operator);\n    event Stake(address indexed from, address indexed onBehalfOf, address operator, uint256 assets);\n\n    event RewardsAccrued(address user, address operator, uint256 amount);\n    event RewardsClaimed(address indexed from, address indexed to, address operator, uint256 amount);\n\n    event CooldownToUnstake(address indexed user, address indexed operator, uint256 amount);\n    event CooldownToUpdateProtocolFee(uint16 feeBPS, uint40 cooldownEndTimestamp);\n    event CooldownToUpdateOperatorFee(address operator, uint16 feeBPS, uint40 cooldownEndTimestamp);\n\n    event Unstake(address indexed from, address indexed to, address operator, uint256 assets);\n    event SetOperatorFeeBPS(address operator, uint16 feeBPS);\n    event SetProtocolFeeBPS(uint16 feeBPS);\n\n    event SetMinVotingStake(uint256 minVotingStake);\n    event SetCooldownSecForUnstaking(uint40 cooldownSeconds);\n    event SetCooldownSecForOperatorFee(uint40 cooldownSeconds);\n    event SetCooldownSecForProtocolFee(uint40 cooldownSeconds);\n    event CollectFee(\n        uint16 distributionId, address operator, uint256 protocolFee, uint256 operatorFee, uint256 userRewards\n    );\n\n    ////////////////\n    // Functions\n    ////////////////\n\n    /// @notice Registers a new operator and sets their fee in basis points\n    /// @param operator The address of the operator to register\n    /// @param feeBPS The fee in basis points\n    function registerOperator(address operator, uint16 feeBPS) external;\n\n    /// @notice Freezes an operator, preventing them from performing certain actions\n    /// @param operator The address of the operator to freeze\n    function freezeOperator(address operator) external;\n\n    /// @notice Gets the balance of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The balance of staked tokens\n    function balanceOf(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the voting stake of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The voting stake amount\n    function votingStake(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the total voting stake of a operator\n    /// @param operator The address of the operator\n    /// @return The total voting stake amount\n    function totalVotingStake(address operator) external view returns (uint256);\n\n    /// @notice Gets the total supply of staked tokens for a specific operator\n    /// @param operator The address of the operator\n    /// @return The total supply of staked tokens\n    function totalSupply(address operator) external view returns (uint256);\n\n    /// @notice Sets the minimum voting stake\n    /// @param minVotingStake_ The minimum voting stake\n    function setMinVotingStake(uint256 minVotingStake_) external;\n\n    /// @notice Sets the cooldown seconds for operator fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForOperatorFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the cooldown seconds for protocol fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForProtocolFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the general cooldown period in seconds\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForUnstaking(uint40 cooldownSeconds_) external;\n\n    /// @notice Initiates the cooldown period for protocol fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateProtocolFee(uint16 feeBPS) external;\n\n    /// @notice Initiates the cooldown period for operator fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateOperatorFee(uint16 feeBPS) external;\n\n    /// @notice Sets the protocol fee in basis points\n    function setProtocolFeeBPS() external;\n\n    /// @notice Sets the operator fee in basis points\n    function setOperatorFeeBPS() external;\n\n    /// @notice Claims accrued rewards for a staker\n    /// @param distributionId The distribution ID\n    /// @param to The address to send rewards to\n    /// @param operator The address of the operator\n    /// @param amount The amount of rewards to claim\n    function claimRewards(uint16 distributionId, address to, address operator, uint256 amount) external;\n\n    /// @notice Claims accrued rewards for multiple stakers in a single transaction.\n    /// @param ids Array of distribution IDs for which rewards are being claimed.\n    /// @param recipients Array of addresses to receive the claimed rewards, corresponding to each distribution ID.\n    /// @param operators Array of operator addresses associated with each reward distribution, managing the distribution rules and potentially fees.\n    /// @param amounts Array of amounts of rewards to be claimed for each distribution ID.\n    function claimRewardsBatch(\n        uint16[] calldata ids,\n        address[] calldata recipients,\n        address[] calldata operators,\n        uint256[] calldata amounts\n    ) external;\n\n    /// @notice Stakes tokens on behalf of a user\n    /// @param to The address on whose behalf tokens are being staked\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to stake\n    function stake(address to, address operator, uint256 amount) external;\n\n    /// @notice Switches voting power from one operator to another for a specified amount.\n    /// @param fromOperator The address of the current operator from which the voting power is being moved.\n    /// @param toOperator The address of the new operator to which the voting power will be moved.\n    /// @param amount The amount of voting power to transfer.\n    function switchOperator(address fromOperator, address toOperator, uint256 amount) external;\n\n    /// @notice Initiates the cooldown period for a user's staked tokens\n    /// @param operator The address of the operator\n    /// @param amountToAdd The amount of tokens to cooldown. This is additive.\n    function cooldownToUnstake(address operator, uint256 amountToAdd) external;\n\n    /// @notice Unstakes tokens and stops earning rewards\n    /// @param to The address to unstake tokens to\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to unstake\n    function unstake(address to, address operator, uint256 amount) external;\n\n    /// @notice Gets the accrued rewards for a staker within a specific distribution and operator context\n    /// @param distributionId The distribution ID for which to query rewards\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The amount of accrued rewards\n    function getAccruedRewards(uint16 distributionId, address staker, address operator)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Gets the reward balance for a specific distribution, operator, and staker combination\n    /// @param distributionId The ID of the distribution for which the reward balance is queried\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return The amount of accrued rewards\n    function rewardBalance(uint16 distributionId, address operator, address staker) external view returns (uint256);\n\n    /// Gets operator fee information\n    /// @param operator The address of the operator\n    function operatorFee(address operator)\n        external\n        view\n        returns (uint40 cooldownEndTimestamp, uint16 bps, uint16 pendingBPS);\n\n    /// @notice Checks if an operator is active based on their total voting stake.\n    /// @dev An operator is considered active if their total voting stake is at least the minimum required.\n    /// @param operator The address of the operator to check.\n    /// @return True if the operator's total voting stake is at least the minimum required, false otherwise.\n    function isActiveOperator(address operator) external view returns (bool);\n\n    /// @notice Counts the total number of active operators.\n    /// @dev Iterates through all operators and counts those that are active.\n    /// @return The total number of active operators.\n    function totalActiveOperators() external view returns (uint256);\n\n    /// @notice Calculates the activation threshold for alerts.\n    /// @dev The activation threshold is determined as two-thirds of the total number of active operators.\n    /// @return The calculated activation threshold.\n    function activationThreshold() external view returns (uint256);\n\n    /// @notice Determines if an alert is active based on the given vote count.\n    /// @dev An alert is considered active if the vote count meets or exceeds the activation threshold.\n    /// @param voteCount The number of votes to check against the activation threshold.\n    /// @return True if the vote count meets or exceeds the activation threshold, false otherwise.\n    function isActiveAlert(uint128 voteCount) external view returns (bool);\n\n    /// @notice Generates a unique key for a reward balance based on distribution ID, operator, and staker\n    /// @param distributionId The ID of the distribution\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return A unique key for querying reward balances\n    function rewardBalanceKey(uint16 distributionId, address operator, address staker)\n        external\n        pure\n        returns (bytes32);\n\n    /// @notice Converts an address to a `uint256` representation\n    /// @param operator The address to convert\n    /// @return The `uint256` representation of the address\n    function addressToUint256(address operator) external pure returns (uint256);\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IStakedMultiToken.setMinVotingStake', 'start_line': 2868, 'end_line': 2868, 'offset_start': 111746, 'offset_end': 111806, 'content': 'function setMinVotingStake(uint256 minVotingStake_) external;', 'contract_name': 'IStakedMultiToken', 'contract_code': "{\n    ////////////////\n    // Events\n    ////////////////\n\n    event OperatorRegistered(address operator);\n    event Stake(address indexed from, address indexed onBehalfOf, address operator, uint256 assets);\n\n    event RewardsAccrued(address user, address operator, uint256 amount);\n    event RewardsClaimed(address indexed from, address indexed to, address operator, uint256 amount);\n\n    event CooldownToUnstake(address indexed user, address indexed operator, uint256 amount);\n    event CooldownToUpdateProtocolFee(uint16 feeBPS, uint40 cooldownEndTimestamp);\n    event CooldownToUpdateOperatorFee(address operator, uint16 feeBPS, uint40 cooldownEndTimestamp);\n\n    event Unstake(address indexed from, address indexed to, address operator, uint256 assets);\n    event SetOperatorFeeBPS(address operator, uint16 feeBPS);\n    event SetProtocolFeeBPS(uint16 feeBPS);\n\n    event SetMinVotingStake(uint256 minVotingStake);\n    event SetCooldownSecForUnstaking(uint40 cooldownSeconds);\n    event SetCooldownSecForOperatorFee(uint40 cooldownSeconds);\n    event SetCooldownSecForProtocolFee(uint40 cooldownSeconds);\n    event CollectFee(\n        uint16 distributionId, address operator, uint256 protocolFee, uint256 operatorFee, uint256 userRewards\n    );\n\n    ////////////////\n    // Functions\n    ////////////////\n\n    /// @notice Registers a new operator and sets their fee in basis points\n    /// @param operator The address of the operator to register\n    /// @param feeBPS The fee in basis points\n    function registerOperator(address operator, uint16 feeBPS) external;\n\n    /// @notice Freezes an operator, preventing them from performing certain actions\n    /// @param operator The address of the operator to freeze\n    function freezeOperator(address operator) external;\n\n    /// @notice Gets the balance of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The balance of staked tokens\n    function balanceOf(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the voting stake of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The voting stake amount\n    function votingStake(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the total voting stake of a operator\n    /// @param operator The address of the operator\n    /// @return The total voting stake amount\n    function totalVotingStake(address operator) external view returns (uint256);\n\n    /// @notice Gets the total supply of staked tokens for a specific operator\n    /// @param operator The address of the operator\n    /// @return The total supply of staked tokens\n    function totalSupply(address operator) external view returns (uint256);\n\n    /// @notice Sets the minimum voting stake\n    /// @param minVotingStake_ The minimum voting stake\n    function setMinVotingStake(uint256 minVotingStake_) external;\n\n    /// @notice Sets the cooldown seconds for operator fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForOperatorFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the cooldown seconds for protocol fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForProtocolFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the general cooldown period in seconds\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForUnstaking(uint40 cooldownSeconds_) external;\n\n    /// @notice Initiates the cooldown period for protocol fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateProtocolFee(uint16 feeBPS) external;\n\n    /// @notice Initiates the cooldown period for operator fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateOperatorFee(uint16 feeBPS) external;\n\n    /// @notice Sets the protocol fee in basis points\n    function setProtocolFeeBPS() external;\n\n    /// @notice Sets the operator fee in basis points\n    function setOperatorFeeBPS() external;\n\n    /// @notice Claims accrued rewards for a staker\n    /// @param distributionId The distribution ID\n    /// @param to The address to send rewards to\n    /// @param operator The address of the operator\n    /// @param amount The amount of rewards to claim\n    function claimRewards(uint16 distributionId, address to, address operator, uint256 amount) external;\n\n    /// @notice Claims accrued rewards for multiple stakers in a single transaction.\n    /// @param ids Array of distribution IDs for which rewards are being claimed.\n    /// @param recipients Array of addresses to receive the claimed rewards, corresponding to each distribution ID.\n    /// @param operators Array of operator addresses associated with each reward distribution, managing the distribution rules and potentially fees.\n    /// @param amounts Array of amounts of rewards to be claimed for each distribution ID.\n    function claimRewardsBatch(\n        uint16[] calldata ids,\n        address[] calldata recipients,\n        address[] calldata operators,\n        uint256[] calldata amounts\n    ) external;\n\n    /// @notice Stakes tokens on behalf of a user\n    /// @param to The address on whose behalf tokens are being staked\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to stake\n    function stake(address to, address operator, uint256 amount) external;\n\n    /// @notice Switches voting power from one operator to another for a specified amount.\n    /// @param fromOperator The address of the current operator from which the voting power is being moved.\n    /// @param toOperator The address of the new operator to which the voting power will be moved.\n    /// @param amount The amount of voting power to transfer.\n    function switchOperator(address fromOperator, address toOperator, uint256 amount) external;\n\n    /// @notice Initiates the cooldown period for a user's staked tokens\n    /// @param operator The address of the operator\n    /// @param amountToAdd The amount of tokens to cooldown. This is additive.\n    function cooldownToUnstake(address operator, uint256 amountToAdd) external;\n\n    /// @notice Unstakes tokens and stops earning rewards\n    /// @param to The address to unstake tokens to\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to unstake\n    function unstake(address to, address operator, uint256 amount) external;\n\n    /// @notice Gets the accrued rewards for a staker within a specific distribution and operator context\n    /// @param distributionId The distribution ID for which to query rewards\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The amount of accrued rewards\n    function getAccruedRewards(uint16 distributionId, address staker, address operator)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Gets the reward balance for a specific distribution, operator, and staker combination\n    /// @param distributionId The ID of the distribution for which the reward balance is queried\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return The amount of accrued rewards\n    function rewardBalance(uint16 distributionId, address operator, address staker) external view returns (uint256);\n\n    /// Gets operator fee information\n    /// @param operator The address of the operator\n    function operatorFee(address operator)\n        external\n        view\n        returns (uint40 cooldownEndTimestamp, uint16 bps, uint16 pendingBPS);\n\n    /// @notice Checks if an operator is active based on their total voting stake.\n    /// @dev An operator is considered active if their total voting stake is at least the minimum required.\n    /// @param operator The address of the operator to check.\n    /// @return True if the operator's total voting stake is at least the minimum required, false otherwise.\n    function isActiveOperator(address operator) external view returns (bool);\n\n    /// @notice Counts the total number of active operators.\n    /// @dev Iterates through all operators and counts those that are active.\n    /// @return The total number of active operators.\n    function totalActiveOperators() external view returns (uint256);\n\n    /// @notice Calculates the activation threshold for alerts.\n    /// @dev The activation threshold is determined as two-thirds of the total number of active operators.\n    /// @return The calculated activation threshold.\n    function activationThreshold() external view returns (uint256);\n\n    /// @notice Determines if an alert is active based on the given vote count.\n    /// @dev An alert is considered active if the vote count meets or exceeds the activation threshold.\n    /// @param voteCount The number of votes to check against the activation threshold.\n    /// @return True if the vote count meets or exceeds the activation threshold, false otherwise.\n    function isActiveAlert(uint128 voteCount) external view returns (bool);\n\n    /// @notice Generates a unique key for a reward balance based on distribution ID, operator, and staker\n    /// @param distributionId The ID of the distribution\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return A unique key for querying reward balances\n    function rewardBalanceKey(uint16 distributionId, address operator, address staker)\n        external\n        pure\n        returns (bytes32);\n\n    /// @notice Converts an address to a `uint256` representation\n    /// @param operator The address to convert\n    /// @return The `uint256` representation of the address\n    function addressToUint256(address operator) external pure returns (uint256);\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IStakedMultiToken.setCooldownSecForOperatorFee', 'start_line': 2872, 'end_line': 2872, 'offset_start': 111943, 'offset_end': 112014, 'content': 'function setCooldownSecForOperatorFee(uint40 cooldownSeconds_) external;', 'contract_name': 'IStakedMultiToken', 'contract_code': "{\n    ////////////////\n    // Events\n    ////////////////\n\n    event OperatorRegistered(address operator);\n    event Stake(address indexed from, address indexed onBehalfOf, address operator, uint256 assets);\n\n    event RewardsAccrued(address user, address operator, uint256 amount);\n    event RewardsClaimed(address indexed from, address indexed to, address operator, uint256 amount);\n\n    event CooldownToUnstake(address indexed user, address indexed operator, uint256 amount);\n    event CooldownToUpdateProtocolFee(uint16 feeBPS, uint40 cooldownEndTimestamp);\n    event CooldownToUpdateOperatorFee(address operator, uint16 feeBPS, uint40 cooldownEndTimestamp);\n\n    event Unstake(address indexed from, address indexed to, address operator, uint256 assets);\n    event SetOperatorFeeBPS(address operator, uint16 feeBPS);\n    event SetProtocolFeeBPS(uint16 feeBPS);\n\n    event SetMinVotingStake(uint256 minVotingStake);\n    event SetCooldownSecForUnstaking(uint40 cooldownSeconds);\n    event SetCooldownSecForOperatorFee(uint40 cooldownSeconds);\n    event SetCooldownSecForProtocolFee(uint40 cooldownSeconds);\n    event CollectFee(\n        uint16 distributionId, address operator, uint256 protocolFee, uint256 operatorFee, uint256 userRewards\n    );\n\n    ////////////////\n    // Functions\n    ////////////////\n\n    /// @notice Registers a new operator and sets their fee in basis points\n    /// @param operator The address of the operator to register\n    /// @param feeBPS The fee in basis points\n    function registerOperator(address operator, uint16 feeBPS) external;\n\n    /// @notice Freezes an operator, preventing them from performing certain actions\n    /// @param operator The address of the operator to freeze\n    function freezeOperator(address operator) external;\n\n    /// @notice Gets the balance of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The balance of staked tokens\n    function balanceOf(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the voting stake of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The voting stake amount\n    function votingStake(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the total voting stake of a operator\n    /// @param operator The address of the operator\n    /// @return The total voting stake amount\n    function totalVotingStake(address operator) external view returns (uint256);\n\n    /// @notice Gets the total supply of staked tokens for a specific operator\n    /// @param operator The address of the operator\n    /// @return The total supply of staked tokens\n    function totalSupply(address operator) external view returns (uint256);\n\n    /// @notice Sets the minimum voting stake\n    /// @param minVotingStake_ The minimum voting stake\n    function setMinVotingStake(uint256 minVotingStake_) external;\n\n    /// @notice Sets the cooldown seconds for operator fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForOperatorFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the cooldown seconds for protocol fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForProtocolFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the general cooldown period in seconds\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForUnstaking(uint40 cooldownSeconds_) external;\n\n    /// @notice Initiates the cooldown period for protocol fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateProtocolFee(uint16 feeBPS) external;\n\n    /// @notice Initiates the cooldown period for operator fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateOperatorFee(uint16 feeBPS) external;\n\n    /// @notice Sets the protocol fee in basis points\n    function setProtocolFeeBPS() external;\n\n    /// @notice Sets the operator fee in basis points\n    function setOperatorFeeBPS() external;\n\n    /// @notice Claims accrued rewards for a staker\n    /// @param distributionId The distribution ID\n    /// @param to The address to send rewards to\n    /// @param operator The address of the operator\n    /// @param amount The amount of rewards to claim\n    function claimRewards(uint16 distributionId, address to, address operator, uint256 amount) external;\n\n    /// @notice Claims accrued rewards for multiple stakers in a single transaction.\n    /// @param ids Array of distribution IDs for which rewards are being claimed.\n    /// @param recipients Array of addresses to receive the claimed rewards, corresponding to each distribution ID.\n    /// @param operators Array of operator addresses associated with each reward distribution, managing the distribution rules and potentially fees.\n    /// @param amounts Array of amounts of rewards to be claimed for each distribution ID.\n    function claimRewardsBatch(\n        uint16[] calldata ids,\n        address[] calldata recipients,\n        address[] calldata operators,\n        uint256[] calldata amounts\n    ) external;\n\n    /// @notice Stakes tokens on behalf of a user\n    /// @param to The address on whose behalf tokens are being staked\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to stake\n    function stake(address to, address operator, uint256 amount) external;\n\n    /// @notice Switches voting power from one operator to another for a specified amount.\n    /// @param fromOperator The address of the current operator from which the voting power is being moved.\n    /// @param toOperator The address of the new operator to which the voting power will be moved.\n    /// @param amount The amount of voting power to transfer.\n    function switchOperator(address fromOperator, address toOperator, uint256 amount) external;\n\n    /// @notice Initiates the cooldown period for a user's staked tokens\n    /// @param operator The address of the operator\n    /// @param amountToAdd The amount of tokens to cooldown. This is additive.\n    function cooldownToUnstake(address operator, uint256 amountToAdd) external;\n\n    /// @notice Unstakes tokens and stops earning rewards\n    /// @param to The address to unstake tokens to\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to unstake\n    function unstake(address to, address operator, uint256 amount) external;\n\n    /// @notice Gets the accrued rewards for a staker within a specific distribution and operator context\n    /// @param distributionId The distribution ID for which to query rewards\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The amount of accrued rewards\n    function getAccruedRewards(uint16 distributionId, address staker, address operator)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Gets the reward balance for a specific distribution, operator, and staker combination\n    /// @param distributionId The ID of the distribution for which the reward balance is queried\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return The amount of accrued rewards\n    function rewardBalance(uint16 distributionId, address operator, address staker) external view returns (uint256);\n\n    /// Gets operator fee information\n    /// @param operator The address of the operator\n    function operatorFee(address operator)\n        external\n        view\n        returns (uint40 cooldownEndTimestamp, uint16 bps, uint16 pendingBPS);\n\n    /// @notice Checks if an operator is active based on their total voting stake.\n    /// @dev An operator is considered active if their total voting stake is at least the minimum required.\n    /// @param operator The address of the operator to check.\n    /// @return True if the operator's total voting stake is at least the minimum required, false otherwise.\n    function isActiveOperator(address operator) external view returns (bool);\n\n    /// @notice Counts the total number of active operators.\n    /// @dev Iterates through all operators and counts those that are active.\n    /// @return The total number of active operators.\n    function totalActiveOperators() external view returns (uint256);\n\n    /// @notice Calculates the activation threshold for alerts.\n    /// @dev The activation threshold is determined as two-thirds of the total number of active operators.\n    /// @return The calculated activation threshold.\n    function activationThreshold() external view returns (uint256);\n\n    /// @notice Determines if an alert is active based on the given vote count.\n    /// @dev An alert is considered active if the vote count meets or exceeds the activation threshold.\n    /// @param voteCount The number of votes to check against the activation threshold.\n    /// @return True if the vote count meets or exceeds the activation threshold, false otherwise.\n    function isActiveAlert(uint128 voteCount) external view returns (bool);\n\n    /// @notice Generates a unique key for a reward balance based on distribution ID, operator, and staker\n    /// @param distributionId The ID of the distribution\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return A unique key for querying reward balances\n    function rewardBalanceKey(uint16 distributionId, address operator, address staker)\n        external\n        pure\n        returns (bytes32);\n\n    /// @notice Converts an address to a `uint256` representation\n    /// @param operator The address to convert\n    /// @return The `uint256` representation of the address\n    function addressToUint256(address operator) external pure returns (uint256);\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IStakedMultiToken.setCooldownSecForProtocolFee', 'start_line': 2876, 'end_line': 2876, 'offset_start': 112151, 'offset_end': 112222, 'content': 'function setCooldownSecForProtocolFee(uint40 cooldownSeconds_) external;', 'contract_name': 'IStakedMultiToken', 'contract_code': "{\n    ////////////////\n    // Events\n    ////////////////\n\n    event OperatorRegistered(address operator);\n    event Stake(address indexed from, address indexed onBehalfOf, address operator, uint256 assets);\n\n    event RewardsAccrued(address user, address operator, uint256 amount);\n    event RewardsClaimed(address indexed from, address indexed to, address operator, uint256 amount);\n\n    event CooldownToUnstake(address indexed user, address indexed operator, uint256 amount);\n    event CooldownToUpdateProtocolFee(uint16 feeBPS, uint40 cooldownEndTimestamp);\n    event CooldownToUpdateOperatorFee(address operator, uint16 feeBPS, uint40 cooldownEndTimestamp);\n\n    event Unstake(address indexed from, address indexed to, address operator, uint256 assets);\n    event SetOperatorFeeBPS(address operator, uint16 feeBPS);\n    event SetProtocolFeeBPS(uint16 feeBPS);\n\n    event SetMinVotingStake(uint256 minVotingStake);\n    event SetCooldownSecForUnstaking(uint40 cooldownSeconds);\n    event SetCooldownSecForOperatorFee(uint40 cooldownSeconds);\n    event SetCooldownSecForProtocolFee(uint40 cooldownSeconds);\n    event CollectFee(\n        uint16 distributionId, address operator, uint256 protocolFee, uint256 operatorFee, uint256 userRewards\n    );\n\n    ////////////////\n    // Functions\n    ////////////////\n\n    /// @notice Registers a new operator and sets their fee in basis points\n    /// @param operator The address of the operator to register\n    /// @param feeBPS The fee in basis points\n    function registerOperator(address operator, uint16 feeBPS) external;\n\n    /// @notice Freezes an operator, preventing them from performing certain actions\n    /// @param operator The address of the operator to freeze\n    function freezeOperator(address operator) external;\n\n    /// @notice Gets the balance of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The balance of staked tokens\n    function balanceOf(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the voting stake of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The voting stake amount\n    function votingStake(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the total voting stake of a operator\n    /// @param operator The address of the operator\n    /// @return The total voting stake amount\n    function totalVotingStake(address operator) external view returns (uint256);\n\n    /// @notice Gets the total supply of staked tokens for a specific operator\n    /// @param operator The address of the operator\n    /// @return The total supply of staked tokens\n    function totalSupply(address operator) external view returns (uint256);\n\n    /// @notice Sets the minimum voting stake\n    /// @param minVotingStake_ The minimum voting stake\n    function setMinVotingStake(uint256 minVotingStake_) external;\n\n    /// @notice Sets the cooldown seconds for operator fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForOperatorFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the cooldown seconds for protocol fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForProtocolFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the general cooldown period in seconds\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForUnstaking(uint40 cooldownSeconds_) external;\n\n    /// @notice Initiates the cooldown period for protocol fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateProtocolFee(uint16 feeBPS) external;\n\n    /// @notice Initiates the cooldown period for operator fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateOperatorFee(uint16 feeBPS) external;\n\n    /// @notice Sets the protocol fee in basis points\n    function setProtocolFeeBPS() external;\n\n    /// @notice Sets the operator fee in basis points\n    function setOperatorFeeBPS() external;\n\n    /// @notice Claims accrued rewards for a staker\n    /// @param distributionId The distribution ID\n    /// @param to The address to send rewards to\n    /// @param operator The address of the operator\n    /// @param amount The amount of rewards to claim\n    function claimRewards(uint16 distributionId, address to, address operator, uint256 amount) external;\n\n    /// @notice Claims accrued rewards for multiple stakers in a single transaction.\n    /// @param ids Array of distribution IDs for which rewards are being claimed.\n    /// @param recipients Array of addresses to receive the claimed rewards, corresponding to each distribution ID.\n    /// @param operators Array of operator addresses associated with each reward distribution, managing the distribution rules and potentially fees.\n    /// @param amounts Array of amounts of rewards to be claimed for each distribution ID.\n    function claimRewardsBatch(\n        uint16[] calldata ids,\n        address[] calldata recipients,\n        address[] calldata operators,\n        uint256[] calldata amounts\n    ) external;\n\n    /// @notice Stakes tokens on behalf of a user\n    /// @param to The address on whose behalf tokens are being staked\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to stake\n    function stake(address to, address operator, uint256 amount) external;\n\n    /// @notice Switches voting power from one operator to another for a specified amount.\n    /// @param fromOperator The address of the current operator from which the voting power is being moved.\n    /// @param toOperator The address of the new operator to which the voting power will be moved.\n    /// @param amount The amount of voting power to transfer.\n    function switchOperator(address fromOperator, address toOperator, uint256 amount) external;\n\n    /// @notice Initiates the cooldown period for a user's staked tokens\n    /// @param operator The address of the operator\n    /// @param amountToAdd The amount of tokens to cooldown. This is additive.\n    function cooldownToUnstake(address operator, uint256 amountToAdd) external;\n\n    /// @notice Unstakes tokens and stops earning rewards\n    /// @param to The address to unstake tokens to\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to unstake\n    function unstake(address to, address operator, uint256 amount) external;\n\n    /// @notice Gets the accrued rewards for a staker within a specific distribution and operator context\n    /// @param distributionId The distribution ID for which to query rewards\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The amount of accrued rewards\n    function getAccruedRewards(uint16 distributionId, address staker, address operator)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Gets the reward balance for a specific distribution, operator, and staker combination\n    /// @param distributionId The ID of the distribution for which the reward balance is queried\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return The amount of accrued rewards\n    function rewardBalance(uint16 distributionId, address operator, address staker) external view returns (uint256);\n\n    /// Gets operator fee information\n    /// @param operator The address of the operator\n    function operatorFee(address operator)\n        external\n        view\n        returns (uint40 cooldownEndTimestamp, uint16 bps, uint16 pendingBPS);\n\n    /// @notice Checks if an operator is active based on their total voting stake.\n    /// @dev An operator is considered active if their total voting stake is at least the minimum required.\n    /// @param operator The address of the operator to check.\n    /// @return True if the operator's total voting stake is at least the minimum required, false otherwise.\n    function isActiveOperator(address operator) external view returns (bool);\n\n    /// @notice Counts the total number of active operators.\n    /// @dev Iterates through all operators and counts those that are active.\n    /// @return The total number of active operators.\n    function totalActiveOperators() external view returns (uint256);\n\n    /// @notice Calculates the activation threshold for alerts.\n    /// @dev The activation threshold is determined as two-thirds of the total number of active operators.\n    /// @return The calculated activation threshold.\n    function activationThreshold() external view returns (uint256);\n\n    /// @notice Determines if an alert is active based on the given vote count.\n    /// @dev An alert is considered active if the vote count meets or exceeds the activation threshold.\n    /// @param voteCount The number of votes to check against the activation threshold.\n    /// @return True if the vote count meets or exceeds the activation threshold, false otherwise.\n    function isActiveAlert(uint128 voteCount) external view returns (bool);\n\n    /// @notice Generates a unique key for a reward balance based on distribution ID, operator, and staker\n    /// @param distributionId The ID of the distribution\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return A unique key for querying reward balances\n    function rewardBalanceKey(uint16 distributionId, address operator, address staker)\n        external\n        pure\n        returns (bytes32);\n\n    /// @notice Converts an address to a `uint256` representation\n    /// @param operator The address to convert\n    /// @return The `uint256` representation of the address\n    function addressToUint256(address operator) external pure returns (uint256);\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IStakedMultiToken.setCooldownSecForUnstaking', 'start_line': 2880, 'end_line': 2880, 'offset_start': 112352, 'offset_end': 112421, 'content': 'function setCooldownSecForUnstaking(uint40 cooldownSeconds_) external;', 'contract_name': 'IStakedMultiToken', 'contract_code': "{\n    ////////////////\n    // Events\n    ////////////////\n\n    event OperatorRegistered(address operator);\n    event Stake(address indexed from, address indexed onBehalfOf, address operator, uint256 assets);\n\n    event RewardsAccrued(address user, address operator, uint256 amount);\n    event RewardsClaimed(address indexed from, address indexed to, address operator, uint256 amount);\n\n    event CooldownToUnstake(address indexed user, address indexed operator, uint256 amount);\n    event CooldownToUpdateProtocolFee(uint16 feeBPS, uint40 cooldownEndTimestamp);\n    event CooldownToUpdateOperatorFee(address operator, uint16 feeBPS, uint40 cooldownEndTimestamp);\n\n    event Unstake(address indexed from, address indexed to, address operator, uint256 assets);\n    event SetOperatorFeeBPS(address operator, uint16 feeBPS);\n    event SetProtocolFeeBPS(uint16 feeBPS);\n\n    event SetMinVotingStake(uint256 minVotingStake);\n    event SetCooldownSecForUnstaking(uint40 cooldownSeconds);\n    event SetCooldownSecForOperatorFee(uint40 cooldownSeconds);\n    event SetCooldownSecForProtocolFee(uint40 cooldownSeconds);\n    event CollectFee(\n        uint16 distributionId, address operator, uint256 protocolFee, uint256 operatorFee, uint256 userRewards\n    );\n\n    ////////////////\n    // Functions\n    ////////////////\n\n    /// @notice Registers a new operator and sets their fee in basis points\n    /// @param operator The address of the operator to register\n    /// @param feeBPS The fee in basis points\n    function registerOperator(address operator, uint16 feeBPS) external;\n\n    /// @notice Freezes an operator, preventing them from performing certain actions\n    /// @param operator The address of the operator to freeze\n    function freezeOperator(address operator) external;\n\n    /// @notice Gets the balance of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The balance of staked tokens\n    function balanceOf(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the voting stake of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The voting stake amount\n    function votingStake(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the total voting stake of a operator\n    /// @param operator The address of the operator\n    /// @return The total voting stake amount\n    function totalVotingStake(address operator) external view returns (uint256);\n\n    /// @notice Gets the total supply of staked tokens for a specific operator\n    /// @param operator The address of the operator\n    /// @return The total supply of staked tokens\n    function totalSupply(address operator) external view returns (uint256);\n\n    /// @notice Sets the minimum voting stake\n    /// @param minVotingStake_ The minimum voting stake\n    function setMinVotingStake(uint256 minVotingStake_) external;\n\n    /// @notice Sets the cooldown seconds for operator fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForOperatorFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the cooldown seconds for protocol fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForProtocolFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the general cooldown period in seconds\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForUnstaking(uint40 cooldownSeconds_) external;\n\n    /// @notice Initiates the cooldown period for protocol fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateProtocolFee(uint16 feeBPS) external;\n\n    /// @notice Initiates the cooldown period for operator fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateOperatorFee(uint16 feeBPS) external;\n\n    /// @notice Sets the protocol fee in basis points\n    function setProtocolFeeBPS() external;\n\n    /// @notice Sets the operator fee in basis points\n    function setOperatorFeeBPS() external;\n\n    /// @notice Claims accrued rewards for a staker\n    /// @param distributionId The distribution ID\n    /// @param to The address to send rewards to\n    /// @param operator The address of the operator\n    /// @param amount The amount of rewards to claim\n    function claimRewards(uint16 distributionId, address to, address operator, uint256 amount) external;\n\n    /// @notice Claims accrued rewards for multiple stakers in a single transaction.\n    /// @param ids Array of distribution IDs for which rewards are being claimed.\n    /// @param recipients Array of addresses to receive the claimed rewards, corresponding to each distribution ID.\n    /// @param operators Array of operator addresses associated with each reward distribution, managing the distribution rules and potentially fees.\n    /// @param amounts Array of amounts of rewards to be claimed for each distribution ID.\n    function claimRewardsBatch(\n        uint16[] calldata ids,\n        address[] calldata recipients,\n        address[] calldata operators,\n        uint256[] calldata amounts\n    ) external;\n\n    /// @notice Stakes tokens on behalf of a user\n    /// @param to The address on whose behalf tokens are being staked\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to stake\n    function stake(address to, address operator, uint256 amount) external;\n\n    /// @notice Switches voting power from one operator to another for a specified amount.\n    /// @param fromOperator The address of the current operator from which the voting power is being moved.\n    /// @param toOperator The address of the new operator to which the voting power will be moved.\n    /// @param amount The amount of voting power to transfer.\n    function switchOperator(address fromOperator, address toOperator, uint256 amount) external;\n\n    /// @notice Initiates the cooldown period for a user's staked tokens\n    /// @param operator The address of the operator\n    /// @param amountToAdd The amount of tokens to cooldown. This is additive.\n    function cooldownToUnstake(address operator, uint256 amountToAdd) external;\n\n    /// @notice Unstakes tokens and stops earning rewards\n    /// @param to The address to unstake tokens to\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to unstake\n    function unstake(address to, address operator, uint256 amount) external;\n\n    /// @notice Gets the accrued rewards for a staker within a specific distribution and operator context\n    /// @param distributionId The distribution ID for which to query rewards\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The amount of accrued rewards\n    function getAccruedRewards(uint16 distributionId, address staker, address operator)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Gets the reward balance for a specific distribution, operator, and staker combination\n    /// @param distributionId The ID of the distribution for which the reward balance is queried\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return The amount of accrued rewards\n    function rewardBalance(uint16 distributionId, address operator, address staker) external view returns (uint256);\n\n    /// Gets operator fee information\n    /// @param operator The address of the operator\n    function operatorFee(address operator)\n        external\n        view\n        returns (uint40 cooldownEndTimestamp, uint16 bps, uint16 pendingBPS);\n\n    /// @notice Checks if an operator is active based on their total voting stake.\n    /// @dev An operator is considered active if their total voting stake is at least the minimum required.\n    /// @param operator The address of the operator to check.\n    /// @return True if the operator's total voting stake is at least the minimum required, false otherwise.\n    function isActiveOperator(address operator) external view returns (bool);\n\n    /// @notice Counts the total number of active operators.\n    /// @dev Iterates through all operators and counts those that are active.\n    /// @return The total number of active operators.\n    function totalActiveOperators() external view returns (uint256);\n\n    /// @notice Calculates the activation threshold for alerts.\n    /// @dev The activation threshold is determined as two-thirds of the total number of active operators.\n    /// @return The calculated activation threshold.\n    function activationThreshold() external view returns (uint256);\n\n    /// @notice Determines if an alert is active based on the given vote count.\n    /// @dev An alert is considered active if the vote count meets or exceeds the activation threshold.\n    /// @param voteCount The number of votes to check against the activation threshold.\n    /// @return True if the vote count meets or exceeds the activation threshold, false otherwise.\n    function isActiveAlert(uint128 voteCount) external view returns (bool);\n\n    /// @notice Generates a unique key for a reward balance based on distribution ID, operator, and staker\n    /// @param distributionId The ID of the distribution\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return A unique key for querying reward balances\n    function rewardBalanceKey(uint16 distributionId, address operator, address staker)\n        external\n        pure\n        returns (bytes32);\n\n    /// @notice Converts an address to a `uint256` representation\n    /// @param operator The address to convert\n    /// @return The `uint256` representation of the address\n    function addressToUint256(address operator) external pure returns (uint256);\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IStakedMultiToken.cooldownToUpdateProtocolFee', 'start_line': 2884, 'end_line': 2884, 'offset_start': 112545, 'offset_end': 112605, 'content': 'function cooldownToUpdateProtocolFee(uint16 feeBPS) external;', 'contract_name': 'IStakedMultiToken', 'contract_code': "{\n    ////////////////\n    // Events\n    ////////////////\n\n    event OperatorRegistered(address operator);\n    event Stake(address indexed from, address indexed onBehalfOf, address operator, uint256 assets);\n\n    event RewardsAccrued(address user, address operator, uint256 amount);\n    event RewardsClaimed(address indexed from, address indexed to, address operator, uint256 amount);\n\n    event CooldownToUnstake(address indexed user, address indexed operator, uint256 amount);\n    event CooldownToUpdateProtocolFee(uint16 feeBPS, uint40 cooldownEndTimestamp);\n    event CooldownToUpdateOperatorFee(address operator, uint16 feeBPS, uint40 cooldownEndTimestamp);\n\n    event Unstake(address indexed from, address indexed to, address operator, uint256 assets);\n    event SetOperatorFeeBPS(address operator, uint16 feeBPS);\n    event SetProtocolFeeBPS(uint16 feeBPS);\n\n    event SetMinVotingStake(uint256 minVotingStake);\n    event SetCooldownSecForUnstaking(uint40 cooldownSeconds);\n    event SetCooldownSecForOperatorFee(uint40 cooldownSeconds);\n    event SetCooldownSecForProtocolFee(uint40 cooldownSeconds);\n    event CollectFee(\n        uint16 distributionId, address operator, uint256 protocolFee, uint256 operatorFee, uint256 userRewards\n    );\n\n    ////////////////\n    // Functions\n    ////////////////\n\n    /// @notice Registers a new operator and sets their fee in basis points\n    /// @param operator The address of the operator to register\n    /// @param feeBPS The fee in basis points\n    function registerOperator(address operator, uint16 feeBPS) external;\n\n    /// @notice Freezes an operator, preventing them from performing certain actions\n    /// @param operator The address of the operator to freeze\n    function freezeOperator(address operator) external;\n\n    /// @notice Gets the balance of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The balance of staked tokens\n    function balanceOf(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the voting stake of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The voting stake amount\n    function votingStake(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the total voting stake of a operator\n    /// @param operator The address of the operator\n    /// @return The total voting stake amount\n    function totalVotingStake(address operator) external view returns (uint256);\n\n    /// @notice Gets the total supply of staked tokens for a specific operator\n    /// @param operator The address of the operator\n    /// @return The total supply of staked tokens\n    function totalSupply(address operator) external view returns (uint256);\n\n    /// @notice Sets the minimum voting stake\n    /// @param minVotingStake_ The minimum voting stake\n    function setMinVotingStake(uint256 minVotingStake_) external;\n\n    /// @notice Sets the cooldown seconds for operator fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForOperatorFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the cooldown seconds for protocol fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForProtocolFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the general cooldown period in seconds\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForUnstaking(uint40 cooldownSeconds_) external;\n\n    /// @notice Initiates the cooldown period for protocol fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateProtocolFee(uint16 feeBPS) external;\n\n    /// @notice Initiates the cooldown period for operator fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateOperatorFee(uint16 feeBPS) external;\n\n    /// @notice Sets the protocol fee in basis points\n    function setProtocolFeeBPS() external;\n\n    /// @notice Sets the operator fee in basis points\n    function setOperatorFeeBPS() external;\n\n    /// @notice Claims accrued rewards for a staker\n    /// @param distributionId The distribution ID\n    /// @param to The address to send rewards to\n    /// @param operator The address of the operator\n    /// @param amount The amount of rewards to claim\n    function claimRewards(uint16 distributionId, address to, address operator, uint256 amount) external;\n\n    /// @notice Claims accrued rewards for multiple stakers in a single transaction.\n    /// @param ids Array of distribution IDs for which rewards are being claimed.\n    /// @param recipients Array of addresses to receive the claimed rewards, corresponding to each distribution ID.\n    /// @param operators Array of operator addresses associated with each reward distribution, managing the distribution rules and potentially fees.\n    /// @param amounts Array of amounts of rewards to be claimed for each distribution ID.\n    function claimRewardsBatch(\n        uint16[] calldata ids,\n        address[] calldata recipients,\n        address[] calldata operators,\n        uint256[] calldata amounts\n    ) external;\n\n    /// @notice Stakes tokens on behalf of a user\n    /// @param to The address on whose behalf tokens are being staked\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to stake\n    function stake(address to, address operator, uint256 amount) external;\n\n    /// @notice Switches voting power from one operator to another for a specified amount.\n    /// @param fromOperator The address of the current operator from which the voting power is being moved.\n    /// @param toOperator The address of the new operator to which the voting power will be moved.\n    /// @param amount The amount of voting power to transfer.\n    function switchOperator(address fromOperator, address toOperator, uint256 amount) external;\n\n    /// @notice Initiates the cooldown period for a user's staked tokens\n    /// @param operator The address of the operator\n    /// @param amountToAdd The amount of tokens to cooldown. This is additive.\n    function cooldownToUnstake(address operator, uint256 amountToAdd) external;\n\n    /// @notice Unstakes tokens and stops earning rewards\n    /// @param to The address to unstake tokens to\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to unstake\n    function unstake(address to, address operator, uint256 amount) external;\n\n    /// @notice Gets the accrued rewards for a staker within a specific distribution and operator context\n    /// @param distributionId The distribution ID for which to query rewards\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The amount of accrued rewards\n    function getAccruedRewards(uint16 distributionId, address staker, address operator)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Gets the reward balance for a specific distribution, operator, and staker combination\n    /// @param distributionId The ID of the distribution for which the reward balance is queried\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return The amount of accrued rewards\n    function rewardBalance(uint16 distributionId, address operator, address staker) external view returns (uint256);\n\n    /// Gets operator fee information\n    /// @param operator The address of the operator\n    function operatorFee(address operator)\n        external\n        view\n        returns (uint40 cooldownEndTimestamp, uint16 bps, uint16 pendingBPS);\n\n    /// @notice Checks if an operator is active based on their total voting stake.\n    /// @dev An operator is considered active if their total voting stake is at least the minimum required.\n    /// @param operator The address of the operator to check.\n    /// @return True if the operator's total voting stake is at least the minimum required, false otherwise.\n    function isActiveOperator(address operator) external view returns (bool);\n\n    /// @notice Counts the total number of active operators.\n    /// @dev Iterates through all operators and counts those that are active.\n    /// @return The total number of active operators.\n    function totalActiveOperators() external view returns (uint256);\n\n    /// @notice Calculates the activation threshold for alerts.\n    /// @dev The activation threshold is determined as two-thirds of the total number of active operators.\n    /// @return The calculated activation threshold.\n    function activationThreshold() external view returns (uint256);\n\n    /// @notice Determines if an alert is active based on the given vote count.\n    /// @dev An alert is considered active if the vote count meets or exceeds the activation threshold.\n    /// @param voteCount The number of votes to check against the activation threshold.\n    /// @return True if the vote count meets or exceeds the activation threshold, false otherwise.\n    function isActiveAlert(uint128 voteCount) external view returns (bool);\n\n    /// @notice Generates a unique key for a reward balance based on distribution ID, operator, and staker\n    /// @param distributionId The ID of the distribution\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return A unique key for querying reward balances\n    function rewardBalanceKey(uint16 distributionId, address operator, address staker)\n        external\n        pure\n        returns (bytes32);\n\n    /// @notice Converts an address to a `uint256` representation\n    /// @param operator The address to convert\n    /// @return The `uint256` representation of the address\n    function addressToUint256(address operator) external pure returns (uint256);\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IStakedMultiToken.cooldownToUpdateOperatorFee', 'start_line': 2888, 'end_line': 2888, 'offset_start': 112729, 'offset_end': 112789, 'content': 'function cooldownToUpdateOperatorFee(uint16 feeBPS) external;', 'contract_name': 'IStakedMultiToken', 'contract_code': "{\n    ////////////////\n    // Events\n    ////////////////\n\n    event OperatorRegistered(address operator);\n    event Stake(address indexed from, address indexed onBehalfOf, address operator, uint256 assets);\n\n    event RewardsAccrued(address user, address operator, uint256 amount);\n    event RewardsClaimed(address indexed from, address indexed to, address operator, uint256 amount);\n\n    event CooldownToUnstake(address indexed user, address indexed operator, uint256 amount);\n    event CooldownToUpdateProtocolFee(uint16 feeBPS, uint40 cooldownEndTimestamp);\n    event CooldownToUpdateOperatorFee(address operator, uint16 feeBPS, uint40 cooldownEndTimestamp);\n\n    event Unstake(address indexed from, address indexed to, address operator, uint256 assets);\n    event SetOperatorFeeBPS(address operator, uint16 feeBPS);\n    event SetProtocolFeeBPS(uint16 feeBPS);\n\n    event SetMinVotingStake(uint256 minVotingStake);\n    event SetCooldownSecForUnstaking(uint40 cooldownSeconds);\n    event SetCooldownSecForOperatorFee(uint40 cooldownSeconds);\n    event SetCooldownSecForProtocolFee(uint40 cooldownSeconds);\n    event CollectFee(\n        uint16 distributionId, address operator, uint256 protocolFee, uint256 operatorFee, uint256 userRewards\n    );\n\n    ////////////////\n    // Functions\n    ////////////////\n\n    /// @notice Registers a new operator and sets their fee in basis points\n    /// @param operator The address of the operator to register\n    /// @param feeBPS The fee in basis points\n    function registerOperator(address operator, uint16 feeBPS) external;\n\n    /// @notice Freezes an operator, preventing them from performing certain actions\n    /// @param operator The address of the operator to freeze\n    function freezeOperator(address operator) external;\n\n    /// @notice Gets the balance of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The balance of staked tokens\n    function balanceOf(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the voting stake of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The voting stake amount\n    function votingStake(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the total voting stake of a operator\n    /// @param operator The address of the operator\n    /// @return The total voting stake amount\n    function totalVotingStake(address operator) external view returns (uint256);\n\n    /// @notice Gets the total supply of staked tokens for a specific operator\n    /// @param operator The address of the operator\n    /// @return The total supply of staked tokens\n    function totalSupply(address operator) external view returns (uint256);\n\n    /// @notice Sets the minimum voting stake\n    /// @param minVotingStake_ The minimum voting stake\n    function setMinVotingStake(uint256 minVotingStake_) external;\n\n    /// @notice Sets the cooldown seconds for operator fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForOperatorFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the cooldown seconds for protocol fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForProtocolFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the general cooldown period in seconds\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForUnstaking(uint40 cooldownSeconds_) external;\n\n    /// @notice Initiates the cooldown period for protocol fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateProtocolFee(uint16 feeBPS) external;\n\n    /// @notice Initiates the cooldown period for operator fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateOperatorFee(uint16 feeBPS) external;\n\n    /// @notice Sets the protocol fee in basis points\n    function setProtocolFeeBPS() external;\n\n    /// @notice Sets the operator fee in basis points\n    function setOperatorFeeBPS() external;\n\n    /// @notice Claims accrued rewards for a staker\n    /// @param distributionId The distribution ID\n    /// @param to The address to send rewards to\n    /// @param operator The address of the operator\n    /// @param amount The amount of rewards to claim\n    function claimRewards(uint16 distributionId, address to, address operator, uint256 amount) external;\n\n    /// @notice Claims accrued rewards for multiple stakers in a single transaction.\n    /// @param ids Array of distribution IDs for which rewards are being claimed.\n    /// @param recipients Array of addresses to receive the claimed rewards, corresponding to each distribution ID.\n    /// @param operators Array of operator addresses associated with each reward distribution, managing the distribution rules and potentially fees.\n    /// @param amounts Array of amounts of rewards to be claimed for each distribution ID.\n    function claimRewardsBatch(\n        uint16[] calldata ids,\n        address[] calldata recipients,\n        address[] calldata operators,\n        uint256[] calldata amounts\n    ) external;\n\n    /// @notice Stakes tokens on behalf of a user\n    /// @param to The address on whose behalf tokens are being staked\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to stake\n    function stake(address to, address operator, uint256 amount) external;\n\n    /// @notice Switches voting power from one operator to another for a specified amount.\n    /// @param fromOperator The address of the current operator from which the voting power is being moved.\n    /// @param toOperator The address of the new operator to which the voting power will be moved.\n    /// @param amount The amount of voting power to transfer.\n    function switchOperator(address fromOperator, address toOperator, uint256 amount) external;\n\n    /// @notice Initiates the cooldown period for a user's staked tokens\n    /// @param operator The address of the operator\n    /// @param amountToAdd The amount of tokens to cooldown. This is additive.\n    function cooldownToUnstake(address operator, uint256 amountToAdd) external;\n\n    /// @notice Unstakes tokens and stops earning rewards\n    /// @param to The address to unstake tokens to\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to unstake\n    function unstake(address to, address operator, uint256 amount) external;\n\n    /// @notice Gets the accrued rewards for a staker within a specific distribution and operator context\n    /// @param distributionId The distribution ID for which to query rewards\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The amount of accrued rewards\n    function getAccruedRewards(uint16 distributionId, address staker, address operator)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Gets the reward balance for a specific distribution, operator, and staker combination\n    /// @param distributionId The ID of the distribution for which the reward balance is queried\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return The amount of accrued rewards\n    function rewardBalance(uint16 distributionId, address operator, address staker) external view returns (uint256);\n\n    /// Gets operator fee information\n    /// @param operator The address of the operator\n    function operatorFee(address operator)\n        external\n        view\n        returns (uint40 cooldownEndTimestamp, uint16 bps, uint16 pendingBPS);\n\n    /// @notice Checks if an operator is active based on their total voting stake.\n    /// @dev An operator is considered active if their total voting stake is at least the minimum required.\n    /// @param operator The address of the operator to check.\n    /// @return True if the operator's total voting stake is at least the minimum required, false otherwise.\n    function isActiveOperator(address operator) external view returns (bool);\n\n    /// @notice Counts the total number of active operators.\n    /// @dev Iterates through all operators and counts those that are active.\n    /// @return The total number of active operators.\n    function totalActiveOperators() external view returns (uint256);\n\n    /// @notice Calculates the activation threshold for alerts.\n    /// @dev The activation threshold is determined as two-thirds of the total number of active operators.\n    /// @return The calculated activation threshold.\n    function activationThreshold() external view returns (uint256);\n\n    /// @notice Determines if an alert is active based on the given vote count.\n    /// @dev An alert is considered active if the vote count meets or exceeds the activation threshold.\n    /// @param voteCount The number of votes to check against the activation threshold.\n    /// @return True if the vote count meets or exceeds the activation threshold, false otherwise.\n    function isActiveAlert(uint128 voteCount) external view returns (bool);\n\n    /// @notice Generates a unique key for a reward balance based on distribution ID, operator, and staker\n    /// @param distributionId The ID of the distribution\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return A unique key for querying reward balances\n    function rewardBalanceKey(uint16 distributionId, address operator, address staker)\n        external\n        pure\n        returns (bytes32);\n\n    /// @notice Converts an address to a `uint256` representation\n    /// @param operator The address to convert\n    /// @return The `uint256` representation of the address\n    function addressToUint256(address operator) external pure returns (uint256);\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IStakedMultiToken.setProtocolFeeBPS', 'start_line': 2891, 'end_line': 2891, 'offset_start': 112850, 'offset_end': 112887, 'content': 'function setProtocolFeeBPS() external;', 'contract_name': 'IStakedMultiToken', 'contract_code': "{\n    ////////////////\n    // Events\n    ////////////////\n\n    event OperatorRegistered(address operator);\n    event Stake(address indexed from, address indexed onBehalfOf, address operator, uint256 assets);\n\n    event RewardsAccrued(address user, address operator, uint256 amount);\n    event RewardsClaimed(address indexed from, address indexed to, address operator, uint256 amount);\n\n    event CooldownToUnstake(address indexed user, address indexed operator, uint256 amount);\n    event CooldownToUpdateProtocolFee(uint16 feeBPS, uint40 cooldownEndTimestamp);\n    event CooldownToUpdateOperatorFee(address operator, uint16 feeBPS, uint40 cooldownEndTimestamp);\n\n    event Unstake(address indexed from, address indexed to, address operator, uint256 assets);\n    event SetOperatorFeeBPS(address operator, uint16 feeBPS);\n    event SetProtocolFeeBPS(uint16 feeBPS);\n\n    event SetMinVotingStake(uint256 minVotingStake);\n    event SetCooldownSecForUnstaking(uint40 cooldownSeconds);\n    event SetCooldownSecForOperatorFee(uint40 cooldownSeconds);\n    event SetCooldownSecForProtocolFee(uint40 cooldownSeconds);\n    event CollectFee(\n        uint16 distributionId, address operator, uint256 protocolFee, uint256 operatorFee, uint256 userRewards\n    );\n\n    ////////////////\n    // Functions\n    ////////////////\n\n    /// @notice Registers a new operator and sets their fee in basis points\n    /// @param operator The address of the operator to register\n    /// @param feeBPS The fee in basis points\n    function registerOperator(address operator, uint16 feeBPS) external;\n\n    /// @notice Freezes an operator, preventing them from performing certain actions\n    /// @param operator The address of the operator to freeze\n    function freezeOperator(address operator) external;\n\n    /// @notice Gets the balance of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The balance of staked tokens\n    function balanceOf(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the voting stake of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The voting stake amount\n    function votingStake(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the total voting stake of a operator\n    /// @param operator The address of the operator\n    /// @return The total voting stake amount\n    function totalVotingStake(address operator) external view returns (uint256);\n\n    /// @notice Gets the total supply of staked tokens for a specific operator\n    /// @param operator The address of the operator\n    /// @return The total supply of staked tokens\n    function totalSupply(address operator) external view returns (uint256);\n\n    /// @notice Sets the minimum voting stake\n    /// @param minVotingStake_ The minimum voting stake\n    function setMinVotingStake(uint256 minVotingStake_) external;\n\n    /// @notice Sets the cooldown seconds for operator fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForOperatorFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the cooldown seconds for protocol fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForProtocolFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the general cooldown period in seconds\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForUnstaking(uint40 cooldownSeconds_) external;\n\n    /// @notice Initiates the cooldown period for protocol fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateProtocolFee(uint16 feeBPS) external;\n\n    /// @notice Initiates the cooldown period for operator fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateOperatorFee(uint16 feeBPS) external;\n\n    /// @notice Sets the protocol fee in basis points\n    function setProtocolFeeBPS() external;\n\n    /// @notice Sets the operator fee in basis points\n    function setOperatorFeeBPS() external;\n\n    /// @notice Claims accrued rewards for a staker\n    /// @param distributionId The distribution ID\n    /// @param to The address to send rewards to\n    /// @param operator The address of the operator\n    /// @param amount The amount of rewards to claim\n    function claimRewards(uint16 distributionId, address to, address operator, uint256 amount) external;\n\n    /// @notice Claims accrued rewards for multiple stakers in a single transaction.\n    /// @param ids Array of distribution IDs for which rewards are being claimed.\n    /// @param recipients Array of addresses to receive the claimed rewards, corresponding to each distribution ID.\n    /// @param operators Array of operator addresses associated with each reward distribution, managing the distribution rules and potentially fees.\n    /// @param amounts Array of amounts of rewards to be claimed for each distribution ID.\n    function claimRewardsBatch(\n        uint16[] calldata ids,\n        address[] calldata recipients,\n        address[] calldata operators,\n        uint256[] calldata amounts\n    ) external;\n\n    /// @notice Stakes tokens on behalf of a user\n    /// @param to The address on whose behalf tokens are being staked\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to stake\n    function stake(address to, address operator, uint256 amount) external;\n\n    /// @notice Switches voting power from one operator to another for a specified amount.\n    /// @param fromOperator The address of the current operator from which the voting power is being moved.\n    /// @param toOperator The address of the new operator to which the voting power will be moved.\n    /// @param amount The amount of voting power to transfer.\n    function switchOperator(address fromOperator, address toOperator, uint256 amount) external;\n\n    /// @notice Initiates the cooldown period for a user's staked tokens\n    /// @param operator The address of the operator\n    /// @param amountToAdd The amount of tokens to cooldown. This is additive.\n    function cooldownToUnstake(address operator, uint256 amountToAdd) external;\n\n    /// @notice Unstakes tokens and stops earning rewards\n    /// @param to The address to unstake tokens to\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to unstake\n    function unstake(address to, address operator, uint256 amount) external;\n\n    /// @notice Gets the accrued rewards for a staker within a specific distribution and operator context\n    /// @param distributionId The distribution ID for which to query rewards\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The amount of accrued rewards\n    function getAccruedRewards(uint16 distributionId, address staker, address operator)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Gets the reward balance for a specific distribution, operator, and staker combination\n    /// @param distributionId The ID of the distribution for which the reward balance is queried\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return The amount of accrued rewards\n    function rewardBalance(uint16 distributionId, address operator, address staker) external view returns (uint256);\n\n    /// Gets operator fee information\n    /// @param operator The address of the operator\n    function operatorFee(address operator)\n        external\n        view\n        returns (uint40 cooldownEndTimestamp, uint16 bps, uint16 pendingBPS);\n\n    /// @notice Checks if an operator is active based on their total voting stake.\n    /// @dev An operator is considered active if their total voting stake is at least the minimum required.\n    /// @param operator The address of the operator to check.\n    /// @return True if the operator's total voting stake is at least the minimum required, false otherwise.\n    function isActiveOperator(address operator) external view returns (bool);\n\n    /// @notice Counts the total number of active operators.\n    /// @dev Iterates through all operators and counts those that are active.\n    /// @return The total number of active operators.\n    function totalActiveOperators() external view returns (uint256);\n\n    /// @notice Calculates the activation threshold for alerts.\n    /// @dev The activation threshold is determined as two-thirds of the total number of active operators.\n    /// @return The calculated activation threshold.\n    function activationThreshold() external view returns (uint256);\n\n    /// @notice Determines if an alert is active based on the given vote count.\n    /// @dev An alert is considered active if the vote count meets or exceeds the activation threshold.\n    /// @param voteCount The number of votes to check against the activation threshold.\n    /// @return True if the vote count meets or exceeds the activation threshold, false otherwise.\n    function isActiveAlert(uint128 voteCount) external view returns (bool);\n\n    /// @notice Generates a unique key for a reward balance based on distribution ID, operator, and staker\n    /// @param distributionId The ID of the distribution\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return A unique key for querying reward balances\n    function rewardBalanceKey(uint16 distributionId, address operator, address staker)\n        external\n        pure\n        returns (bytes32);\n\n    /// @notice Converts an address to a `uint256` representation\n    /// @param operator The address to convert\n    /// @return The `uint256` representation of the address\n    function addressToUint256(address operator) external pure returns (uint256);\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IStakedMultiToken.setOperatorFeeBPS', 'start_line': 2894, 'end_line': 2894, 'offset_start': 112948, 'offset_end': 112985, 'content': 'function setOperatorFeeBPS() external;', 'contract_name': 'IStakedMultiToken', 'contract_code': "{\n    ////////////////\n    // Events\n    ////////////////\n\n    event OperatorRegistered(address operator);\n    event Stake(address indexed from, address indexed onBehalfOf, address operator, uint256 assets);\n\n    event RewardsAccrued(address user, address operator, uint256 amount);\n    event RewardsClaimed(address indexed from, address indexed to, address operator, uint256 amount);\n\n    event CooldownToUnstake(address indexed user, address indexed operator, uint256 amount);\n    event CooldownToUpdateProtocolFee(uint16 feeBPS, uint40 cooldownEndTimestamp);\n    event CooldownToUpdateOperatorFee(address operator, uint16 feeBPS, uint40 cooldownEndTimestamp);\n\n    event Unstake(address indexed from, address indexed to, address operator, uint256 assets);\n    event SetOperatorFeeBPS(address operator, uint16 feeBPS);\n    event SetProtocolFeeBPS(uint16 feeBPS);\n\n    event SetMinVotingStake(uint256 minVotingStake);\n    event SetCooldownSecForUnstaking(uint40 cooldownSeconds);\n    event SetCooldownSecForOperatorFee(uint40 cooldownSeconds);\n    event SetCooldownSecForProtocolFee(uint40 cooldownSeconds);\n    event CollectFee(\n        uint16 distributionId, address operator, uint256 protocolFee, uint256 operatorFee, uint256 userRewards\n    );\n\n    ////////////////\n    // Functions\n    ////////////////\n\n    /// @notice Registers a new operator and sets their fee in basis points\n    /// @param operator The address of the operator to register\n    /// @param feeBPS The fee in basis points\n    function registerOperator(address operator, uint16 feeBPS) external;\n\n    /// @notice Freezes an operator, preventing them from performing certain actions\n    /// @param operator The address of the operator to freeze\n    function freezeOperator(address operator) external;\n\n    /// @notice Gets the balance of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The balance of staked tokens\n    function balanceOf(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the voting stake of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The voting stake amount\n    function votingStake(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the total voting stake of a operator\n    /// @param operator The address of the operator\n    /// @return The total voting stake amount\n    function totalVotingStake(address operator) external view returns (uint256);\n\n    /// @notice Gets the total supply of staked tokens for a specific operator\n    /// @param operator The address of the operator\n    /// @return The total supply of staked tokens\n    function totalSupply(address operator) external view returns (uint256);\n\n    /// @notice Sets the minimum voting stake\n    /// @param minVotingStake_ The minimum voting stake\n    function setMinVotingStake(uint256 minVotingStake_) external;\n\n    /// @notice Sets the cooldown seconds for operator fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForOperatorFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the cooldown seconds for protocol fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForProtocolFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the general cooldown period in seconds\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForUnstaking(uint40 cooldownSeconds_) external;\n\n    /// @notice Initiates the cooldown period for protocol fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateProtocolFee(uint16 feeBPS) external;\n\n    /// @notice Initiates the cooldown period for operator fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateOperatorFee(uint16 feeBPS) external;\n\n    /// @notice Sets the protocol fee in basis points\n    function setProtocolFeeBPS() external;\n\n    /// @notice Sets the operator fee in basis points\n    function setOperatorFeeBPS() external;\n\n    /// @notice Claims accrued rewards for a staker\n    /// @param distributionId The distribution ID\n    /// @param to The address to send rewards to\n    /// @param operator The address of the operator\n    /// @param amount The amount of rewards to claim\n    function claimRewards(uint16 distributionId, address to, address operator, uint256 amount) external;\n\n    /// @notice Claims accrued rewards for multiple stakers in a single transaction.\n    /// @param ids Array of distribution IDs for which rewards are being claimed.\n    /// @param recipients Array of addresses to receive the claimed rewards, corresponding to each distribution ID.\n    /// @param operators Array of operator addresses associated with each reward distribution, managing the distribution rules and potentially fees.\n    /// @param amounts Array of amounts of rewards to be claimed for each distribution ID.\n    function claimRewardsBatch(\n        uint16[] calldata ids,\n        address[] calldata recipients,\n        address[] calldata operators,\n        uint256[] calldata amounts\n    ) external;\n\n    /// @notice Stakes tokens on behalf of a user\n    /// @param to The address on whose behalf tokens are being staked\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to stake\n    function stake(address to, address operator, uint256 amount) external;\n\n    /// @notice Switches voting power from one operator to another for a specified amount.\n    /// @param fromOperator The address of the current operator from which the voting power is being moved.\n    /// @param toOperator The address of the new operator to which the voting power will be moved.\n    /// @param amount The amount of voting power to transfer.\n    function switchOperator(address fromOperator, address toOperator, uint256 amount) external;\n\n    /// @notice Initiates the cooldown period for a user's staked tokens\n    /// @param operator The address of the operator\n    /// @param amountToAdd The amount of tokens to cooldown. This is additive.\n    function cooldownToUnstake(address operator, uint256 amountToAdd) external;\n\n    /// @notice Unstakes tokens and stops earning rewards\n    /// @param to The address to unstake tokens to\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to unstake\n    function unstake(address to, address operator, uint256 amount) external;\n\n    /// @notice Gets the accrued rewards for a staker within a specific distribution and operator context\n    /// @param distributionId The distribution ID for which to query rewards\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The amount of accrued rewards\n    function getAccruedRewards(uint16 distributionId, address staker, address operator)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Gets the reward balance for a specific distribution, operator, and staker combination\n    /// @param distributionId The ID of the distribution for which the reward balance is queried\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return The amount of accrued rewards\n    function rewardBalance(uint16 distributionId, address operator, address staker) external view returns (uint256);\n\n    /// Gets operator fee information\n    /// @param operator The address of the operator\n    function operatorFee(address operator)\n        external\n        view\n        returns (uint40 cooldownEndTimestamp, uint16 bps, uint16 pendingBPS);\n\n    /// @notice Checks if an operator is active based on their total voting stake.\n    /// @dev An operator is considered active if their total voting stake is at least the minimum required.\n    /// @param operator The address of the operator to check.\n    /// @return True if the operator's total voting stake is at least the minimum required, false otherwise.\n    function isActiveOperator(address operator) external view returns (bool);\n\n    /// @notice Counts the total number of active operators.\n    /// @dev Iterates through all operators and counts those that are active.\n    /// @return The total number of active operators.\n    function totalActiveOperators() external view returns (uint256);\n\n    /// @notice Calculates the activation threshold for alerts.\n    /// @dev The activation threshold is determined as two-thirds of the total number of active operators.\n    /// @return The calculated activation threshold.\n    function activationThreshold() external view returns (uint256);\n\n    /// @notice Determines if an alert is active based on the given vote count.\n    /// @dev An alert is considered active if the vote count meets or exceeds the activation threshold.\n    /// @param voteCount The number of votes to check against the activation threshold.\n    /// @return True if the vote count meets or exceeds the activation threshold, false otherwise.\n    function isActiveAlert(uint128 voteCount) external view returns (bool);\n\n    /// @notice Generates a unique key for a reward balance based on distribution ID, operator, and staker\n    /// @param distributionId The ID of the distribution\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return A unique key for querying reward balances\n    function rewardBalanceKey(uint16 distributionId, address operator, address staker)\n        external\n        pure\n        returns (bytes32);\n\n    /// @notice Converts an address to a `uint256` representation\n    /// @param operator The address to convert\n    /// @return The `uint256` representation of the address\n    function addressToUint256(address operator) external pure returns (uint256);\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IStakedMultiToken.claimRewards', 'start_line': 2901, 'end_line': 2901, 'offset_start': 113248, 'offset_end': 113347, 'content': 'function claimRewards(uint16 distributionId, address to, address operator, uint256 amount) external;', 'contract_name': 'IStakedMultiToken', 'contract_code': "{\n    ////////////////\n    // Events\n    ////////////////\n\n    event OperatorRegistered(address operator);\n    event Stake(address indexed from, address indexed onBehalfOf, address operator, uint256 assets);\n\n    event RewardsAccrued(address user, address operator, uint256 amount);\n    event RewardsClaimed(address indexed from, address indexed to, address operator, uint256 amount);\n\n    event CooldownToUnstake(address indexed user, address indexed operator, uint256 amount);\n    event CooldownToUpdateProtocolFee(uint16 feeBPS, uint40 cooldownEndTimestamp);\n    event CooldownToUpdateOperatorFee(address operator, uint16 feeBPS, uint40 cooldownEndTimestamp);\n\n    event Unstake(address indexed from, address indexed to, address operator, uint256 assets);\n    event SetOperatorFeeBPS(address operator, uint16 feeBPS);\n    event SetProtocolFeeBPS(uint16 feeBPS);\n\n    event SetMinVotingStake(uint256 minVotingStake);\n    event SetCooldownSecForUnstaking(uint40 cooldownSeconds);\n    event SetCooldownSecForOperatorFee(uint40 cooldownSeconds);\n    event SetCooldownSecForProtocolFee(uint40 cooldownSeconds);\n    event CollectFee(\n        uint16 distributionId, address operator, uint256 protocolFee, uint256 operatorFee, uint256 userRewards\n    );\n\n    ////////////////\n    // Functions\n    ////////////////\n\n    /// @notice Registers a new operator and sets their fee in basis points\n    /// @param operator The address of the operator to register\n    /// @param feeBPS The fee in basis points\n    function registerOperator(address operator, uint16 feeBPS) external;\n\n    /// @notice Freezes an operator, preventing them from performing certain actions\n    /// @param operator The address of the operator to freeze\n    function freezeOperator(address operator) external;\n\n    /// @notice Gets the balance of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The balance of staked tokens\n    function balanceOf(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the voting stake of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The voting stake amount\n    function votingStake(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the total voting stake of a operator\n    /// @param operator The address of the operator\n    /// @return The total voting stake amount\n    function totalVotingStake(address operator) external view returns (uint256);\n\n    /// @notice Gets the total supply of staked tokens for a specific operator\n    /// @param operator The address of the operator\n    /// @return The total supply of staked tokens\n    function totalSupply(address operator) external view returns (uint256);\n\n    /// @notice Sets the minimum voting stake\n    /// @param minVotingStake_ The minimum voting stake\n    function setMinVotingStake(uint256 minVotingStake_) external;\n\n    /// @notice Sets the cooldown seconds for operator fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForOperatorFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the cooldown seconds for protocol fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForProtocolFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the general cooldown period in seconds\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForUnstaking(uint40 cooldownSeconds_) external;\n\n    /// @notice Initiates the cooldown period for protocol fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateProtocolFee(uint16 feeBPS) external;\n\n    /// @notice Initiates the cooldown period for operator fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateOperatorFee(uint16 feeBPS) external;\n\n    /// @notice Sets the protocol fee in basis points\n    function setProtocolFeeBPS() external;\n\n    /// @notice Sets the operator fee in basis points\n    function setOperatorFeeBPS() external;\n\n    /// @notice Claims accrued rewards for a staker\n    /// @param distributionId The distribution ID\n    /// @param to The address to send rewards to\n    /// @param operator The address of the operator\n    /// @param amount The amount of rewards to claim\n    function claimRewards(uint16 distributionId, address to, address operator, uint256 amount) external;\n\n    /// @notice Claims accrued rewards for multiple stakers in a single transaction.\n    /// @param ids Array of distribution IDs for which rewards are being claimed.\n    /// @param recipients Array of addresses to receive the claimed rewards, corresponding to each distribution ID.\n    /// @param operators Array of operator addresses associated with each reward distribution, managing the distribution rules and potentially fees.\n    /// @param amounts Array of amounts of rewards to be claimed for each distribution ID.\n    function claimRewardsBatch(\n        uint16[] calldata ids,\n        address[] calldata recipients,\n        address[] calldata operators,\n        uint256[] calldata amounts\n    ) external;\n\n    /// @notice Stakes tokens on behalf of a user\n    /// @param to The address on whose behalf tokens are being staked\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to stake\n    function stake(address to, address operator, uint256 amount) external;\n\n    /// @notice Switches voting power from one operator to another for a specified amount.\n    /// @param fromOperator The address of the current operator from which the voting power is being moved.\n    /// @param toOperator The address of the new operator to which the voting power will be moved.\n    /// @param amount The amount of voting power to transfer.\n    function switchOperator(address fromOperator, address toOperator, uint256 amount) external;\n\n    /// @notice Initiates the cooldown period for a user's staked tokens\n    /// @param operator The address of the operator\n    /// @param amountToAdd The amount of tokens to cooldown. This is additive.\n    function cooldownToUnstake(address operator, uint256 amountToAdd) external;\n\n    /// @notice Unstakes tokens and stops earning rewards\n    /// @param to The address to unstake tokens to\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to unstake\n    function unstake(address to, address operator, uint256 amount) external;\n\n    /// @notice Gets the accrued rewards for a staker within a specific distribution and operator context\n    /// @param distributionId The distribution ID for which to query rewards\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The amount of accrued rewards\n    function getAccruedRewards(uint16 distributionId, address staker, address operator)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Gets the reward balance for a specific distribution, operator, and staker combination\n    /// @param distributionId The ID of the distribution for which the reward balance is queried\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return The amount of accrued rewards\n    function rewardBalance(uint16 distributionId, address operator, address staker) external view returns (uint256);\n\n    /// Gets operator fee information\n    /// @param operator The address of the operator\n    function operatorFee(address operator)\n        external\n        view\n        returns (uint40 cooldownEndTimestamp, uint16 bps, uint16 pendingBPS);\n\n    /// @notice Checks if an operator is active based on their total voting stake.\n    /// @dev An operator is considered active if their total voting stake is at least the minimum required.\n    /// @param operator The address of the operator to check.\n    /// @return True if the operator's total voting stake is at least the minimum required, false otherwise.\n    function isActiveOperator(address operator) external view returns (bool);\n\n    /// @notice Counts the total number of active operators.\n    /// @dev Iterates through all operators and counts those that are active.\n    /// @return The total number of active operators.\n    function totalActiveOperators() external view returns (uint256);\n\n    /// @notice Calculates the activation threshold for alerts.\n    /// @dev The activation threshold is determined as two-thirds of the total number of active operators.\n    /// @return The calculated activation threshold.\n    function activationThreshold() external view returns (uint256);\n\n    /// @notice Determines if an alert is active based on the given vote count.\n    /// @dev An alert is considered active if the vote count meets or exceeds the activation threshold.\n    /// @param voteCount The number of votes to check against the activation threshold.\n    /// @return True if the vote count meets or exceeds the activation threshold, false otherwise.\n    function isActiveAlert(uint128 voteCount) external view returns (bool);\n\n    /// @notice Generates a unique key for a reward balance based on distribution ID, operator, and staker\n    /// @param distributionId The ID of the distribution\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return A unique key for querying reward balances\n    function rewardBalanceKey(uint16 distributionId, address operator, address staker)\n        external\n        pure\n        returns (bytes32);\n\n    /// @notice Converts an address to a `uint256` representation\n    /// @param operator The address to convert\n    /// @return The `uint256` representation of the address\n    function addressToUint256(address operator) external pure returns (uint256);\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IStakedMultiToken.claimRewardsBatch', 'start_line': 2908, 'end_line': 2913, 'offset_start': 113877, 'offset_end': 114062, 'content': 'function claimRewardsBatch(\n        uint16[] calldata ids,\n        address[] calldata recipients,\n        address[] calldata operators,\n        uint256[] calldata amounts\n    ) external;', 'contract_name': 'IStakedMultiToken', 'contract_code': "{\n    ////////////////\n    // Events\n    ////////////////\n\n    event OperatorRegistered(address operator);\n    event Stake(address indexed from, address indexed onBehalfOf, address operator, uint256 assets);\n\n    event RewardsAccrued(address user, address operator, uint256 amount);\n    event RewardsClaimed(address indexed from, address indexed to, address operator, uint256 amount);\n\n    event CooldownToUnstake(address indexed user, address indexed operator, uint256 amount);\n    event CooldownToUpdateProtocolFee(uint16 feeBPS, uint40 cooldownEndTimestamp);\n    event CooldownToUpdateOperatorFee(address operator, uint16 feeBPS, uint40 cooldownEndTimestamp);\n\n    event Unstake(address indexed from, address indexed to, address operator, uint256 assets);\n    event SetOperatorFeeBPS(address operator, uint16 feeBPS);\n    event SetProtocolFeeBPS(uint16 feeBPS);\n\n    event SetMinVotingStake(uint256 minVotingStake);\n    event SetCooldownSecForUnstaking(uint40 cooldownSeconds);\n    event SetCooldownSecForOperatorFee(uint40 cooldownSeconds);\n    event SetCooldownSecForProtocolFee(uint40 cooldownSeconds);\n    event CollectFee(\n        uint16 distributionId, address operator, uint256 protocolFee, uint256 operatorFee, uint256 userRewards\n    );\n\n    ////////////////\n    // Functions\n    ////////////////\n\n    /// @notice Registers a new operator and sets their fee in basis points\n    /// @param operator The address of the operator to register\n    /// @param feeBPS The fee in basis points\n    function registerOperator(address operator, uint16 feeBPS) external;\n\n    /// @notice Freezes an operator, preventing them from performing certain actions\n    /// @param operator The address of the operator to freeze\n    function freezeOperator(address operator) external;\n\n    /// @notice Gets the balance of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The balance of staked tokens\n    function balanceOf(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the voting stake of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The voting stake amount\n    function votingStake(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the total voting stake of a operator\n    /// @param operator The address of the operator\n    /// @return The total voting stake amount\n    function totalVotingStake(address operator) external view returns (uint256);\n\n    /// @notice Gets the total supply of staked tokens for a specific operator\n    /// @param operator The address of the operator\n    /// @return The total supply of staked tokens\n    function totalSupply(address operator) external view returns (uint256);\n\n    /// @notice Sets the minimum voting stake\n    /// @param minVotingStake_ The minimum voting stake\n    function setMinVotingStake(uint256 minVotingStake_) external;\n\n    /// @notice Sets the cooldown seconds for operator fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForOperatorFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the cooldown seconds for protocol fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForProtocolFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the general cooldown period in seconds\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForUnstaking(uint40 cooldownSeconds_) external;\n\n    /// @notice Initiates the cooldown period for protocol fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateProtocolFee(uint16 feeBPS) external;\n\n    /// @notice Initiates the cooldown period for operator fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateOperatorFee(uint16 feeBPS) external;\n\n    /// @notice Sets the protocol fee in basis points\n    function setProtocolFeeBPS() external;\n\n    /// @notice Sets the operator fee in basis points\n    function setOperatorFeeBPS() external;\n\n    /// @notice Claims accrued rewards for a staker\n    /// @param distributionId The distribution ID\n    /// @param to The address to send rewards to\n    /// @param operator The address of the operator\n    /// @param amount The amount of rewards to claim\n    function claimRewards(uint16 distributionId, address to, address operator, uint256 amount) external;\n\n    /// @notice Claims accrued rewards for multiple stakers in a single transaction.\n    /// @param ids Array of distribution IDs for which rewards are being claimed.\n    /// @param recipients Array of addresses to receive the claimed rewards, corresponding to each distribution ID.\n    /// @param operators Array of operator addresses associated with each reward distribution, managing the distribution rules and potentially fees.\n    /// @param amounts Array of amounts of rewards to be claimed for each distribution ID.\n    function claimRewardsBatch(\n        uint16[] calldata ids,\n        address[] calldata recipients,\n        address[] calldata operators,\n        uint256[] calldata amounts\n    ) external;\n\n    /// @notice Stakes tokens on behalf of a user\n    /// @param to The address on whose behalf tokens are being staked\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to stake\n    function stake(address to, address operator, uint256 amount) external;\n\n    /// @notice Switches voting power from one operator to another for a specified amount.\n    /// @param fromOperator The address of the current operator from which the voting power is being moved.\n    /// @param toOperator The address of the new operator to which the voting power will be moved.\n    /// @param amount The amount of voting power to transfer.\n    function switchOperator(address fromOperator, address toOperator, uint256 amount) external;\n\n    /// @notice Initiates the cooldown period for a user's staked tokens\n    /// @param operator The address of the operator\n    /// @param amountToAdd The amount of tokens to cooldown. This is additive.\n    function cooldownToUnstake(address operator, uint256 amountToAdd) external;\n\n    /// @notice Unstakes tokens and stops earning rewards\n    /// @param to The address to unstake tokens to\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to unstake\n    function unstake(address to, address operator, uint256 amount) external;\n\n    /// @notice Gets the accrued rewards for a staker within a specific distribution and operator context\n    /// @param distributionId The distribution ID for which to query rewards\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The amount of accrued rewards\n    function getAccruedRewards(uint16 distributionId, address staker, address operator)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Gets the reward balance for a specific distribution, operator, and staker combination\n    /// @param distributionId The ID of the distribution for which the reward balance is queried\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return The amount of accrued rewards\n    function rewardBalance(uint16 distributionId, address operator, address staker) external view returns (uint256);\n\n    /// Gets operator fee information\n    /// @param operator The address of the operator\n    function operatorFee(address operator)\n        external\n        view\n        returns (uint40 cooldownEndTimestamp, uint16 bps, uint16 pendingBPS);\n\n    /// @notice Checks if an operator is active based on their total voting stake.\n    /// @dev An operator is considered active if their total voting stake is at least the minimum required.\n    /// @param operator The address of the operator to check.\n    /// @return True if the operator's total voting stake is at least the minimum required, false otherwise.\n    function isActiveOperator(address operator) external view returns (bool);\n\n    /// @notice Counts the total number of active operators.\n    /// @dev Iterates through all operators and counts those that are active.\n    /// @return The total number of active operators.\n    function totalActiveOperators() external view returns (uint256);\n\n    /// @notice Calculates the activation threshold for alerts.\n    /// @dev The activation threshold is determined as two-thirds of the total number of active operators.\n    /// @return The calculated activation threshold.\n    function activationThreshold() external view returns (uint256);\n\n    /// @notice Determines if an alert is active based on the given vote count.\n    /// @dev An alert is considered active if the vote count meets or exceeds the activation threshold.\n    /// @param voteCount The number of votes to check against the activation threshold.\n    /// @return True if the vote count meets or exceeds the activation threshold, false otherwise.\n    function isActiveAlert(uint128 voteCount) external view returns (bool);\n\n    /// @notice Generates a unique key for a reward balance based on distribution ID, operator, and staker\n    /// @param distributionId The ID of the distribution\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return A unique key for querying reward balances\n    function rewardBalanceKey(uint16 distributionId, address operator, address staker)\n        external\n        pure\n        returns (bytes32);\n\n    /// @notice Converts an address to a `uint256` representation\n    /// @param operator The address to convert\n    /// @return The `uint256` representation of the address\n    function addressToUint256(address operator) external pure returns (uint256);\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IStakedMultiToken.stake', 'start_line': 2919, 'end_line': 2919, 'offset_start': 114293, 'offset_end': 114362, 'content': 'function stake(address to, address operator, uint256 amount) external;', 'contract_name': 'IStakedMultiToken', 'contract_code': "{\n    ////////////////\n    // Events\n    ////////////////\n\n    event OperatorRegistered(address operator);\n    event Stake(address indexed from, address indexed onBehalfOf, address operator, uint256 assets);\n\n    event RewardsAccrued(address user, address operator, uint256 amount);\n    event RewardsClaimed(address indexed from, address indexed to, address operator, uint256 amount);\n\n    event CooldownToUnstake(address indexed user, address indexed operator, uint256 amount);\n    event CooldownToUpdateProtocolFee(uint16 feeBPS, uint40 cooldownEndTimestamp);\n    event CooldownToUpdateOperatorFee(address operator, uint16 feeBPS, uint40 cooldownEndTimestamp);\n\n    event Unstake(address indexed from, address indexed to, address operator, uint256 assets);\n    event SetOperatorFeeBPS(address operator, uint16 feeBPS);\n    event SetProtocolFeeBPS(uint16 feeBPS);\n\n    event SetMinVotingStake(uint256 minVotingStake);\n    event SetCooldownSecForUnstaking(uint40 cooldownSeconds);\n    event SetCooldownSecForOperatorFee(uint40 cooldownSeconds);\n    event SetCooldownSecForProtocolFee(uint40 cooldownSeconds);\n    event CollectFee(\n        uint16 distributionId, address operator, uint256 protocolFee, uint256 operatorFee, uint256 userRewards\n    );\n\n    ////////////////\n    // Functions\n    ////////////////\n\n    /// @notice Registers a new operator and sets their fee in basis points\n    /// @param operator The address of the operator to register\n    /// @param feeBPS The fee in basis points\n    function registerOperator(address operator, uint16 feeBPS) external;\n\n    /// @notice Freezes an operator, preventing them from performing certain actions\n    /// @param operator The address of the operator to freeze\n    function freezeOperator(address operator) external;\n\n    /// @notice Gets the balance of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The balance of staked tokens\n    function balanceOf(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the voting stake of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The voting stake amount\n    function votingStake(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the total voting stake of a operator\n    /// @param operator The address of the operator\n    /// @return The total voting stake amount\n    function totalVotingStake(address operator) external view returns (uint256);\n\n    /// @notice Gets the total supply of staked tokens for a specific operator\n    /// @param operator The address of the operator\n    /// @return The total supply of staked tokens\n    function totalSupply(address operator) external view returns (uint256);\n\n    /// @notice Sets the minimum voting stake\n    /// @param minVotingStake_ The minimum voting stake\n    function setMinVotingStake(uint256 minVotingStake_) external;\n\n    /// @notice Sets the cooldown seconds for operator fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForOperatorFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the cooldown seconds for protocol fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForProtocolFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the general cooldown period in seconds\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForUnstaking(uint40 cooldownSeconds_) external;\n\n    /// @notice Initiates the cooldown period for protocol fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateProtocolFee(uint16 feeBPS) external;\n\n    /// @notice Initiates the cooldown period for operator fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateOperatorFee(uint16 feeBPS) external;\n\n    /// @notice Sets the protocol fee in basis points\n    function setProtocolFeeBPS() external;\n\n    /// @notice Sets the operator fee in basis points\n    function setOperatorFeeBPS() external;\n\n    /// @notice Claims accrued rewards for a staker\n    /// @param distributionId The distribution ID\n    /// @param to The address to send rewards to\n    /// @param operator The address of the operator\n    /// @param amount The amount of rewards to claim\n    function claimRewards(uint16 distributionId, address to, address operator, uint256 amount) external;\n\n    /// @notice Claims accrued rewards for multiple stakers in a single transaction.\n    /// @param ids Array of distribution IDs for which rewards are being claimed.\n    /// @param recipients Array of addresses to receive the claimed rewards, corresponding to each distribution ID.\n    /// @param operators Array of operator addresses associated with each reward distribution, managing the distribution rules and potentially fees.\n    /// @param amounts Array of amounts of rewards to be claimed for each distribution ID.\n    function claimRewardsBatch(\n        uint16[] calldata ids,\n        address[] calldata recipients,\n        address[] calldata operators,\n        uint256[] calldata amounts\n    ) external;\n\n    /// @notice Stakes tokens on behalf of a user\n    /// @param to The address on whose behalf tokens are being staked\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to stake\n    function stake(address to, address operator, uint256 amount) external;\n\n    /// @notice Switches voting power from one operator to another for a specified amount.\n    /// @param fromOperator The address of the current operator from which the voting power is being moved.\n    /// @param toOperator The address of the new operator to which the voting power will be moved.\n    /// @param amount The amount of voting power to transfer.\n    function switchOperator(address fromOperator, address toOperator, uint256 amount) external;\n\n    /// @notice Initiates the cooldown period for a user's staked tokens\n    /// @param operator The address of the operator\n    /// @param amountToAdd The amount of tokens to cooldown. This is additive.\n    function cooldownToUnstake(address operator, uint256 amountToAdd) external;\n\n    /// @notice Unstakes tokens and stops earning rewards\n    /// @param to The address to unstake tokens to\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to unstake\n    function unstake(address to, address operator, uint256 amount) external;\n\n    /// @notice Gets the accrued rewards for a staker within a specific distribution and operator context\n    /// @param distributionId The distribution ID for which to query rewards\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The amount of accrued rewards\n    function getAccruedRewards(uint16 distributionId, address staker, address operator)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Gets the reward balance for a specific distribution, operator, and staker combination\n    /// @param distributionId The ID of the distribution for which the reward balance is queried\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return The amount of accrued rewards\n    function rewardBalance(uint16 distributionId, address operator, address staker) external view returns (uint256);\n\n    /// Gets operator fee information\n    /// @param operator The address of the operator\n    function operatorFee(address operator)\n        external\n        view\n        returns (uint40 cooldownEndTimestamp, uint16 bps, uint16 pendingBPS);\n\n    /// @notice Checks if an operator is active based on their total voting stake.\n    /// @dev An operator is considered active if their total voting stake is at least the minimum required.\n    /// @param operator The address of the operator to check.\n    /// @return True if the operator's total voting stake is at least the minimum required, false otherwise.\n    function isActiveOperator(address operator) external view returns (bool);\n\n    /// @notice Counts the total number of active operators.\n    /// @dev Iterates through all operators and counts those that are active.\n    /// @return The total number of active operators.\n    function totalActiveOperators() external view returns (uint256);\n\n    /// @notice Calculates the activation threshold for alerts.\n    /// @dev The activation threshold is determined as two-thirds of the total number of active operators.\n    /// @return The calculated activation threshold.\n    function activationThreshold() external view returns (uint256);\n\n    /// @notice Determines if an alert is active based on the given vote count.\n    /// @dev An alert is considered active if the vote count meets or exceeds the activation threshold.\n    /// @param voteCount The number of votes to check against the activation threshold.\n    /// @return True if the vote count meets or exceeds the activation threshold, false otherwise.\n    function isActiveAlert(uint128 voteCount) external view returns (bool);\n\n    /// @notice Generates a unique key for a reward balance based on distribution ID, operator, and staker\n    /// @param distributionId The ID of the distribution\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return A unique key for querying reward balances\n    function rewardBalanceKey(uint16 distributionId, address operator, address staker)\n        external\n        pure\n        returns (bytes32);\n\n    /// @notice Converts an address to a `uint256` representation\n    /// @param operator The address to convert\n    /// @return The `uint256` representation of the address\n    function addressToUint256(address operator) external pure returns (uint256);\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IStakedMultiToken.switchOperator', 'start_line': 2925, 'end_line': 2925, 'offset_start': 114729, 'offset_end': 114819, 'content': 'function switchOperator(address fromOperator, address toOperator, uint256 amount) external;', 'contract_name': 'IStakedMultiToken', 'contract_code': "{\n    ////////////////\n    // Events\n    ////////////////\n\n    event OperatorRegistered(address operator);\n    event Stake(address indexed from, address indexed onBehalfOf, address operator, uint256 assets);\n\n    event RewardsAccrued(address user, address operator, uint256 amount);\n    event RewardsClaimed(address indexed from, address indexed to, address operator, uint256 amount);\n\n    event CooldownToUnstake(address indexed user, address indexed operator, uint256 amount);\n    event CooldownToUpdateProtocolFee(uint16 feeBPS, uint40 cooldownEndTimestamp);\n    event CooldownToUpdateOperatorFee(address operator, uint16 feeBPS, uint40 cooldownEndTimestamp);\n\n    event Unstake(address indexed from, address indexed to, address operator, uint256 assets);\n    event SetOperatorFeeBPS(address operator, uint16 feeBPS);\n    event SetProtocolFeeBPS(uint16 feeBPS);\n\n    event SetMinVotingStake(uint256 minVotingStake);\n    event SetCooldownSecForUnstaking(uint40 cooldownSeconds);\n    event SetCooldownSecForOperatorFee(uint40 cooldownSeconds);\n    event SetCooldownSecForProtocolFee(uint40 cooldownSeconds);\n    event CollectFee(\n        uint16 distributionId, address operator, uint256 protocolFee, uint256 operatorFee, uint256 userRewards\n    );\n\n    ////////////////\n    // Functions\n    ////////////////\n\n    /// @notice Registers a new operator and sets their fee in basis points\n    /// @param operator The address of the operator to register\n    /// @param feeBPS The fee in basis points\n    function registerOperator(address operator, uint16 feeBPS) external;\n\n    /// @notice Freezes an operator, preventing them from performing certain actions\n    /// @param operator The address of the operator to freeze\n    function freezeOperator(address operator) external;\n\n    /// @notice Gets the balance of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The balance of staked tokens\n    function balanceOf(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the voting stake of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The voting stake amount\n    function votingStake(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the total voting stake of a operator\n    /// @param operator The address of the operator\n    /// @return The total voting stake amount\n    function totalVotingStake(address operator) external view returns (uint256);\n\n    /// @notice Gets the total supply of staked tokens for a specific operator\n    /// @param operator The address of the operator\n    /// @return The total supply of staked tokens\n    function totalSupply(address operator) external view returns (uint256);\n\n    /// @notice Sets the minimum voting stake\n    /// @param minVotingStake_ The minimum voting stake\n    function setMinVotingStake(uint256 minVotingStake_) external;\n\n    /// @notice Sets the cooldown seconds for operator fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForOperatorFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the cooldown seconds for protocol fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForProtocolFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the general cooldown period in seconds\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForUnstaking(uint40 cooldownSeconds_) external;\n\n    /// @notice Initiates the cooldown period for protocol fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateProtocolFee(uint16 feeBPS) external;\n\n    /// @notice Initiates the cooldown period for operator fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateOperatorFee(uint16 feeBPS) external;\n\n    /// @notice Sets the protocol fee in basis points\n    function setProtocolFeeBPS() external;\n\n    /// @notice Sets the operator fee in basis points\n    function setOperatorFeeBPS() external;\n\n    /// @notice Claims accrued rewards for a staker\n    /// @param distributionId The distribution ID\n    /// @param to The address to send rewards to\n    /// @param operator The address of the operator\n    /// @param amount The amount of rewards to claim\n    function claimRewards(uint16 distributionId, address to, address operator, uint256 amount) external;\n\n    /// @notice Claims accrued rewards for multiple stakers in a single transaction.\n    /// @param ids Array of distribution IDs for which rewards are being claimed.\n    /// @param recipients Array of addresses to receive the claimed rewards, corresponding to each distribution ID.\n    /// @param operators Array of operator addresses associated with each reward distribution, managing the distribution rules and potentially fees.\n    /// @param amounts Array of amounts of rewards to be claimed for each distribution ID.\n    function claimRewardsBatch(\n        uint16[] calldata ids,\n        address[] calldata recipients,\n        address[] calldata operators,\n        uint256[] calldata amounts\n    ) external;\n\n    /// @notice Stakes tokens on behalf of a user\n    /// @param to The address on whose behalf tokens are being staked\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to stake\n    function stake(address to, address operator, uint256 amount) external;\n\n    /// @notice Switches voting power from one operator to another for a specified amount.\n    /// @param fromOperator The address of the current operator from which the voting power is being moved.\n    /// @param toOperator The address of the new operator to which the voting power will be moved.\n    /// @param amount The amount of voting power to transfer.\n    function switchOperator(address fromOperator, address toOperator, uint256 amount) external;\n\n    /// @notice Initiates the cooldown period for a user's staked tokens\n    /// @param operator The address of the operator\n    /// @param amountToAdd The amount of tokens to cooldown. This is additive.\n    function cooldownToUnstake(address operator, uint256 amountToAdd) external;\n\n    /// @notice Unstakes tokens and stops earning rewards\n    /// @param to The address to unstake tokens to\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to unstake\n    function unstake(address to, address operator, uint256 amount) external;\n\n    /// @notice Gets the accrued rewards for a staker within a specific distribution and operator context\n    /// @param distributionId The distribution ID for which to query rewards\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The amount of accrued rewards\n    function getAccruedRewards(uint16 distributionId, address staker, address operator)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Gets the reward balance for a specific distribution, operator, and staker combination\n    /// @param distributionId The ID of the distribution for which the reward balance is queried\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return The amount of accrued rewards\n    function rewardBalance(uint16 distributionId, address operator, address staker) external view returns (uint256);\n\n    /// Gets operator fee information\n    /// @param operator The address of the operator\n    function operatorFee(address operator)\n        external\n        view\n        returns (uint40 cooldownEndTimestamp, uint16 bps, uint16 pendingBPS);\n\n    /// @notice Checks if an operator is active based on their total voting stake.\n    /// @dev An operator is considered active if their total voting stake is at least the minimum required.\n    /// @param operator The address of the operator to check.\n    /// @return True if the operator's total voting stake is at least the minimum required, false otherwise.\n    function isActiveOperator(address operator) external view returns (bool);\n\n    /// @notice Counts the total number of active operators.\n    /// @dev Iterates through all operators and counts those that are active.\n    /// @return The total number of active operators.\n    function totalActiveOperators() external view returns (uint256);\n\n    /// @notice Calculates the activation threshold for alerts.\n    /// @dev The activation threshold is determined as two-thirds of the total number of active operators.\n    /// @return The calculated activation threshold.\n    function activationThreshold() external view returns (uint256);\n\n    /// @notice Determines if an alert is active based on the given vote count.\n    /// @dev An alert is considered active if the vote count meets or exceeds the activation threshold.\n    /// @param voteCount The number of votes to check against the activation threshold.\n    /// @return True if the vote count meets or exceeds the activation threshold, false otherwise.\n    function isActiveAlert(uint128 voteCount) external view returns (bool);\n\n    /// @notice Generates a unique key for a reward balance based on distribution ID, operator, and staker\n    /// @param distributionId The ID of the distribution\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return A unique key for querying reward balances\n    function rewardBalanceKey(uint16 distributionId, address operator, address staker)\n        external\n        pure\n        returns (bytes32);\n\n    /// @notice Converts an address to a `uint256` representation\n    /// @param operator The address to convert\n    /// @return The `uint256` representation of the address\n    function addressToUint256(address operator) external pure returns (uint256);\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IStakedMultiToken.cooldownToUnstake', 'start_line': 2930, 'end_line': 2930, 'offset_start': 115030, 'offset_end': 115104, 'content': 'function cooldownToUnstake(address operator, uint256 amountToAdd) external;', 'contract_name': 'IStakedMultiToken', 'contract_code': "{\n    ////////////////\n    // Events\n    ////////////////\n\n    event OperatorRegistered(address operator);\n    event Stake(address indexed from, address indexed onBehalfOf, address operator, uint256 assets);\n\n    event RewardsAccrued(address user, address operator, uint256 amount);\n    event RewardsClaimed(address indexed from, address indexed to, address operator, uint256 amount);\n\n    event CooldownToUnstake(address indexed user, address indexed operator, uint256 amount);\n    event CooldownToUpdateProtocolFee(uint16 feeBPS, uint40 cooldownEndTimestamp);\n    event CooldownToUpdateOperatorFee(address operator, uint16 feeBPS, uint40 cooldownEndTimestamp);\n\n    event Unstake(address indexed from, address indexed to, address operator, uint256 assets);\n    event SetOperatorFeeBPS(address operator, uint16 feeBPS);\n    event SetProtocolFeeBPS(uint16 feeBPS);\n\n    event SetMinVotingStake(uint256 minVotingStake);\n    event SetCooldownSecForUnstaking(uint40 cooldownSeconds);\n    event SetCooldownSecForOperatorFee(uint40 cooldownSeconds);\n    event SetCooldownSecForProtocolFee(uint40 cooldownSeconds);\n    event CollectFee(\n        uint16 distributionId, address operator, uint256 protocolFee, uint256 operatorFee, uint256 userRewards\n    );\n\n    ////////////////\n    // Functions\n    ////////////////\n\n    /// @notice Registers a new operator and sets their fee in basis points\n    /// @param operator The address of the operator to register\n    /// @param feeBPS The fee in basis points\n    function registerOperator(address operator, uint16 feeBPS) external;\n\n    /// @notice Freezes an operator, preventing them from performing certain actions\n    /// @param operator The address of the operator to freeze\n    function freezeOperator(address operator) external;\n\n    /// @notice Gets the balance of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The balance of staked tokens\n    function balanceOf(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the voting stake of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The voting stake amount\n    function votingStake(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the total voting stake of a operator\n    /// @param operator The address of the operator\n    /// @return The total voting stake amount\n    function totalVotingStake(address operator) external view returns (uint256);\n\n    /// @notice Gets the total supply of staked tokens for a specific operator\n    /// @param operator The address of the operator\n    /// @return The total supply of staked tokens\n    function totalSupply(address operator) external view returns (uint256);\n\n    /// @notice Sets the minimum voting stake\n    /// @param minVotingStake_ The minimum voting stake\n    function setMinVotingStake(uint256 minVotingStake_) external;\n\n    /// @notice Sets the cooldown seconds for operator fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForOperatorFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the cooldown seconds for protocol fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForProtocolFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the general cooldown period in seconds\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForUnstaking(uint40 cooldownSeconds_) external;\n\n    /// @notice Initiates the cooldown period for protocol fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateProtocolFee(uint16 feeBPS) external;\n\n    /// @notice Initiates the cooldown period for operator fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateOperatorFee(uint16 feeBPS) external;\n\n    /// @notice Sets the protocol fee in basis points\n    function setProtocolFeeBPS() external;\n\n    /// @notice Sets the operator fee in basis points\n    function setOperatorFeeBPS() external;\n\n    /// @notice Claims accrued rewards for a staker\n    /// @param distributionId The distribution ID\n    /// @param to The address to send rewards to\n    /// @param operator The address of the operator\n    /// @param amount The amount of rewards to claim\n    function claimRewards(uint16 distributionId, address to, address operator, uint256 amount) external;\n\n    /// @notice Claims accrued rewards for multiple stakers in a single transaction.\n    /// @param ids Array of distribution IDs for which rewards are being claimed.\n    /// @param recipients Array of addresses to receive the claimed rewards, corresponding to each distribution ID.\n    /// @param operators Array of operator addresses associated with each reward distribution, managing the distribution rules and potentially fees.\n    /// @param amounts Array of amounts of rewards to be claimed for each distribution ID.\n    function claimRewardsBatch(\n        uint16[] calldata ids,\n        address[] calldata recipients,\n        address[] calldata operators,\n        uint256[] calldata amounts\n    ) external;\n\n    /// @notice Stakes tokens on behalf of a user\n    /// @param to The address on whose behalf tokens are being staked\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to stake\n    function stake(address to, address operator, uint256 amount) external;\n\n    /// @notice Switches voting power from one operator to another for a specified amount.\n    /// @param fromOperator The address of the current operator from which the voting power is being moved.\n    /// @param toOperator The address of the new operator to which the voting power will be moved.\n    /// @param amount The amount of voting power to transfer.\n    function switchOperator(address fromOperator, address toOperator, uint256 amount) external;\n\n    /// @notice Initiates the cooldown period for a user's staked tokens\n    /// @param operator The address of the operator\n    /// @param amountToAdd The amount of tokens to cooldown. This is additive.\n    function cooldownToUnstake(address operator, uint256 amountToAdd) external;\n\n    /// @notice Unstakes tokens and stops earning rewards\n    /// @param to The address to unstake tokens to\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to unstake\n    function unstake(address to, address operator, uint256 amount) external;\n\n    /// @notice Gets the accrued rewards for a staker within a specific distribution and operator context\n    /// @param distributionId The distribution ID for which to query rewards\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The amount of accrued rewards\n    function getAccruedRewards(uint16 distributionId, address staker, address operator)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Gets the reward balance for a specific distribution, operator, and staker combination\n    /// @param distributionId The ID of the distribution for which the reward balance is queried\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return The amount of accrued rewards\n    function rewardBalance(uint16 distributionId, address operator, address staker) external view returns (uint256);\n\n    /// Gets operator fee information\n    /// @param operator The address of the operator\n    function operatorFee(address operator)\n        external\n        view\n        returns (uint40 cooldownEndTimestamp, uint16 bps, uint16 pendingBPS);\n\n    /// @notice Checks if an operator is active based on their total voting stake.\n    /// @dev An operator is considered active if their total voting stake is at least the minimum required.\n    /// @param operator The address of the operator to check.\n    /// @return True if the operator's total voting stake is at least the minimum required, false otherwise.\n    function isActiveOperator(address operator) external view returns (bool);\n\n    /// @notice Counts the total number of active operators.\n    /// @dev Iterates through all operators and counts those that are active.\n    /// @return The total number of active operators.\n    function totalActiveOperators() external view returns (uint256);\n\n    /// @notice Calculates the activation threshold for alerts.\n    /// @dev The activation threshold is determined as two-thirds of the total number of active operators.\n    /// @return The calculated activation threshold.\n    function activationThreshold() external view returns (uint256);\n\n    /// @notice Determines if an alert is active based on the given vote count.\n    /// @dev An alert is considered active if the vote count meets or exceeds the activation threshold.\n    /// @param voteCount The number of votes to check against the activation threshold.\n    /// @return True if the vote count meets or exceeds the activation threshold, false otherwise.\n    function isActiveAlert(uint128 voteCount) external view returns (bool);\n\n    /// @notice Generates a unique key for a reward balance based on distribution ID, operator, and staker\n    /// @param distributionId The ID of the distribution\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return A unique key for querying reward balances\n    function rewardBalanceKey(uint16 distributionId, address operator, address staker)\n        external\n        pure\n        returns (bytes32);\n\n    /// @notice Converts an address to a `uint256` representation\n    /// @param operator The address to convert\n    /// @return The `uint256` representation of the address\n    function addressToUint256(address operator) external pure returns (uint256);\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IStakedMultiToken.unstake', 'start_line': 2936, 'end_line': 2936, 'offset_start': 115326, 'offset_end': 115397, 'content': 'function unstake(address to, address operator, uint256 amount) external;', 'contract_name': 'IStakedMultiToken', 'contract_code': "{\n    ////////////////\n    // Events\n    ////////////////\n\n    event OperatorRegistered(address operator);\n    event Stake(address indexed from, address indexed onBehalfOf, address operator, uint256 assets);\n\n    event RewardsAccrued(address user, address operator, uint256 amount);\n    event RewardsClaimed(address indexed from, address indexed to, address operator, uint256 amount);\n\n    event CooldownToUnstake(address indexed user, address indexed operator, uint256 amount);\n    event CooldownToUpdateProtocolFee(uint16 feeBPS, uint40 cooldownEndTimestamp);\n    event CooldownToUpdateOperatorFee(address operator, uint16 feeBPS, uint40 cooldownEndTimestamp);\n\n    event Unstake(address indexed from, address indexed to, address operator, uint256 assets);\n    event SetOperatorFeeBPS(address operator, uint16 feeBPS);\n    event SetProtocolFeeBPS(uint16 feeBPS);\n\n    event SetMinVotingStake(uint256 minVotingStake);\n    event SetCooldownSecForUnstaking(uint40 cooldownSeconds);\n    event SetCooldownSecForOperatorFee(uint40 cooldownSeconds);\n    event SetCooldownSecForProtocolFee(uint40 cooldownSeconds);\n    event CollectFee(\n        uint16 distributionId, address operator, uint256 protocolFee, uint256 operatorFee, uint256 userRewards\n    );\n\n    ////////////////\n    // Functions\n    ////////////////\n\n    /// @notice Registers a new operator and sets their fee in basis points\n    /// @param operator The address of the operator to register\n    /// @param feeBPS The fee in basis points\n    function registerOperator(address operator, uint16 feeBPS) external;\n\n    /// @notice Freezes an operator, preventing them from performing certain actions\n    /// @param operator The address of the operator to freeze\n    function freezeOperator(address operator) external;\n\n    /// @notice Gets the balance of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The balance of staked tokens\n    function balanceOf(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the voting stake of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The voting stake amount\n    function votingStake(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the total voting stake of a operator\n    /// @param operator The address of the operator\n    /// @return The total voting stake amount\n    function totalVotingStake(address operator) external view returns (uint256);\n\n    /// @notice Gets the total supply of staked tokens for a specific operator\n    /// @param operator The address of the operator\n    /// @return The total supply of staked tokens\n    function totalSupply(address operator) external view returns (uint256);\n\n    /// @notice Sets the minimum voting stake\n    /// @param minVotingStake_ The minimum voting stake\n    function setMinVotingStake(uint256 minVotingStake_) external;\n\n    /// @notice Sets the cooldown seconds for operator fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForOperatorFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the cooldown seconds for protocol fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForProtocolFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the general cooldown period in seconds\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForUnstaking(uint40 cooldownSeconds_) external;\n\n    /// @notice Initiates the cooldown period for protocol fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateProtocolFee(uint16 feeBPS) external;\n\n    /// @notice Initiates the cooldown period for operator fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateOperatorFee(uint16 feeBPS) external;\n\n    /// @notice Sets the protocol fee in basis points\n    function setProtocolFeeBPS() external;\n\n    /// @notice Sets the operator fee in basis points\n    function setOperatorFeeBPS() external;\n\n    /// @notice Claims accrued rewards for a staker\n    /// @param distributionId The distribution ID\n    /// @param to The address to send rewards to\n    /// @param operator The address of the operator\n    /// @param amount The amount of rewards to claim\n    function claimRewards(uint16 distributionId, address to, address operator, uint256 amount) external;\n\n    /// @notice Claims accrued rewards for multiple stakers in a single transaction.\n    /// @param ids Array of distribution IDs for which rewards are being claimed.\n    /// @param recipients Array of addresses to receive the claimed rewards, corresponding to each distribution ID.\n    /// @param operators Array of operator addresses associated with each reward distribution, managing the distribution rules and potentially fees.\n    /// @param amounts Array of amounts of rewards to be claimed for each distribution ID.\n    function claimRewardsBatch(\n        uint16[] calldata ids,\n        address[] calldata recipients,\n        address[] calldata operators,\n        uint256[] calldata amounts\n    ) external;\n\n    /// @notice Stakes tokens on behalf of a user\n    /// @param to The address on whose behalf tokens are being staked\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to stake\n    function stake(address to, address operator, uint256 amount) external;\n\n    /// @notice Switches voting power from one operator to another for a specified amount.\n    /// @param fromOperator The address of the current operator from which the voting power is being moved.\n    /// @param toOperator The address of the new operator to which the voting power will be moved.\n    /// @param amount The amount of voting power to transfer.\n    function switchOperator(address fromOperator, address toOperator, uint256 amount) external;\n\n    /// @notice Initiates the cooldown period for a user's staked tokens\n    /// @param operator The address of the operator\n    /// @param amountToAdd The amount of tokens to cooldown. This is additive.\n    function cooldownToUnstake(address operator, uint256 amountToAdd) external;\n\n    /// @notice Unstakes tokens and stops earning rewards\n    /// @param to The address to unstake tokens to\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to unstake\n    function unstake(address to, address operator, uint256 amount) external;\n\n    /// @notice Gets the accrued rewards for a staker within a specific distribution and operator context\n    /// @param distributionId The distribution ID for which to query rewards\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The amount of accrued rewards\n    function getAccruedRewards(uint16 distributionId, address staker, address operator)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Gets the reward balance for a specific distribution, operator, and staker combination\n    /// @param distributionId The ID of the distribution for which the reward balance is queried\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return The amount of accrued rewards\n    function rewardBalance(uint16 distributionId, address operator, address staker) external view returns (uint256);\n\n    /// Gets operator fee information\n    /// @param operator The address of the operator\n    function operatorFee(address operator)\n        external\n        view\n        returns (uint40 cooldownEndTimestamp, uint16 bps, uint16 pendingBPS);\n\n    /// @notice Checks if an operator is active based on their total voting stake.\n    /// @dev An operator is considered active if their total voting stake is at least the minimum required.\n    /// @param operator The address of the operator to check.\n    /// @return True if the operator's total voting stake is at least the minimum required, false otherwise.\n    function isActiveOperator(address operator) external view returns (bool);\n\n    /// @notice Counts the total number of active operators.\n    /// @dev Iterates through all operators and counts those that are active.\n    /// @return The total number of active operators.\n    function totalActiveOperators() external view returns (uint256);\n\n    /// @notice Calculates the activation threshold for alerts.\n    /// @dev The activation threshold is determined as two-thirds of the total number of active operators.\n    /// @return The calculated activation threshold.\n    function activationThreshold() external view returns (uint256);\n\n    /// @notice Determines if an alert is active based on the given vote count.\n    /// @dev An alert is considered active if the vote count meets or exceeds the activation threshold.\n    /// @param voteCount The number of votes to check against the activation threshold.\n    /// @return True if the vote count meets or exceeds the activation threshold, false otherwise.\n    function isActiveAlert(uint128 voteCount) external view returns (bool);\n\n    /// @notice Generates a unique key for a reward balance based on distribution ID, operator, and staker\n    /// @param distributionId The ID of the distribution\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return A unique key for querying reward balances\n    function rewardBalanceKey(uint16 distributionId, address operator, address staker)\n        external\n        pure\n        returns (bytes32);\n\n    /// @notice Converts an address to a `uint256` representation\n    /// @param operator The address to convert\n    /// @return The `uint256` representation of the address\n    function addressToUint256(address operator) external pure returns (uint256);\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IStakedMultiToken.getAccruedRewards', 'start_line': 2943, 'end_line': 2946, 'offset_start': 115733, 'offset_end': 115872, 'content': 'function getAccruedRewards(uint16 distributionId, address staker, address operator)\n        external\n        view\n        returns (uint256);', 'contract_name': 'IStakedMultiToken', 'contract_code': "{\n    ////////////////\n    // Events\n    ////////////////\n\n    event OperatorRegistered(address operator);\n    event Stake(address indexed from, address indexed onBehalfOf, address operator, uint256 assets);\n\n    event RewardsAccrued(address user, address operator, uint256 amount);\n    event RewardsClaimed(address indexed from, address indexed to, address operator, uint256 amount);\n\n    event CooldownToUnstake(address indexed user, address indexed operator, uint256 amount);\n    event CooldownToUpdateProtocolFee(uint16 feeBPS, uint40 cooldownEndTimestamp);\n    event CooldownToUpdateOperatorFee(address operator, uint16 feeBPS, uint40 cooldownEndTimestamp);\n\n    event Unstake(address indexed from, address indexed to, address operator, uint256 assets);\n    event SetOperatorFeeBPS(address operator, uint16 feeBPS);\n    event SetProtocolFeeBPS(uint16 feeBPS);\n\n    event SetMinVotingStake(uint256 minVotingStake);\n    event SetCooldownSecForUnstaking(uint40 cooldownSeconds);\n    event SetCooldownSecForOperatorFee(uint40 cooldownSeconds);\n    event SetCooldownSecForProtocolFee(uint40 cooldownSeconds);\n    event CollectFee(\n        uint16 distributionId, address operator, uint256 protocolFee, uint256 operatorFee, uint256 userRewards\n    );\n\n    ////////////////\n    // Functions\n    ////////////////\n\n    /// @notice Registers a new operator and sets their fee in basis points\n    /// @param operator The address of the operator to register\n    /// @param feeBPS The fee in basis points\n    function registerOperator(address operator, uint16 feeBPS) external;\n\n    /// @notice Freezes an operator, preventing them from performing certain actions\n    /// @param operator The address of the operator to freeze\n    function freezeOperator(address operator) external;\n\n    /// @notice Gets the balance of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The balance of staked tokens\n    function balanceOf(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the voting stake of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The voting stake amount\n    function votingStake(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the total voting stake of a operator\n    /// @param operator The address of the operator\n    /// @return The total voting stake amount\n    function totalVotingStake(address operator) external view returns (uint256);\n\n    /// @notice Gets the total supply of staked tokens for a specific operator\n    /// @param operator The address of the operator\n    /// @return The total supply of staked tokens\n    function totalSupply(address operator) external view returns (uint256);\n\n    /// @notice Sets the minimum voting stake\n    /// @param minVotingStake_ The minimum voting stake\n    function setMinVotingStake(uint256 minVotingStake_) external;\n\n    /// @notice Sets the cooldown seconds for operator fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForOperatorFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the cooldown seconds for protocol fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForProtocolFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the general cooldown period in seconds\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForUnstaking(uint40 cooldownSeconds_) external;\n\n    /// @notice Initiates the cooldown period for protocol fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateProtocolFee(uint16 feeBPS) external;\n\n    /// @notice Initiates the cooldown period for operator fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateOperatorFee(uint16 feeBPS) external;\n\n    /// @notice Sets the protocol fee in basis points\n    function setProtocolFeeBPS() external;\n\n    /// @notice Sets the operator fee in basis points\n    function setOperatorFeeBPS() external;\n\n    /// @notice Claims accrued rewards for a staker\n    /// @param distributionId The distribution ID\n    /// @param to The address to send rewards to\n    /// @param operator The address of the operator\n    /// @param amount The amount of rewards to claim\n    function claimRewards(uint16 distributionId, address to, address operator, uint256 amount) external;\n\n    /// @notice Claims accrued rewards for multiple stakers in a single transaction.\n    /// @param ids Array of distribution IDs for which rewards are being claimed.\n    /// @param recipients Array of addresses to receive the claimed rewards, corresponding to each distribution ID.\n    /// @param operators Array of operator addresses associated with each reward distribution, managing the distribution rules and potentially fees.\n    /// @param amounts Array of amounts of rewards to be claimed for each distribution ID.\n    function claimRewardsBatch(\n        uint16[] calldata ids,\n        address[] calldata recipients,\n        address[] calldata operators,\n        uint256[] calldata amounts\n    ) external;\n\n    /// @notice Stakes tokens on behalf of a user\n    /// @param to The address on whose behalf tokens are being staked\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to stake\n    function stake(address to, address operator, uint256 amount) external;\n\n    /// @notice Switches voting power from one operator to another for a specified amount.\n    /// @param fromOperator The address of the current operator from which the voting power is being moved.\n    /// @param toOperator The address of the new operator to which the voting power will be moved.\n    /// @param amount The amount of voting power to transfer.\n    function switchOperator(address fromOperator, address toOperator, uint256 amount) external;\n\n    /// @notice Initiates the cooldown period for a user's staked tokens\n    /// @param operator The address of the operator\n    /// @param amountToAdd The amount of tokens to cooldown. This is additive.\n    function cooldownToUnstake(address operator, uint256 amountToAdd) external;\n\n    /// @notice Unstakes tokens and stops earning rewards\n    /// @param to The address to unstake tokens to\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to unstake\n    function unstake(address to, address operator, uint256 amount) external;\n\n    /// @notice Gets the accrued rewards for a staker within a specific distribution and operator context\n    /// @param distributionId The distribution ID for which to query rewards\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The amount of accrued rewards\n    function getAccruedRewards(uint16 distributionId, address staker, address operator)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Gets the reward balance for a specific distribution, operator, and staker combination\n    /// @param distributionId The ID of the distribution for which the reward balance is queried\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return The amount of accrued rewards\n    function rewardBalance(uint16 distributionId, address operator, address staker) external view returns (uint256);\n\n    /// Gets operator fee information\n    /// @param operator The address of the operator\n    function operatorFee(address operator)\n        external\n        view\n        returns (uint40 cooldownEndTimestamp, uint16 bps, uint16 pendingBPS);\n\n    /// @notice Checks if an operator is active based on their total voting stake.\n    /// @dev An operator is considered active if their total voting stake is at least the minimum required.\n    /// @param operator The address of the operator to check.\n    /// @return True if the operator's total voting stake is at least the minimum required, false otherwise.\n    function isActiveOperator(address operator) external view returns (bool);\n\n    /// @notice Counts the total number of active operators.\n    /// @dev Iterates through all operators and counts those that are active.\n    /// @return The total number of active operators.\n    function totalActiveOperators() external view returns (uint256);\n\n    /// @notice Calculates the activation threshold for alerts.\n    /// @dev The activation threshold is determined as two-thirds of the total number of active operators.\n    /// @return The calculated activation threshold.\n    function activationThreshold() external view returns (uint256);\n\n    /// @notice Determines if an alert is active based on the given vote count.\n    /// @dev An alert is considered active if the vote count meets or exceeds the activation threshold.\n    /// @param voteCount The number of votes to check against the activation threshold.\n    /// @return True if the vote count meets or exceeds the activation threshold, false otherwise.\n    function isActiveAlert(uint128 voteCount) external view returns (bool);\n\n    /// @notice Generates a unique key for a reward balance based on distribution ID, operator, and staker\n    /// @param distributionId The ID of the distribution\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return A unique key for querying reward balances\n    function rewardBalanceKey(uint16 distributionId, address operator, address staker)\n        external\n        pure\n        returns (bytes32);\n\n    /// @notice Converts an address to a `uint256` representation\n    /// @param operator The address to convert\n    /// @return The `uint256` representation of the address\n    function addressToUint256(address operator) external pure returns (uint256);\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IStakedMultiToken.rewardBalance', 'start_line': 2953, 'end_line': 2953, 'offset_start': 116224, 'offset_end': 116335, 'content': 'function rewardBalance(uint16 distributionId, address operator, address staker) external view returns (uint256);', 'contract_name': 'IStakedMultiToken', 'contract_code': "{\n    ////////////////\n    // Events\n    ////////////////\n\n    event OperatorRegistered(address operator);\n    event Stake(address indexed from, address indexed onBehalfOf, address operator, uint256 assets);\n\n    event RewardsAccrued(address user, address operator, uint256 amount);\n    event RewardsClaimed(address indexed from, address indexed to, address operator, uint256 amount);\n\n    event CooldownToUnstake(address indexed user, address indexed operator, uint256 amount);\n    event CooldownToUpdateProtocolFee(uint16 feeBPS, uint40 cooldownEndTimestamp);\n    event CooldownToUpdateOperatorFee(address operator, uint16 feeBPS, uint40 cooldownEndTimestamp);\n\n    event Unstake(address indexed from, address indexed to, address operator, uint256 assets);\n    event SetOperatorFeeBPS(address operator, uint16 feeBPS);\n    event SetProtocolFeeBPS(uint16 feeBPS);\n\n    event SetMinVotingStake(uint256 minVotingStake);\n    event SetCooldownSecForUnstaking(uint40 cooldownSeconds);\n    event SetCooldownSecForOperatorFee(uint40 cooldownSeconds);\n    event SetCooldownSecForProtocolFee(uint40 cooldownSeconds);\n    event CollectFee(\n        uint16 distributionId, address operator, uint256 protocolFee, uint256 operatorFee, uint256 userRewards\n    );\n\n    ////////////////\n    // Functions\n    ////////////////\n\n    /// @notice Registers a new operator and sets their fee in basis points\n    /// @param operator The address of the operator to register\n    /// @param feeBPS The fee in basis points\n    function registerOperator(address operator, uint16 feeBPS) external;\n\n    /// @notice Freezes an operator, preventing them from performing certain actions\n    /// @param operator The address of the operator to freeze\n    function freezeOperator(address operator) external;\n\n    /// @notice Gets the balance of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The balance of staked tokens\n    function balanceOf(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the voting stake of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The voting stake amount\n    function votingStake(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the total voting stake of a operator\n    /// @param operator The address of the operator\n    /// @return The total voting stake amount\n    function totalVotingStake(address operator) external view returns (uint256);\n\n    /// @notice Gets the total supply of staked tokens for a specific operator\n    /// @param operator The address of the operator\n    /// @return The total supply of staked tokens\n    function totalSupply(address operator) external view returns (uint256);\n\n    /// @notice Sets the minimum voting stake\n    /// @param minVotingStake_ The minimum voting stake\n    function setMinVotingStake(uint256 minVotingStake_) external;\n\n    /// @notice Sets the cooldown seconds for operator fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForOperatorFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the cooldown seconds for protocol fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForProtocolFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the general cooldown period in seconds\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForUnstaking(uint40 cooldownSeconds_) external;\n\n    /// @notice Initiates the cooldown period for protocol fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateProtocolFee(uint16 feeBPS) external;\n\n    /// @notice Initiates the cooldown period for operator fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateOperatorFee(uint16 feeBPS) external;\n\n    /// @notice Sets the protocol fee in basis points\n    function setProtocolFeeBPS() external;\n\n    /// @notice Sets the operator fee in basis points\n    function setOperatorFeeBPS() external;\n\n    /// @notice Claims accrued rewards for a staker\n    /// @param distributionId The distribution ID\n    /// @param to The address to send rewards to\n    /// @param operator The address of the operator\n    /// @param amount The amount of rewards to claim\n    function claimRewards(uint16 distributionId, address to, address operator, uint256 amount) external;\n\n    /// @notice Claims accrued rewards for multiple stakers in a single transaction.\n    /// @param ids Array of distribution IDs for which rewards are being claimed.\n    /// @param recipients Array of addresses to receive the claimed rewards, corresponding to each distribution ID.\n    /// @param operators Array of operator addresses associated with each reward distribution, managing the distribution rules and potentially fees.\n    /// @param amounts Array of amounts of rewards to be claimed for each distribution ID.\n    function claimRewardsBatch(\n        uint16[] calldata ids,\n        address[] calldata recipients,\n        address[] calldata operators,\n        uint256[] calldata amounts\n    ) external;\n\n    /// @notice Stakes tokens on behalf of a user\n    /// @param to The address on whose behalf tokens are being staked\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to stake\n    function stake(address to, address operator, uint256 amount) external;\n\n    /// @notice Switches voting power from one operator to another for a specified amount.\n    /// @param fromOperator The address of the current operator from which the voting power is being moved.\n    /// @param toOperator The address of the new operator to which the voting power will be moved.\n    /// @param amount The amount of voting power to transfer.\n    function switchOperator(address fromOperator, address toOperator, uint256 amount) external;\n\n    /// @notice Initiates the cooldown period for a user's staked tokens\n    /// @param operator The address of the operator\n    /// @param amountToAdd The amount of tokens to cooldown. This is additive.\n    function cooldownToUnstake(address operator, uint256 amountToAdd) external;\n\n    /// @notice Unstakes tokens and stops earning rewards\n    /// @param to The address to unstake tokens to\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to unstake\n    function unstake(address to, address operator, uint256 amount) external;\n\n    /// @notice Gets the accrued rewards for a staker within a specific distribution and operator context\n    /// @param distributionId The distribution ID for which to query rewards\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The amount of accrued rewards\n    function getAccruedRewards(uint16 distributionId, address staker, address operator)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Gets the reward balance for a specific distribution, operator, and staker combination\n    /// @param distributionId The ID of the distribution for which the reward balance is queried\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return The amount of accrued rewards\n    function rewardBalance(uint16 distributionId, address operator, address staker) external view returns (uint256);\n\n    /// Gets operator fee information\n    /// @param operator The address of the operator\n    function operatorFee(address operator)\n        external\n        view\n        returns (uint40 cooldownEndTimestamp, uint16 bps, uint16 pendingBPS);\n\n    /// @notice Checks if an operator is active based on their total voting stake.\n    /// @dev An operator is considered active if their total voting stake is at least the minimum required.\n    /// @param operator The address of the operator to check.\n    /// @return True if the operator's total voting stake is at least the minimum required, false otherwise.\n    function isActiveOperator(address operator) external view returns (bool);\n\n    /// @notice Counts the total number of active operators.\n    /// @dev Iterates through all operators and counts those that are active.\n    /// @return The total number of active operators.\n    function totalActiveOperators() external view returns (uint256);\n\n    /// @notice Calculates the activation threshold for alerts.\n    /// @dev The activation threshold is determined as two-thirds of the total number of active operators.\n    /// @return The calculated activation threshold.\n    function activationThreshold() external view returns (uint256);\n\n    /// @notice Determines if an alert is active based on the given vote count.\n    /// @dev An alert is considered active if the vote count meets or exceeds the activation threshold.\n    /// @param voteCount The number of votes to check against the activation threshold.\n    /// @return True if the vote count meets or exceeds the activation threshold, false otherwise.\n    function isActiveAlert(uint128 voteCount) external view returns (bool);\n\n    /// @notice Generates a unique key for a reward balance based on distribution ID, operator, and staker\n    /// @param distributionId The ID of the distribution\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return A unique key for querying reward balances\n    function rewardBalanceKey(uint16 distributionId, address operator, address staker)\n        external\n        pure\n        returns (bytes32);\n\n    /// @notice Converts an address to a `uint256` representation\n    /// @param operator The address to convert\n    /// @return The `uint256` representation of the address\n    function addressToUint256(address operator) external pure returns (uint256);\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IStakedMultiToken.operatorFee', 'start_line': 2957, 'end_line': 2960, 'offset_start': 116432, 'offset_end': 116577, 'content': 'function operatorFee(address operator)\n        external\n        view\n        returns (uint40 cooldownEndTimestamp, uint16 bps, uint16 pendingBPS);', 'contract_name': 'IStakedMultiToken', 'contract_code': "{\n    ////////////////\n    // Events\n    ////////////////\n\n    event OperatorRegistered(address operator);\n    event Stake(address indexed from, address indexed onBehalfOf, address operator, uint256 assets);\n\n    event RewardsAccrued(address user, address operator, uint256 amount);\n    event RewardsClaimed(address indexed from, address indexed to, address operator, uint256 amount);\n\n    event CooldownToUnstake(address indexed user, address indexed operator, uint256 amount);\n    event CooldownToUpdateProtocolFee(uint16 feeBPS, uint40 cooldownEndTimestamp);\n    event CooldownToUpdateOperatorFee(address operator, uint16 feeBPS, uint40 cooldownEndTimestamp);\n\n    event Unstake(address indexed from, address indexed to, address operator, uint256 assets);\n    event SetOperatorFeeBPS(address operator, uint16 feeBPS);\n    event SetProtocolFeeBPS(uint16 feeBPS);\n\n    event SetMinVotingStake(uint256 minVotingStake);\n    event SetCooldownSecForUnstaking(uint40 cooldownSeconds);\n    event SetCooldownSecForOperatorFee(uint40 cooldownSeconds);\n    event SetCooldownSecForProtocolFee(uint40 cooldownSeconds);\n    event CollectFee(\n        uint16 distributionId, address operator, uint256 protocolFee, uint256 operatorFee, uint256 userRewards\n    );\n\n    ////////////////\n    // Functions\n    ////////////////\n\n    /// @notice Registers a new operator and sets their fee in basis points\n    /// @param operator The address of the operator to register\n    /// @param feeBPS The fee in basis points\n    function registerOperator(address operator, uint16 feeBPS) external;\n\n    /// @notice Freezes an operator, preventing them from performing certain actions\n    /// @param operator The address of the operator to freeze\n    function freezeOperator(address operator) external;\n\n    /// @notice Gets the balance of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The balance of staked tokens\n    function balanceOf(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the voting stake of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The voting stake amount\n    function votingStake(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the total voting stake of a operator\n    /// @param operator The address of the operator\n    /// @return The total voting stake amount\n    function totalVotingStake(address operator) external view returns (uint256);\n\n    /// @notice Gets the total supply of staked tokens for a specific operator\n    /// @param operator The address of the operator\n    /// @return The total supply of staked tokens\n    function totalSupply(address operator) external view returns (uint256);\n\n    /// @notice Sets the minimum voting stake\n    /// @param minVotingStake_ The minimum voting stake\n    function setMinVotingStake(uint256 minVotingStake_) external;\n\n    /// @notice Sets the cooldown seconds for operator fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForOperatorFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the cooldown seconds for protocol fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForProtocolFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the general cooldown period in seconds\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForUnstaking(uint40 cooldownSeconds_) external;\n\n    /// @notice Initiates the cooldown period for protocol fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateProtocolFee(uint16 feeBPS) external;\n\n    /// @notice Initiates the cooldown period for operator fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateOperatorFee(uint16 feeBPS) external;\n\n    /// @notice Sets the protocol fee in basis points\n    function setProtocolFeeBPS() external;\n\n    /// @notice Sets the operator fee in basis points\n    function setOperatorFeeBPS() external;\n\n    /// @notice Claims accrued rewards for a staker\n    /// @param distributionId The distribution ID\n    /// @param to The address to send rewards to\n    /// @param operator The address of the operator\n    /// @param amount The amount of rewards to claim\n    function claimRewards(uint16 distributionId, address to, address operator, uint256 amount) external;\n\n    /// @notice Claims accrued rewards for multiple stakers in a single transaction.\n    /// @param ids Array of distribution IDs for which rewards are being claimed.\n    /// @param recipients Array of addresses to receive the claimed rewards, corresponding to each distribution ID.\n    /// @param operators Array of operator addresses associated with each reward distribution, managing the distribution rules and potentially fees.\n    /// @param amounts Array of amounts of rewards to be claimed for each distribution ID.\n    function claimRewardsBatch(\n        uint16[] calldata ids,\n        address[] calldata recipients,\n        address[] calldata operators,\n        uint256[] calldata amounts\n    ) external;\n\n    /// @notice Stakes tokens on behalf of a user\n    /// @param to The address on whose behalf tokens are being staked\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to stake\n    function stake(address to, address operator, uint256 amount) external;\n\n    /// @notice Switches voting power from one operator to another for a specified amount.\n    /// @param fromOperator The address of the current operator from which the voting power is being moved.\n    /// @param toOperator The address of the new operator to which the voting power will be moved.\n    /// @param amount The amount of voting power to transfer.\n    function switchOperator(address fromOperator, address toOperator, uint256 amount) external;\n\n    /// @notice Initiates the cooldown period for a user's staked tokens\n    /// @param operator The address of the operator\n    /// @param amountToAdd The amount of tokens to cooldown. This is additive.\n    function cooldownToUnstake(address operator, uint256 amountToAdd) external;\n\n    /// @notice Unstakes tokens and stops earning rewards\n    /// @param to The address to unstake tokens to\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to unstake\n    function unstake(address to, address operator, uint256 amount) external;\n\n    /// @notice Gets the accrued rewards for a staker within a specific distribution and operator context\n    /// @param distributionId The distribution ID for which to query rewards\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The amount of accrued rewards\n    function getAccruedRewards(uint16 distributionId, address staker, address operator)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Gets the reward balance for a specific distribution, operator, and staker combination\n    /// @param distributionId The ID of the distribution for which the reward balance is queried\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return The amount of accrued rewards\n    function rewardBalance(uint16 distributionId, address operator, address staker) external view returns (uint256);\n\n    /// Gets operator fee information\n    /// @param operator The address of the operator\n    function operatorFee(address operator)\n        external\n        view\n        returns (uint40 cooldownEndTimestamp, uint16 bps, uint16 pendingBPS);\n\n    /// @notice Checks if an operator is active based on their total voting stake.\n    /// @dev An operator is considered active if their total voting stake is at least the minimum required.\n    /// @param operator The address of the operator to check.\n    /// @return True if the operator's total voting stake is at least the minimum required, false otherwise.\n    function isActiveOperator(address operator) external view returns (bool);\n\n    /// @notice Counts the total number of active operators.\n    /// @dev Iterates through all operators and counts those that are active.\n    /// @return The total number of active operators.\n    function totalActiveOperators() external view returns (uint256);\n\n    /// @notice Calculates the activation threshold for alerts.\n    /// @dev The activation threshold is determined as two-thirds of the total number of active operators.\n    /// @return The calculated activation threshold.\n    function activationThreshold() external view returns (uint256);\n\n    /// @notice Determines if an alert is active based on the given vote count.\n    /// @dev An alert is considered active if the vote count meets or exceeds the activation threshold.\n    /// @param voteCount The number of votes to check against the activation threshold.\n    /// @return True if the vote count meets or exceeds the activation threshold, false otherwise.\n    function isActiveAlert(uint128 voteCount) external view returns (bool);\n\n    /// @notice Generates a unique key for a reward balance based on distribution ID, operator, and staker\n    /// @param distributionId The ID of the distribution\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return A unique key for querying reward balances\n    function rewardBalanceKey(uint16 distributionId, address operator, address staker)\n        external\n        pure\n        returns (bytes32);\n\n    /// @notice Converts an address to a `uint256` representation\n    /// @param operator The address to convert\n    /// @return The `uint256` representation of the address\n    function addressToUint256(address operator) external pure returns (uint256);\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IStakedMultiToken.isActiveOperator', 'start_line': 2966, 'end_line': 2966, 'offset_start': 116946, 'offset_end': 117018, 'content': 'function isActiveOperator(address operator) external view returns (bool);', 'contract_name': 'IStakedMultiToken', 'contract_code': "{\n    ////////////////\n    // Events\n    ////////////////\n\n    event OperatorRegistered(address operator);\n    event Stake(address indexed from, address indexed onBehalfOf, address operator, uint256 assets);\n\n    event RewardsAccrued(address user, address operator, uint256 amount);\n    event RewardsClaimed(address indexed from, address indexed to, address operator, uint256 amount);\n\n    event CooldownToUnstake(address indexed user, address indexed operator, uint256 amount);\n    event CooldownToUpdateProtocolFee(uint16 feeBPS, uint40 cooldownEndTimestamp);\n    event CooldownToUpdateOperatorFee(address operator, uint16 feeBPS, uint40 cooldownEndTimestamp);\n\n    event Unstake(address indexed from, address indexed to, address operator, uint256 assets);\n    event SetOperatorFeeBPS(address operator, uint16 feeBPS);\n    event SetProtocolFeeBPS(uint16 feeBPS);\n\n    event SetMinVotingStake(uint256 minVotingStake);\n    event SetCooldownSecForUnstaking(uint40 cooldownSeconds);\n    event SetCooldownSecForOperatorFee(uint40 cooldownSeconds);\n    event SetCooldownSecForProtocolFee(uint40 cooldownSeconds);\n    event CollectFee(\n        uint16 distributionId, address operator, uint256 protocolFee, uint256 operatorFee, uint256 userRewards\n    );\n\n    ////////////////\n    // Functions\n    ////////////////\n\n    /// @notice Registers a new operator and sets their fee in basis points\n    /// @param operator The address of the operator to register\n    /// @param feeBPS The fee in basis points\n    function registerOperator(address operator, uint16 feeBPS) external;\n\n    /// @notice Freezes an operator, preventing them from performing certain actions\n    /// @param operator The address of the operator to freeze\n    function freezeOperator(address operator) external;\n\n    /// @notice Gets the balance of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The balance of staked tokens\n    function balanceOf(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the voting stake of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The voting stake amount\n    function votingStake(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the total voting stake of a operator\n    /// @param operator The address of the operator\n    /// @return The total voting stake amount\n    function totalVotingStake(address operator) external view returns (uint256);\n\n    /// @notice Gets the total supply of staked tokens for a specific operator\n    /// @param operator The address of the operator\n    /// @return The total supply of staked tokens\n    function totalSupply(address operator) external view returns (uint256);\n\n    /// @notice Sets the minimum voting stake\n    /// @param minVotingStake_ The minimum voting stake\n    function setMinVotingStake(uint256 minVotingStake_) external;\n\n    /// @notice Sets the cooldown seconds for operator fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForOperatorFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the cooldown seconds for protocol fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForProtocolFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the general cooldown period in seconds\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForUnstaking(uint40 cooldownSeconds_) external;\n\n    /// @notice Initiates the cooldown period for protocol fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateProtocolFee(uint16 feeBPS) external;\n\n    /// @notice Initiates the cooldown period for operator fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateOperatorFee(uint16 feeBPS) external;\n\n    /// @notice Sets the protocol fee in basis points\n    function setProtocolFeeBPS() external;\n\n    /// @notice Sets the operator fee in basis points\n    function setOperatorFeeBPS() external;\n\n    /// @notice Claims accrued rewards for a staker\n    /// @param distributionId The distribution ID\n    /// @param to The address to send rewards to\n    /// @param operator The address of the operator\n    /// @param amount The amount of rewards to claim\n    function claimRewards(uint16 distributionId, address to, address operator, uint256 amount) external;\n\n    /// @notice Claims accrued rewards for multiple stakers in a single transaction.\n    /// @param ids Array of distribution IDs for which rewards are being claimed.\n    /// @param recipients Array of addresses to receive the claimed rewards, corresponding to each distribution ID.\n    /// @param operators Array of operator addresses associated with each reward distribution, managing the distribution rules and potentially fees.\n    /// @param amounts Array of amounts of rewards to be claimed for each distribution ID.\n    function claimRewardsBatch(\n        uint16[] calldata ids,\n        address[] calldata recipients,\n        address[] calldata operators,\n        uint256[] calldata amounts\n    ) external;\n\n    /// @notice Stakes tokens on behalf of a user\n    /// @param to The address on whose behalf tokens are being staked\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to stake\n    function stake(address to, address operator, uint256 amount) external;\n\n    /// @notice Switches voting power from one operator to another for a specified amount.\n    /// @param fromOperator The address of the current operator from which the voting power is being moved.\n    /// @param toOperator The address of the new operator to which the voting power will be moved.\n    /// @param amount The amount of voting power to transfer.\n    function switchOperator(address fromOperator, address toOperator, uint256 amount) external;\n\n    /// @notice Initiates the cooldown period for a user's staked tokens\n    /// @param operator The address of the operator\n    /// @param amountToAdd The amount of tokens to cooldown. This is additive.\n    function cooldownToUnstake(address operator, uint256 amountToAdd) external;\n\n    /// @notice Unstakes tokens and stops earning rewards\n    /// @param to The address to unstake tokens to\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to unstake\n    function unstake(address to, address operator, uint256 amount) external;\n\n    /// @notice Gets the accrued rewards for a staker within a specific distribution and operator context\n    /// @param distributionId The distribution ID for which to query rewards\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The amount of accrued rewards\n    function getAccruedRewards(uint16 distributionId, address staker, address operator)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Gets the reward balance for a specific distribution, operator, and staker combination\n    /// @param distributionId The ID of the distribution for which the reward balance is queried\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return The amount of accrued rewards\n    function rewardBalance(uint16 distributionId, address operator, address staker) external view returns (uint256);\n\n    /// Gets operator fee information\n    /// @param operator The address of the operator\n    function operatorFee(address operator)\n        external\n        view\n        returns (uint40 cooldownEndTimestamp, uint16 bps, uint16 pendingBPS);\n\n    /// @notice Checks if an operator is active based on their total voting stake.\n    /// @dev An operator is considered active if their total voting stake is at least the minimum required.\n    /// @param operator The address of the operator to check.\n    /// @return True if the operator's total voting stake is at least the minimum required, false otherwise.\n    function isActiveOperator(address operator) external view returns (bool);\n\n    /// @notice Counts the total number of active operators.\n    /// @dev Iterates through all operators and counts those that are active.\n    /// @return The total number of active operators.\n    function totalActiveOperators() external view returns (uint256);\n\n    /// @notice Calculates the activation threshold for alerts.\n    /// @dev The activation threshold is determined as two-thirds of the total number of active operators.\n    /// @return The calculated activation threshold.\n    function activationThreshold() external view returns (uint256);\n\n    /// @notice Determines if an alert is active based on the given vote count.\n    /// @dev An alert is considered active if the vote count meets or exceeds the activation threshold.\n    /// @param voteCount The number of votes to check against the activation threshold.\n    /// @return True if the vote count meets or exceeds the activation threshold, false otherwise.\n    function isActiveAlert(uint128 voteCount) external view returns (bool);\n\n    /// @notice Generates a unique key for a reward balance based on distribution ID, operator, and staker\n    /// @param distributionId The ID of the distribution\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return A unique key for querying reward balances\n    function rewardBalanceKey(uint16 distributionId, address operator, address staker)\n        external\n        pure\n        returns (bytes32);\n\n    /// @notice Converts an address to a `uint256` representation\n    /// @param operator The address to convert\n    /// @return The `uint256` representation of the address\n    function addressToUint256(address operator) external pure returns (uint256);\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IStakedMultiToken.totalActiveOperators', 'start_line': 2971, 'end_line': 2971, 'offset_start': 117218, 'offset_end': 117281, 'content': 'function totalActiveOperators() external view returns (uint256);', 'contract_name': 'IStakedMultiToken', 'contract_code': "{\n    ////////////////\n    // Events\n    ////////////////\n\n    event OperatorRegistered(address operator);\n    event Stake(address indexed from, address indexed onBehalfOf, address operator, uint256 assets);\n\n    event RewardsAccrued(address user, address operator, uint256 amount);\n    event RewardsClaimed(address indexed from, address indexed to, address operator, uint256 amount);\n\n    event CooldownToUnstake(address indexed user, address indexed operator, uint256 amount);\n    event CooldownToUpdateProtocolFee(uint16 feeBPS, uint40 cooldownEndTimestamp);\n    event CooldownToUpdateOperatorFee(address operator, uint16 feeBPS, uint40 cooldownEndTimestamp);\n\n    event Unstake(address indexed from, address indexed to, address operator, uint256 assets);\n    event SetOperatorFeeBPS(address operator, uint16 feeBPS);\n    event SetProtocolFeeBPS(uint16 feeBPS);\n\n    event SetMinVotingStake(uint256 minVotingStake);\n    event SetCooldownSecForUnstaking(uint40 cooldownSeconds);\n    event SetCooldownSecForOperatorFee(uint40 cooldownSeconds);\n    event SetCooldownSecForProtocolFee(uint40 cooldownSeconds);\n    event CollectFee(\n        uint16 distributionId, address operator, uint256 protocolFee, uint256 operatorFee, uint256 userRewards\n    );\n\n    ////////////////\n    // Functions\n    ////////////////\n\n    /// @notice Registers a new operator and sets their fee in basis points\n    /// @param operator The address of the operator to register\n    /// @param feeBPS The fee in basis points\n    function registerOperator(address operator, uint16 feeBPS) external;\n\n    /// @notice Freezes an operator, preventing them from performing certain actions\n    /// @param operator The address of the operator to freeze\n    function freezeOperator(address operator) external;\n\n    /// @notice Gets the balance of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The balance of staked tokens\n    function balanceOf(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the voting stake of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The voting stake amount\n    function votingStake(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the total voting stake of a operator\n    /// @param operator The address of the operator\n    /// @return The total voting stake amount\n    function totalVotingStake(address operator) external view returns (uint256);\n\n    /// @notice Gets the total supply of staked tokens for a specific operator\n    /// @param operator The address of the operator\n    /// @return The total supply of staked tokens\n    function totalSupply(address operator) external view returns (uint256);\n\n    /// @notice Sets the minimum voting stake\n    /// @param minVotingStake_ The minimum voting stake\n    function setMinVotingStake(uint256 minVotingStake_) external;\n\n    /// @notice Sets the cooldown seconds for operator fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForOperatorFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the cooldown seconds for protocol fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForProtocolFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the general cooldown period in seconds\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForUnstaking(uint40 cooldownSeconds_) external;\n\n    /// @notice Initiates the cooldown period for protocol fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateProtocolFee(uint16 feeBPS) external;\n\n    /// @notice Initiates the cooldown period for operator fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateOperatorFee(uint16 feeBPS) external;\n\n    /// @notice Sets the protocol fee in basis points\n    function setProtocolFeeBPS() external;\n\n    /// @notice Sets the operator fee in basis points\n    function setOperatorFeeBPS() external;\n\n    /// @notice Claims accrued rewards for a staker\n    /// @param distributionId The distribution ID\n    /// @param to The address to send rewards to\n    /// @param operator The address of the operator\n    /// @param amount The amount of rewards to claim\n    function claimRewards(uint16 distributionId, address to, address operator, uint256 amount) external;\n\n    /// @notice Claims accrued rewards for multiple stakers in a single transaction.\n    /// @param ids Array of distribution IDs for which rewards are being claimed.\n    /// @param recipients Array of addresses to receive the claimed rewards, corresponding to each distribution ID.\n    /// @param operators Array of operator addresses associated with each reward distribution, managing the distribution rules and potentially fees.\n    /// @param amounts Array of amounts of rewards to be claimed for each distribution ID.\n    function claimRewardsBatch(\n        uint16[] calldata ids,\n        address[] calldata recipients,\n        address[] calldata operators,\n        uint256[] calldata amounts\n    ) external;\n\n    /// @notice Stakes tokens on behalf of a user\n    /// @param to The address on whose behalf tokens are being staked\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to stake\n    function stake(address to, address operator, uint256 amount) external;\n\n    /// @notice Switches voting power from one operator to another for a specified amount.\n    /// @param fromOperator The address of the current operator from which the voting power is being moved.\n    /// @param toOperator The address of the new operator to which the voting power will be moved.\n    /// @param amount The amount of voting power to transfer.\n    function switchOperator(address fromOperator, address toOperator, uint256 amount) external;\n\n    /// @notice Initiates the cooldown period for a user's staked tokens\n    /// @param operator The address of the operator\n    /// @param amountToAdd The amount of tokens to cooldown. This is additive.\n    function cooldownToUnstake(address operator, uint256 amountToAdd) external;\n\n    /// @notice Unstakes tokens and stops earning rewards\n    /// @param to The address to unstake tokens to\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to unstake\n    function unstake(address to, address operator, uint256 amount) external;\n\n    /// @notice Gets the accrued rewards for a staker within a specific distribution and operator context\n    /// @param distributionId The distribution ID for which to query rewards\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The amount of accrued rewards\n    function getAccruedRewards(uint16 distributionId, address staker, address operator)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Gets the reward balance for a specific distribution, operator, and staker combination\n    /// @param distributionId The ID of the distribution for which the reward balance is queried\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return The amount of accrued rewards\n    function rewardBalance(uint16 distributionId, address operator, address staker) external view returns (uint256);\n\n    /// Gets operator fee information\n    /// @param operator The address of the operator\n    function operatorFee(address operator)\n        external\n        view\n        returns (uint40 cooldownEndTimestamp, uint16 bps, uint16 pendingBPS);\n\n    /// @notice Checks if an operator is active based on their total voting stake.\n    /// @dev An operator is considered active if their total voting stake is at least the minimum required.\n    /// @param operator The address of the operator to check.\n    /// @return True if the operator's total voting stake is at least the minimum required, false otherwise.\n    function isActiveOperator(address operator) external view returns (bool);\n\n    /// @notice Counts the total number of active operators.\n    /// @dev Iterates through all operators and counts those that are active.\n    /// @return The total number of active operators.\n    function totalActiveOperators() external view returns (uint256);\n\n    /// @notice Calculates the activation threshold for alerts.\n    /// @dev The activation threshold is determined as two-thirds of the total number of active operators.\n    /// @return The calculated activation threshold.\n    function activationThreshold() external view returns (uint256);\n\n    /// @notice Determines if an alert is active based on the given vote count.\n    /// @dev An alert is considered active if the vote count meets or exceeds the activation threshold.\n    /// @param voteCount The number of votes to check against the activation threshold.\n    /// @return True if the vote count meets or exceeds the activation threshold, false otherwise.\n    function isActiveAlert(uint128 voteCount) external view returns (bool);\n\n    /// @notice Generates a unique key for a reward balance based on distribution ID, operator, and staker\n    /// @param distributionId The ID of the distribution\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return A unique key for querying reward balances\n    function rewardBalanceKey(uint16 distributionId, address operator, address staker)\n        external\n        pure\n        returns (bytes32);\n\n    /// @notice Converts an address to a `uint256` representation\n    /// @param operator The address to convert\n    /// @return The `uint256` representation of the address\n    function addressToUint256(address operator) external pure returns (uint256);\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IStakedMultiToken.activationThreshold', 'start_line': 2976, 'end_line': 2976, 'offset_start': 117512, 'offset_end': 117574, 'content': 'function activationThreshold() external view returns (uint256);', 'contract_name': 'IStakedMultiToken', 'contract_code': "{\n    ////////////////\n    // Events\n    ////////////////\n\n    event OperatorRegistered(address operator);\n    event Stake(address indexed from, address indexed onBehalfOf, address operator, uint256 assets);\n\n    event RewardsAccrued(address user, address operator, uint256 amount);\n    event RewardsClaimed(address indexed from, address indexed to, address operator, uint256 amount);\n\n    event CooldownToUnstake(address indexed user, address indexed operator, uint256 amount);\n    event CooldownToUpdateProtocolFee(uint16 feeBPS, uint40 cooldownEndTimestamp);\n    event CooldownToUpdateOperatorFee(address operator, uint16 feeBPS, uint40 cooldownEndTimestamp);\n\n    event Unstake(address indexed from, address indexed to, address operator, uint256 assets);\n    event SetOperatorFeeBPS(address operator, uint16 feeBPS);\n    event SetProtocolFeeBPS(uint16 feeBPS);\n\n    event SetMinVotingStake(uint256 minVotingStake);\n    event SetCooldownSecForUnstaking(uint40 cooldownSeconds);\n    event SetCooldownSecForOperatorFee(uint40 cooldownSeconds);\n    event SetCooldownSecForProtocolFee(uint40 cooldownSeconds);\n    event CollectFee(\n        uint16 distributionId, address operator, uint256 protocolFee, uint256 operatorFee, uint256 userRewards\n    );\n\n    ////////////////\n    // Functions\n    ////////////////\n\n    /// @notice Registers a new operator and sets their fee in basis points\n    /// @param operator The address of the operator to register\n    /// @param feeBPS The fee in basis points\n    function registerOperator(address operator, uint16 feeBPS) external;\n\n    /// @notice Freezes an operator, preventing them from performing certain actions\n    /// @param operator The address of the operator to freeze\n    function freezeOperator(address operator) external;\n\n    /// @notice Gets the balance of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The balance of staked tokens\n    function balanceOf(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the voting stake of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The voting stake amount\n    function votingStake(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the total voting stake of a operator\n    /// @param operator The address of the operator\n    /// @return The total voting stake amount\n    function totalVotingStake(address operator) external view returns (uint256);\n\n    /// @notice Gets the total supply of staked tokens for a specific operator\n    /// @param operator The address of the operator\n    /// @return The total supply of staked tokens\n    function totalSupply(address operator) external view returns (uint256);\n\n    /// @notice Sets the minimum voting stake\n    /// @param minVotingStake_ The minimum voting stake\n    function setMinVotingStake(uint256 minVotingStake_) external;\n\n    /// @notice Sets the cooldown seconds for operator fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForOperatorFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the cooldown seconds for protocol fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForProtocolFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the general cooldown period in seconds\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForUnstaking(uint40 cooldownSeconds_) external;\n\n    /// @notice Initiates the cooldown period for protocol fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateProtocolFee(uint16 feeBPS) external;\n\n    /// @notice Initiates the cooldown period for operator fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateOperatorFee(uint16 feeBPS) external;\n\n    /// @notice Sets the protocol fee in basis points\n    function setProtocolFeeBPS() external;\n\n    /// @notice Sets the operator fee in basis points\n    function setOperatorFeeBPS() external;\n\n    /// @notice Claims accrued rewards for a staker\n    /// @param distributionId The distribution ID\n    /// @param to The address to send rewards to\n    /// @param operator The address of the operator\n    /// @param amount The amount of rewards to claim\n    function claimRewards(uint16 distributionId, address to, address operator, uint256 amount) external;\n\n    /// @notice Claims accrued rewards for multiple stakers in a single transaction.\n    /// @param ids Array of distribution IDs for which rewards are being claimed.\n    /// @param recipients Array of addresses to receive the claimed rewards, corresponding to each distribution ID.\n    /// @param operators Array of operator addresses associated with each reward distribution, managing the distribution rules and potentially fees.\n    /// @param amounts Array of amounts of rewards to be claimed for each distribution ID.\n    function claimRewardsBatch(\n        uint16[] calldata ids,\n        address[] calldata recipients,\n        address[] calldata operators,\n        uint256[] calldata amounts\n    ) external;\n\n    /// @notice Stakes tokens on behalf of a user\n    /// @param to The address on whose behalf tokens are being staked\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to stake\n    function stake(address to, address operator, uint256 amount) external;\n\n    /// @notice Switches voting power from one operator to another for a specified amount.\n    /// @param fromOperator The address of the current operator from which the voting power is being moved.\n    /// @param toOperator The address of the new operator to which the voting power will be moved.\n    /// @param amount The amount of voting power to transfer.\n    function switchOperator(address fromOperator, address toOperator, uint256 amount) external;\n\n    /// @notice Initiates the cooldown period for a user's staked tokens\n    /// @param operator The address of the operator\n    /// @param amountToAdd The amount of tokens to cooldown. This is additive.\n    function cooldownToUnstake(address operator, uint256 amountToAdd) external;\n\n    /// @notice Unstakes tokens and stops earning rewards\n    /// @param to The address to unstake tokens to\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to unstake\n    function unstake(address to, address operator, uint256 amount) external;\n\n    /// @notice Gets the accrued rewards for a staker within a specific distribution and operator context\n    /// @param distributionId The distribution ID for which to query rewards\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The amount of accrued rewards\n    function getAccruedRewards(uint16 distributionId, address staker, address operator)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Gets the reward balance for a specific distribution, operator, and staker combination\n    /// @param distributionId The ID of the distribution for which the reward balance is queried\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return The amount of accrued rewards\n    function rewardBalance(uint16 distributionId, address operator, address staker) external view returns (uint256);\n\n    /// Gets operator fee information\n    /// @param operator The address of the operator\n    function operatorFee(address operator)\n        external\n        view\n        returns (uint40 cooldownEndTimestamp, uint16 bps, uint16 pendingBPS);\n\n    /// @notice Checks if an operator is active based on their total voting stake.\n    /// @dev An operator is considered active if their total voting stake is at least the minimum required.\n    /// @param operator The address of the operator to check.\n    /// @return True if the operator's total voting stake is at least the minimum required, false otherwise.\n    function isActiveOperator(address operator) external view returns (bool);\n\n    /// @notice Counts the total number of active operators.\n    /// @dev Iterates through all operators and counts those that are active.\n    /// @return The total number of active operators.\n    function totalActiveOperators() external view returns (uint256);\n\n    /// @notice Calculates the activation threshold for alerts.\n    /// @dev The activation threshold is determined as two-thirds of the total number of active operators.\n    /// @return The calculated activation threshold.\n    function activationThreshold() external view returns (uint256);\n\n    /// @notice Determines if an alert is active based on the given vote count.\n    /// @dev An alert is considered active if the vote count meets or exceeds the activation threshold.\n    /// @param voteCount The number of votes to check against the activation threshold.\n    /// @return True if the vote count meets or exceeds the activation threshold, false otherwise.\n    function isActiveAlert(uint128 voteCount) external view returns (bool);\n\n    /// @notice Generates a unique key for a reward balance based on distribution ID, operator, and staker\n    /// @param distributionId The ID of the distribution\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return A unique key for querying reward balances\n    function rewardBalanceKey(uint16 distributionId, address operator, address staker)\n        external\n        pure\n        returns (bytes32);\n\n    /// @notice Converts an address to a `uint256` representation\n    /// @param operator The address to convert\n    /// @return The `uint256` representation of the address\n    function addressToUint256(address operator) external pure returns (uint256);\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IStakedMultiToken.isActiveAlert', 'start_line': 2982, 'end_line': 2982, 'offset_start': 117952, 'offset_end': 118022, 'content': 'function isActiveAlert(uint128 voteCount) external view returns (bool);', 'contract_name': 'IStakedMultiToken', 'contract_code': "{\n    ////////////////\n    // Events\n    ////////////////\n\n    event OperatorRegistered(address operator);\n    event Stake(address indexed from, address indexed onBehalfOf, address operator, uint256 assets);\n\n    event RewardsAccrued(address user, address operator, uint256 amount);\n    event RewardsClaimed(address indexed from, address indexed to, address operator, uint256 amount);\n\n    event CooldownToUnstake(address indexed user, address indexed operator, uint256 amount);\n    event CooldownToUpdateProtocolFee(uint16 feeBPS, uint40 cooldownEndTimestamp);\n    event CooldownToUpdateOperatorFee(address operator, uint16 feeBPS, uint40 cooldownEndTimestamp);\n\n    event Unstake(address indexed from, address indexed to, address operator, uint256 assets);\n    event SetOperatorFeeBPS(address operator, uint16 feeBPS);\n    event SetProtocolFeeBPS(uint16 feeBPS);\n\n    event SetMinVotingStake(uint256 minVotingStake);\n    event SetCooldownSecForUnstaking(uint40 cooldownSeconds);\n    event SetCooldownSecForOperatorFee(uint40 cooldownSeconds);\n    event SetCooldownSecForProtocolFee(uint40 cooldownSeconds);\n    event CollectFee(\n        uint16 distributionId, address operator, uint256 protocolFee, uint256 operatorFee, uint256 userRewards\n    );\n\n    ////////////////\n    // Functions\n    ////////////////\n\n    /// @notice Registers a new operator and sets their fee in basis points\n    /// @param operator The address of the operator to register\n    /// @param feeBPS The fee in basis points\n    function registerOperator(address operator, uint16 feeBPS) external;\n\n    /// @notice Freezes an operator, preventing them from performing certain actions\n    /// @param operator The address of the operator to freeze\n    function freezeOperator(address operator) external;\n\n    /// @notice Gets the balance of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The balance of staked tokens\n    function balanceOf(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the voting stake of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The voting stake amount\n    function votingStake(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the total voting stake of a operator\n    /// @param operator The address of the operator\n    /// @return The total voting stake amount\n    function totalVotingStake(address operator) external view returns (uint256);\n\n    /// @notice Gets the total supply of staked tokens for a specific operator\n    /// @param operator The address of the operator\n    /// @return The total supply of staked tokens\n    function totalSupply(address operator) external view returns (uint256);\n\n    /// @notice Sets the minimum voting stake\n    /// @param minVotingStake_ The minimum voting stake\n    function setMinVotingStake(uint256 minVotingStake_) external;\n\n    /// @notice Sets the cooldown seconds for operator fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForOperatorFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the cooldown seconds for protocol fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForProtocolFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the general cooldown period in seconds\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForUnstaking(uint40 cooldownSeconds_) external;\n\n    /// @notice Initiates the cooldown period for protocol fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateProtocolFee(uint16 feeBPS) external;\n\n    /// @notice Initiates the cooldown period for operator fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateOperatorFee(uint16 feeBPS) external;\n\n    /// @notice Sets the protocol fee in basis points\n    function setProtocolFeeBPS() external;\n\n    /// @notice Sets the operator fee in basis points\n    function setOperatorFeeBPS() external;\n\n    /// @notice Claims accrued rewards for a staker\n    /// @param distributionId The distribution ID\n    /// @param to The address to send rewards to\n    /// @param operator The address of the operator\n    /// @param amount The amount of rewards to claim\n    function claimRewards(uint16 distributionId, address to, address operator, uint256 amount) external;\n\n    /// @notice Claims accrued rewards for multiple stakers in a single transaction.\n    /// @param ids Array of distribution IDs for which rewards are being claimed.\n    /// @param recipients Array of addresses to receive the claimed rewards, corresponding to each distribution ID.\n    /// @param operators Array of operator addresses associated with each reward distribution, managing the distribution rules and potentially fees.\n    /// @param amounts Array of amounts of rewards to be claimed for each distribution ID.\n    function claimRewardsBatch(\n        uint16[] calldata ids,\n        address[] calldata recipients,\n        address[] calldata operators,\n        uint256[] calldata amounts\n    ) external;\n\n    /// @notice Stakes tokens on behalf of a user\n    /// @param to The address on whose behalf tokens are being staked\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to stake\n    function stake(address to, address operator, uint256 amount) external;\n\n    /// @notice Switches voting power from one operator to another for a specified amount.\n    /// @param fromOperator The address of the current operator from which the voting power is being moved.\n    /// @param toOperator The address of the new operator to which the voting power will be moved.\n    /// @param amount The amount of voting power to transfer.\n    function switchOperator(address fromOperator, address toOperator, uint256 amount) external;\n\n    /// @notice Initiates the cooldown period for a user's staked tokens\n    /// @param operator The address of the operator\n    /// @param amountToAdd The amount of tokens to cooldown. This is additive.\n    function cooldownToUnstake(address operator, uint256 amountToAdd) external;\n\n    /// @notice Unstakes tokens and stops earning rewards\n    /// @param to The address to unstake tokens to\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to unstake\n    function unstake(address to, address operator, uint256 amount) external;\n\n    /// @notice Gets the accrued rewards for a staker within a specific distribution and operator context\n    /// @param distributionId The distribution ID for which to query rewards\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The amount of accrued rewards\n    function getAccruedRewards(uint16 distributionId, address staker, address operator)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Gets the reward balance for a specific distribution, operator, and staker combination\n    /// @param distributionId The ID of the distribution for which the reward balance is queried\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return The amount of accrued rewards\n    function rewardBalance(uint16 distributionId, address operator, address staker) external view returns (uint256);\n\n    /// Gets operator fee information\n    /// @param operator The address of the operator\n    function operatorFee(address operator)\n        external\n        view\n        returns (uint40 cooldownEndTimestamp, uint16 bps, uint16 pendingBPS);\n\n    /// @notice Checks if an operator is active based on their total voting stake.\n    /// @dev An operator is considered active if their total voting stake is at least the minimum required.\n    /// @param operator The address of the operator to check.\n    /// @return True if the operator's total voting stake is at least the minimum required, false otherwise.\n    function isActiveOperator(address operator) external view returns (bool);\n\n    /// @notice Counts the total number of active operators.\n    /// @dev Iterates through all operators and counts those that are active.\n    /// @return The total number of active operators.\n    function totalActiveOperators() external view returns (uint256);\n\n    /// @notice Calculates the activation threshold for alerts.\n    /// @dev The activation threshold is determined as two-thirds of the total number of active operators.\n    /// @return The calculated activation threshold.\n    function activationThreshold() external view returns (uint256);\n\n    /// @notice Determines if an alert is active based on the given vote count.\n    /// @dev An alert is considered active if the vote count meets or exceeds the activation threshold.\n    /// @param voteCount The number of votes to check against the activation threshold.\n    /// @return True if the vote count meets or exceeds the activation threshold, false otherwise.\n    function isActiveAlert(uint128 voteCount) external view returns (bool);\n\n    /// @notice Generates a unique key for a reward balance based on distribution ID, operator, and staker\n    /// @param distributionId The ID of the distribution\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return A unique key for querying reward balances\n    function rewardBalanceKey(uint16 distributionId, address operator, address staker)\n        external\n        pure\n        returns (bytes32);\n\n    /// @notice Converts an address to a `uint256` representation\n    /// @param operator The address to convert\n    /// @return The `uint256` representation of the address\n    function addressToUint256(address operator) external pure returns (uint256);\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IStakedMultiToken.rewardBalanceKey', 'start_line': 2989, 'end_line': 2992, 'offset_start': 118351, 'offset_end': 118489, 'content': 'function rewardBalanceKey(uint16 distributionId, address operator, address staker)\n        external\n        pure\n        returns (bytes32);', 'contract_name': 'IStakedMultiToken', 'contract_code': "{\n    ////////////////\n    // Events\n    ////////////////\n\n    event OperatorRegistered(address operator);\n    event Stake(address indexed from, address indexed onBehalfOf, address operator, uint256 assets);\n\n    event RewardsAccrued(address user, address operator, uint256 amount);\n    event RewardsClaimed(address indexed from, address indexed to, address operator, uint256 amount);\n\n    event CooldownToUnstake(address indexed user, address indexed operator, uint256 amount);\n    event CooldownToUpdateProtocolFee(uint16 feeBPS, uint40 cooldownEndTimestamp);\n    event CooldownToUpdateOperatorFee(address operator, uint16 feeBPS, uint40 cooldownEndTimestamp);\n\n    event Unstake(address indexed from, address indexed to, address operator, uint256 assets);\n    event SetOperatorFeeBPS(address operator, uint16 feeBPS);\n    event SetProtocolFeeBPS(uint16 feeBPS);\n\n    event SetMinVotingStake(uint256 minVotingStake);\n    event SetCooldownSecForUnstaking(uint40 cooldownSeconds);\n    event SetCooldownSecForOperatorFee(uint40 cooldownSeconds);\n    event SetCooldownSecForProtocolFee(uint40 cooldownSeconds);\n    event CollectFee(\n        uint16 distributionId, address operator, uint256 protocolFee, uint256 operatorFee, uint256 userRewards\n    );\n\n    ////////////////\n    // Functions\n    ////////////////\n\n    /// @notice Registers a new operator and sets their fee in basis points\n    /// @param operator The address of the operator to register\n    /// @param feeBPS The fee in basis points\n    function registerOperator(address operator, uint16 feeBPS) external;\n\n    /// @notice Freezes an operator, preventing them from performing certain actions\n    /// @param operator The address of the operator to freeze\n    function freezeOperator(address operator) external;\n\n    /// @notice Gets the balance of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The balance of staked tokens\n    function balanceOf(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the voting stake of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The voting stake amount\n    function votingStake(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the total voting stake of a operator\n    /// @param operator The address of the operator\n    /// @return The total voting stake amount\n    function totalVotingStake(address operator) external view returns (uint256);\n\n    /// @notice Gets the total supply of staked tokens for a specific operator\n    /// @param operator The address of the operator\n    /// @return The total supply of staked tokens\n    function totalSupply(address operator) external view returns (uint256);\n\n    /// @notice Sets the minimum voting stake\n    /// @param minVotingStake_ The minimum voting stake\n    function setMinVotingStake(uint256 minVotingStake_) external;\n\n    /// @notice Sets the cooldown seconds for operator fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForOperatorFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the cooldown seconds for protocol fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForProtocolFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the general cooldown period in seconds\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForUnstaking(uint40 cooldownSeconds_) external;\n\n    /// @notice Initiates the cooldown period for protocol fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateProtocolFee(uint16 feeBPS) external;\n\n    /// @notice Initiates the cooldown period for operator fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateOperatorFee(uint16 feeBPS) external;\n\n    /// @notice Sets the protocol fee in basis points\n    function setProtocolFeeBPS() external;\n\n    /// @notice Sets the operator fee in basis points\n    function setOperatorFeeBPS() external;\n\n    /// @notice Claims accrued rewards for a staker\n    /// @param distributionId The distribution ID\n    /// @param to The address to send rewards to\n    /// @param operator The address of the operator\n    /// @param amount The amount of rewards to claim\n    function claimRewards(uint16 distributionId, address to, address operator, uint256 amount) external;\n\n    /// @notice Claims accrued rewards for multiple stakers in a single transaction.\n    /// @param ids Array of distribution IDs for which rewards are being claimed.\n    /// @param recipients Array of addresses to receive the claimed rewards, corresponding to each distribution ID.\n    /// @param operators Array of operator addresses associated with each reward distribution, managing the distribution rules and potentially fees.\n    /// @param amounts Array of amounts of rewards to be claimed for each distribution ID.\n    function claimRewardsBatch(\n        uint16[] calldata ids,\n        address[] calldata recipients,\n        address[] calldata operators,\n        uint256[] calldata amounts\n    ) external;\n\n    /// @notice Stakes tokens on behalf of a user\n    /// @param to The address on whose behalf tokens are being staked\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to stake\n    function stake(address to, address operator, uint256 amount) external;\n\n    /// @notice Switches voting power from one operator to another for a specified amount.\n    /// @param fromOperator The address of the current operator from which the voting power is being moved.\n    /// @param toOperator The address of the new operator to which the voting power will be moved.\n    /// @param amount The amount of voting power to transfer.\n    function switchOperator(address fromOperator, address toOperator, uint256 amount) external;\n\n    /// @notice Initiates the cooldown period for a user's staked tokens\n    /// @param operator The address of the operator\n    /// @param amountToAdd The amount of tokens to cooldown. This is additive.\n    function cooldownToUnstake(address operator, uint256 amountToAdd) external;\n\n    /// @notice Unstakes tokens and stops earning rewards\n    /// @param to The address to unstake tokens to\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to unstake\n    function unstake(address to, address operator, uint256 amount) external;\n\n    /// @notice Gets the accrued rewards for a staker within a specific distribution and operator context\n    /// @param distributionId The distribution ID for which to query rewards\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The amount of accrued rewards\n    function getAccruedRewards(uint16 distributionId, address staker, address operator)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Gets the reward balance for a specific distribution, operator, and staker combination\n    /// @param distributionId The ID of the distribution for which the reward balance is queried\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return The amount of accrued rewards\n    function rewardBalance(uint16 distributionId, address operator, address staker) external view returns (uint256);\n\n    /// Gets operator fee information\n    /// @param operator The address of the operator\n    function operatorFee(address operator)\n        external\n        view\n        returns (uint40 cooldownEndTimestamp, uint16 bps, uint16 pendingBPS);\n\n    /// @notice Checks if an operator is active based on their total voting stake.\n    /// @dev An operator is considered active if their total voting stake is at least the minimum required.\n    /// @param operator The address of the operator to check.\n    /// @return True if the operator's total voting stake is at least the minimum required, false otherwise.\n    function isActiveOperator(address operator) external view returns (bool);\n\n    /// @notice Counts the total number of active operators.\n    /// @dev Iterates through all operators and counts those that are active.\n    /// @return The total number of active operators.\n    function totalActiveOperators() external view returns (uint256);\n\n    /// @notice Calculates the activation threshold for alerts.\n    /// @dev The activation threshold is determined as two-thirds of the total number of active operators.\n    /// @return The calculated activation threshold.\n    function activationThreshold() external view returns (uint256);\n\n    /// @notice Determines if an alert is active based on the given vote count.\n    /// @dev An alert is considered active if the vote count meets or exceeds the activation threshold.\n    /// @param voteCount The number of votes to check against the activation threshold.\n    /// @return True if the vote count meets or exceeds the activation threshold, false otherwise.\n    function isActiveAlert(uint128 voteCount) external view returns (bool);\n\n    /// @notice Generates a unique key for a reward balance based on distribution ID, operator, and staker\n    /// @param distributionId The ID of the distribution\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return A unique key for querying reward balances\n    function rewardBalanceKey(uint16 distributionId, address operator, address staker)\n        external\n        pure\n        returns (bytes32);\n\n    /// @notice Converts an address to a `uint256` representation\n    /// @param operator The address to convert\n    /// @return The `uint256` representation of the address\n    function addressToUint256(address operator) external pure returns (uint256);\n}", 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
{'type': 'FunctionDefinition', 'name': 'IStakedMultiToken.addressToUint256', 'start_line': 2997, 'end_line': 2997, 'offset_start': 118669, 'offset_end': 118744, 'content': 'function addressToUint256(address operator) external pure returns (uint256);', 'contract_name': 'IStakedMultiToken', 'contract_code': "{\n    ////////////////\n    // Events\n    ////////////////\n\n    event OperatorRegistered(address operator);\n    event Stake(address indexed from, address indexed onBehalfOf, address operator, uint256 assets);\n\n    event RewardsAccrued(address user, address operator, uint256 amount);\n    event RewardsClaimed(address indexed from, address indexed to, address operator, uint256 amount);\n\n    event CooldownToUnstake(address indexed user, address indexed operator, uint256 amount);\n    event CooldownToUpdateProtocolFee(uint16 feeBPS, uint40 cooldownEndTimestamp);\n    event CooldownToUpdateOperatorFee(address operator, uint16 feeBPS, uint40 cooldownEndTimestamp);\n\n    event Unstake(address indexed from, address indexed to, address operator, uint256 assets);\n    event SetOperatorFeeBPS(address operator, uint16 feeBPS);\n    event SetProtocolFeeBPS(uint16 feeBPS);\n\n    event SetMinVotingStake(uint256 minVotingStake);\n    event SetCooldownSecForUnstaking(uint40 cooldownSeconds);\n    event SetCooldownSecForOperatorFee(uint40 cooldownSeconds);\n    event SetCooldownSecForProtocolFee(uint40 cooldownSeconds);\n    event CollectFee(\n        uint16 distributionId, address operator, uint256 protocolFee, uint256 operatorFee, uint256 userRewards\n    );\n\n    ////////////////\n    // Functions\n    ////////////////\n\n    /// @notice Registers a new operator and sets their fee in basis points\n    /// @param operator The address of the operator to register\n    /// @param feeBPS The fee in basis points\n    function registerOperator(address operator, uint16 feeBPS) external;\n\n    /// @notice Freezes an operator, preventing them from performing certain actions\n    /// @param operator The address of the operator to freeze\n    function freezeOperator(address operator) external;\n\n    /// @notice Gets the balance of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The balance of staked tokens\n    function balanceOf(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the voting stake of a staker for a specific operator\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The voting stake amount\n    function votingStake(address staker, address operator) external view returns (uint256);\n\n    /// @notice Gets the total voting stake of a operator\n    /// @param operator The address of the operator\n    /// @return The total voting stake amount\n    function totalVotingStake(address operator) external view returns (uint256);\n\n    /// @notice Gets the total supply of staked tokens for a specific operator\n    /// @param operator The address of the operator\n    /// @return The total supply of staked tokens\n    function totalSupply(address operator) external view returns (uint256);\n\n    /// @notice Sets the minimum voting stake\n    /// @param minVotingStake_ The minimum voting stake\n    function setMinVotingStake(uint256 minVotingStake_) external;\n\n    /// @notice Sets the cooldown seconds for operator fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForOperatorFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the cooldown seconds for protocol fee updates\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForProtocolFee(uint40 cooldownSeconds_) external;\n\n    /// @notice Sets the general cooldown period in seconds\n    /// @param cooldownSeconds_ The cooldown period in seconds\n    function setCooldownSecForUnstaking(uint40 cooldownSeconds_) external;\n\n    /// @notice Initiates the cooldown period for protocol fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateProtocolFee(uint16 feeBPS) external;\n\n    /// @notice Initiates the cooldown period for operator fee updates\n    /// @param feeBPS The fee in basis points\n    function cooldownToUpdateOperatorFee(uint16 feeBPS) external;\n\n    /// @notice Sets the protocol fee in basis points\n    function setProtocolFeeBPS() external;\n\n    /// @notice Sets the operator fee in basis points\n    function setOperatorFeeBPS() external;\n\n    /// @notice Claims accrued rewards for a staker\n    /// @param distributionId The distribution ID\n    /// @param to The address to send rewards to\n    /// @param operator The address of the operator\n    /// @param amount The amount of rewards to claim\n    function claimRewards(uint16 distributionId, address to, address operator, uint256 amount) external;\n\n    /// @notice Claims accrued rewards for multiple stakers in a single transaction.\n    /// @param ids Array of distribution IDs for which rewards are being claimed.\n    /// @param recipients Array of addresses to receive the claimed rewards, corresponding to each distribution ID.\n    /// @param operators Array of operator addresses associated with each reward distribution, managing the distribution rules and potentially fees.\n    /// @param amounts Array of amounts of rewards to be claimed for each distribution ID.\n    function claimRewardsBatch(\n        uint16[] calldata ids,\n        address[] calldata recipients,\n        address[] calldata operators,\n        uint256[] calldata amounts\n    ) external;\n\n    /// @notice Stakes tokens on behalf of a user\n    /// @param to The address on whose behalf tokens are being staked\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to stake\n    function stake(address to, address operator, uint256 amount) external;\n\n    /// @notice Switches voting power from one operator to another for a specified amount.\n    /// @param fromOperator The address of the current operator from which the voting power is being moved.\n    /// @param toOperator The address of the new operator to which the voting power will be moved.\n    /// @param amount The amount of voting power to transfer.\n    function switchOperator(address fromOperator, address toOperator, uint256 amount) external;\n\n    /// @notice Initiates the cooldown period for a user's staked tokens\n    /// @param operator The address of the operator\n    /// @param amountToAdd The amount of tokens to cooldown. This is additive.\n    function cooldownToUnstake(address operator, uint256 amountToAdd) external;\n\n    /// @notice Unstakes tokens and stops earning rewards\n    /// @param to The address to unstake tokens to\n    /// @param operator The address of the operator\n    /// @param amount The amount of tokens to unstake\n    function unstake(address to, address operator, uint256 amount) external;\n\n    /// @notice Gets the accrued rewards for a staker within a specific distribution and operator context\n    /// @param distributionId The distribution ID for which to query rewards\n    /// @param staker The address of the staker\n    /// @param operator The address of the operator\n    /// @return The amount of accrued rewards\n    function getAccruedRewards(uint16 distributionId, address staker, address operator)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Gets the reward balance for a specific distribution, operator, and staker combination\n    /// @param distributionId The ID of the distribution for which the reward balance is queried\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return The amount of accrued rewards\n    function rewardBalance(uint16 distributionId, address operator, address staker) external view returns (uint256);\n\n    /// Gets operator fee information\n    /// @param operator The address of the operator\n    function operatorFee(address operator)\n        external\n        view\n        returns (uint40 cooldownEndTimestamp, uint16 bps, uint16 pendingBPS);\n\n    /// @notice Checks if an operator is active based on their total voting stake.\n    /// @dev An operator is considered active if their total voting stake is at least the minimum required.\n    /// @param operator The address of the operator to check.\n    /// @return True if the operator's total voting stake is at least the minimum required, false otherwise.\n    function isActiveOperator(address operator) external view returns (bool);\n\n    /// @notice Counts the total number of active operators.\n    /// @dev Iterates through all operators and counts those that are active.\n    /// @return The total number of active operators.\n    function totalActiveOperators() external view returns (uint256);\n\n    /// @notice Calculates the activation threshold for alerts.\n    /// @dev The activation threshold is determined as two-thirds of the total number of active operators.\n    /// @return The calculated activation threshold.\n    function activationThreshold() external view returns (uint256);\n\n    /// @notice Determines if an alert is active based on the given vote count.\n    /// @dev An alert is considered active if the vote count meets or exceeds the activation threshold.\n    /// @param voteCount The number of votes to check against the activation threshold.\n    /// @return True if the vote count meets or exceeds the activation threshold, false otherwise.\n    function isActiveAlert(uint128 voteCount) external view returns (bool);\n\n    /// @notice Generates a unique key for a reward balance based on distribution ID, operator, and staker\n    /// @param distributionId The ID of the distribution\n    /// @param operator The address of the operator\n    /// @param staker The address of the staker\n    /// @return A unique key for querying reward balances\n    function rewardBalanceKey(uint16 distributionId, address operator, address staker)\n        external\n        pure\n        returns (bytes32);\n\n    /// @notice Converts an address to a `uint256` representation\n    /// @param operator The address to convert\n    /// @return The `uint256` representation of the address\n    function addressToUint256(address operator) external pure returns (uint256);\n}", 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0xf96798f49936efb1a56f99ceae924b6b8359affb/0xf96798f49936efb1a56f99ceae924b6b8359affb.sol'}
