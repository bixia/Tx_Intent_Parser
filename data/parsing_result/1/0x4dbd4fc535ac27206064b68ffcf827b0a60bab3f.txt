{'type': 'FunctionDefinition', 'name': 'AddressAliasHelper.applyL1ToL2Alias', 'start_line': 14, 'end_line': 18, 'offset_start': 591, 'offset_end': 776, 'content': 'function applyL1ToL2Alias(address l1Address) internal pure returns (address l2Address) {\n        unchecked {\n            l2Address = address(uint160(l1Address) + OFFSET);\n        }\n    }', 'contract_name': 'AddressAliasHelper', 'contract_code': '{\n    uint160 internal constant OFFSET = uint160(0x1111000000000000000000000000000000001111);\n\n    /// @notice Utility function that converts the address in the L1 that submitted a tx to\n    /// the inbox to the msg.sender viewed in the L2\n    /// @param l1Address the address in the L1 that triggered the tx to L2\n    /// @return l2Address L2 address as viewed in msg.sender\n    function applyL1ToL2Alias(address l1Address) internal pure returns (address l2Address) {\n        unchecked {\n            l2Address = address(uint160(l1Address) + OFFSET);\n        }\n    }\n\n    /// @notice Utility function that converts the msg.sender viewed in the L2 to the\n    /// address in the L1 that submitted a tx to the inbox\n    /// @param l2Address L2 address as viewed in msg.sender\n    /// @return l1Address the address in the L1 that triggered the tx to L2\n    function undoL1ToL2Alias(address l2Address) internal pure returns (address l1Address) {\n        unchecked {\n            l1Address = address(uint160(l2Address) - OFFSET);\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'AddressAliasHelper.undoL1ToL2Alias', 'start_line': 24, 'end_line': 28, 'offset_start': 1064, 'offset_end': 1248, 'content': 'function undoL1ToL2Alias(address l2Address) internal pure returns (address l1Address) {\n        unchecked {\n            l1Address = address(uint160(l2Address) - OFFSET);\n        }\n    }', 'contract_name': 'AddressAliasHelper', 'contract_code': '{\n    uint160 internal constant OFFSET = uint160(0x1111000000000000000000000000000000001111);\n\n    /// @notice Utility function that converts the address in the L1 that submitted a tx to\n    /// the inbox to the msg.sender viewed in the L2\n    /// @param l1Address the address in the L1 that triggered the tx to L2\n    /// @return l2Address L2 address as viewed in msg.sender\n    function applyL1ToL2Alias(address l1Address) internal pure returns (address l2Address) {\n        unchecked {\n            l2Address = address(uint160(l1Address) + OFFSET);\n        }\n    }\n\n    /// @notice Utility function that converts the msg.sender viewed in the L2 to the\n    /// address in the L1 that submitted a tx to the inbox\n    /// @param l2Address L2 address as viewed in msg.sender\n    /// @return l1Address the address in the L1 that triggered the tx to L2\n    function undoL1ToL2Alias(address l2Address) internal pure returns (address l1Address) {\n        unchecked {\n            l1Address = address(uint160(l2Address) - OFFSET);\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IOwnable.owner', 'start_line': 55, 'end_line': 55, 'offset_start': 2207, 'offset_end': 2255, 'content': 'function owner() external view returns (address);', 'contract_name': 'IOwnable', 'contract_code': '{\n    function owner() external view returns (address);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IGasRefunder.onGasSpent', 'start_line': 83, 'end_line': 87, 'offset_start': 3108, 'offset_end': 3253, 'content': 'function onGasSpent(\n        address payable spender,\n        uint256 gasUsed,\n        uint256 calldataSize\n    ) external returns (bool success);', 'contract_name': 'IGasRefunder', 'contract_code': '{\n    function onGasSpent(\n        address payable spender,\n        uint256 gasUsed,\n        uint256 calldataSize\n    ) external returns (bool success);\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'Messages.messageHash', 'start_line': 125, 'end_line': 146, 'offset_start': 4996, 'offset_end': 5571, 'content': 'function messageHash(\n        uint8 kind,\n        address sender,\n        uint64 blockNumber,\n        uint64 timestamp,\n        uint256 inboxSeqNum,\n        uint256 baseFeeL1,\n        bytes32 messageDataHash\n    ) internal pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(\n                    kind,\n                    sender,\n                    blockNumber,\n                    timestamp,\n                    inboxSeqNum,\n                    baseFeeL1,\n                    messageDataHash\n                )\n            );\n    }', 'contract_name': 'Messages', 'contract_code': '{\n    function messageHash(\n        uint8 kind,\n        address sender,\n        uint64 blockNumber,\n        uint64 timestamp,\n        uint256 inboxSeqNum,\n        uint256 baseFeeL1,\n        bytes32 messageDataHash\n    ) internal pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(\n                    kind,\n                    sender,\n                    blockNumber,\n                    timestamp,\n                    inboxSeqNum,\n                    baseFeeL1,\n                    messageDataHash\n                )\n            );\n    }\n\n    function accumulateInboxMessage(bytes32 prevAcc, bytes32 message)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(prevAcc, message));\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'Messages.accumulateInboxMessage', 'start_line': 148, 'end_line': 154, 'offset_start': 5578, 'offset_end': 5772, 'content': 'function accumulateInboxMessage(bytes32 prevAcc, bytes32 message)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(prevAcc, message));\n    }', 'contract_name': 'Messages', 'contract_code': '{\n    function messageHash(\n        uint8 kind,\n        address sender,\n        uint64 blockNumber,\n        uint64 timestamp,\n        uint256 inboxSeqNum,\n        uint256 baseFeeL1,\n        bytes32 messageDataHash\n    ) internal pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(\n                    kind,\n                    sender,\n                    blockNumber,\n                    timestamp,\n                    inboxSeqNum,\n                    baseFeeL1,\n                    messageDataHash\n                )\n            );\n    }\n\n    function accumulateInboxMessage(bytes32 prevAcc, bytes32 message)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(prevAcc, message));\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'Inbox.setAllowList', 'start_line': 426, 'end_line': 433, 'offset_start': 15122, 'offset_end': 15439, 'content': 'function setAllowList(address[] memory user, bool[] memory val) external onlyRollupOrOwner {\n        require(user.length == val.length, "INVALID_INPUT");\n\n        for (uint256 i = 0; i < user.length; i++) {\n            isAllowed[user[i]] = val[i];\n            emit AllowListAddressSet(user[i], val[i]);\n        }\n    }', 'contract_name': 'Inbox', 'contract_code': '{\n    IBridge public bridge;\n    ISequencerInbox public sequencerInbox;\n\n    /// ------------------------------------ allow list start ------------------------------------ ///\n\n    bool public allowListEnabled;\n    mapping(address => bool) public isAllowed;\n\n    event AllowListAddressSet(address indexed user, bool val);\n    event AllowListEnabledUpdated(bool isEnabled);\n\n    function setAllowList(address[] memory user, bool[] memory val) external onlyRollupOrOwner {\n        require(user.length == val.length, "INVALID_INPUT");\n\n        for (uint256 i = 0; i < user.length; i++) {\n            isAllowed[user[i]] = val[i];\n            emit AllowListAddressSet(user[i], val[i]);\n        }\n    }\n\n    function setAllowListEnabled(bool _allowListEnabled) external onlyRollupOrOwner {\n        require(_allowListEnabled != allowListEnabled, "ALREADY_SET");\n        allowListEnabled = _allowListEnabled;\n        emit AllowListEnabledUpdated(_allowListEnabled);\n    }\n\n    /// @dev this modifier checks the tx.origin instead of msg.sender for convenience (ie it allows\n    /// allowed users to interact with the token bridge without needing the token bridge to be allowList aware).\n    /// this modifier is not intended to use to be used for security (since this opens the allowList to\n    /// a smart contract phishing risk).\n    modifier onlyAllowed() {\n        // solhint-disable-next-line avoid-tx-origin\n        if (allowListEnabled && !isAllowed[tx.origin]) revert NotAllowedOrigin(tx.origin);\n        _;\n    }\n\n    /// ------------------------------------ allow list end ------------------------------------ ///\n\n    modifier onlyRollupOrOwner() {\n        IOwnable rollup = bridge.rollup();\n        if (msg.sender != address(rollup)) {\n            address rollupOwner = rollup.owner();\n            if (msg.sender != rollupOwner) {\n                revert NotRollupOrOwner(msg.sender, address(rollup), rollupOwner);\n            }\n        }\n        _;\n    }\n\n    uint256 internal immutable deployTimeChainId = block.chainid;\n\n    function _chainIdChanged() internal view returns (bool) {\n        return deployTimeChainId != block.chainid;\n    }\n\n    /// @inheritdoc IInbox\n    function pause() external onlyRollupOrOwner {\n        _pause();\n    }\n\n    /// @inheritdoc IInbox\n    function unpause() external onlyRollupOrOwner {\n        _unpause();\n    }\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox)\n        external\n        initializer\n        onlyDelegated\n    {\n        bridge = _bridge;\n        sequencerInbox = _sequencerInbox;\n        allowListEnabled = false;\n        __Pausable_init();\n    }\n\n    /// @inheritdoc IInbox\n    function postUpgradeInit(IBridge) external onlyDelegated onlyProxyOwner {}\n\n    /// @inheritdoc IInbox\n    function sendL2MessageFromOrigin(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        if (messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(L2_MSG, msg.sender, keccak256(messageData));\n        emit InboxMessageDeliveredFromOrigin(msgNum);\n        return msgNum;\n    }\n\n    /// @inheritdoc IInbox\n    function sendL2Message(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        return _deliverMessage(L2_MSG, msg.sender, messageData);\n    }\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(address(100))), // ArbSys address\n                    value,\n                    abi.encode(ArbSys.withdrawEth.selector, withdrawTo)\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        public\n        view\n        returns (uint256)\n    {\n        // Use current block basefee if baseFee parameter is 0\n        return (1400 + 6 * dataLength) * (baseFee == 0 ? block.basefee : baseFee);\n    }\n\n    /// @inheritdoc IInbox\n    function depositEth() public payable whenNotPaused onlyAllowed returns (uint256) {\n        address dest = msg.sender;\n\n        // solhint-disable-next-line avoid-tx-origin\n        if (AddressUpgradeable.isContract(msg.sender) || tx.origin != msg.sender) {\n            // isContract check fails if this function is called during a contract\'s constructor.\n            dest = AddressAliasHelper.applyL1ToL2Alias(msg.sender);\n        }\n\n        return\n            _deliverMessage(\n                L1MessageType_ethDeposit,\n                msg.sender,\n                abi.encodePacked(dest, msg.value)\n            );\n    }\n\n    /// @notice deprecated in favour of depositEth with no parameters\n    function depositEth(uint256) external payable whenNotPaused onlyAllowed returns (uint256) {\n        return depositEth();\n    }\n\n    /**\n     * @notice deprecated in favour of unsafeCreateRetryableTicket\n     * @dev deprecated in favour of unsafeCreateRetryableTicket\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user\'s L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user\'s L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicketNoRefundAliasRewrite(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) public payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        // arbos will discard retryable with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                msg.sender,\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    /// @notice This is an one-time-exception to resolve a misconfiguration of Uniswap Arbitrum deployment\n    ///         Only the Uniswap L1 Timelock may call this function and it is allowed to create a crosschain\n    ///         retryable ticket without address aliasing. More info here:\n    ///         https://gov.uniswap.org/t/consensus-check-fix-the-cross-chain-messaging-bridge-on-arbitrum/18547\n    /// @dev    This function will be removed in future releases\n    function uniswapCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // this can only be called by UNISWAP_L1_TIMELOCK\n        require(msg.sender == UNISWAP_L1_TIMELOCK, "NOT_UNISWAP_L1_TIMELOCK");\n        // the retryable can only call UNISWAP_L2_FACTORY\n        require(to == UNISWAP_L2_FACTORY, "NOT_TO_UNISWAP_L2_FACTORY");\n\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    function _deliverMessage(\n        uint8 _kind,\n        address _sender,\n        bytes memory _messageData\n    ) internal returns (uint256) {\n        if (_messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(_messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(_kind, _sender, keccak256(_messageData));\n        emit InboxMessageDelivered(msgNum, _messageData);\n        return msgNum;\n    }\n\n    function deliverToBridge(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) internal returns (uint256) {\n        return\n            bridge.enqueueDelayedMessage{value: msg.value}(\n                kind,\n                AddressAliasHelper.applyL1ToL2Alias(sender),\n                messageDataHash\n            );\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'Inbox.setAllowListEnabled', 'start_line': 435, 'end_line': 439, 'offset_start': 15446, 'offset_end': 15706, 'content': 'function setAllowListEnabled(bool _allowListEnabled) external onlyRollupOrOwner {\n        require(_allowListEnabled != allowListEnabled, "ALREADY_SET");\n        allowListEnabled = _allowListEnabled;\n        emit AllowListEnabledUpdated(_allowListEnabled);\n    }', 'contract_name': 'Inbox', 'contract_code': '{\n    IBridge public bridge;\n    ISequencerInbox public sequencerInbox;\n\n    /// ------------------------------------ allow list start ------------------------------------ ///\n\n    bool public allowListEnabled;\n    mapping(address => bool) public isAllowed;\n\n    event AllowListAddressSet(address indexed user, bool val);\n    event AllowListEnabledUpdated(bool isEnabled);\n\n    function setAllowList(address[] memory user, bool[] memory val) external onlyRollupOrOwner {\n        require(user.length == val.length, "INVALID_INPUT");\n\n        for (uint256 i = 0; i < user.length; i++) {\n            isAllowed[user[i]] = val[i];\n            emit AllowListAddressSet(user[i], val[i]);\n        }\n    }\n\n    function setAllowListEnabled(bool _allowListEnabled) external onlyRollupOrOwner {\n        require(_allowListEnabled != allowListEnabled, "ALREADY_SET");\n        allowListEnabled = _allowListEnabled;\n        emit AllowListEnabledUpdated(_allowListEnabled);\n    }\n\n    /// @dev this modifier checks the tx.origin instead of msg.sender for convenience (ie it allows\n    /// allowed users to interact with the token bridge without needing the token bridge to be allowList aware).\n    /// this modifier is not intended to use to be used for security (since this opens the allowList to\n    /// a smart contract phishing risk).\n    modifier onlyAllowed() {\n        // solhint-disable-next-line avoid-tx-origin\n        if (allowListEnabled && !isAllowed[tx.origin]) revert NotAllowedOrigin(tx.origin);\n        _;\n    }\n\n    /// ------------------------------------ allow list end ------------------------------------ ///\n\n    modifier onlyRollupOrOwner() {\n        IOwnable rollup = bridge.rollup();\n        if (msg.sender != address(rollup)) {\n            address rollupOwner = rollup.owner();\n            if (msg.sender != rollupOwner) {\n                revert NotRollupOrOwner(msg.sender, address(rollup), rollupOwner);\n            }\n        }\n        _;\n    }\n\n    uint256 internal immutable deployTimeChainId = block.chainid;\n\n    function _chainIdChanged() internal view returns (bool) {\n        return deployTimeChainId != block.chainid;\n    }\n\n    /// @inheritdoc IInbox\n    function pause() external onlyRollupOrOwner {\n        _pause();\n    }\n\n    /// @inheritdoc IInbox\n    function unpause() external onlyRollupOrOwner {\n        _unpause();\n    }\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox)\n        external\n        initializer\n        onlyDelegated\n    {\n        bridge = _bridge;\n        sequencerInbox = _sequencerInbox;\n        allowListEnabled = false;\n        __Pausable_init();\n    }\n\n    /// @inheritdoc IInbox\n    function postUpgradeInit(IBridge) external onlyDelegated onlyProxyOwner {}\n\n    /// @inheritdoc IInbox\n    function sendL2MessageFromOrigin(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        if (messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(L2_MSG, msg.sender, keccak256(messageData));\n        emit InboxMessageDeliveredFromOrigin(msgNum);\n        return msgNum;\n    }\n\n    /// @inheritdoc IInbox\n    function sendL2Message(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        return _deliverMessage(L2_MSG, msg.sender, messageData);\n    }\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(address(100))), // ArbSys address\n                    value,\n                    abi.encode(ArbSys.withdrawEth.selector, withdrawTo)\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        public\n        view\n        returns (uint256)\n    {\n        // Use current block basefee if baseFee parameter is 0\n        return (1400 + 6 * dataLength) * (baseFee == 0 ? block.basefee : baseFee);\n    }\n\n    /// @inheritdoc IInbox\n    function depositEth() public payable whenNotPaused onlyAllowed returns (uint256) {\n        address dest = msg.sender;\n\n        // solhint-disable-next-line avoid-tx-origin\n        if (AddressUpgradeable.isContract(msg.sender) || tx.origin != msg.sender) {\n            // isContract check fails if this function is called during a contract\'s constructor.\n            dest = AddressAliasHelper.applyL1ToL2Alias(msg.sender);\n        }\n\n        return\n            _deliverMessage(\n                L1MessageType_ethDeposit,\n                msg.sender,\n                abi.encodePacked(dest, msg.value)\n            );\n    }\n\n    /// @notice deprecated in favour of depositEth with no parameters\n    function depositEth(uint256) external payable whenNotPaused onlyAllowed returns (uint256) {\n        return depositEth();\n    }\n\n    /**\n     * @notice deprecated in favour of unsafeCreateRetryableTicket\n     * @dev deprecated in favour of unsafeCreateRetryableTicket\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user\'s L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user\'s L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicketNoRefundAliasRewrite(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) public payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        // arbos will discard retryable with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                msg.sender,\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    /// @notice This is an one-time-exception to resolve a misconfiguration of Uniswap Arbitrum deployment\n    ///         Only the Uniswap L1 Timelock may call this function and it is allowed to create a crosschain\n    ///         retryable ticket without address aliasing. More info here:\n    ///         https://gov.uniswap.org/t/consensus-check-fix-the-cross-chain-messaging-bridge-on-arbitrum/18547\n    /// @dev    This function will be removed in future releases\n    function uniswapCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // this can only be called by UNISWAP_L1_TIMELOCK\n        require(msg.sender == UNISWAP_L1_TIMELOCK, "NOT_UNISWAP_L1_TIMELOCK");\n        // the retryable can only call UNISWAP_L2_FACTORY\n        require(to == UNISWAP_L2_FACTORY, "NOT_TO_UNISWAP_L2_FACTORY");\n\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    function _deliverMessage(\n        uint8 _kind,\n        address _sender,\n        bytes memory _messageData\n    ) internal returns (uint256) {\n        if (_messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(_messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(_kind, _sender, keccak256(_messageData));\n        emit InboxMessageDelivered(msgNum, _messageData);\n        return msgNum;\n    }\n\n    function deliverToBridge(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) internal returns (uint256) {\n        return\n            bridge.enqueueDelayedMessage{value: msg.value}(\n                kind,\n                AddressAliasHelper.applyL1ToL2Alias(sender),\n                messageDataHash\n            );\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'Inbox._chainIdChanged', 'start_line': 466, 'end_line': 468, 'offset_start': 16774, 'offset_end': 16887, 'content': 'function _chainIdChanged() internal view returns (bool) {\n        return deployTimeChainId != block.chainid;\n    }', 'contract_name': 'Inbox', 'contract_code': '{\n    IBridge public bridge;\n    ISequencerInbox public sequencerInbox;\n\n    /// ------------------------------------ allow list start ------------------------------------ ///\n\n    bool public allowListEnabled;\n    mapping(address => bool) public isAllowed;\n\n    event AllowListAddressSet(address indexed user, bool val);\n    event AllowListEnabledUpdated(bool isEnabled);\n\n    function setAllowList(address[] memory user, bool[] memory val) external onlyRollupOrOwner {\n        require(user.length == val.length, "INVALID_INPUT");\n\n        for (uint256 i = 0; i < user.length; i++) {\n            isAllowed[user[i]] = val[i];\n            emit AllowListAddressSet(user[i], val[i]);\n        }\n    }\n\n    function setAllowListEnabled(bool _allowListEnabled) external onlyRollupOrOwner {\n        require(_allowListEnabled != allowListEnabled, "ALREADY_SET");\n        allowListEnabled = _allowListEnabled;\n        emit AllowListEnabledUpdated(_allowListEnabled);\n    }\n\n    /// @dev this modifier checks the tx.origin instead of msg.sender for convenience (ie it allows\n    /// allowed users to interact with the token bridge without needing the token bridge to be allowList aware).\n    /// this modifier is not intended to use to be used for security (since this opens the allowList to\n    /// a smart contract phishing risk).\n    modifier onlyAllowed() {\n        // solhint-disable-next-line avoid-tx-origin\n        if (allowListEnabled && !isAllowed[tx.origin]) revert NotAllowedOrigin(tx.origin);\n        _;\n    }\n\n    /// ------------------------------------ allow list end ------------------------------------ ///\n\n    modifier onlyRollupOrOwner() {\n        IOwnable rollup = bridge.rollup();\n        if (msg.sender != address(rollup)) {\n            address rollupOwner = rollup.owner();\n            if (msg.sender != rollupOwner) {\n                revert NotRollupOrOwner(msg.sender, address(rollup), rollupOwner);\n            }\n        }\n        _;\n    }\n\n    uint256 internal immutable deployTimeChainId = block.chainid;\n\n    function _chainIdChanged() internal view returns (bool) {\n        return deployTimeChainId != block.chainid;\n    }\n\n    /// @inheritdoc IInbox\n    function pause() external onlyRollupOrOwner {\n        _pause();\n    }\n\n    /// @inheritdoc IInbox\n    function unpause() external onlyRollupOrOwner {\n        _unpause();\n    }\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox)\n        external\n        initializer\n        onlyDelegated\n    {\n        bridge = _bridge;\n        sequencerInbox = _sequencerInbox;\n        allowListEnabled = false;\n        __Pausable_init();\n    }\n\n    /// @inheritdoc IInbox\n    function postUpgradeInit(IBridge) external onlyDelegated onlyProxyOwner {}\n\n    /// @inheritdoc IInbox\n    function sendL2MessageFromOrigin(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        if (messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(L2_MSG, msg.sender, keccak256(messageData));\n        emit InboxMessageDeliveredFromOrigin(msgNum);\n        return msgNum;\n    }\n\n    /// @inheritdoc IInbox\n    function sendL2Message(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        return _deliverMessage(L2_MSG, msg.sender, messageData);\n    }\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(address(100))), // ArbSys address\n                    value,\n                    abi.encode(ArbSys.withdrawEth.selector, withdrawTo)\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        public\n        view\n        returns (uint256)\n    {\n        // Use current block basefee if baseFee parameter is 0\n        return (1400 + 6 * dataLength) * (baseFee == 0 ? block.basefee : baseFee);\n    }\n\n    /// @inheritdoc IInbox\n    function depositEth() public payable whenNotPaused onlyAllowed returns (uint256) {\n        address dest = msg.sender;\n\n        // solhint-disable-next-line avoid-tx-origin\n        if (AddressUpgradeable.isContract(msg.sender) || tx.origin != msg.sender) {\n            // isContract check fails if this function is called during a contract\'s constructor.\n            dest = AddressAliasHelper.applyL1ToL2Alias(msg.sender);\n        }\n\n        return\n            _deliverMessage(\n                L1MessageType_ethDeposit,\n                msg.sender,\n                abi.encodePacked(dest, msg.value)\n            );\n    }\n\n    /// @notice deprecated in favour of depositEth with no parameters\n    function depositEth(uint256) external payable whenNotPaused onlyAllowed returns (uint256) {\n        return depositEth();\n    }\n\n    /**\n     * @notice deprecated in favour of unsafeCreateRetryableTicket\n     * @dev deprecated in favour of unsafeCreateRetryableTicket\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user\'s L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user\'s L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicketNoRefundAliasRewrite(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) public payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        // arbos will discard retryable with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                msg.sender,\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    /// @notice This is an one-time-exception to resolve a misconfiguration of Uniswap Arbitrum deployment\n    ///         Only the Uniswap L1 Timelock may call this function and it is allowed to create a crosschain\n    ///         retryable ticket without address aliasing. More info here:\n    ///         https://gov.uniswap.org/t/consensus-check-fix-the-cross-chain-messaging-bridge-on-arbitrum/18547\n    /// @dev    This function will be removed in future releases\n    function uniswapCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // this can only be called by UNISWAP_L1_TIMELOCK\n        require(msg.sender == UNISWAP_L1_TIMELOCK, "NOT_UNISWAP_L1_TIMELOCK");\n        // the retryable can only call UNISWAP_L2_FACTORY\n        require(to == UNISWAP_L2_FACTORY, "NOT_TO_UNISWAP_L2_FACTORY");\n\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    function _deliverMessage(\n        uint8 _kind,\n        address _sender,\n        bytes memory _messageData\n    ) internal returns (uint256) {\n        if (_messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(_messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(_kind, _sender, keccak256(_messageData));\n        emit InboxMessageDelivered(msgNum, _messageData);\n        return msgNum;\n    }\n\n    function deliverToBridge(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) internal returns (uint256) {\n        return\n            bridge.enqueueDelayedMessage{value: msg.value}(\n                kind,\n                AddressAliasHelper.applyL1ToL2Alias(sender),\n                messageDataHash\n            );\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'Inbox.pause', 'start_line': 471, 'end_line': 473, 'offset_start': 16921, 'offset_end': 16989, 'content': 'function pause() external onlyRollupOrOwner {\n        _pause();\n    }', 'contract_name': 'Inbox', 'contract_code': '{\n    IBridge public bridge;\n    ISequencerInbox public sequencerInbox;\n\n    /// ------------------------------------ allow list start ------------------------------------ ///\n\n    bool public allowListEnabled;\n    mapping(address => bool) public isAllowed;\n\n    event AllowListAddressSet(address indexed user, bool val);\n    event AllowListEnabledUpdated(bool isEnabled);\n\n    function setAllowList(address[] memory user, bool[] memory val) external onlyRollupOrOwner {\n        require(user.length == val.length, "INVALID_INPUT");\n\n        for (uint256 i = 0; i < user.length; i++) {\n            isAllowed[user[i]] = val[i];\n            emit AllowListAddressSet(user[i], val[i]);\n        }\n    }\n\n    function setAllowListEnabled(bool _allowListEnabled) external onlyRollupOrOwner {\n        require(_allowListEnabled != allowListEnabled, "ALREADY_SET");\n        allowListEnabled = _allowListEnabled;\n        emit AllowListEnabledUpdated(_allowListEnabled);\n    }\n\n    /// @dev this modifier checks the tx.origin instead of msg.sender for convenience (ie it allows\n    /// allowed users to interact with the token bridge without needing the token bridge to be allowList aware).\n    /// this modifier is not intended to use to be used for security (since this opens the allowList to\n    /// a smart contract phishing risk).\n    modifier onlyAllowed() {\n        // solhint-disable-next-line avoid-tx-origin\n        if (allowListEnabled && !isAllowed[tx.origin]) revert NotAllowedOrigin(tx.origin);\n        _;\n    }\n\n    /// ------------------------------------ allow list end ------------------------------------ ///\n\n    modifier onlyRollupOrOwner() {\n        IOwnable rollup = bridge.rollup();\n        if (msg.sender != address(rollup)) {\n            address rollupOwner = rollup.owner();\n            if (msg.sender != rollupOwner) {\n                revert NotRollupOrOwner(msg.sender, address(rollup), rollupOwner);\n            }\n        }\n        _;\n    }\n\n    uint256 internal immutable deployTimeChainId = block.chainid;\n\n    function _chainIdChanged() internal view returns (bool) {\n        return deployTimeChainId != block.chainid;\n    }\n\n    /// @inheritdoc IInbox\n    function pause() external onlyRollupOrOwner {\n        _pause();\n    }\n\n    /// @inheritdoc IInbox\n    function unpause() external onlyRollupOrOwner {\n        _unpause();\n    }\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox)\n        external\n        initializer\n        onlyDelegated\n    {\n        bridge = _bridge;\n        sequencerInbox = _sequencerInbox;\n        allowListEnabled = false;\n        __Pausable_init();\n    }\n\n    /// @inheritdoc IInbox\n    function postUpgradeInit(IBridge) external onlyDelegated onlyProxyOwner {}\n\n    /// @inheritdoc IInbox\n    function sendL2MessageFromOrigin(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        if (messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(L2_MSG, msg.sender, keccak256(messageData));\n        emit InboxMessageDeliveredFromOrigin(msgNum);\n        return msgNum;\n    }\n\n    /// @inheritdoc IInbox\n    function sendL2Message(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        return _deliverMessage(L2_MSG, msg.sender, messageData);\n    }\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(address(100))), // ArbSys address\n                    value,\n                    abi.encode(ArbSys.withdrawEth.selector, withdrawTo)\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        public\n        view\n        returns (uint256)\n    {\n        // Use current block basefee if baseFee parameter is 0\n        return (1400 + 6 * dataLength) * (baseFee == 0 ? block.basefee : baseFee);\n    }\n\n    /// @inheritdoc IInbox\n    function depositEth() public payable whenNotPaused onlyAllowed returns (uint256) {\n        address dest = msg.sender;\n\n        // solhint-disable-next-line avoid-tx-origin\n        if (AddressUpgradeable.isContract(msg.sender) || tx.origin != msg.sender) {\n            // isContract check fails if this function is called during a contract\'s constructor.\n            dest = AddressAliasHelper.applyL1ToL2Alias(msg.sender);\n        }\n\n        return\n            _deliverMessage(\n                L1MessageType_ethDeposit,\n                msg.sender,\n                abi.encodePacked(dest, msg.value)\n            );\n    }\n\n    /// @notice deprecated in favour of depositEth with no parameters\n    function depositEth(uint256) external payable whenNotPaused onlyAllowed returns (uint256) {\n        return depositEth();\n    }\n\n    /**\n     * @notice deprecated in favour of unsafeCreateRetryableTicket\n     * @dev deprecated in favour of unsafeCreateRetryableTicket\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user\'s L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user\'s L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicketNoRefundAliasRewrite(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) public payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        // arbos will discard retryable with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                msg.sender,\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    /// @notice This is an one-time-exception to resolve a misconfiguration of Uniswap Arbitrum deployment\n    ///         Only the Uniswap L1 Timelock may call this function and it is allowed to create a crosschain\n    ///         retryable ticket without address aliasing. More info here:\n    ///         https://gov.uniswap.org/t/consensus-check-fix-the-cross-chain-messaging-bridge-on-arbitrum/18547\n    /// @dev    This function will be removed in future releases\n    function uniswapCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // this can only be called by UNISWAP_L1_TIMELOCK\n        require(msg.sender == UNISWAP_L1_TIMELOCK, "NOT_UNISWAP_L1_TIMELOCK");\n        // the retryable can only call UNISWAP_L2_FACTORY\n        require(to == UNISWAP_L2_FACTORY, "NOT_TO_UNISWAP_L2_FACTORY");\n\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    function _deliverMessage(\n        uint8 _kind,\n        address _sender,\n        bytes memory _messageData\n    ) internal returns (uint256) {\n        if (_messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(_messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(_kind, _sender, keccak256(_messageData));\n        emit InboxMessageDelivered(msgNum, _messageData);\n        return msgNum;\n    }\n\n    function deliverToBridge(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) internal returns (uint256) {\n        return\n            bridge.enqueueDelayedMessage{value: msg.value}(\n                kind,\n                AddressAliasHelper.applyL1ToL2Alias(sender),\n                messageDataHash\n            );\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'Inbox.unpause', 'start_line': 476, 'end_line': 478, 'offset_start': 17023, 'offset_end': 17095, 'content': 'function unpause() external onlyRollupOrOwner {\n        _unpause();\n    }', 'contract_name': 'Inbox', 'contract_code': '{\n    IBridge public bridge;\n    ISequencerInbox public sequencerInbox;\n\n    /// ------------------------------------ allow list start ------------------------------------ ///\n\n    bool public allowListEnabled;\n    mapping(address => bool) public isAllowed;\n\n    event AllowListAddressSet(address indexed user, bool val);\n    event AllowListEnabledUpdated(bool isEnabled);\n\n    function setAllowList(address[] memory user, bool[] memory val) external onlyRollupOrOwner {\n        require(user.length == val.length, "INVALID_INPUT");\n\n        for (uint256 i = 0; i < user.length; i++) {\n            isAllowed[user[i]] = val[i];\n            emit AllowListAddressSet(user[i], val[i]);\n        }\n    }\n\n    function setAllowListEnabled(bool _allowListEnabled) external onlyRollupOrOwner {\n        require(_allowListEnabled != allowListEnabled, "ALREADY_SET");\n        allowListEnabled = _allowListEnabled;\n        emit AllowListEnabledUpdated(_allowListEnabled);\n    }\n\n    /// @dev this modifier checks the tx.origin instead of msg.sender for convenience (ie it allows\n    /// allowed users to interact with the token bridge without needing the token bridge to be allowList aware).\n    /// this modifier is not intended to use to be used for security (since this opens the allowList to\n    /// a smart contract phishing risk).\n    modifier onlyAllowed() {\n        // solhint-disable-next-line avoid-tx-origin\n        if (allowListEnabled && !isAllowed[tx.origin]) revert NotAllowedOrigin(tx.origin);\n        _;\n    }\n\n    /// ------------------------------------ allow list end ------------------------------------ ///\n\n    modifier onlyRollupOrOwner() {\n        IOwnable rollup = bridge.rollup();\n        if (msg.sender != address(rollup)) {\n            address rollupOwner = rollup.owner();\n            if (msg.sender != rollupOwner) {\n                revert NotRollupOrOwner(msg.sender, address(rollup), rollupOwner);\n            }\n        }\n        _;\n    }\n\n    uint256 internal immutable deployTimeChainId = block.chainid;\n\n    function _chainIdChanged() internal view returns (bool) {\n        return deployTimeChainId != block.chainid;\n    }\n\n    /// @inheritdoc IInbox\n    function pause() external onlyRollupOrOwner {\n        _pause();\n    }\n\n    /// @inheritdoc IInbox\n    function unpause() external onlyRollupOrOwner {\n        _unpause();\n    }\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox)\n        external\n        initializer\n        onlyDelegated\n    {\n        bridge = _bridge;\n        sequencerInbox = _sequencerInbox;\n        allowListEnabled = false;\n        __Pausable_init();\n    }\n\n    /// @inheritdoc IInbox\n    function postUpgradeInit(IBridge) external onlyDelegated onlyProxyOwner {}\n\n    /// @inheritdoc IInbox\n    function sendL2MessageFromOrigin(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        if (messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(L2_MSG, msg.sender, keccak256(messageData));\n        emit InboxMessageDeliveredFromOrigin(msgNum);\n        return msgNum;\n    }\n\n    /// @inheritdoc IInbox\n    function sendL2Message(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        return _deliverMessage(L2_MSG, msg.sender, messageData);\n    }\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(address(100))), // ArbSys address\n                    value,\n                    abi.encode(ArbSys.withdrawEth.selector, withdrawTo)\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        public\n        view\n        returns (uint256)\n    {\n        // Use current block basefee if baseFee parameter is 0\n        return (1400 + 6 * dataLength) * (baseFee == 0 ? block.basefee : baseFee);\n    }\n\n    /// @inheritdoc IInbox\n    function depositEth() public payable whenNotPaused onlyAllowed returns (uint256) {\n        address dest = msg.sender;\n\n        // solhint-disable-next-line avoid-tx-origin\n        if (AddressUpgradeable.isContract(msg.sender) || tx.origin != msg.sender) {\n            // isContract check fails if this function is called during a contract\'s constructor.\n            dest = AddressAliasHelper.applyL1ToL2Alias(msg.sender);\n        }\n\n        return\n            _deliverMessage(\n                L1MessageType_ethDeposit,\n                msg.sender,\n                abi.encodePacked(dest, msg.value)\n            );\n    }\n\n    /// @notice deprecated in favour of depositEth with no parameters\n    function depositEth(uint256) external payable whenNotPaused onlyAllowed returns (uint256) {\n        return depositEth();\n    }\n\n    /**\n     * @notice deprecated in favour of unsafeCreateRetryableTicket\n     * @dev deprecated in favour of unsafeCreateRetryableTicket\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user\'s L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user\'s L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicketNoRefundAliasRewrite(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) public payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        // arbos will discard retryable with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                msg.sender,\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    /// @notice This is an one-time-exception to resolve a misconfiguration of Uniswap Arbitrum deployment\n    ///         Only the Uniswap L1 Timelock may call this function and it is allowed to create a crosschain\n    ///         retryable ticket without address aliasing. More info here:\n    ///         https://gov.uniswap.org/t/consensus-check-fix-the-cross-chain-messaging-bridge-on-arbitrum/18547\n    /// @dev    This function will be removed in future releases\n    function uniswapCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // this can only be called by UNISWAP_L1_TIMELOCK\n        require(msg.sender == UNISWAP_L1_TIMELOCK, "NOT_UNISWAP_L1_TIMELOCK");\n        // the retryable can only call UNISWAP_L2_FACTORY\n        require(to == UNISWAP_L2_FACTORY, "NOT_TO_UNISWAP_L2_FACTORY");\n\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    function _deliverMessage(\n        uint8 _kind,\n        address _sender,\n        bytes memory _messageData\n    ) internal returns (uint256) {\n        if (_messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(_messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(_kind, _sender, keccak256(_messageData));\n        emit InboxMessageDelivered(msgNum, _messageData);\n        return msgNum;\n    }\n\n    function deliverToBridge(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) internal returns (uint256) {\n        return\n            bridge.enqueueDelayedMessage{value: msg.value}(\n                kind,\n                AddressAliasHelper.applyL1ToL2Alias(sender),\n                messageDataHash\n            );\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'Inbox.initialize', 'start_line': 480, 'end_line': 489, 'offset_start': 17102, 'offset_end': 17370, 'content': 'function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox)\n        external\n        initializer\n        onlyDelegated\n    {\n        bridge = _bridge;\n        sequencerInbox = _sequencerInbox;\n        allowListEnabled = false;\n        __Pausable_init();\n    }', 'contract_name': 'Inbox', 'contract_code': '{\n    IBridge public bridge;\n    ISequencerInbox public sequencerInbox;\n\n    /// ------------------------------------ allow list start ------------------------------------ ///\n\n    bool public allowListEnabled;\n    mapping(address => bool) public isAllowed;\n\n    event AllowListAddressSet(address indexed user, bool val);\n    event AllowListEnabledUpdated(bool isEnabled);\n\n    function setAllowList(address[] memory user, bool[] memory val) external onlyRollupOrOwner {\n        require(user.length == val.length, "INVALID_INPUT");\n\n        for (uint256 i = 0; i < user.length; i++) {\n            isAllowed[user[i]] = val[i];\n            emit AllowListAddressSet(user[i], val[i]);\n        }\n    }\n\n    function setAllowListEnabled(bool _allowListEnabled) external onlyRollupOrOwner {\n        require(_allowListEnabled != allowListEnabled, "ALREADY_SET");\n        allowListEnabled = _allowListEnabled;\n        emit AllowListEnabledUpdated(_allowListEnabled);\n    }\n\n    /// @dev this modifier checks the tx.origin instead of msg.sender for convenience (ie it allows\n    /// allowed users to interact with the token bridge without needing the token bridge to be allowList aware).\n    /// this modifier is not intended to use to be used for security (since this opens the allowList to\n    /// a smart contract phishing risk).\n    modifier onlyAllowed() {\n        // solhint-disable-next-line avoid-tx-origin\n        if (allowListEnabled && !isAllowed[tx.origin]) revert NotAllowedOrigin(tx.origin);\n        _;\n    }\n\n    /// ------------------------------------ allow list end ------------------------------------ ///\n\n    modifier onlyRollupOrOwner() {\n        IOwnable rollup = bridge.rollup();\n        if (msg.sender != address(rollup)) {\n            address rollupOwner = rollup.owner();\n            if (msg.sender != rollupOwner) {\n                revert NotRollupOrOwner(msg.sender, address(rollup), rollupOwner);\n            }\n        }\n        _;\n    }\n\n    uint256 internal immutable deployTimeChainId = block.chainid;\n\n    function _chainIdChanged() internal view returns (bool) {\n        return deployTimeChainId != block.chainid;\n    }\n\n    /// @inheritdoc IInbox\n    function pause() external onlyRollupOrOwner {\n        _pause();\n    }\n\n    /// @inheritdoc IInbox\n    function unpause() external onlyRollupOrOwner {\n        _unpause();\n    }\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox)\n        external\n        initializer\n        onlyDelegated\n    {\n        bridge = _bridge;\n        sequencerInbox = _sequencerInbox;\n        allowListEnabled = false;\n        __Pausable_init();\n    }\n\n    /// @inheritdoc IInbox\n    function postUpgradeInit(IBridge) external onlyDelegated onlyProxyOwner {}\n\n    /// @inheritdoc IInbox\n    function sendL2MessageFromOrigin(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        if (messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(L2_MSG, msg.sender, keccak256(messageData));\n        emit InboxMessageDeliveredFromOrigin(msgNum);\n        return msgNum;\n    }\n\n    /// @inheritdoc IInbox\n    function sendL2Message(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        return _deliverMessage(L2_MSG, msg.sender, messageData);\n    }\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(address(100))), // ArbSys address\n                    value,\n                    abi.encode(ArbSys.withdrawEth.selector, withdrawTo)\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        public\n        view\n        returns (uint256)\n    {\n        // Use current block basefee if baseFee parameter is 0\n        return (1400 + 6 * dataLength) * (baseFee == 0 ? block.basefee : baseFee);\n    }\n\n    /// @inheritdoc IInbox\n    function depositEth() public payable whenNotPaused onlyAllowed returns (uint256) {\n        address dest = msg.sender;\n\n        // solhint-disable-next-line avoid-tx-origin\n        if (AddressUpgradeable.isContract(msg.sender) || tx.origin != msg.sender) {\n            // isContract check fails if this function is called during a contract\'s constructor.\n            dest = AddressAliasHelper.applyL1ToL2Alias(msg.sender);\n        }\n\n        return\n            _deliverMessage(\n                L1MessageType_ethDeposit,\n                msg.sender,\n                abi.encodePacked(dest, msg.value)\n            );\n    }\n\n    /// @notice deprecated in favour of depositEth with no parameters\n    function depositEth(uint256) external payable whenNotPaused onlyAllowed returns (uint256) {\n        return depositEth();\n    }\n\n    /**\n     * @notice deprecated in favour of unsafeCreateRetryableTicket\n     * @dev deprecated in favour of unsafeCreateRetryableTicket\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user\'s L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user\'s L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicketNoRefundAliasRewrite(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) public payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        // arbos will discard retryable with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                msg.sender,\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    /// @notice This is an one-time-exception to resolve a misconfiguration of Uniswap Arbitrum deployment\n    ///         Only the Uniswap L1 Timelock may call this function and it is allowed to create a crosschain\n    ///         retryable ticket without address aliasing. More info here:\n    ///         https://gov.uniswap.org/t/consensus-check-fix-the-cross-chain-messaging-bridge-on-arbitrum/18547\n    /// @dev    This function will be removed in future releases\n    function uniswapCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // this can only be called by UNISWAP_L1_TIMELOCK\n        require(msg.sender == UNISWAP_L1_TIMELOCK, "NOT_UNISWAP_L1_TIMELOCK");\n        // the retryable can only call UNISWAP_L2_FACTORY\n        require(to == UNISWAP_L2_FACTORY, "NOT_TO_UNISWAP_L2_FACTORY");\n\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    function _deliverMessage(\n        uint8 _kind,\n        address _sender,\n        bytes memory _messageData\n    ) internal returns (uint256) {\n        if (_messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(_messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(_kind, _sender, keccak256(_messageData));\n        emit InboxMessageDelivered(msgNum, _messageData);\n        return msgNum;\n    }\n\n    function deliverToBridge(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) internal returns (uint256) {\n        return\n            bridge.enqueueDelayedMessage{value: msg.value}(\n                kind,\n                AddressAliasHelper.applyL1ToL2Alias(sender),\n                messageDataHash\n            );\n    }\n}', 'modifiers': [None, None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'Inbox.postUpgradeInit', 'start_line': 492, 'end_line': 492, 'offset_start': 17404, 'offset_end': 17477, 'content': 'function postUpgradeInit(IBridge) external onlyDelegated onlyProxyOwner {}', 'contract_name': 'Inbox', 'contract_code': '{\n    IBridge public bridge;\n    ISequencerInbox public sequencerInbox;\n\n    /// ------------------------------------ allow list start ------------------------------------ ///\n\n    bool public allowListEnabled;\n    mapping(address => bool) public isAllowed;\n\n    event AllowListAddressSet(address indexed user, bool val);\n    event AllowListEnabledUpdated(bool isEnabled);\n\n    function setAllowList(address[] memory user, bool[] memory val) external onlyRollupOrOwner {\n        require(user.length == val.length, "INVALID_INPUT");\n\n        for (uint256 i = 0; i < user.length; i++) {\n            isAllowed[user[i]] = val[i];\n            emit AllowListAddressSet(user[i], val[i]);\n        }\n    }\n\n    function setAllowListEnabled(bool _allowListEnabled) external onlyRollupOrOwner {\n        require(_allowListEnabled != allowListEnabled, "ALREADY_SET");\n        allowListEnabled = _allowListEnabled;\n        emit AllowListEnabledUpdated(_allowListEnabled);\n    }\n\n    /// @dev this modifier checks the tx.origin instead of msg.sender for convenience (ie it allows\n    /// allowed users to interact with the token bridge without needing the token bridge to be allowList aware).\n    /// this modifier is not intended to use to be used for security (since this opens the allowList to\n    /// a smart contract phishing risk).\n    modifier onlyAllowed() {\n        // solhint-disable-next-line avoid-tx-origin\n        if (allowListEnabled && !isAllowed[tx.origin]) revert NotAllowedOrigin(tx.origin);\n        _;\n    }\n\n    /// ------------------------------------ allow list end ------------------------------------ ///\n\n    modifier onlyRollupOrOwner() {\n        IOwnable rollup = bridge.rollup();\n        if (msg.sender != address(rollup)) {\n            address rollupOwner = rollup.owner();\n            if (msg.sender != rollupOwner) {\n                revert NotRollupOrOwner(msg.sender, address(rollup), rollupOwner);\n            }\n        }\n        _;\n    }\n\n    uint256 internal immutable deployTimeChainId = block.chainid;\n\n    function _chainIdChanged() internal view returns (bool) {\n        return deployTimeChainId != block.chainid;\n    }\n\n    /// @inheritdoc IInbox\n    function pause() external onlyRollupOrOwner {\n        _pause();\n    }\n\n    /// @inheritdoc IInbox\n    function unpause() external onlyRollupOrOwner {\n        _unpause();\n    }\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox)\n        external\n        initializer\n        onlyDelegated\n    {\n        bridge = _bridge;\n        sequencerInbox = _sequencerInbox;\n        allowListEnabled = false;\n        __Pausable_init();\n    }\n\n    /// @inheritdoc IInbox\n    function postUpgradeInit(IBridge) external onlyDelegated onlyProxyOwner {}\n\n    /// @inheritdoc IInbox\n    function sendL2MessageFromOrigin(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        if (messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(L2_MSG, msg.sender, keccak256(messageData));\n        emit InboxMessageDeliveredFromOrigin(msgNum);\n        return msgNum;\n    }\n\n    /// @inheritdoc IInbox\n    function sendL2Message(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        return _deliverMessage(L2_MSG, msg.sender, messageData);\n    }\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(address(100))), // ArbSys address\n                    value,\n                    abi.encode(ArbSys.withdrawEth.selector, withdrawTo)\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        public\n        view\n        returns (uint256)\n    {\n        // Use current block basefee if baseFee parameter is 0\n        return (1400 + 6 * dataLength) * (baseFee == 0 ? block.basefee : baseFee);\n    }\n\n    /// @inheritdoc IInbox\n    function depositEth() public payable whenNotPaused onlyAllowed returns (uint256) {\n        address dest = msg.sender;\n\n        // solhint-disable-next-line avoid-tx-origin\n        if (AddressUpgradeable.isContract(msg.sender) || tx.origin != msg.sender) {\n            // isContract check fails if this function is called during a contract\'s constructor.\n            dest = AddressAliasHelper.applyL1ToL2Alias(msg.sender);\n        }\n\n        return\n            _deliverMessage(\n                L1MessageType_ethDeposit,\n                msg.sender,\n                abi.encodePacked(dest, msg.value)\n            );\n    }\n\n    /// @notice deprecated in favour of depositEth with no parameters\n    function depositEth(uint256) external payable whenNotPaused onlyAllowed returns (uint256) {\n        return depositEth();\n    }\n\n    /**\n     * @notice deprecated in favour of unsafeCreateRetryableTicket\n     * @dev deprecated in favour of unsafeCreateRetryableTicket\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user\'s L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user\'s L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicketNoRefundAliasRewrite(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) public payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        // arbos will discard retryable with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                msg.sender,\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    /// @notice This is an one-time-exception to resolve a misconfiguration of Uniswap Arbitrum deployment\n    ///         Only the Uniswap L1 Timelock may call this function and it is allowed to create a crosschain\n    ///         retryable ticket without address aliasing. More info here:\n    ///         https://gov.uniswap.org/t/consensus-check-fix-the-cross-chain-messaging-bridge-on-arbitrum/18547\n    /// @dev    This function will be removed in future releases\n    function uniswapCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // this can only be called by UNISWAP_L1_TIMELOCK\n        require(msg.sender == UNISWAP_L1_TIMELOCK, "NOT_UNISWAP_L1_TIMELOCK");\n        // the retryable can only call UNISWAP_L2_FACTORY\n        require(to == UNISWAP_L2_FACTORY, "NOT_TO_UNISWAP_L2_FACTORY");\n\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    function _deliverMessage(\n        uint8 _kind,\n        address _sender,\n        bytes memory _messageData\n    ) internal returns (uint256) {\n        if (_messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(_messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(_kind, _sender, keccak256(_messageData));\n        emit InboxMessageDelivered(msgNum, _messageData);\n        return msgNum;\n    }\n\n    function deliverToBridge(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) internal returns (uint256) {\n        return\n            bridge.enqueueDelayedMessage{value: msg.value}(\n                kind,\n                AddressAliasHelper.applyL1ToL2Alias(sender),\n                messageDataHash\n            );\n    }\n}', 'modifiers': [None, None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'Inbox.sendL2MessageFromOrigin', 'start_line': 495, 'end_line': 509, 'offset_start': 17511, 'offset_end': 18106, 'content': 'function sendL2MessageFromOrigin(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        if (messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(L2_MSG, msg.sender, keccak256(messageData));\n        emit InboxMessageDeliveredFromOrigin(msgNum);\n        return msgNum;\n    }', 'contract_name': 'Inbox', 'contract_code': '{\n    IBridge public bridge;\n    ISequencerInbox public sequencerInbox;\n\n    /// ------------------------------------ allow list start ------------------------------------ ///\n\n    bool public allowListEnabled;\n    mapping(address => bool) public isAllowed;\n\n    event AllowListAddressSet(address indexed user, bool val);\n    event AllowListEnabledUpdated(bool isEnabled);\n\n    function setAllowList(address[] memory user, bool[] memory val) external onlyRollupOrOwner {\n        require(user.length == val.length, "INVALID_INPUT");\n\n        for (uint256 i = 0; i < user.length; i++) {\n            isAllowed[user[i]] = val[i];\n            emit AllowListAddressSet(user[i], val[i]);\n        }\n    }\n\n    function setAllowListEnabled(bool _allowListEnabled) external onlyRollupOrOwner {\n        require(_allowListEnabled != allowListEnabled, "ALREADY_SET");\n        allowListEnabled = _allowListEnabled;\n        emit AllowListEnabledUpdated(_allowListEnabled);\n    }\n\n    /// @dev this modifier checks the tx.origin instead of msg.sender for convenience (ie it allows\n    /// allowed users to interact with the token bridge without needing the token bridge to be allowList aware).\n    /// this modifier is not intended to use to be used for security (since this opens the allowList to\n    /// a smart contract phishing risk).\n    modifier onlyAllowed() {\n        // solhint-disable-next-line avoid-tx-origin\n        if (allowListEnabled && !isAllowed[tx.origin]) revert NotAllowedOrigin(tx.origin);\n        _;\n    }\n\n    /// ------------------------------------ allow list end ------------------------------------ ///\n\n    modifier onlyRollupOrOwner() {\n        IOwnable rollup = bridge.rollup();\n        if (msg.sender != address(rollup)) {\n            address rollupOwner = rollup.owner();\n            if (msg.sender != rollupOwner) {\n                revert NotRollupOrOwner(msg.sender, address(rollup), rollupOwner);\n            }\n        }\n        _;\n    }\n\n    uint256 internal immutable deployTimeChainId = block.chainid;\n\n    function _chainIdChanged() internal view returns (bool) {\n        return deployTimeChainId != block.chainid;\n    }\n\n    /// @inheritdoc IInbox\n    function pause() external onlyRollupOrOwner {\n        _pause();\n    }\n\n    /// @inheritdoc IInbox\n    function unpause() external onlyRollupOrOwner {\n        _unpause();\n    }\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox)\n        external\n        initializer\n        onlyDelegated\n    {\n        bridge = _bridge;\n        sequencerInbox = _sequencerInbox;\n        allowListEnabled = false;\n        __Pausable_init();\n    }\n\n    /// @inheritdoc IInbox\n    function postUpgradeInit(IBridge) external onlyDelegated onlyProxyOwner {}\n\n    /// @inheritdoc IInbox\n    function sendL2MessageFromOrigin(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        if (messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(L2_MSG, msg.sender, keccak256(messageData));\n        emit InboxMessageDeliveredFromOrigin(msgNum);\n        return msgNum;\n    }\n\n    /// @inheritdoc IInbox\n    function sendL2Message(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        return _deliverMessage(L2_MSG, msg.sender, messageData);\n    }\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(address(100))), // ArbSys address\n                    value,\n                    abi.encode(ArbSys.withdrawEth.selector, withdrawTo)\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        public\n        view\n        returns (uint256)\n    {\n        // Use current block basefee if baseFee parameter is 0\n        return (1400 + 6 * dataLength) * (baseFee == 0 ? block.basefee : baseFee);\n    }\n\n    /// @inheritdoc IInbox\n    function depositEth() public payable whenNotPaused onlyAllowed returns (uint256) {\n        address dest = msg.sender;\n\n        // solhint-disable-next-line avoid-tx-origin\n        if (AddressUpgradeable.isContract(msg.sender) || tx.origin != msg.sender) {\n            // isContract check fails if this function is called during a contract\'s constructor.\n            dest = AddressAliasHelper.applyL1ToL2Alias(msg.sender);\n        }\n\n        return\n            _deliverMessage(\n                L1MessageType_ethDeposit,\n                msg.sender,\n                abi.encodePacked(dest, msg.value)\n            );\n    }\n\n    /// @notice deprecated in favour of depositEth with no parameters\n    function depositEth(uint256) external payable whenNotPaused onlyAllowed returns (uint256) {\n        return depositEth();\n    }\n\n    /**\n     * @notice deprecated in favour of unsafeCreateRetryableTicket\n     * @dev deprecated in favour of unsafeCreateRetryableTicket\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user\'s L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user\'s L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicketNoRefundAliasRewrite(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) public payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        // arbos will discard retryable with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                msg.sender,\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    /// @notice This is an one-time-exception to resolve a misconfiguration of Uniswap Arbitrum deployment\n    ///         Only the Uniswap L1 Timelock may call this function and it is allowed to create a crosschain\n    ///         retryable ticket without address aliasing. More info here:\n    ///         https://gov.uniswap.org/t/consensus-check-fix-the-cross-chain-messaging-bridge-on-arbitrum/18547\n    /// @dev    This function will be removed in future releases\n    function uniswapCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // this can only be called by UNISWAP_L1_TIMELOCK\n        require(msg.sender == UNISWAP_L1_TIMELOCK, "NOT_UNISWAP_L1_TIMELOCK");\n        // the retryable can only call UNISWAP_L2_FACTORY\n        require(to == UNISWAP_L2_FACTORY, "NOT_TO_UNISWAP_L2_FACTORY");\n\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    function _deliverMessage(\n        uint8 _kind,\n        address _sender,\n        bytes memory _messageData\n    ) internal returns (uint256) {\n        if (_messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(_messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(_kind, _sender, keccak256(_messageData));\n        emit InboxMessageDelivered(msgNum, _messageData);\n        return msgNum;\n    }\n\n    function deliverToBridge(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) internal returns (uint256) {\n        return\n            bridge.enqueueDelayedMessage{value: msg.value}(\n                kind,\n                AddressAliasHelper.applyL1ToL2Alias(sender),\n                messageDataHash\n            );\n    }\n}', 'modifiers': [None, None], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'Inbox.sendL2Message', 'start_line': 512, 'end_line': 520, 'offset_start': 18140, 'offset_end': 18401, 'content': 'function sendL2Message(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        return _deliverMessage(L2_MSG, msg.sender, messageData);\n    }', 'contract_name': 'Inbox', 'contract_code': '{\n    IBridge public bridge;\n    ISequencerInbox public sequencerInbox;\n\n    /// ------------------------------------ allow list start ------------------------------------ ///\n\n    bool public allowListEnabled;\n    mapping(address => bool) public isAllowed;\n\n    event AllowListAddressSet(address indexed user, bool val);\n    event AllowListEnabledUpdated(bool isEnabled);\n\n    function setAllowList(address[] memory user, bool[] memory val) external onlyRollupOrOwner {\n        require(user.length == val.length, "INVALID_INPUT");\n\n        for (uint256 i = 0; i < user.length; i++) {\n            isAllowed[user[i]] = val[i];\n            emit AllowListAddressSet(user[i], val[i]);\n        }\n    }\n\n    function setAllowListEnabled(bool _allowListEnabled) external onlyRollupOrOwner {\n        require(_allowListEnabled != allowListEnabled, "ALREADY_SET");\n        allowListEnabled = _allowListEnabled;\n        emit AllowListEnabledUpdated(_allowListEnabled);\n    }\n\n    /// @dev this modifier checks the tx.origin instead of msg.sender for convenience (ie it allows\n    /// allowed users to interact with the token bridge without needing the token bridge to be allowList aware).\n    /// this modifier is not intended to use to be used for security (since this opens the allowList to\n    /// a smart contract phishing risk).\n    modifier onlyAllowed() {\n        // solhint-disable-next-line avoid-tx-origin\n        if (allowListEnabled && !isAllowed[tx.origin]) revert NotAllowedOrigin(tx.origin);\n        _;\n    }\n\n    /// ------------------------------------ allow list end ------------------------------------ ///\n\n    modifier onlyRollupOrOwner() {\n        IOwnable rollup = bridge.rollup();\n        if (msg.sender != address(rollup)) {\n            address rollupOwner = rollup.owner();\n            if (msg.sender != rollupOwner) {\n                revert NotRollupOrOwner(msg.sender, address(rollup), rollupOwner);\n            }\n        }\n        _;\n    }\n\n    uint256 internal immutable deployTimeChainId = block.chainid;\n\n    function _chainIdChanged() internal view returns (bool) {\n        return deployTimeChainId != block.chainid;\n    }\n\n    /// @inheritdoc IInbox\n    function pause() external onlyRollupOrOwner {\n        _pause();\n    }\n\n    /// @inheritdoc IInbox\n    function unpause() external onlyRollupOrOwner {\n        _unpause();\n    }\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox)\n        external\n        initializer\n        onlyDelegated\n    {\n        bridge = _bridge;\n        sequencerInbox = _sequencerInbox;\n        allowListEnabled = false;\n        __Pausable_init();\n    }\n\n    /// @inheritdoc IInbox\n    function postUpgradeInit(IBridge) external onlyDelegated onlyProxyOwner {}\n\n    /// @inheritdoc IInbox\n    function sendL2MessageFromOrigin(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        if (messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(L2_MSG, msg.sender, keccak256(messageData));\n        emit InboxMessageDeliveredFromOrigin(msgNum);\n        return msgNum;\n    }\n\n    /// @inheritdoc IInbox\n    function sendL2Message(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        return _deliverMessage(L2_MSG, msg.sender, messageData);\n    }\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(address(100))), // ArbSys address\n                    value,\n                    abi.encode(ArbSys.withdrawEth.selector, withdrawTo)\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        public\n        view\n        returns (uint256)\n    {\n        // Use current block basefee if baseFee parameter is 0\n        return (1400 + 6 * dataLength) * (baseFee == 0 ? block.basefee : baseFee);\n    }\n\n    /// @inheritdoc IInbox\n    function depositEth() public payable whenNotPaused onlyAllowed returns (uint256) {\n        address dest = msg.sender;\n\n        // solhint-disable-next-line avoid-tx-origin\n        if (AddressUpgradeable.isContract(msg.sender) || tx.origin != msg.sender) {\n            // isContract check fails if this function is called during a contract\'s constructor.\n            dest = AddressAliasHelper.applyL1ToL2Alias(msg.sender);\n        }\n\n        return\n            _deliverMessage(\n                L1MessageType_ethDeposit,\n                msg.sender,\n                abi.encodePacked(dest, msg.value)\n            );\n    }\n\n    /// @notice deprecated in favour of depositEth with no parameters\n    function depositEth(uint256) external payable whenNotPaused onlyAllowed returns (uint256) {\n        return depositEth();\n    }\n\n    /**\n     * @notice deprecated in favour of unsafeCreateRetryableTicket\n     * @dev deprecated in favour of unsafeCreateRetryableTicket\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user\'s L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user\'s L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicketNoRefundAliasRewrite(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) public payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        // arbos will discard retryable with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                msg.sender,\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    /// @notice This is an one-time-exception to resolve a misconfiguration of Uniswap Arbitrum deployment\n    ///         Only the Uniswap L1 Timelock may call this function and it is allowed to create a crosschain\n    ///         retryable ticket without address aliasing. More info here:\n    ///         https://gov.uniswap.org/t/consensus-check-fix-the-cross-chain-messaging-bridge-on-arbitrum/18547\n    /// @dev    This function will be removed in future releases\n    function uniswapCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // this can only be called by UNISWAP_L1_TIMELOCK\n        require(msg.sender == UNISWAP_L1_TIMELOCK, "NOT_UNISWAP_L1_TIMELOCK");\n        // the retryable can only call UNISWAP_L2_FACTORY\n        require(to == UNISWAP_L2_FACTORY, "NOT_TO_UNISWAP_L2_FACTORY");\n\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    function _deliverMessage(\n        uint8 _kind,\n        address _sender,\n        bytes memory _messageData\n    ) internal returns (uint256) {\n        if (_messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(_messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(_kind, _sender, keccak256(_messageData));\n        emit InboxMessageDelivered(msgNum, _messageData);\n        return msgNum;\n    }\n\n    function deliverToBridge(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) internal returns (uint256) {\n        return\n            bridge.enqueueDelayedMessage{value: msg.value}(\n                kind,\n                AddressAliasHelper.applyL1ToL2Alias(sender),\n                messageDataHash\n            );\n    }\n}', 'modifiers': [None, None], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'Inbox.sendL1FundedUnsignedTransaction', 'start_line': 522, 'end_line': 547, 'offset_start': 18408, 'offset_end': 19230, 'content': 'function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }', 'contract_name': 'Inbox', 'contract_code': '{\n    IBridge public bridge;\n    ISequencerInbox public sequencerInbox;\n\n    /// ------------------------------------ allow list start ------------------------------------ ///\n\n    bool public allowListEnabled;\n    mapping(address => bool) public isAllowed;\n\n    event AllowListAddressSet(address indexed user, bool val);\n    event AllowListEnabledUpdated(bool isEnabled);\n\n    function setAllowList(address[] memory user, bool[] memory val) external onlyRollupOrOwner {\n        require(user.length == val.length, "INVALID_INPUT");\n\n        for (uint256 i = 0; i < user.length; i++) {\n            isAllowed[user[i]] = val[i];\n            emit AllowListAddressSet(user[i], val[i]);\n        }\n    }\n\n    function setAllowListEnabled(bool _allowListEnabled) external onlyRollupOrOwner {\n        require(_allowListEnabled != allowListEnabled, "ALREADY_SET");\n        allowListEnabled = _allowListEnabled;\n        emit AllowListEnabledUpdated(_allowListEnabled);\n    }\n\n    /// @dev this modifier checks the tx.origin instead of msg.sender for convenience (ie it allows\n    /// allowed users to interact with the token bridge without needing the token bridge to be allowList aware).\n    /// this modifier is not intended to use to be used for security (since this opens the allowList to\n    /// a smart contract phishing risk).\n    modifier onlyAllowed() {\n        // solhint-disable-next-line avoid-tx-origin\n        if (allowListEnabled && !isAllowed[tx.origin]) revert NotAllowedOrigin(tx.origin);\n        _;\n    }\n\n    /// ------------------------------------ allow list end ------------------------------------ ///\n\n    modifier onlyRollupOrOwner() {\n        IOwnable rollup = bridge.rollup();\n        if (msg.sender != address(rollup)) {\n            address rollupOwner = rollup.owner();\n            if (msg.sender != rollupOwner) {\n                revert NotRollupOrOwner(msg.sender, address(rollup), rollupOwner);\n            }\n        }\n        _;\n    }\n\n    uint256 internal immutable deployTimeChainId = block.chainid;\n\n    function _chainIdChanged() internal view returns (bool) {\n        return deployTimeChainId != block.chainid;\n    }\n\n    /// @inheritdoc IInbox\n    function pause() external onlyRollupOrOwner {\n        _pause();\n    }\n\n    /// @inheritdoc IInbox\n    function unpause() external onlyRollupOrOwner {\n        _unpause();\n    }\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox)\n        external\n        initializer\n        onlyDelegated\n    {\n        bridge = _bridge;\n        sequencerInbox = _sequencerInbox;\n        allowListEnabled = false;\n        __Pausable_init();\n    }\n\n    /// @inheritdoc IInbox\n    function postUpgradeInit(IBridge) external onlyDelegated onlyProxyOwner {}\n\n    /// @inheritdoc IInbox\n    function sendL2MessageFromOrigin(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        if (messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(L2_MSG, msg.sender, keccak256(messageData));\n        emit InboxMessageDeliveredFromOrigin(msgNum);\n        return msgNum;\n    }\n\n    /// @inheritdoc IInbox\n    function sendL2Message(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        return _deliverMessage(L2_MSG, msg.sender, messageData);\n    }\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(address(100))), // ArbSys address\n                    value,\n                    abi.encode(ArbSys.withdrawEth.selector, withdrawTo)\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        public\n        view\n        returns (uint256)\n    {\n        // Use current block basefee if baseFee parameter is 0\n        return (1400 + 6 * dataLength) * (baseFee == 0 ? block.basefee : baseFee);\n    }\n\n    /// @inheritdoc IInbox\n    function depositEth() public payable whenNotPaused onlyAllowed returns (uint256) {\n        address dest = msg.sender;\n\n        // solhint-disable-next-line avoid-tx-origin\n        if (AddressUpgradeable.isContract(msg.sender) || tx.origin != msg.sender) {\n            // isContract check fails if this function is called during a contract\'s constructor.\n            dest = AddressAliasHelper.applyL1ToL2Alias(msg.sender);\n        }\n\n        return\n            _deliverMessage(\n                L1MessageType_ethDeposit,\n                msg.sender,\n                abi.encodePacked(dest, msg.value)\n            );\n    }\n\n    /// @notice deprecated in favour of depositEth with no parameters\n    function depositEth(uint256) external payable whenNotPaused onlyAllowed returns (uint256) {\n        return depositEth();\n    }\n\n    /**\n     * @notice deprecated in favour of unsafeCreateRetryableTicket\n     * @dev deprecated in favour of unsafeCreateRetryableTicket\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user\'s L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user\'s L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicketNoRefundAliasRewrite(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) public payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        // arbos will discard retryable with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                msg.sender,\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    /// @notice This is an one-time-exception to resolve a misconfiguration of Uniswap Arbitrum deployment\n    ///         Only the Uniswap L1 Timelock may call this function and it is allowed to create a crosschain\n    ///         retryable ticket without address aliasing. More info here:\n    ///         https://gov.uniswap.org/t/consensus-check-fix-the-cross-chain-messaging-bridge-on-arbitrum/18547\n    /// @dev    This function will be removed in future releases\n    function uniswapCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // this can only be called by UNISWAP_L1_TIMELOCK\n        require(msg.sender == UNISWAP_L1_TIMELOCK, "NOT_UNISWAP_L1_TIMELOCK");\n        // the retryable can only call UNISWAP_L2_FACTORY\n        require(to == UNISWAP_L2_FACTORY, "NOT_TO_UNISWAP_L2_FACTORY");\n\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    function _deliverMessage(\n        uint8 _kind,\n        address _sender,\n        bytes memory _messageData\n    ) internal returns (uint256) {\n        if (_messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(_messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(_kind, _sender, keccak256(_messageData));\n        emit InboxMessageDelivered(msgNum, _messageData);\n        return msgNum;\n    }\n\n    function deliverToBridge(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) internal returns (uint256) {\n        return\n            bridge.enqueueDelayedMessage{value: msg.value}(\n                kind,\n                AddressAliasHelper.applyL1ToL2Alias(sender),\n                messageDataHash\n            );\n    }\n}', 'modifiers': [None, None], 'stateMutability': 'payable', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'Inbox.sendL1FundedContractTransaction', 'start_line': 549, 'end_line': 572, 'offset_start': 19237, 'offset_end': 20014, 'content': 'function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }', 'contract_name': 'Inbox', 'contract_code': '{\n    IBridge public bridge;\n    ISequencerInbox public sequencerInbox;\n\n    /// ------------------------------------ allow list start ------------------------------------ ///\n\n    bool public allowListEnabled;\n    mapping(address => bool) public isAllowed;\n\n    event AllowListAddressSet(address indexed user, bool val);\n    event AllowListEnabledUpdated(bool isEnabled);\n\n    function setAllowList(address[] memory user, bool[] memory val) external onlyRollupOrOwner {\n        require(user.length == val.length, "INVALID_INPUT");\n\n        for (uint256 i = 0; i < user.length; i++) {\n            isAllowed[user[i]] = val[i];\n            emit AllowListAddressSet(user[i], val[i]);\n        }\n    }\n\n    function setAllowListEnabled(bool _allowListEnabled) external onlyRollupOrOwner {\n        require(_allowListEnabled != allowListEnabled, "ALREADY_SET");\n        allowListEnabled = _allowListEnabled;\n        emit AllowListEnabledUpdated(_allowListEnabled);\n    }\n\n    /// @dev this modifier checks the tx.origin instead of msg.sender for convenience (ie it allows\n    /// allowed users to interact with the token bridge without needing the token bridge to be allowList aware).\n    /// this modifier is not intended to use to be used for security (since this opens the allowList to\n    /// a smart contract phishing risk).\n    modifier onlyAllowed() {\n        // solhint-disable-next-line avoid-tx-origin\n        if (allowListEnabled && !isAllowed[tx.origin]) revert NotAllowedOrigin(tx.origin);\n        _;\n    }\n\n    /// ------------------------------------ allow list end ------------------------------------ ///\n\n    modifier onlyRollupOrOwner() {\n        IOwnable rollup = bridge.rollup();\n        if (msg.sender != address(rollup)) {\n            address rollupOwner = rollup.owner();\n            if (msg.sender != rollupOwner) {\n                revert NotRollupOrOwner(msg.sender, address(rollup), rollupOwner);\n            }\n        }\n        _;\n    }\n\n    uint256 internal immutable deployTimeChainId = block.chainid;\n\n    function _chainIdChanged() internal view returns (bool) {\n        return deployTimeChainId != block.chainid;\n    }\n\n    /// @inheritdoc IInbox\n    function pause() external onlyRollupOrOwner {\n        _pause();\n    }\n\n    /// @inheritdoc IInbox\n    function unpause() external onlyRollupOrOwner {\n        _unpause();\n    }\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox)\n        external\n        initializer\n        onlyDelegated\n    {\n        bridge = _bridge;\n        sequencerInbox = _sequencerInbox;\n        allowListEnabled = false;\n        __Pausable_init();\n    }\n\n    /// @inheritdoc IInbox\n    function postUpgradeInit(IBridge) external onlyDelegated onlyProxyOwner {}\n\n    /// @inheritdoc IInbox\n    function sendL2MessageFromOrigin(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        if (messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(L2_MSG, msg.sender, keccak256(messageData));\n        emit InboxMessageDeliveredFromOrigin(msgNum);\n        return msgNum;\n    }\n\n    /// @inheritdoc IInbox\n    function sendL2Message(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        return _deliverMessage(L2_MSG, msg.sender, messageData);\n    }\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(address(100))), // ArbSys address\n                    value,\n                    abi.encode(ArbSys.withdrawEth.selector, withdrawTo)\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        public\n        view\n        returns (uint256)\n    {\n        // Use current block basefee if baseFee parameter is 0\n        return (1400 + 6 * dataLength) * (baseFee == 0 ? block.basefee : baseFee);\n    }\n\n    /// @inheritdoc IInbox\n    function depositEth() public payable whenNotPaused onlyAllowed returns (uint256) {\n        address dest = msg.sender;\n\n        // solhint-disable-next-line avoid-tx-origin\n        if (AddressUpgradeable.isContract(msg.sender) || tx.origin != msg.sender) {\n            // isContract check fails if this function is called during a contract\'s constructor.\n            dest = AddressAliasHelper.applyL1ToL2Alias(msg.sender);\n        }\n\n        return\n            _deliverMessage(\n                L1MessageType_ethDeposit,\n                msg.sender,\n                abi.encodePacked(dest, msg.value)\n            );\n    }\n\n    /// @notice deprecated in favour of depositEth with no parameters\n    function depositEth(uint256) external payable whenNotPaused onlyAllowed returns (uint256) {\n        return depositEth();\n    }\n\n    /**\n     * @notice deprecated in favour of unsafeCreateRetryableTicket\n     * @dev deprecated in favour of unsafeCreateRetryableTicket\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user\'s L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user\'s L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicketNoRefundAliasRewrite(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) public payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        // arbos will discard retryable with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                msg.sender,\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    /// @notice This is an one-time-exception to resolve a misconfiguration of Uniswap Arbitrum deployment\n    ///         Only the Uniswap L1 Timelock may call this function and it is allowed to create a crosschain\n    ///         retryable ticket without address aliasing. More info here:\n    ///         https://gov.uniswap.org/t/consensus-check-fix-the-cross-chain-messaging-bridge-on-arbitrum/18547\n    /// @dev    This function will be removed in future releases\n    function uniswapCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // this can only be called by UNISWAP_L1_TIMELOCK\n        require(msg.sender == UNISWAP_L1_TIMELOCK, "NOT_UNISWAP_L1_TIMELOCK");\n        // the retryable can only call UNISWAP_L2_FACTORY\n        require(to == UNISWAP_L2_FACTORY, "NOT_TO_UNISWAP_L2_FACTORY");\n\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    function _deliverMessage(\n        uint8 _kind,\n        address _sender,\n        bytes memory _messageData\n    ) internal returns (uint256) {\n        if (_messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(_messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(_kind, _sender, keccak256(_messageData));\n        emit InboxMessageDelivered(msgNum, _messageData);\n        return msgNum;\n    }\n\n    function deliverToBridge(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) internal returns (uint256) {\n        return\n            bridge.enqueueDelayedMessage{value: msg.value}(\n                kind,\n                AddressAliasHelper.applyL1ToL2Alias(sender),\n                messageDataHash\n            );\n    }\n}', 'modifiers': [None, None], 'stateMutability': 'payable', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'Inbox.sendUnsignedTransaction', 'start_line': 574, 'end_line': 600, 'offset_start': 20021, 'offset_end': 20826, 'content': 'function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }', 'contract_name': 'Inbox', 'contract_code': '{\n    IBridge public bridge;\n    ISequencerInbox public sequencerInbox;\n\n    /// ------------------------------------ allow list start ------------------------------------ ///\n\n    bool public allowListEnabled;\n    mapping(address => bool) public isAllowed;\n\n    event AllowListAddressSet(address indexed user, bool val);\n    event AllowListEnabledUpdated(bool isEnabled);\n\n    function setAllowList(address[] memory user, bool[] memory val) external onlyRollupOrOwner {\n        require(user.length == val.length, "INVALID_INPUT");\n\n        for (uint256 i = 0; i < user.length; i++) {\n            isAllowed[user[i]] = val[i];\n            emit AllowListAddressSet(user[i], val[i]);\n        }\n    }\n\n    function setAllowListEnabled(bool _allowListEnabled) external onlyRollupOrOwner {\n        require(_allowListEnabled != allowListEnabled, "ALREADY_SET");\n        allowListEnabled = _allowListEnabled;\n        emit AllowListEnabledUpdated(_allowListEnabled);\n    }\n\n    /// @dev this modifier checks the tx.origin instead of msg.sender for convenience (ie it allows\n    /// allowed users to interact with the token bridge without needing the token bridge to be allowList aware).\n    /// this modifier is not intended to use to be used for security (since this opens the allowList to\n    /// a smart contract phishing risk).\n    modifier onlyAllowed() {\n        // solhint-disable-next-line avoid-tx-origin\n        if (allowListEnabled && !isAllowed[tx.origin]) revert NotAllowedOrigin(tx.origin);\n        _;\n    }\n\n    /// ------------------------------------ allow list end ------------------------------------ ///\n\n    modifier onlyRollupOrOwner() {\n        IOwnable rollup = bridge.rollup();\n        if (msg.sender != address(rollup)) {\n            address rollupOwner = rollup.owner();\n            if (msg.sender != rollupOwner) {\n                revert NotRollupOrOwner(msg.sender, address(rollup), rollupOwner);\n            }\n        }\n        _;\n    }\n\n    uint256 internal immutable deployTimeChainId = block.chainid;\n\n    function _chainIdChanged() internal view returns (bool) {\n        return deployTimeChainId != block.chainid;\n    }\n\n    /// @inheritdoc IInbox\n    function pause() external onlyRollupOrOwner {\n        _pause();\n    }\n\n    /// @inheritdoc IInbox\n    function unpause() external onlyRollupOrOwner {\n        _unpause();\n    }\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox)\n        external\n        initializer\n        onlyDelegated\n    {\n        bridge = _bridge;\n        sequencerInbox = _sequencerInbox;\n        allowListEnabled = false;\n        __Pausable_init();\n    }\n\n    /// @inheritdoc IInbox\n    function postUpgradeInit(IBridge) external onlyDelegated onlyProxyOwner {}\n\n    /// @inheritdoc IInbox\n    function sendL2MessageFromOrigin(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        if (messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(L2_MSG, msg.sender, keccak256(messageData));\n        emit InboxMessageDeliveredFromOrigin(msgNum);\n        return msgNum;\n    }\n\n    /// @inheritdoc IInbox\n    function sendL2Message(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        return _deliverMessage(L2_MSG, msg.sender, messageData);\n    }\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(address(100))), // ArbSys address\n                    value,\n                    abi.encode(ArbSys.withdrawEth.selector, withdrawTo)\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        public\n        view\n        returns (uint256)\n    {\n        // Use current block basefee if baseFee parameter is 0\n        return (1400 + 6 * dataLength) * (baseFee == 0 ? block.basefee : baseFee);\n    }\n\n    /// @inheritdoc IInbox\n    function depositEth() public payable whenNotPaused onlyAllowed returns (uint256) {\n        address dest = msg.sender;\n\n        // solhint-disable-next-line avoid-tx-origin\n        if (AddressUpgradeable.isContract(msg.sender) || tx.origin != msg.sender) {\n            // isContract check fails if this function is called during a contract\'s constructor.\n            dest = AddressAliasHelper.applyL1ToL2Alias(msg.sender);\n        }\n\n        return\n            _deliverMessage(\n                L1MessageType_ethDeposit,\n                msg.sender,\n                abi.encodePacked(dest, msg.value)\n            );\n    }\n\n    /// @notice deprecated in favour of depositEth with no parameters\n    function depositEth(uint256) external payable whenNotPaused onlyAllowed returns (uint256) {\n        return depositEth();\n    }\n\n    /**\n     * @notice deprecated in favour of unsafeCreateRetryableTicket\n     * @dev deprecated in favour of unsafeCreateRetryableTicket\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user\'s L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user\'s L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicketNoRefundAliasRewrite(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) public payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        // arbos will discard retryable with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                msg.sender,\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    /// @notice This is an one-time-exception to resolve a misconfiguration of Uniswap Arbitrum deployment\n    ///         Only the Uniswap L1 Timelock may call this function and it is allowed to create a crosschain\n    ///         retryable ticket without address aliasing. More info here:\n    ///         https://gov.uniswap.org/t/consensus-check-fix-the-cross-chain-messaging-bridge-on-arbitrum/18547\n    /// @dev    This function will be removed in future releases\n    function uniswapCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // this can only be called by UNISWAP_L1_TIMELOCK\n        require(msg.sender == UNISWAP_L1_TIMELOCK, "NOT_UNISWAP_L1_TIMELOCK");\n        // the retryable can only call UNISWAP_L2_FACTORY\n        require(to == UNISWAP_L2_FACTORY, "NOT_TO_UNISWAP_L2_FACTORY");\n\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    function _deliverMessage(\n        uint8 _kind,\n        address _sender,\n        bytes memory _messageData\n    ) internal returns (uint256) {\n        if (_messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(_messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(_kind, _sender, keccak256(_messageData));\n        emit InboxMessageDelivered(msgNum, _messageData);\n        return msgNum;\n    }\n\n    function deliverToBridge(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) internal returns (uint256) {\n        return\n            bridge.enqueueDelayedMessage{value: msg.value}(\n                kind,\n                AddressAliasHelper.applyL1ToL2Alias(sender),\n                messageDataHash\n            );\n    }\n}', 'modifiers': [None, None], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'Inbox.sendContractTransaction', 'start_line': 602, 'end_line': 626, 'offset_start': 20833, 'offset_end': 21593, 'content': 'function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }', 'contract_name': 'Inbox', 'contract_code': '{\n    IBridge public bridge;\n    ISequencerInbox public sequencerInbox;\n\n    /// ------------------------------------ allow list start ------------------------------------ ///\n\n    bool public allowListEnabled;\n    mapping(address => bool) public isAllowed;\n\n    event AllowListAddressSet(address indexed user, bool val);\n    event AllowListEnabledUpdated(bool isEnabled);\n\n    function setAllowList(address[] memory user, bool[] memory val) external onlyRollupOrOwner {\n        require(user.length == val.length, "INVALID_INPUT");\n\n        for (uint256 i = 0; i < user.length; i++) {\n            isAllowed[user[i]] = val[i];\n            emit AllowListAddressSet(user[i], val[i]);\n        }\n    }\n\n    function setAllowListEnabled(bool _allowListEnabled) external onlyRollupOrOwner {\n        require(_allowListEnabled != allowListEnabled, "ALREADY_SET");\n        allowListEnabled = _allowListEnabled;\n        emit AllowListEnabledUpdated(_allowListEnabled);\n    }\n\n    /// @dev this modifier checks the tx.origin instead of msg.sender for convenience (ie it allows\n    /// allowed users to interact with the token bridge without needing the token bridge to be allowList aware).\n    /// this modifier is not intended to use to be used for security (since this opens the allowList to\n    /// a smart contract phishing risk).\n    modifier onlyAllowed() {\n        // solhint-disable-next-line avoid-tx-origin\n        if (allowListEnabled && !isAllowed[tx.origin]) revert NotAllowedOrigin(tx.origin);\n        _;\n    }\n\n    /// ------------------------------------ allow list end ------------------------------------ ///\n\n    modifier onlyRollupOrOwner() {\n        IOwnable rollup = bridge.rollup();\n        if (msg.sender != address(rollup)) {\n            address rollupOwner = rollup.owner();\n            if (msg.sender != rollupOwner) {\n                revert NotRollupOrOwner(msg.sender, address(rollup), rollupOwner);\n            }\n        }\n        _;\n    }\n\n    uint256 internal immutable deployTimeChainId = block.chainid;\n\n    function _chainIdChanged() internal view returns (bool) {\n        return deployTimeChainId != block.chainid;\n    }\n\n    /// @inheritdoc IInbox\n    function pause() external onlyRollupOrOwner {\n        _pause();\n    }\n\n    /// @inheritdoc IInbox\n    function unpause() external onlyRollupOrOwner {\n        _unpause();\n    }\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox)\n        external\n        initializer\n        onlyDelegated\n    {\n        bridge = _bridge;\n        sequencerInbox = _sequencerInbox;\n        allowListEnabled = false;\n        __Pausable_init();\n    }\n\n    /// @inheritdoc IInbox\n    function postUpgradeInit(IBridge) external onlyDelegated onlyProxyOwner {}\n\n    /// @inheritdoc IInbox\n    function sendL2MessageFromOrigin(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        if (messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(L2_MSG, msg.sender, keccak256(messageData));\n        emit InboxMessageDeliveredFromOrigin(msgNum);\n        return msgNum;\n    }\n\n    /// @inheritdoc IInbox\n    function sendL2Message(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        return _deliverMessage(L2_MSG, msg.sender, messageData);\n    }\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(address(100))), // ArbSys address\n                    value,\n                    abi.encode(ArbSys.withdrawEth.selector, withdrawTo)\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        public\n        view\n        returns (uint256)\n    {\n        // Use current block basefee if baseFee parameter is 0\n        return (1400 + 6 * dataLength) * (baseFee == 0 ? block.basefee : baseFee);\n    }\n\n    /// @inheritdoc IInbox\n    function depositEth() public payable whenNotPaused onlyAllowed returns (uint256) {\n        address dest = msg.sender;\n\n        // solhint-disable-next-line avoid-tx-origin\n        if (AddressUpgradeable.isContract(msg.sender) || tx.origin != msg.sender) {\n            // isContract check fails if this function is called during a contract\'s constructor.\n            dest = AddressAliasHelper.applyL1ToL2Alias(msg.sender);\n        }\n\n        return\n            _deliverMessage(\n                L1MessageType_ethDeposit,\n                msg.sender,\n                abi.encodePacked(dest, msg.value)\n            );\n    }\n\n    /// @notice deprecated in favour of depositEth with no parameters\n    function depositEth(uint256) external payable whenNotPaused onlyAllowed returns (uint256) {\n        return depositEth();\n    }\n\n    /**\n     * @notice deprecated in favour of unsafeCreateRetryableTicket\n     * @dev deprecated in favour of unsafeCreateRetryableTicket\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user\'s L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user\'s L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicketNoRefundAliasRewrite(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) public payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        // arbos will discard retryable with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                msg.sender,\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    /// @notice This is an one-time-exception to resolve a misconfiguration of Uniswap Arbitrum deployment\n    ///         Only the Uniswap L1 Timelock may call this function and it is allowed to create a crosschain\n    ///         retryable ticket without address aliasing. More info here:\n    ///         https://gov.uniswap.org/t/consensus-check-fix-the-cross-chain-messaging-bridge-on-arbitrum/18547\n    /// @dev    This function will be removed in future releases\n    function uniswapCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // this can only be called by UNISWAP_L1_TIMELOCK\n        require(msg.sender == UNISWAP_L1_TIMELOCK, "NOT_UNISWAP_L1_TIMELOCK");\n        // the retryable can only call UNISWAP_L2_FACTORY\n        require(to == UNISWAP_L2_FACTORY, "NOT_TO_UNISWAP_L2_FACTORY");\n\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    function _deliverMessage(\n        uint8 _kind,\n        address _sender,\n        bytes memory _messageData\n    ) internal returns (uint256) {\n        if (_messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(_messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(_kind, _sender, keccak256(_messageData));\n        emit InboxMessageDelivered(msgNum, _messageData);\n        return msgNum;\n    }\n\n    function deliverToBridge(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) internal returns (uint256) {\n        return\n            bridge.enqueueDelayedMessage{value: msg.value}(\n                kind,\n                AddressAliasHelper.applyL1ToL2Alias(sender),\n                messageDataHash\n            );\n    }\n}', 'modifiers': [None, None], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'Inbox.sendL1FundedUnsignedTransactionToFork', 'start_line': 629, 'end_line': 658, 'offset_start': 21627, 'offset_end': 22725, 'content': 'function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }', 'contract_name': 'Inbox', 'contract_code': '{\n    IBridge public bridge;\n    ISequencerInbox public sequencerInbox;\n\n    /// ------------------------------------ allow list start ------------------------------------ ///\n\n    bool public allowListEnabled;\n    mapping(address => bool) public isAllowed;\n\n    event AllowListAddressSet(address indexed user, bool val);\n    event AllowListEnabledUpdated(bool isEnabled);\n\n    function setAllowList(address[] memory user, bool[] memory val) external onlyRollupOrOwner {\n        require(user.length == val.length, "INVALID_INPUT");\n\n        for (uint256 i = 0; i < user.length; i++) {\n            isAllowed[user[i]] = val[i];\n            emit AllowListAddressSet(user[i], val[i]);\n        }\n    }\n\n    function setAllowListEnabled(bool _allowListEnabled) external onlyRollupOrOwner {\n        require(_allowListEnabled != allowListEnabled, "ALREADY_SET");\n        allowListEnabled = _allowListEnabled;\n        emit AllowListEnabledUpdated(_allowListEnabled);\n    }\n\n    /// @dev this modifier checks the tx.origin instead of msg.sender for convenience (ie it allows\n    /// allowed users to interact with the token bridge without needing the token bridge to be allowList aware).\n    /// this modifier is not intended to use to be used for security (since this opens the allowList to\n    /// a smart contract phishing risk).\n    modifier onlyAllowed() {\n        // solhint-disable-next-line avoid-tx-origin\n        if (allowListEnabled && !isAllowed[tx.origin]) revert NotAllowedOrigin(tx.origin);\n        _;\n    }\n\n    /// ------------------------------------ allow list end ------------------------------------ ///\n\n    modifier onlyRollupOrOwner() {\n        IOwnable rollup = bridge.rollup();\n        if (msg.sender != address(rollup)) {\n            address rollupOwner = rollup.owner();\n            if (msg.sender != rollupOwner) {\n                revert NotRollupOrOwner(msg.sender, address(rollup), rollupOwner);\n            }\n        }\n        _;\n    }\n\n    uint256 internal immutable deployTimeChainId = block.chainid;\n\n    function _chainIdChanged() internal view returns (bool) {\n        return deployTimeChainId != block.chainid;\n    }\n\n    /// @inheritdoc IInbox\n    function pause() external onlyRollupOrOwner {\n        _pause();\n    }\n\n    /// @inheritdoc IInbox\n    function unpause() external onlyRollupOrOwner {\n        _unpause();\n    }\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox)\n        external\n        initializer\n        onlyDelegated\n    {\n        bridge = _bridge;\n        sequencerInbox = _sequencerInbox;\n        allowListEnabled = false;\n        __Pausable_init();\n    }\n\n    /// @inheritdoc IInbox\n    function postUpgradeInit(IBridge) external onlyDelegated onlyProxyOwner {}\n\n    /// @inheritdoc IInbox\n    function sendL2MessageFromOrigin(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        if (messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(L2_MSG, msg.sender, keccak256(messageData));\n        emit InboxMessageDeliveredFromOrigin(msgNum);\n        return msgNum;\n    }\n\n    /// @inheritdoc IInbox\n    function sendL2Message(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        return _deliverMessage(L2_MSG, msg.sender, messageData);\n    }\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(address(100))), // ArbSys address\n                    value,\n                    abi.encode(ArbSys.withdrawEth.selector, withdrawTo)\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        public\n        view\n        returns (uint256)\n    {\n        // Use current block basefee if baseFee parameter is 0\n        return (1400 + 6 * dataLength) * (baseFee == 0 ? block.basefee : baseFee);\n    }\n\n    /// @inheritdoc IInbox\n    function depositEth() public payable whenNotPaused onlyAllowed returns (uint256) {\n        address dest = msg.sender;\n\n        // solhint-disable-next-line avoid-tx-origin\n        if (AddressUpgradeable.isContract(msg.sender) || tx.origin != msg.sender) {\n            // isContract check fails if this function is called during a contract\'s constructor.\n            dest = AddressAliasHelper.applyL1ToL2Alias(msg.sender);\n        }\n\n        return\n            _deliverMessage(\n                L1MessageType_ethDeposit,\n                msg.sender,\n                abi.encodePacked(dest, msg.value)\n            );\n    }\n\n    /// @notice deprecated in favour of depositEth with no parameters\n    function depositEth(uint256) external payable whenNotPaused onlyAllowed returns (uint256) {\n        return depositEth();\n    }\n\n    /**\n     * @notice deprecated in favour of unsafeCreateRetryableTicket\n     * @dev deprecated in favour of unsafeCreateRetryableTicket\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user\'s L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user\'s L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicketNoRefundAliasRewrite(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) public payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        // arbos will discard retryable with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                msg.sender,\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    /// @notice This is an one-time-exception to resolve a misconfiguration of Uniswap Arbitrum deployment\n    ///         Only the Uniswap L1 Timelock may call this function and it is allowed to create a crosschain\n    ///         retryable ticket without address aliasing. More info here:\n    ///         https://gov.uniswap.org/t/consensus-check-fix-the-cross-chain-messaging-bridge-on-arbitrum/18547\n    /// @dev    This function will be removed in future releases\n    function uniswapCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // this can only be called by UNISWAP_L1_TIMELOCK\n        require(msg.sender == UNISWAP_L1_TIMELOCK, "NOT_UNISWAP_L1_TIMELOCK");\n        // the retryable can only call UNISWAP_L2_FACTORY\n        require(to == UNISWAP_L2_FACTORY, "NOT_TO_UNISWAP_L2_FACTORY");\n\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    function _deliverMessage(\n        uint8 _kind,\n        address _sender,\n        bytes memory _messageData\n    ) internal returns (uint256) {\n        if (_messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(_messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(_kind, _sender, keccak256(_messageData));\n        emit InboxMessageDelivered(msgNum, _messageData);\n        return msgNum;\n    }\n\n    function deliverToBridge(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) internal returns (uint256) {\n        return\n            bridge.enqueueDelayedMessage{value: msg.value}(\n                kind,\n                AddressAliasHelper.applyL1ToL2Alias(sender),\n                messageDataHash\n            );\n    }\n}', 'modifiers': [None, None], 'stateMutability': 'payable', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'Inbox.sendUnsignedTransactionToFork', 'start_line': 661, 'end_line': 691, 'offset_start': 22759, 'offset_end': 23840, 'content': 'function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }', 'contract_name': 'Inbox', 'contract_code': '{\n    IBridge public bridge;\n    ISequencerInbox public sequencerInbox;\n\n    /// ------------------------------------ allow list start ------------------------------------ ///\n\n    bool public allowListEnabled;\n    mapping(address => bool) public isAllowed;\n\n    event AllowListAddressSet(address indexed user, bool val);\n    event AllowListEnabledUpdated(bool isEnabled);\n\n    function setAllowList(address[] memory user, bool[] memory val) external onlyRollupOrOwner {\n        require(user.length == val.length, "INVALID_INPUT");\n\n        for (uint256 i = 0; i < user.length; i++) {\n            isAllowed[user[i]] = val[i];\n            emit AllowListAddressSet(user[i], val[i]);\n        }\n    }\n\n    function setAllowListEnabled(bool _allowListEnabled) external onlyRollupOrOwner {\n        require(_allowListEnabled != allowListEnabled, "ALREADY_SET");\n        allowListEnabled = _allowListEnabled;\n        emit AllowListEnabledUpdated(_allowListEnabled);\n    }\n\n    /// @dev this modifier checks the tx.origin instead of msg.sender for convenience (ie it allows\n    /// allowed users to interact with the token bridge without needing the token bridge to be allowList aware).\n    /// this modifier is not intended to use to be used for security (since this opens the allowList to\n    /// a smart contract phishing risk).\n    modifier onlyAllowed() {\n        // solhint-disable-next-line avoid-tx-origin\n        if (allowListEnabled && !isAllowed[tx.origin]) revert NotAllowedOrigin(tx.origin);\n        _;\n    }\n\n    /// ------------------------------------ allow list end ------------------------------------ ///\n\n    modifier onlyRollupOrOwner() {\n        IOwnable rollup = bridge.rollup();\n        if (msg.sender != address(rollup)) {\n            address rollupOwner = rollup.owner();\n            if (msg.sender != rollupOwner) {\n                revert NotRollupOrOwner(msg.sender, address(rollup), rollupOwner);\n            }\n        }\n        _;\n    }\n\n    uint256 internal immutable deployTimeChainId = block.chainid;\n\n    function _chainIdChanged() internal view returns (bool) {\n        return deployTimeChainId != block.chainid;\n    }\n\n    /// @inheritdoc IInbox\n    function pause() external onlyRollupOrOwner {\n        _pause();\n    }\n\n    /// @inheritdoc IInbox\n    function unpause() external onlyRollupOrOwner {\n        _unpause();\n    }\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox)\n        external\n        initializer\n        onlyDelegated\n    {\n        bridge = _bridge;\n        sequencerInbox = _sequencerInbox;\n        allowListEnabled = false;\n        __Pausable_init();\n    }\n\n    /// @inheritdoc IInbox\n    function postUpgradeInit(IBridge) external onlyDelegated onlyProxyOwner {}\n\n    /// @inheritdoc IInbox\n    function sendL2MessageFromOrigin(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        if (messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(L2_MSG, msg.sender, keccak256(messageData));\n        emit InboxMessageDeliveredFromOrigin(msgNum);\n        return msgNum;\n    }\n\n    /// @inheritdoc IInbox\n    function sendL2Message(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        return _deliverMessage(L2_MSG, msg.sender, messageData);\n    }\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(address(100))), // ArbSys address\n                    value,\n                    abi.encode(ArbSys.withdrawEth.selector, withdrawTo)\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        public\n        view\n        returns (uint256)\n    {\n        // Use current block basefee if baseFee parameter is 0\n        return (1400 + 6 * dataLength) * (baseFee == 0 ? block.basefee : baseFee);\n    }\n\n    /// @inheritdoc IInbox\n    function depositEth() public payable whenNotPaused onlyAllowed returns (uint256) {\n        address dest = msg.sender;\n\n        // solhint-disable-next-line avoid-tx-origin\n        if (AddressUpgradeable.isContract(msg.sender) || tx.origin != msg.sender) {\n            // isContract check fails if this function is called during a contract\'s constructor.\n            dest = AddressAliasHelper.applyL1ToL2Alias(msg.sender);\n        }\n\n        return\n            _deliverMessage(\n                L1MessageType_ethDeposit,\n                msg.sender,\n                abi.encodePacked(dest, msg.value)\n            );\n    }\n\n    /// @notice deprecated in favour of depositEth with no parameters\n    function depositEth(uint256) external payable whenNotPaused onlyAllowed returns (uint256) {\n        return depositEth();\n    }\n\n    /**\n     * @notice deprecated in favour of unsafeCreateRetryableTicket\n     * @dev deprecated in favour of unsafeCreateRetryableTicket\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user\'s L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user\'s L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicketNoRefundAliasRewrite(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) public payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        // arbos will discard retryable with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                msg.sender,\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    /// @notice This is an one-time-exception to resolve a misconfiguration of Uniswap Arbitrum deployment\n    ///         Only the Uniswap L1 Timelock may call this function and it is allowed to create a crosschain\n    ///         retryable ticket without address aliasing. More info here:\n    ///         https://gov.uniswap.org/t/consensus-check-fix-the-cross-chain-messaging-bridge-on-arbitrum/18547\n    /// @dev    This function will be removed in future releases\n    function uniswapCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // this can only be called by UNISWAP_L1_TIMELOCK\n        require(msg.sender == UNISWAP_L1_TIMELOCK, "NOT_UNISWAP_L1_TIMELOCK");\n        // the retryable can only call UNISWAP_L2_FACTORY\n        require(to == UNISWAP_L2_FACTORY, "NOT_TO_UNISWAP_L2_FACTORY");\n\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    function _deliverMessage(\n        uint8 _kind,\n        address _sender,\n        bytes memory _messageData\n    ) internal returns (uint256) {\n        if (_messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(_messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(_kind, _sender, keccak256(_messageData));\n        emit InboxMessageDelivered(msgNum, _messageData);\n        return msgNum;\n    }\n\n    function deliverToBridge(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) internal returns (uint256) {\n        return\n            bridge.enqueueDelayedMessage{value: msg.value}(\n                kind,\n                AddressAliasHelper.applyL1ToL2Alias(sender),\n                messageDataHash\n            );\n    }\n}', 'modifiers': [None, None], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'Inbox.sendWithdrawEthToFork', 'start_line': 694, 'end_line': 723, 'offset_start': 23874, 'offset_end': 25001, 'content': 'function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(address(100))), // ArbSys address\n                    value,\n                    abi.encode(ArbSys.withdrawEth.selector, withdrawTo)\n                )\n            );\n    }', 'contract_name': 'Inbox', 'contract_code': '{\n    IBridge public bridge;\n    ISequencerInbox public sequencerInbox;\n\n    /// ------------------------------------ allow list start ------------------------------------ ///\n\n    bool public allowListEnabled;\n    mapping(address => bool) public isAllowed;\n\n    event AllowListAddressSet(address indexed user, bool val);\n    event AllowListEnabledUpdated(bool isEnabled);\n\n    function setAllowList(address[] memory user, bool[] memory val) external onlyRollupOrOwner {\n        require(user.length == val.length, "INVALID_INPUT");\n\n        for (uint256 i = 0; i < user.length; i++) {\n            isAllowed[user[i]] = val[i];\n            emit AllowListAddressSet(user[i], val[i]);\n        }\n    }\n\n    function setAllowListEnabled(bool _allowListEnabled) external onlyRollupOrOwner {\n        require(_allowListEnabled != allowListEnabled, "ALREADY_SET");\n        allowListEnabled = _allowListEnabled;\n        emit AllowListEnabledUpdated(_allowListEnabled);\n    }\n\n    /// @dev this modifier checks the tx.origin instead of msg.sender for convenience (ie it allows\n    /// allowed users to interact with the token bridge without needing the token bridge to be allowList aware).\n    /// this modifier is not intended to use to be used for security (since this opens the allowList to\n    /// a smart contract phishing risk).\n    modifier onlyAllowed() {\n        // solhint-disable-next-line avoid-tx-origin\n        if (allowListEnabled && !isAllowed[tx.origin]) revert NotAllowedOrigin(tx.origin);\n        _;\n    }\n\n    /// ------------------------------------ allow list end ------------------------------------ ///\n\n    modifier onlyRollupOrOwner() {\n        IOwnable rollup = bridge.rollup();\n        if (msg.sender != address(rollup)) {\n            address rollupOwner = rollup.owner();\n            if (msg.sender != rollupOwner) {\n                revert NotRollupOrOwner(msg.sender, address(rollup), rollupOwner);\n            }\n        }\n        _;\n    }\n\n    uint256 internal immutable deployTimeChainId = block.chainid;\n\n    function _chainIdChanged() internal view returns (bool) {\n        return deployTimeChainId != block.chainid;\n    }\n\n    /// @inheritdoc IInbox\n    function pause() external onlyRollupOrOwner {\n        _pause();\n    }\n\n    /// @inheritdoc IInbox\n    function unpause() external onlyRollupOrOwner {\n        _unpause();\n    }\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox)\n        external\n        initializer\n        onlyDelegated\n    {\n        bridge = _bridge;\n        sequencerInbox = _sequencerInbox;\n        allowListEnabled = false;\n        __Pausable_init();\n    }\n\n    /// @inheritdoc IInbox\n    function postUpgradeInit(IBridge) external onlyDelegated onlyProxyOwner {}\n\n    /// @inheritdoc IInbox\n    function sendL2MessageFromOrigin(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        if (messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(L2_MSG, msg.sender, keccak256(messageData));\n        emit InboxMessageDeliveredFromOrigin(msgNum);\n        return msgNum;\n    }\n\n    /// @inheritdoc IInbox\n    function sendL2Message(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        return _deliverMessage(L2_MSG, msg.sender, messageData);\n    }\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(address(100))), // ArbSys address\n                    value,\n                    abi.encode(ArbSys.withdrawEth.selector, withdrawTo)\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        public\n        view\n        returns (uint256)\n    {\n        // Use current block basefee if baseFee parameter is 0\n        return (1400 + 6 * dataLength) * (baseFee == 0 ? block.basefee : baseFee);\n    }\n\n    /// @inheritdoc IInbox\n    function depositEth() public payable whenNotPaused onlyAllowed returns (uint256) {\n        address dest = msg.sender;\n\n        // solhint-disable-next-line avoid-tx-origin\n        if (AddressUpgradeable.isContract(msg.sender) || tx.origin != msg.sender) {\n            // isContract check fails if this function is called during a contract\'s constructor.\n            dest = AddressAliasHelper.applyL1ToL2Alias(msg.sender);\n        }\n\n        return\n            _deliverMessage(\n                L1MessageType_ethDeposit,\n                msg.sender,\n                abi.encodePacked(dest, msg.value)\n            );\n    }\n\n    /// @notice deprecated in favour of depositEth with no parameters\n    function depositEth(uint256) external payable whenNotPaused onlyAllowed returns (uint256) {\n        return depositEth();\n    }\n\n    /**\n     * @notice deprecated in favour of unsafeCreateRetryableTicket\n     * @dev deprecated in favour of unsafeCreateRetryableTicket\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user\'s L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user\'s L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicketNoRefundAliasRewrite(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) public payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        // arbos will discard retryable with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                msg.sender,\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    /// @notice This is an one-time-exception to resolve a misconfiguration of Uniswap Arbitrum deployment\n    ///         Only the Uniswap L1 Timelock may call this function and it is allowed to create a crosschain\n    ///         retryable ticket without address aliasing. More info here:\n    ///         https://gov.uniswap.org/t/consensus-check-fix-the-cross-chain-messaging-bridge-on-arbitrum/18547\n    /// @dev    This function will be removed in future releases\n    function uniswapCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // this can only be called by UNISWAP_L1_TIMELOCK\n        require(msg.sender == UNISWAP_L1_TIMELOCK, "NOT_UNISWAP_L1_TIMELOCK");\n        // the retryable can only call UNISWAP_L2_FACTORY\n        require(to == UNISWAP_L2_FACTORY, "NOT_TO_UNISWAP_L2_FACTORY");\n\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    function _deliverMessage(\n        uint8 _kind,\n        address _sender,\n        bytes memory _messageData\n    ) internal returns (uint256) {\n        if (_messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(_messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(_kind, _sender, keccak256(_messageData));\n        emit InboxMessageDelivered(msgNum, _messageData);\n        return msgNum;\n    }\n\n    function deliverToBridge(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) internal returns (uint256) {\n        return\n            bridge.enqueueDelayedMessage{value: msg.value}(\n                kind,\n                AddressAliasHelper.applyL1ToL2Alias(sender),\n                messageDataHash\n            );\n    }\n}', 'modifiers': [None, None], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'Inbox.calculateRetryableSubmissionFee', 'start_line': 726, 'end_line': 733, 'offset_start': 25035, 'offset_end': 25323, 'content': 'function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        public\n        view\n        returns (uint256)\n    {\n        // Use current block basefee if baseFee parameter is 0\n        return (1400 + 6 * dataLength) * (baseFee == 0 ? block.basefee : baseFee);\n    }', 'contract_name': 'Inbox', 'contract_code': '{\n    IBridge public bridge;\n    ISequencerInbox public sequencerInbox;\n\n    /// ------------------------------------ allow list start ------------------------------------ ///\n\n    bool public allowListEnabled;\n    mapping(address => bool) public isAllowed;\n\n    event AllowListAddressSet(address indexed user, bool val);\n    event AllowListEnabledUpdated(bool isEnabled);\n\n    function setAllowList(address[] memory user, bool[] memory val) external onlyRollupOrOwner {\n        require(user.length == val.length, "INVALID_INPUT");\n\n        for (uint256 i = 0; i < user.length; i++) {\n            isAllowed[user[i]] = val[i];\n            emit AllowListAddressSet(user[i], val[i]);\n        }\n    }\n\n    function setAllowListEnabled(bool _allowListEnabled) external onlyRollupOrOwner {\n        require(_allowListEnabled != allowListEnabled, "ALREADY_SET");\n        allowListEnabled = _allowListEnabled;\n        emit AllowListEnabledUpdated(_allowListEnabled);\n    }\n\n    /// @dev this modifier checks the tx.origin instead of msg.sender for convenience (ie it allows\n    /// allowed users to interact with the token bridge without needing the token bridge to be allowList aware).\n    /// this modifier is not intended to use to be used for security (since this opens the allowList to\n    /// a smart contract phishing risk).\n    modifier onlyAllowed() {\n        // solhint-disable-next-line avoid-tx-origin\n        if (allowListEnabled && !isAllowed[tx.origin]) revert NotAllowedOrigin(tx.origin);\n        _;\n    }\n\n    /// ------------------------------------ allow list end ------------------------------------ ///\n\n    modifier onlyRollupOrOwner() {\n        IOwnable rollup = bridge.rollup();\n        if (msg.sender != address(rollup)) {\n            address rollupOwner = rollup.owner();\n            if (msg.sender != rollupOwner) {\n                revert NotRollupOrOwner(msg.sender, address(rollup), rollupOwner);\n            }\n        }\n        _;\n    }\n\n    uint256 internal immutable deployTimeChainId = block.chainid;\n\n    function _chainIdChanged() internal view returns (bool) {\n        return deployTimeChainId != block.chainid;\n    }\n\n    /// @inheritdoc IInbox\n    function pause() external onlyRollupOrOwner {\n        _pause();\n    }\n\n    /// @inheritdoc IInbox\n    function unpause() external onlyRollupOrOwner {\n        _unpause();\n    }\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox)\n        external\n        initializer\n        onlyDelegated\n    {\n        bridge = _bridge;\n        sequencerInbox = _sequencerInbox;\n        allowListEnabled = false;\n        __Pausable_init();\n    }\n\n    /// @inheritdoc IInbox\n    function postUpgradeInit(IBridge) external onlyDelegated onlyProxyOwner {}\n\n    /// @inheritdoc IInbox\n    function sendL2MessageFromOrigin(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        if (messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(L2_MSG, msg.sender, keccak256(messageData));\n        emit InboxMessageDeliveredFromOrigin(msgNum);\n        return msgNum;\n    }\n\n    /// @inheritdoc IInbox\n    function sendL2Message(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        return _deliverMessage(L2_MSG, msg.sender, messageData);\n    }\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(address(100))), // ArbSys address\n                    value,\n                    abi.encode(ArbSys.withdrawEth.selector, withdrawTo)\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        public\n        view\n        returns (uint256)\n    {\n        // Use current block basefee if baseFee parameter is 0\n        return (1400 + 6 * dataLength) * (baseFee == 0 ? block.basefee : baseFee);\n    }\n\n    /// @inheritdoc IInbox\n    function depositEth() public payable whenNotPaused onlyAllowed returns (uint256) {\n        address dest = msg.sender;\n\n        // solhint-disable-next-line avoid-tx-origin\n        if (AddressUpgradeable.isContract(msg.sender) || tx.origin != msg.sender) {\n            // isContract check fails if this function is called during a contract\'s constructor.\n            dest = AddressAliasHelper.applyL1ToL2Alias(msg.sender);\n        }\n\n        return\n            _deliverMessage(\n                L1MessageType_ethDeposit,\n                msg.sender,\n                abi.encodePacked(dest, msg.value)\n            );\n    }\n\n    /// @notice deprecated in favour of depositEth with no parameters\n    function depositEth(uint256) external payable whenNotPaused onlyAllowed returns (uint256) {\n        return depositEth();\n    }\n\n    /**\n     * @notice deprecated in favour of unsafeCreateRetryableTicket\n     * @dev deprecated in favour of unsafeCreateRetryableTicket\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user\'s L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user\'s L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicketNoRefundAliasRewrite(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) public payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        // arbos will discard retryable with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                msg.sender,\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    /// @notice This is an one-time-exception to resolve a misconfiguration of Uniswap Arbitrum deployment\n    ///         Only the Uniswap L1 Timelock may call this function and it is allowed to create a crosschain\n    ///         retryable ticket without address aliasing. More info here:\n    ///         https://gov.uniswap.org/t/consensus-check-fix-the-cross-chain-messaging-bridge-on-arbitrum/18547\n    /// @dev    This function will be removed in future releases\n    function uniswapCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // this can only be called by UNISWAP_L1_TIMELOCK\n        require(msg.sender == UNISWAP_L1_TIMELOCK, "NOT_UNISWAP_L1_TIMELOCK");\n        // the retryable can only call UNISWAP_L2_FACTORY\n        require(to == UNISWAP_L2_FACTORY, "NOT_TO_UNISWAP_L2_FACTORY");\n\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    function _deliverMessage(\n        uint8 _kind,\n        address _sender,\n        bytes memory _messageData\n    ) internal returns (uint256) {\n        if (_messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(_messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(_kind, _sender, keccak256(_messageData));\n        emit InboxMessageDelivered(msgNum, _messageData);\n        return msgNum;\n    }\n\n    function deliverToBridge(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) internal returns (uint256) {\n        return\n            bridge.enqueueDelayedMessage{value: msg.value}(\n                kind,\n                AddressAliasHelper.applyL1ToL2Alias(sender),\n                messageDataHash\n            );\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'Inbox.depositEth', 'start_line': 736, 'end_line': 751, 'offset_start': 25357, 'offset_end': 25973, 'content': "function depositEth() public payable whenNotPaused onlyAllowed returns (uint256) {\n        address dest = msg.sender;\n\n        // solhint-disable-next-line avoid-tx-origin\n        if (AddressUpgradeable.isContract(msg.sender) || tx.origin != msg.sender) {\n            // isContract check fails if this function is called during a contract's constructor.\n            dest = AddressAliasHelper.applyL1ToL2Alias(msg.sender);\n        }\n\n        return\n            _deliverMessage(\n                L1MessageType_ethDeposit,\n                msg.sender,\n                abi.encodePacked(dest, msg.value)\n            );\n    }", 'contract_name': 'Inbox', 'contract_code': '{\n    IBridge public bridge;\n    ISequencerInbox public sequencerInbox;\n\n    /// ------------------------------------ allow list start ------------------------------------ ///\n\n    bool public allowListEnabled;\n    mapping(address => bool) public isAllowed;\n\n    event AllowListAddressSet(address indexed user, bool val);\n    event AllowListEnabledUpdated(bool isEnabled);\n\n    function setAllowList(address[] memory user, bool[] memory val) external onlyRollupOrOwner {\n        require(user.length == val.length, "INVALID_INPUT");\n\n        for (uint256 i = 0; i < user.length; i++) {\n            isAllowed[user[i]] = val[i];\n            emit AllowListAddressSet(user[i], val[i]);\n        }\n    }\n\n    function setAllowListEnabled(bool _allowListEnabled) external onlyRollupOrOwner {\n        require(_allowListEnabled != allowListEnabled, "ALREADY_SET");\n        allowListEnabled = _allowListEnabled;\n        emit AllowListEnabledUpdated(_allowListEnabled);\n    }\n\n    /// @dev this modifier checks the tx.origin instead of msg.sender for convenience (ie it allows\n    /// allowed users to interact with the token bridge without needing the token bridge to be allowList aware).\n    /// this modifier is not intended to use to be used for security (since this opens the allowList to\n    /// a smart contract phishing risk).\n    modifier onlyAllowed() {\n        // solhint-disable-next-line avoid-tx-origin\n        if (allowListEnabled && !isAllowed[tx.origin]) revert NotAllowedOrigin(tx.origin);\n        _;\n    }\n\n    /// ------------------------------------ allow list end ------------------------------------ ///\n\n    modifier onlyRollupOrOwner() {\n        IOwnable rollup = bridge.rollup();\n        if (msg.sender != address(rollup)) {\n            address rollupOwner = rollup.owner();\n            if (msg.sender != rollupOwner) {\n                revert NotRollupOrOwner(msg.sender, address(rollup), rollupOwner);\n            }\n        }\n        _;\n    }\n\n    uint256 internal immutable deployTimeChainId = block.chainid;\n\n    function _chainIdChanged() internal view returns (bool) {\n        return deployTimeChainId != block.chainid;\n    }\n\n    /// @inheritdoc IInbox\n    function pause() external onlyRollupOrOwner {\n        _pause();\n    }\n\n    /// @inheritdoc IInbox\n    function unpause() external onlyRollupOrOwner {\n        _unpause();\n    }\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox)\n        external\n        initializer\n        onlyDelegated\n    {\n        bridge = _bridge;\n        sequencerInbox = _sequencerInbox;\n        allowListEnabled = false;\n        __Pausable_init();\n    }\n\n    /// @inheritdoc IInbox\n    function postUpgradeInit(IBridge) external onlyDelegated onlyProxyOwner {}\n\n    /// @inheritdoc IInbox\n    function sendL2MessageFromOrigin(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        if (messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(L2_MSG, msg.sender, keccak256(messageData));\n        emit InboxMessageDeliveredFromOrigin(msgNum);\n        return msgNum;\n    }\n\n    /// @inheritdoc IInbox\n    function sendL2Message(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        return _deliverMessage(L2_MSG, msg.sender, messageData);\n    }\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(address(100))), // ArbSys address\n                    value,\n                    abi.encode(ArbSys.withdrawEth.selector, withdrawTo)\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        public\n        view\n        returns (uint256)\n    {\n        // Use current block basefee if baseFee parameter is 0\n        return (1400 + 6 * dataLength) * (baseFee == 0 ? block.basefee : baseFee);\n    }\n\n    /// @inheritdoc IInbox\n    function depositEth() public payable whenNotPaused onlyAllowed returns (uint256) {\n        address dest = msg.sender;\n\n        // solhint-disable-next-line avoid-tx-origin\n        if (AddressUpgradeable.isContract(msg.sender) || tx.origin != msg.sender) {\n            // isContract check fails if this function is called during a contract\'s constructor.\n            dest = AddressAliasHelper.applyL1ToL2Alias(msg.sender);\n        }\n\n        return\n            _deliverMessage(\n                L1MessageType_ethDeposit,\n                msg.sender,\n                abi.encodePacked(dest, msg.value)\n            );\n    }\n\n    /// @notice deprecated in favour of depositEth with no parameters\n    function depositEth(uint256) external payable whenNotPaused onlyAllowed returns (uint256) {\n        return depositEth();\n    }\n\n    /**\n     * @notice deprecated in favour of unsafeCreateRetryableTicket\n     * @dev deprecated in favour of unsafeCreateRetryableTicket\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user\'s L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user\'s L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicketNoRefundAliasRewrite(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) public payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        // arbos will discard retryable with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                msg.sender,\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    /// @notice This is an one-time-exception to resolve a misconfiguration of Uniswap Arbitrum deployment\n    ///         Only the Uniswap L1 Timelock may call this function and it is allowed to create a crosschain\n    ///         retryable ticket without address aliasing. More info here:\n    ///         https://gov.uniswap.org/t/consensus-check-fix-the-cross-chain-messaging-bridge-on-arbitrum/18547\n    /// @dev    This function will be removed in future releases\n    function uniswapCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // this can only be called by UNISWAP_L1_TIMELOCK\n        require(msg.sender == UNISWAP_L1_TIMELOCK, "NOT_UNISWAP_L1_TIMELOCK");\n        // the retryable can only call UNISWAP_L2_FACTORY\n        require(to == UNISWAP_L2_FACTORY, "NOT_TO_UNISWAP_L2_FACTORY");\n\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    function _deliverMessage(\n        uint8 _kind,\n        address _sender,\n        bytes memory _messageData\n    ) internal returns (uint256) {\n        if (_messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(_messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(_kind, _sender, keccak256(_messageData));\n        emit InboxMessageDelivered(msgNum, _messageData);\n        return msgNum;\n    }\n\n    function deliverToBridge(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) internal returns (uint256) {\n        return\n            bridge.enqueueDelayedMessage{value: msg.value}(\n                kind,\n                AddressAliasHelper.applyL1ToL2Alias(sender),\n                messageDataHash\n            );\n    }\n}', 'modifiers': [None, None], 'stateMutability': 'payable', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'Inbox.depositEth', 'start_line': 754, 'end_line': 756, 'offset_start': 26050, 'offset_end': 26175, 'content': 'function depositEth(uint256) external payable whenNotPaused onlyAllowed returns (uint256) {\n        return depositEth();\n    }', 'contract_name': 'Inbox', 'contract_code': '{\n    IBridge public bridge;\n    ISequencerInbox public sequencerInbox;\n\n    /// ------------------------------------ allow list start ------------------------------------ ///\n\n    bool public allowListEnabled;\n    mapping(address => bool) public isAllowed;\n\n    event AllowListAddressSet(address indexed user, bool val);\n    event AllowListEnabledUpdated(bool isEnabled);\n\n    function setAllowList(address[] memory user, bool[] memory val) external onlyRollupOrOwner {\n        require(user.length == val.length, "INVALID_INPUT");\n\n        for (uint256 i = 0; i < user.length; i++) {\n            isAllowed[user[i]] = val[i];\n            emit AllowListAddressSet(user[i], val[i]);\n        }\n    }\n\n    function setAllowListEnabled(bool _allowListEnabled) external onlyRollupOrOwner {\n        require(_allowListEnabled != allowListEnabled, "ALREADY_SET");\n        allowListEnabled = _allowListEnabled;\n        emit AllowListEnabledUpdated(_allowListEnabled);\n    }\n\n    /// @dev this modifier checks the tx.origin instead of msg.sender for convenience (ie it allows\n    /// allowed users to interact with the token bridge without needing the token bridge to be allowList aware).\n    /// this modifier is not intended to use to be used for security (since this opens the allowList to\n    /// a smart contract phishing risk).\n    modifier onlyAllowed() {\n        // solhint-disable-next-line avoid-tx-origin\n        if (allowListEnabled && !isAllowed[tx.origin]) revert NotAllowedOrigin(tx.origin);\n        _;\n    }\n\n    /// ------------------------------------ allow list end ------------------------------------ ///\n\n    modifier onlyRollupOrOwner() {\n        IOwnable rollup = bridge.rollup();\n        if (msg.sender != address(rollup)) {\n            address rollupOwner = rollup.owner();\n            if (msg.sender != rollupOwner) {\n                revert NotRollupOrOwner(msg.sender, address(rollup), rollupOwner);\n            }\n        }\n        _;\n    }\n\n    uint256 internal immutable deployTimeChainId = block.chainid;\n\n    function _chainIdChanged() internal view returns (bool) {\n        return deployTimeChainId != block.chainid;\n    }\n\n    /// @inheritdoc IInbox\n    function pause() external onlyRollupOrOwner {\n        _pause();\n    }\n\n    /// @inheritdoc IInbox\n    function unpause() external onlyRollupOrOwner {\n        _unpause();\n    }\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox)\n        external\n        initializer\n        onlyDelegated\n    {\n        bridge = _bridge;\n        sequencerInbox = _sequencerInbox;\n        allowListEnabled = false;\n        __Pausable_init();\n    }\n\n    /// @inheritdoc IInbox\n    function postUpgradeInit(IBridge) external onlyDelegated onlyProxyOwner {}\n\n    /// @inheritdoc IInbox\n    function sendL2MessageFromOrigin(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        if (messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(L2_MSG, msg.sender, keccak256(messageData));\n        emit InboxMessageDeliveredFromOrigin(msgNum);\n        return msgNum;\n    }\n\n    /// @inheritdoc IInbox\n    function sendL2Message(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        return _deliverMessage(L2_MSG, msg.sender, messageData);\n    }\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(address(100))), // ArbSys address\n                    value,\n                    abi.encode(ArbSys.withdrawEth.selector, withdrawTo)\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        public\n        view\n        returns (uint256)\n    {\n        // Use current block basefee if baseFee parameter is 0\n        return (1400 + 6 * dataLength) * (baseFee == 0 ? block.basefee : baseFee);\n    }\n\n    /// @inheritdoc IInbox\n    function depositEth() public payable whenNotPaused onlyAllowed returns (uint256) {\n        address dest = msg.sender;\n\n        // solhint-disable-next-line avoid-tx-origin\n        if (AddressUpgradeable.isContract(msg.sender) || tx.origin != msg.sender) {\n            // isContract check fails if this function is called during a contract\'s constructor.\n            dest = AddressAliasHelper.applyL1ToL2Alias(msg.sender);\n        }\n\n        return\n            _deliverMessage(\n                L1MessageType_ethDeposit,\n                msg.sender,\n                abi.encodePacked(dest, msg.value)\n            );\n    }\n\n    /// @notice deprecated in favour of depositEth with no parameters\n    function depositEth(uint256) external payable whenNotPaused onlyAllowed returns (uint256) {\n        return depositEth();\n    }\n\n    /**\n     * @notice deprecated in favour of unsafeCreateRetryableTicket\n     * @dev deprecated in favour of unsafeCreateRetryableTicket\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user\'s L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user\'s L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicketNoRefundAliasRewrite(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) public payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        // arbos will discard retryable with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                msg.sender,\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    /// @notice This is an one-time-exception to resolve a misconfiguration of Uniswap Arbitrum deployment\n    ///         Only the Uniswap L1 Timelock may call this function and it is allowed to create a crosschain\n    ///         retryable ticket without address aliasing. More info here:\n    ///         https://gov.uniswap.org/t/consensus-check-fix-the-cross-chain-messaging-bridge-on-arbitrum/18547\n    /// @dev    This function will be removed in future releases\n    function uniswapCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // this can only be called by UNISWAP_L1_TIMELOCK\n        require(msg.sender == UNISWAP_L1_TIMELOCK, "NOT_UNISWAP_L1_TIMELOCK");\n        // the retryable can only call UNISWAP_L2_FACTORY\n        require(to == UNISWAP_L2_FACTORY, "NOT_TO_UNISWAP_L2_FACTORY");\n\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    function _deliverMessage(\n        uint8 _kind,\n        address _sender,\n        bytes memory _messageData\n    ) internal returns (uint256) {\n        if (_messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(_messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(_kind, _sender, keccak256(_messageData));\n        emit InboxMessageDelivered(msgNum, _messageData);\n        return msgNum;\n    }\n\n    function deliverToBridge(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) internal returns (uint256) {\n        return\n            bridge.enqueueDelayedMessage{value: msg.value}(\n                kind,\n                AddressAliasHelper.applyL1ToL2Alias(sender),\n                messageDataHash\n            );\n    }\n}', 'modifiers': [None, None], 'stateMutability': 'payable', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'Inbox.createRetryableTicketNoRefundAliasRewrite', 'start_line': 772, 'end_line': 794, 'offset_start': 27295, 'offset_end': 28065, 'content': 'function createRetryableTicketNoRefundAliasRewrite(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }', 'contract_name': 'Inbox', 'contract_code': '{\n    IBridge public bridge;\n    ISequencerInbox public sequencerInbox;\n\n    /// ------------------------------------ allow list start ------------------------------------ ///\n\n    bool public allowListEnabled;\n    mapping(address => bool) public isAllowed;\n\n    event AllowListAddressSet(address indexed user, bool val);\n    event AllowListEnabledUpdated(bool isEnabled);\n\n    function setAllowList(address[] memory user, bool[] memory val) external onlyRollupOrOwner {\n        require(user.length == val.length, "INVALID_INPUT");\n\n        for (uint256 i = 0; i < user.length; i++) {\n            isAllowed[user[i]] = val[i];\n            emit AllowListAddressSet(user[i], val[i]);\n        }\n    }\n\n    function setAllowListEnabled(bool _allowListEnabled) external onlyRollupOrOwner {\n        require(_allowListEnabled != allowListEnabled, "ALREADY_SET");\n        allowListEnabled = _allowListEnabled;\n        emit AllowListEnabledUpdated(_allowListEnabled);\n    }\n\n    /// @dev this modifier checks the tx.origin instead of msg.sender for convenience (ie it allows\n    /// allowed users to interact with the token bridge without needing the token bridge to be allowList aware).\n    /// this modifier is not intended to use to be used for security (since this opens the allowList to\n    /// a smart contract phishing risk).\n    modifier onlyAllowed() {\n        // solhint-disable-next-line avoid-tx-origin\n        if (allowListEnabled && !isAllowed[tx.origin]) revert NotAllowedOrigin(tx.origin);\n        _;\n    }\n\n    /// ------------------------------------ allow list end ------------------------------------ ///\n\n    modifier onlyRollupOrOwner() {\n        IOwnable rollup = bridge.rollup();\n        if (msg.sender != address(rollup)) {\n            address rollupOwner = rollup.owner();\n            if (msg.sender != rollupOwner) {\n                revert NotRollupOrOwner(msg.sender, address(rollup), rollupOwner);\n            }\n        }\n        _;\n    }\n\n    uint256 internal immutable deployTimeChainId = block.chainid;\n\n    function _chainIdChanged() internal view returns (bool) {\n        return deployTimeChainId != block.chainid;\n    }\n\n    /// @inheritdoc IInbox\n    function pause() external onlyRollupOrOwner {\n        _pause();\n    }\n\n    /// @inheritdoc IInbox\n    function unpause() external onlyRollupOrOwner {\n        _unpause();\n    }\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox)\n        external\n        initializer\n        onlyDelegated\n    {\n        bridge = _bridge;\n        sequencerInbox = _sequencerInbox;\n        allowListEnabled = false;\n        __Pausable_init();\n    }\n\n    /// @inheritdoc IInbox\n    function postUpgradeInit(IBridge) external onlyDelegated onlyProxyOwner {}\n\n    /// @inheritdoc IInbox\n    function sendL2MessageFromOrigin(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        if (messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(L2_MSG, msg.sender, keccak256(messageData));\n        emit InboxMessageDeliveredFromOrigin(msgNum);\n        return msgNum;\n    }\n\n    /// @inheritdoc IInbox\n    function sendL2Message(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        return _deliverMessage(L2_MSG, msg.sender, messageData);\n    }\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(address(100))), // ArbSys address\n                    value,\n                    abi.encode(ArbSys.withdrawEth.selector, withdrawTo)\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        public\n        view\n        returns (uint256)\n    {\n        // Use current block basefee if baseFee parameter is 0\n        return (1400 + 6 * dataLength) * (baseFee == 0 ? block.basefee : baseFee);\n    }\n\n    /// @inheritdoc IInbox\n    function depositEth() public payable whenNotPaused onlyAllowed returns (uint256) {\n        address dest = msg.sender;\n\n        // solhint-disable-next-line avoid-tx-origin\n        if (AddressUpgradeable.isContract(msg.sender) || tx.origin != msg.sender) {\n            // isContract check fails if this function is called during a contract\'s constructor.\n            dest = AddressAliasHelper.applyL1ToL2Alias(msg.sender);\n        }\n\n        return\n            _deliverMessage(\n                L1MessageType_ethDeposit,\n                msg.sender,\n                abi.encodePacked(dest, msg.value)\n            );\n    }\n\n    /// @notice deprecated in favour of depositEth with no parameters\n    function depositEth(uint256) external payable whenNotPaused onlyAllowed returns (uint256) {\n        return depositEth();\n    }\n\n    /**\n     * @notice deprecated in favour of unsafeCreateRetryableTicket\n     * @dev deprecated in favour of unsafeCreateRetryableTicket\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user\'s L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user\'s L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicketNoRefundAliasRewrite(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) public payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        // arbos will discard retryable with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                msg.sender,\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    /// @notice This is an one-time-exception to resolve a misconfiguration of Uniswap Arbitrum deployment\n    ///         Only the Uniswap L1 Timelock may call this function and it is allowed to create a crosschain\n    ///         retryable ticket without address aliasing. More info here:\n    ///         https://gov.uniswap.org/t/consensus-check-fix-the-cross-chain-messaging-bridge-on-arbitrum/18547\n    /// @dev    This function will be removed in future releases\n    function uniswapCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // this can only be called by UNISWAP_L1_TIMELOCK\n        require(msg.sender == UNISWAP_L1_TIMELOCK, "NOT_UNISWAP_L1_TIMELOCK");\n        // the retryable can only call UNISWAP_L2_FACTORY\n        require(to == UNISWAP_L2_FACTORY, "NOT_TO_UNISWAP_L2_FACTORY");\n\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    function _deliverMessage(\n        uint8 _kind,\n        address _sender,\n        bytes memory _messageData\n    ) internal returns (uint256) {\n        if (_messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(_messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(_kind, _sender, keccak256(_messageData));\n        emit InboxMessageDelivered(msgNum, _messageData);\n        return msgNum;\n    }\n\n    function deliverToBridge(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) internal returns (uint256) {\n        return\n            bridge.enqueueDelayedMessage{value: msg.value}(\n                kind,\n                AddressAliasHelper.applyL1ToL2Alias(sender),\n                messageDataHash\n            );\n    }\n}', 'modifiers': [None, None], 'stateMutability': 'payable', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'Inbox.createRetryableTicket', 'start_line': 797, 'end_line': 838, 'offset_start': 28099, 'offset_end': 29859, 'content': "function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // ensure the user's deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don't get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }", 'contract_name': 'Inbox', 'contract_code': '{\n    IBridge public bridge;\n    ISequencerInbox public sequencerInbox;\n\n    /// ------------------------------------ allow list start ------------------------------------ ///\n\n    bool public allowListEnabled;\n    mapping(address => bool) public isAllowed;\n\n    event AllowListAddressSet(address indexed user, bool val);\n    event AllowListEnabledUpdated(bool isEnabled);\n\n    function setAllowList(address[] memory user, bool[] memory val) external onlyRollupOrOwner {\n        require(user.length == val.length, "INVALID_INPUT");\n\n        for (uint256 i = 0; i < user.length; i++) {\n            isAllowed[user[i]] = val[i];\n            emit AllowListAddressSet(user[i], val[i]);\n        }\n    }\n\n    function setAllowListEnabled(bool _allowListEnabled) external onlyRollupOrOwner {\n        require(_allowListEnabled != allowListEnabled, "ALREADY_SET");\n        allowListEnabled = _allowListEnabled;\n        emit AllowListEnabledUpdated(_allowListEnabled);\n    }\n\n    /// @dev this modifier checks the tx.origin instead of msg.sender for convenience (ie it allows\n    /// allowed users to interact with the token bridge without needing the token bridge to be allowList aware).\n    /// this modifier is not intended to use to be used for security (since this opens the allowList to\n    /// a smart contract phishing risk).\n    modifier onlyAllowed() {\n        // solhint-disable-next-line avoid-tx-origin\n        if (allowListEnabled && !isAllowed[tx.origin]) revert NotAllowedOrigin(tx.origin);\n        _;\n    }\n\n    /// ------------------------------------ allow list end ------------------------------------ ///\n\n    modifier onlyRollupOrOwner() {\n        IOwnable rollup = bridge.rollup();\n        if (msg.sender != address(rollup)) {\n            address rollupOwner = rollup.owner();\n            if (msg.sender != rollupOwner) {\n                revert NotRollupOrOwner(msg.sender, address(rollup), rollupOwner);\n            }\n        }\n        _;\n    }\n\n    uint256 internal immutable deployTimeChainId = block.chainid;\n\n    function _chainIdChanged() internal view returns (bool) {\n        return deployTimeChainId != block.chainid;\n    }\n\n    /// @inheritdoc IInbox\n    function pause() external onlyRollupOrOwner {\n        _pause();\n    }\n\n    /// @inheritdoc IInbox\n    function unpause() external onlyRollupOrOwner {\n        _unpause();\n    }\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox)\n        external\n        initializer\n        onlyDelegated\n    {\n        bridge = _bridge;\n        sequencerInbox = _sequencerInbox;\n        allowListEnabled = false;\n        __Pausable_init();\n    }\n\n    /// @inheritdoc IInbox\n    function postUpgradeInit(IBridge) external onlyDelegated onlyProxyOwner {}\n\n    /// @inheritdoc IInbox\n    function sendL2MessageFromOrigin(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        if (messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(L2_MSG, msg.sender, keccak256(messageData));\n        emit InboxMessageDeliveredFromOrigin(msgNum);\n        return msgNum;\n    }\n\n    /// @inheritdoc IInbox\n    function sendL2Message(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        return _deliverMessage(L2_MSG, msg.sender, messageData);\n    }\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(address(100))), // ArbSys address\n                    value,\n                    abi.encode(ArbSys.withdrawEth.selector, withdrawTo)\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        public\n        view\n        returns (uint256)\n    {\n        // Use current block basefee if baseFee parameter is 0\n        return (1400 + 6 * dataLength) * (baseFee == 0 ? block.basefee : baseFee);\n    }\n\n    /// @inheritdoc IInbox\n    function depositEth() public payable whenNotPaused onlyAllowed returns (uint256) {\n        address dest = msg.sender;\n\n        // solhint-disable-next-line avoid-tx-origin\n        if (AddressUpgradeable.isContract(msg.sender) || tx.origin != msg.sender) {\n            // isContract check fails if this function is called during a contract\'s constructor.\n            dest = AddressAliasHelper.applyL1ToL2Alias(msg.sender);\n        }\n\n        return\n            _deliverMessage(\n                L1MessageType_ethDeposit,\n                msg.sender,\n                abi.encodePacked(dest, msg.value)\n            );\n    }\n\n    /// @notice deprecated in favour of depositEth with no parameters\n    function depositEth(uint256) external payable whenNotPaused onlyAllowed returns (uint256) {\n        return depositEth();\n    }\n\n    /**\n     * @notice deprecated in favour of unsafeCreateRetryableTicket\n     * @dev deprecated in favour of unsafeCreateRetryableTicket\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user\'s L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user\'s L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicketNoRefundAliasRewrite(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) public payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        // arbos will discard retryable with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                msg.sender,\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    /// @notice This is an one-time-exception to resolve a misconfiguration of Uniswap Arbitrum deployment\n    ///         Only the Uniswap L1 Timelock may call this function and it is allowed to create a crosschain\n    ///         retryable ticket without address aliasing. More info here:\n    ///         https://gov.uniswap.org/t/consensus-check-fix-the-cross-chain-messaging-bridge-on-arbitrum/18547\n    /// @dev    This function will be removed in future releases\n    function uniswapCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // this can only be called by UNISWAP_L1_TIMELOCK\n        require(msg.sender == UNISWAP_L1_TIMELOCK, "NOT_UNISWAP_L1_TIMELOCK");\n        // the retryable can only call UNISWAP_L2_FACTORY\n        require(to == UNISWAP_L2_FACTORY, "NOT_TO_UNISWAP_L2_FACTORY");\n\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    function _deliverMessage(\n        uint8 _kind,\n        address _sender,\n        bytes memory _messageData\n    ) internal returns (uint256) {\n        if (_messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(_messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(_kind, _sender, keccak256(_messageData));\n        emit InboxMessageDelivered(msgNum, _messageData);\n        return msgNum;\n    }\n\n    function deliverToBridge(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) internal returns (uint256) {\n        return\n            bridge.enqueueDelayedMessage{value: msg.value}(\n                kind,\n                AddressAliasHelper.applyL1ToL2Alias(sender),\n                messageDataHash\n            );\n    }\n}', 'modifiers': [None, None], 'stateMutability': 'payable', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'Inbox.unsafeCreateRetryableTicket', 'start_line': 841, 'end_line': 893, 'offset_start': 29893, 'offset_end': 31802, 'content': 'function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) public payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        // arbos will discard retryable with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                msg.sender,\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }', 'contract_name': 'Inbox', 'contract_code': '{\n    IBridge public bridge;\n    ISequencerInbox public sequencerInbox;\n\n    /// ------------------------------------ allow list start ------------------------------------ ///\n\n    bool public allowListEnabled;\n    mapping(address => bool) public isAllowed;\n\n    event AllowListAddressSet(address indexed user, bool val);\n    event AllowListEnabledUpdated(bool isEnabled);\n\n    function setAllowList(address[] memory user, bool[] memory val) external onlyRollupOrOwner {\n        require(user.length == val.length, "INVALID_INPUT");\n\n        for (uint256 i = 0; i < user.length; i++) {\n            isAllowed[user[i]] = val[i];\n            emit AllowListAddressSet(user[i], val[i]);\n        }\n    }\n\n    function setAllowListEnabled(bool _allowListEnabled) external onlyRollupOrOwner {\n        require(_allowListEnabled != allowListEnabled, "ALREADY_SET");\n        allowListEnabled = _allowListEnabled;\n        emit AllowListEnabledUpdated(_allowListEnabled);\n    }\n\n    /// @dev this modifier checks the tx.origin instead of msg.sender for convenience (ie it allows\n    /// allowed users to interact with the token bridge without needing the token bridge to be allowList aware).\n    /// this modifier is not intended to use to be used for security (since this opens the allowList to\n    /// a smart contract phishing risk).\n    modifier onlyAllowed() {\n        // solhint-disable-next-line avoid-tx-origin\n        if (allowListEnabled && !isAllowed[tx.origin]) revert NotAllowedOrigin(tx.origin);\n        _;\n    }\n\n    /// ------------------------------------ allow list end ------------------------------------ ///\n\n    modifier onlyRollupOrOwner() {\n        IOwnable rollup = bridge.rollup();\n        if (msg.sender != address(rollup)) {\n            address rollupOwner = rollup.owner();\n            if (msg.sender != rollupOwner) {\n                revert NotRollupOrOwner(msg.sender, address(rollup), rollupOwner);\n            }\n        }\n        _;\n    }\n\n    uint256 internal immutable deployTimeChainId = block.chainid;\n\n    function _chainIdChanged() internal view returns (bool) {\n        return deployTimeChainId != block.chainid;\n    }\n\n    /// @inheritdoc IInbox\n    function pause() external onlyRollupOrOwner {\n        _pause();\n    }\n\n    /// @inheritdoc IInbox\n    function unpause() external onlyRollupOrOwner {\n        _unpause();\n    }\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox)\n        external\n        initializer\n        onlyDelegated\n    {\n        bridge = _bridge;\n        sequencerInbox = _sequencerInbox;\n        allowListEnabled = false;\n        __Pausable_init();\n    }\n\n    /// @inheritdoc IInbox\n    function postUpgradeInit(IBridge) external onlyDelegated onlyProxyOwner {}\n\n    /// @inheritdoc IInbox\n    function sendL2MessageFromOrigin(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        if (messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(L2_MSG, msg.sender, keccak256(messageData));\n        emit InboxMessageDeliveredFromOrigin(msgNum);\n        return msgNum;\n    }\n\n    /// @inheritdoc IInbox\n    function sendL2Message(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        return _deliverMessage(L2_MSG, msg.sender, messageData);\n    }\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(address(100))), // ArbSys address\n                    value,\n                    abi.encode(ArbSys.withdrawEth.selector, withdrawTo)\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        public\n        view\n        returns (uint256)\n    {\n        // Use current block basefee if baseFee parameter is 0\n        return (1400 + 6 * dataLength) * (baseFee == 0 ? block.basefee : baseFee);\n    }\n\n    /// @inheritdoc IInbox\n    function depositEth() public payable whenNotPaused onlyAllowed returns (uint256) {\n        address dest = msg.sender;\n\n        // solhint-disable-next-line avoid-tx-origin\n        if (AddressUpgradeable.isContract(msg.sender) || tx.origin != msg.sender) {\n            // isContract check fails if this function is called during a contract\'s constructor.\n            dest = AddressAliasHelper.applyL1ToL2Alias(msg.sender);\n        }\n\n        return\n            _deliverMessage(\n                L1MessageType_ethDeposit,\n                msg.sender,\n                abi.encodePacked(dest, msg.value)\n            );\n    }\n\n    /// @notice deprecated in favour of depositEth with no parameters\n    function depositEth(uint256) external payable whenNotPaused onlyAllowed returns (uint256) {\n        return depositEth();\n    }\n\n    /**\n     * @notice deprecated in favour of unsafeCreateRetryableTicket\n     * @dev deprecated in favour of unsafeCreateRetryableTicket\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user\'s L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user\'s L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicketNoRefundAliasRewrite(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) public payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        // arbos will discard retryable with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                msg.sender,\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    /// @notice This is an one-time-exception to resolve a misconfiguration of Uniswap Arbitrum deployment\n    ///         Only the Uniswap L1 Timelock may call this function and it is allowed to create a crosschain\n    ///         retryable ticket without address aliasing. More info here:\n    ///         https://gov.uniswap.org/t/consensus-check-fix-the-cross-chain-messaging-bridge-on-arbitrum/18547\n    /// @dev    This function will be removed in future releases\n    function uniswapCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // this can only be called by UNISWAP_L1_TIMELOCK\n        require(msg.sender == UNISWAP_L1_TIMELOCK, "NOT_UNISWAP_L1_TIMELOCK");\n        // the retryable can only call UNISWAP_L2_FACTORY\n        require(to == UNISWAP_L2_FACTORY, "NOT_TO_UNISWAP_L2_FACTORY");\n\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    function _deliverMessage(\n        uint8 _kind,\n        address _sender,\n        bytes memory _messageData\n    ) internal returns (uint256) {\n        if (_messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(_messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(_kind, _sender, keccak256(_messageData));\n        emit InboxMessageDelivered(msgNum, _messageData);\n        return msgNum;\n    }\n\n    function deliverToBridge(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) internal returns (uint256) {\n        return\n            bridge.enqueueDelayedMessage{value: msg.value}(\n                kind,\n                AddressAliasHelper.applyL1ToL2Alias(sender),\n                messageDataHash\n            );\n    }\n}', 'modifiers': [None, None], 'stateMutability': 'payable', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'Inbox.uniswapCreateRetryableTicket', 'start_line': 900, 'end_line': 971, 'offset_start': 32278, 'offset_end': 35346, 'content': 'function uniswapCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // this can only be called by UNISWAP_L1_TIMELOCK\n        require(msg.sender == UNISWAP_L1_TIMELOCK, "NOT_UNISWAP_L1_TIMELOCK");\n        // the retryable can only call UNISWAP_L2_FACTORY\n        require(to == UNISWAP_L2_FACTORY, "NOT_TO_UNISWAP_L2_FACTORY");\n\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }', 'contract_name': 'Inbox', 'contract_code': '{\n    IBridge public bridge;\n    ISequencerInbox public sequencerInbox;\n\n    /// ------------------------------------ allow list start ------------------------------------ ///\n\n    bool public allowListEnabled;\n    mapping(address => bool) public isAllowed;\n\n    event AllowListAddressSet(address indexed user, bool val);\n    event AllowListEnabledUpdated(bool isEnabled);\n\n    function setAllowList(address[] memory user, bool[] memory val) external onlyRollupOrOwner {\n        require(user.length == val.length, "INVALID_INPUT");\n\n        for (uint256 i = 0; i < user.length; i++) {\n            isAllowed[user[i]] = val[i];\n            emit AllowListAddressSet(user[i], val[i]);\n        }\n    }\n\n    function setAllowListEnabled(bool _allowListEnabled) external onlyRollupOrOwner {\n        require(_allowListEnabled != allowListEnabled, "ALREADY_SET");\n        allowListEnabled = _allowListEnabled;\n        emit AllowListEnabledUpdated(_allowListEnabled);\n    }\n\n    /// @dev this modifier checks the tx.origin instead of msg.sender for convenience (ie it allows\n    /// allowed users to interact with the token bridge without needing the token bridge to be allowList aware).\n    /// this modifier is not intended to use to be used for security (since this opens the allowList to\n    /// a smart contract phishing risk).\n    modifier onlyAllowed() {\n        // solhint-disable-next-line avoid-tx-origin\n        if (allowListEnabled && !isAllowed[tx.origin]) revert NotAllowedOrigin(tx.origin);\n        _;\n    }\n\n    /// ------------------------------------ allow list end ------------------------------------ ///\n\n    modifier onlyRollupOrOwner() {\n        IOwnable rollup = bridge.rollup();\n        if (msg.sender != address(rollup)) {\n            address rollupOwner = rollup.owner();\n            if (msg.sender != rollupOwner) {\n                revert NotRollupOrOwner(msg.sender, address(rollup), rollupOwner);\n            }\n        }\n        _;\n    }\n\n    uint256 internal immutable deployTimeChainId = block.chainid;\n\n    function _chainIdChanged() internal view returns (bool) {\n        return deployTimeChainId != block.chainid;\n    }\n\n    /// @inheritdoc IInbox\n    function pause() external onlyRollupOrOwner {\n        _pause();\n    }\n\n    /// @inheritdoc IInbox\n    function unpause() external onlyRollupOrOwner {\n        _unpause();\n    }\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox)\n        external\n        initializer\n        onlyDelegated\n    {\n        bridge = _bridge;\n        sequencerInbox = _sequencerInbox;\n        allowListEnabled = false;\n        __Pausable_init();\n    }\n\n    /// @inheritdoc IInbox\n    function postUpgradeInit(IBridge) external onlyDelegated onlyProxyOwner {}\n\n    /// @inheritdoc IInbox\n    function sendL2MessageFromOrigin(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        if (messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(L2_MSG, msg.sender, keccak256(messageData));\n        emit InboxMessageDeliveredFromOrigin(msgNum);\n        return msgNum;\n    }\n\n    /// @inheritdoc IInbox\n    function sendL2Message(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        return _deliverMessage(L2_MSG, msg.sender, messageData);\n    }\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(address(100))), // ArbSys address\n                    value,\n                    abi.encode(ArbSys.withdrawEth.selector, withdrawTo)\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        public\n        view\n        returns (uint256)\n    {\n        // Use current block basefee if baseFee parameter is 0\n        return (1400 + 6 * dataLength) * (baseFee == 0 ? block.basefee : baseFee);\n    }\n\n    /// @inheritdoc IInbox\n    function depositEth() public payable whenNotPaused onlyAllowed returns (uint256) {\n        address dest = msg.sender;\n\n        // solhint-disable-next-line avoid-tx-origin\n        if (AddressUpgradeable.isContract(msg.sender) || tx.origin != msg.sender) {\n            // isContract check fails if this function is called during a contract\'s constructor.\n            dest = AddressAliasHelper.applyL1ToL2Alias(msg.sender);\n        }\n\n        return\n            _deliverMessage(\n                L1MessageType_ethDeposit,\n                msg.sender,\n                abi.encodePacked(dest, msg.value)\n            );\n    }\n\n    /// @notice deprecated in favour of depositEth with no parameters\n    function depositEth(uint256) external payable whenNotPaused onlyAllowed returns (uint256) {\n        return depositEth();\n    }\n\n    /**\n     * @notice deprecated in favour of unsafeCreateRetryableTicket\n     * @dev deprecated in favour of unsafeCreateRetryableTicket\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user\'s L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user\'s L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicketNoRefundAliasRewrite(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) public payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        // arbos will discard retryable with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                msg.sender,\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    /// @notice This is an one-time-exception to resolve a misconfiguration of Uniswap Arbitrum deployment\n    ///         Only the Uniswap L1 Timelock may call this function and it is allowed to create a crosschain\n    ///         retryable ticket without address aliasing. More info here:\n    ///         https://gov.uniswap.org/t/consensus-check-fix-the-cross-chain-messaging-bridge-on-arbitrum/18547\n    /// @dev    This function will be removed in future releases\n    function uniswapCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // this can only be called by UNISWAP_L1_TIMELOCK\n        require(msg.sender == UNISWAP_L1_TIMELOCK, "NOT_UNISWAP_L1_TIMELOCK");\n        // the retryable can only call UNISWAP_L2_FACTORY\n        require(to == UNISWAP_L2_FACTORY, "NOT_TO_UNISWAP_L2_FACTORY");\n\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    function _deliverMessage(\n        uint8 _kind,\n        address _sender,\n        bytes memory _messageData\n    ) internal returns (uint256) {\n        if (_messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(_messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(_kind, _sender, keccak256(_messageData));\n        emit InboxMessageDelivered(msgNum, _messageData);\n        return msgNum;\n    }\n\n    function deliverToBridge(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) internal returns (uint256) {\n        return\n            bridge.enqueueDelayedMessage{value: msg.value}(\n                kind,\n                AddressAliasHelper.applyL1ToL2Alias(sender),\n                messageDataHash\n            );\n    }\n}', 'modifiers': [None, None], 'stateMutability': 'payable', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'Inbox._deliverMessage', 'start_line': 973, 'end_line': 983, 'offset_start': 35353, 'offset_end': 35780, 'content': 'function _deliverMessage(\n        uint8 _kind,\n        address _sender,\n        bytes memory _messageData\n    ) internal returns (uint256) {\n        if (_messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(_messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(_kind, _sender, keccak256(_messageData));\n        emit InboxMessageDelivered(msgNum, _messageData);\n        return msgNum;\n    }', 'contract_name': 'Inbox', 'contract_code': '{\n    IBridge public bridge;\n    ISequencerInbox public sequencerInbox;\n\n    /// ------------------------------------ allow list start ------------------------------------ ///\n\n    bool public allowListEnabled;\n    mapping(address => bool) public isAllowed;\n\n    event AllowListAddressSet(address indexed user, bool val);\n    event AllowListEnabledUpdated(bool isEnabled);\n\n    function setAllowList(address[] memory user, bool[] memory val) external onlyRollupOrOwner {\n        require(user.length == val.length, "INVALID_INPUT");\n\n        for (uint256 i = 0; i < user.length; i++) {\n            isAllowed[user[i]] = val[i];\n            emit AllowListAddressSet(user[i], val[i]);\n        }\n    }\n\n    function setAllowListEnabled(bool _allowListEnabled) external onlyRollupOrOwner {\n        require(_allowListEnabled != allowListEnabled, "ALREADY_SET");\n        allowListEnabled = _allowListEnabled;\n        emit AllowListEnabledUpdated(_allowListEnabled);\n    }\n\n    /// @dev this modifier checks the tx.origin instead of msg.sender for convenience (ie it allows\n    /// allowed users to interact with the token bridge without needing the token bridge to be allowList aware).\n    /// this modifier is not intended to use to be used for security (since this opens the allowList to\n    /// a smart contract phishing risk).\n    modifier onlyAllowed() {\n        // solhint-disable-next-line avoid-tx-origin\n        if (allowListEnabled && !isAllowed[tx.origin]) revert NotAllowedOrigin(tx.origin);\n        _;\n    }\n\n    /// ------------------------------------ allow list end ------------------------------------ ///\n\n    modifier onlyRollupOrOwner() {\n        IOwnable rollup = bridge.rollup();\n        if (msg.sender != address(rollup)) {\n            address rollupOwner = rollup.owner();\n            if (msg.sender != rollupOwner) {\n                revert NotRollupOrOwner(msg.sender, address(rollup), rollupOwner);\n            }\n        }\n        _;\n    }\n\n    uint256 internal immutable deployTimeChainId = block.chainid;\n\n    function _chainIdChanged() internal view returns (bool) {\n        return deployTimeChainId != block.chainid;\n    }\n\n    /// @inheritdoc IInbox\n    function pause() external onlyRollupOrOwner {\n        _pause();\n    }\n\n    /// @inheritdoc IInbox\n    function unpause() external onlyRollupOrOwner {\n        _unpause();\n    }\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox)\n        external\n        initializer\n        onlyDelegated\n    {\n        bridge = _bridge;\n        sequencerInbox = _sequencerInbox;\n        allowListEnabled = false;\n        __Pausable_init();\n    }\n\n    /// @inheritdoc IInbox\n    function postUpgradeInit(IBridge) external onlyDelegated onlyProxyOwner {}\n\n    /// @inheritdoc IInbox\n    function sendL2MessageFromOrigin(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        if (messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(L2_MSG, msg.sender, keccak256(messageData));\n        emit InboxMessageDeliveredFromOrigin(msgNum);\n        return msgNum;\n    }\n\n    /// @inheritdoc IInbox\n    function sendL2Message(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        return _deliverMessage(L2_MSG, msg.sender, messageData);\n    }\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(address(100))), // ArbSys address\n                    value,\n                    abi.encode(ArbSys.withdrawEth.selector, withdrawTo)\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        public\n        view\n        returns (uint256)\n    {\n        // Use current block basefee if baseFee parameter is 0\n        return (1400 + 6 * dataLength) * (baseFee == 0 ? block.basefee : baseFee);\n    }\n\n    /// @inheritdoc IInbox\n    function depositEth() public payable whenNotPaused onlyAllowed returns (uint256) {\n        address dest = msg.sender;\n\n        // solhint-disable-next-line avoid-tx-origin\n        if (AddressUpgradeable.isContract(msg.sender) || tx.origin != msg.sender) {\n            // isContract check fails if this function is called during a contract\'s constructor.\n            dest = AddressAliasHelper.applyL1ToL2Alias(msg.sender);\n        }\n\n        return\n            _deliverMessage(\n                L1MessageType_ethDeposit,\n                msg.sender,\n                abi.encodePacked(dest, msg.value)\n            );\n    }\n\n    /// @notice deprecated in favour of depositEth with no parameters\n    function depositEth(uint256) external payable whenNotPaused onlyAllowed returns (uint256) {\n        return depositEth();\n    }\n\n    /**\n     * @notice deprecated in favour of unsafeCreateRetryableTicket\n     * @dev deprecated in favour of unsafeCreateRetryableTicket\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user\'s L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user\'s L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicketNoRefundAliasRewrite(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) public payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        // arbos will discard retryable with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                msg.sender,\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    /// @notice This is an one-time-exception to resolve a misconfiguration of Uniswap Arbitrum deployment\n    ///         Only the Uniswap L1 Timelock may call this function and it is allowed to create a crosschain\n    ///         retryable ticket without address aliasing. More info here:\n    ///         https://gov.uniswap.org/t/consensus-check-fix-the-cross-chain-messaging-bridge-on-arbitrum/18547\n    /// @dev    This function will be removed in future releases\n    function uniswapCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // this can only be called by UNISWAP_L1_TIMELOCK\n        require(msg.sender == UNISWAP_L1_TIMELOCK, "NOT_UNISWAP_L1_TIMELOCK");\n        // the retryable can only call UNISWAP_L2_FACTORY\n        require(to == UNISWAP_L2_FACTORY, "NOT_TO_UNISWAP_L2_FACTORY");\n\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    function _deliverMessage(\n        uint8 _kind,\n        address _sender,\n        bytes memory _messageData\n    ) internal returns (uint256) {\n        if (_messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(_messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(_kind, _sender, keccak256(_messageData));\n        emit InboxMessageDelivered(msgNum, _messageData);\n        return msgNum;\n    }\n\n    function deliverToBridge(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) internal returns (uint256) {\n        return\n            bridge.enqueueDelayedMessage{value: msg.value}(\n                kind,\n                AddressAliasHelper.applyL1ToL2Alias(sender),\n                messageDataHash\n            );\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'Inbox.deliverToBridge', 'start_line': 985, 'end_line': 996, 'offset_start': 35787, 'offset_end': 36133, 'content': 'function deliverToBridge(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) internal returns (uint256) {\n        return\n            bridge.enqueueDelayedMessage{value: msg.value}(\n                kind,\n                AddressAliasHelper.applyL1ToL2Alias(sender),\n                messageDataHash\n            );\n    }', 'contract_name': 'Inbox', 'contract_code': '{\n    IBridge public bridge;\n    ISequencerInbox public sequencerInbox;\n\n    /// ------------------------------------ allow list start ------------------------------------ ///\n\n    bool public allowListEnabled;\n    mapping(address => bool) public isAllowed;\n\n    event AllowListAddressSet(address indexed user, bool val);\n    event AllowListEnabledUpdated(bool isEnabled);\n\n    function setAllowList(address[] memory user, bool[] memory val) external onlyRollupOrOwner {\n        require(user.length == val.length, "INVALID_INPUT");\n\n        for (uint256 i = 0; i < user.length; i++) {\n            isAllowed[user[i]] = val[i];\n            emit AllowListAddressSet(user[i], val[i]);\n        }\n    }\n\n    function setAllowListEnabled(bool _allowListEnabled) external onlyRollupOrOwner {\n        require(_allowListEnabled != allowListEnabled, "ALREADY_SET");\n        allowListEnabled = _allowListEnabled;\n        emit AllowListEnabledUpdated(_allowListEnabled);\n    }\n\n    /// @dev this modifier checks the tx.origin instead of msg.sender for convenience (ie it allows\n    /// allowed users to interact with the token bridge without needing the token bridge to be allowList aware).\n    /// this modifier is not intended to use to be used for security (since this opens the allowList to\n    /// a smart contract phishing risk).\n    modifier onlyAllowed() {\n        // solhint-disable-next-line avoid-tx-origin\n        if (allowListEnabled && !isAllowed[tx.origin]) revert NotAllowedOrigin(tx.origin);\n        _;\n    }\n\n    /// ------------------------------------ allow list end ------------------------------------ ///\n\n    modifier onlyRollupOrOwner() {\n        IOwnable rollup = bridge.rollup();\n        if (msg.sender != address(rollup)) {\n            address rollupOwner = rollup.owner();\n            if (msg.sender != rollupOwner) {\n                revert NotRollupOrOwner(msg.sender, address(rollup), rollupOwner);\n            }\n        }\n        _;\n    }\n\n    uint256 internal immutable deployTimeChainId = block.chainid;\n\n    function _chainIdChanged() internal view returns (bool) {\n        return deployTimeChainId != block.chainid;\n    }\n\n    /// @inheritdoc IInbox\n    function pause() external onlyRollupOrOwner {\n        _pause();\n    }\n\n    /// @inheritdoc IInbox\n    function unpause() external onlyRollupOrOwner {\n        _unpause();\n    }\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox)\n        external\n        initializer\n        onlyDelegated\n    {\n        bridge = _bridge;\n        sequencerInbox = _sequencerInbox;\n        allowListEnabled = false;\n        __Pausable_init();\n    }\n\n    /// @inheritdoc IInbox\n    function postUpgradeInit(IBridge) external onlyDelegated onlyProxyOwner {}\n\n    /// @inheritdoc IInbox\n    function sendL2MessageFromOrigin(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        if (messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(L2_MSG, msg.sender, keccak256(messageData));\n        emit InboxMessageDeliveredFromOrigin(msgNum);\n        return msgNum;\n    }\n\n    /// @inheritdoc IInbox\n    function sendL2Message(bytes calldata messageData)\n        external\n        whenNotPaused\n        onlyAllowed\n        returns (uint256)\n    {\n        if (_chainIdChanged()) revert L1Forked();\n        return _deliverMessage(L2_MSG, msg.sender, messageData);\n    }\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                msg.sender,\n                abi.encodePacked(\n                    L2MessageType_unsignedContractTx,\n                    gasLimit,\n                    maxFeePerGas,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L1MessageType_L2FundedByL1,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    msg.value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(to)),\n                    value,\n                    data\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external whenNotPaused onlyAllowed returns (uint256) {\n        if (!_chainIdChanged()) revert NotForked();\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender != tx.origin) revert NotOrigin();\n        // arbos will discard unsigned tx with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n        return\n            _deliverMessage(\n                L2_MSG,\n                // undoing sender alias here to cancel out the aliasing\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    L2MessageType_unsignedEOATx,\n                    gasLimit,\n                    maxFeePerGas,\n                    nonce,\n                    uint256(uint160(address(100))), // ArbSys address\n                    value,\n                    abi.encode(ArbSys.withdrawEth.selector, withdrawTo)\n                )\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        public\n        view\n        returns (uint256)\n    {\n        // Use current block basefee if baseFee parameter is 0\n        return (1400 + 6 * dataLength) * (baseFee == 0 ? block.basefee : baseFee);\n    }\n\n    /// @inheritdoc IInbox\n    function depositEth() public payable whenNotPaused onlyAllowed returns (uint256) {\n        address dest = msg.sender;\n\n        // solhint-disable-next-line avoid-tx-origin\n        if (AddressUpgradeable.isContract(msg.sender) || tx.origin != msg.sender) {\n            // isContract check fails if this function is called during a contract\'s constructor.\n            dest = AddressAliasHelper.applyL1ToL2Alias(msg.sender);\n        }\n\n        return\n            _deliverMessage(\n                L1MessageType_ethDeposit,\n                msg.sender,\n                abi.encodePacked(dest, msg.value)\n            );\n    }\n\n    /// @notice deprecated in favour of depositEth with no parameters\n    function depositEth(uint256) external payable whenNotPaused onlyAllowed returns (uint256) {\n        return depositEth();\n    }\n\n    /**\n     * @notice deprecated in favour of unsafeCreateRetryableTicket\n     * @dev deprecated in favour of unsafeCreateRetryableTicket\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user\'s L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user\'s L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicketNoRefundAliasRewrite(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas limit is validated to be within uint64 in unsafeCreateRetryableTicket\n        return\n            unsafeCreateRetryableTicket(\n                to,\n                l2CallValue,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n    }\n\n    /// @inheritdoc IInbox\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) public payable whenNotPaused onlyAllowed returns (uint256) {\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        // arbos will discard retryable with gas limit too large\n        if (gasLimit > type(uint64).max) {\n            revert GasLimitTooLarge();\n        }\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                msg.sender,\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    /// @notice This is an one-time-exception to resolve a misconfiguration of Uniswap Arbitrum deployment\n    ///         Only the Uniswap L1 Timelock may call this function and it is allowed to create a crosschain\n    ///         retryable ticket without address aliasing. More info here:\n    ///         https://gov.uniswap.org/t/consensus-check-fix-the-cross-chain-messaging-bridge-on-arbitrum/18547\n    /// @dev    This function will be removed in future releases\n    function uniswapCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable whenNotPaused onlyAllowed returns (uint256) {\n        // this can only be called by UNISWAP_L1_TIMELOCK\n        require(msg.sender == UNISWAP_L1_TIMELOCK, "NOT_UNISWAP_L1_TIMELOCK");\n        // the retryable can only call UNISWAP_L2_FACTORY\n        require(to == UNISWAP_L2_FACTORY, "NOT_TO_UNISWAP_L2_FACTORY");\n\n        // ensure the user\'s deposit alone will make submission succeed\n        if (msg.value < (maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas)) {\n            revert InsufficientValue(\n                maxSubmissionCost + l2CallValue + gasLimit * maxFeePerGas,\n                msg.value\n            );\n        }\n\n        // if a refund address is a contract, we apply the alias to it\n        // so that it can access its funds on the L2\n        // since the beneficiary and other refund addresses don\'t get rewritten by arb-os\n        if (AddressUpgradeable.isContract(excessFeeRefundAddress)) {\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\n        }\n        if (AddressUpgradeable.isContract(callValueRefundAddress)) {\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\n        }\n\n        // gas price and limit of 1 should never be a valid input, so instead they are used as\n        // magic values to trigger a revert in eth calls that surface data without requiring a tx trace\n        if (gasLimit == 1 || maxFeePerGas == 1)\n            revert RetryableData(\n                msg.sender,\n                to,\n                l2CallValue,\n                msg.value,\n                maxSubmissionCost,\n                excessFeeRefundAddress,\n                callValueRefundAddress,\n                gasLimit,\n                maxFeePerGas,\n                data\n            );\n\n        uint256 submissionFee = calculateRetryableSubmissionFee(data.length, block.basefee);\n        if (maxSubmissionCost < submissionFee)\n            revert InsufficientSubmissionCost(submissionFee, maxSubmissionCost);\n\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                AddressAliasHelper.undoL1ToL2Alias(msg.sender),\n                abi.encodePacked(\n                    uint256(uint160(to)),\n                    l2CallValue,\n                    msg.value,\n                    maxSubmissionCost,\n                    uint256(uint160(excessFeeRefundAddress)),\n                    uint256(uint160(callValueRefundAddress)),\n                    gasLimit,\n                    maxFeePerGas,\n                    data.length,\n                    data\n                )\n            );\n    }\n\n    function _deliverMessage(\n        uint8 _kind,\n        address _sender,\n        bytes memory _messageData\n    ) internal returns (uint256) {\n        if (_messageData.length > MAX_DATA_SIZE)\n            revert DataTooLarge(_messageData.length, MAX_DATA_SIZE);\n        uint256 msgNum = deliverToBridge(_kind, _sender, keccak256(_messageData));\n        emit InboxMessageDelivered(msgNum, _messageData);\n        return msgNum;\n    }\n\n    function deliverToBridge(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) internal returns (uint256) {\n        return\n            bridge.enqueueDelayedMessage{value: msg.value}(\n                kind,\n                AddressAliasHelper.applyL1ToL2Alias(sender),\n                messageDataHash\n            );\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'AddressUpgradeable.isContract', 'start_line': 1051, 'end_line': 1057, 'offset_start': 37929, 'offset_end': 38248, 'content': 'function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }', 'contract_name': 'AddressUpgradeable', 'contract_code': '{\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\'t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, "Address: insufficient balance");\n\n        (bool success, ) = recipient.call{value: amount}("");\n        require(success, "Address: unable to send value, recipient may have reverted");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, "Address: low-level call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, "Address: insufficient balance for call");\n        require(isContract(target), "Address: call to non-contract");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, "Address: low-level static call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), "Address: static call to non-contract");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\'t, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'AddressUpgradeable.sendValue', 'start_line': 1075, 'end_line': 1080, 'offset_start': 39166, 'offset_end': 39477, 'content': 'function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, "Address: insufficient balance");\n\n        (bool success, ) = recipient.call{value: amount}("");\n        require(success, "Address: unable to send value, recipient may have reverted");\n    }', 'contract_name': 'AddressUpgradeable', 'contract_code': '{\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\'t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, "Address: insufficient balance");\n\n        (bool success, ) = recipient.call{value: amount}("");\n        require(success, "Address: unable to send value, recipient may have reverted");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, "Address: low-level call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, "Address: insufficient balance for call");\n        require(isContract(target), "Address: call to non-contract");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, "Address: low-level static call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), "Address: static call to non-contract");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\'t, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'AddressUpgradeable.functionCall', 'start_line': 1100, 'end_line': 1102, 'offset_start': 40220, 'offset_end': 40392, 'content': 'function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, "Address: low-level call failed");\n    }', 'contract_name': 'AddressUpgradeable', 'contract_code': '{\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\'t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, "Address: insufficient balance");\n\n        (bool success, ) = recipient.call{value: amount}("");\n        require(success, "Address: unable to send value, recipient may have reverted");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, "Address: low-level call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, "Address: insufficient balance for call");\n        require(isContract(target), "Address: call to non-contract");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, "Address: low-level static call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), "Address: static call to non-contract");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\'t, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'AddressUpgradeable.functionCall', 'start_line': 1110, 'end_line': 1116, 'offset_start': 40615, 'offset_end': 40837, 'content': 'function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }', 'contract_name': 'AddressUpgradeable', 'contract_code': '{\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\'t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, "Address: insufficient balance");\n\n        (bool success, ) = recipient.call{value: amount}("");\n        require(success, "Address: unable to send value, recipient may have reverted");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, "Address: low-level call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, "Address: insufficient balance for call");\n        require(isContract(target), "Address: call to non-contract");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, "Address: low-level static call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), "Address: static call to non-contract");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\'t, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'AddressUpgradeable.functionCallWithValue', 'start_line': 1129, 'end_line': 1135, 'offset_start': 41200, 'offset_end': 41453, 'content': 'function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n    }', 'contract_name': 'AddressUpgradeable', 'contract_code': '{\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\'t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, "Address: insufficient balance");\n\n        (bool success, ) = recipient.call{value: amount}("");\n        require(success, "Address: unable to send value, recipient may have reverted");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, "Address: low-level call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, "Address: insufficient balance for call");\n        require(isContract(target), "Address: call to non-contract");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, "Address: low-level static call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), "Address: static call to non-contract");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\'t, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'AddressUpgradeable.functionCallWithValue', 'start_line': 1143, 'end_line': 1154, 'offset_start': 41702, 'offset_end': 42200, 'content': 'function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, "Address: insufficient balance for call");\n        require(isContract(target), "Address: call to non-contract");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }', 'contract_name': 'AddressUpgradeable', 'contract_code': '{\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\'t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, "Address: insufficient balance");\n\n        (bool success, ) = recipient.call{value: amount}("");\n        require(success, "Address: unable to send value, recipient may have reverted");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, "Address: low-level call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, "Address: insufficient balance for call");\n        require(isContract(target), "Address: call to non-contract");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, "Address: low-level static call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), "Address: static call to non-contract");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\'t, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'AddressUpgradeable.functionStaticCall', 'start_line': 1162, 'end_line': 1164, 'offset_start': 42378, 'offset_end': 42574, 'content': 'function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, "Address: low-level static call failed");\n    }', 'contract_name': 'AddressUpgradeable', 'contract_code': '{\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\'t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, "Address: insufficient balance");\n\n        (bool success, ) = recipient.call{value: amount}("");\n        require(success, "Address: unable to send value, recipient may have reverted");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, "Address: low-level call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, "Address: insufficient balance for call");\n        require(isContract(target), "Address: call to non-contract");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, "Address: low-level static call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), "Address: static call to non-contract");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\'t, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'AddressUpgradeable.functionStaticCall', 'start_line': 1172, 'end_line': 1181, 'offset_start': 42759, 'offset_end': 43144, 'content': 'function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), "Address: static call to non-contract");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }', 'contract_name': 'AddressUpgradeable', 'contract_code': '{\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\'t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, "Address: insufficient balance");\n\n        (bool success, ) = recipient.call{value: amount}("");\n        require(success, "Address: unable to send value, recipient may have reverted");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, "Address: low-level call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, "Address: insufficient balance for call");\n        require(isContract(target), "Address: call to non-contract");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, "Address: low-level static call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), "Address: static call to non-contract");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\'t, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'AddressUpgradeable.verifyCallResult', 'start_line': 1189, 'end_line': 1209, 'offset_start': 43365, 'offset_end': 44056, 'content': 'function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }', 'contract_name': 'AddressUpgradeable', 'contract_code': '{\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\'t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, "Address: insufficient balance");\n\n        (bool success, ) = recipient.call{value: amount}("");\n        require(success, "Address: unable to send value, recipient may have reverted");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, "Address: low-level call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, "Address: insufficient balance for call");\n        require(isContract(target), "Address: call to non-contract");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, "Address: low-level static call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), "Address: static call to non-contract");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\'t, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'Initializable._isConstructor', 'start_line': 1288, 'end_line': 1290, 'offset_start': 47098, 'offset_end': 47220, 'content': 'function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }', 'contract_name': 'Initializable', 'contract_code': '{\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, "Initializable: contract is already initialized");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, "Initializable: contract is not initializing");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'private', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IInbox.bridge', 'start_line': 1305, 'end_line': 1305, 'offset_start': 47610, 'offset_end': 47659, 'content': 'function bridge() external view returns (IBridge);', 'contract_name': 'IInbox', 'contract_code': "{\n    function bridge() external view returns (IBridge);\n\n    function sequencerInbox() external view returns (ISequencerInbox);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method is an optimization to avoid having to emit the entirety of the messageData in a log. Instead validators are expected to be able to parse the data from the transaction's input\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2MessageFromOrigin(bytes calldata messageData) external returns (uint256);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method can be used to send any type of message that doesn't require L1 validation\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2Message(bytes calldata messageData) external returns (uint256);\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @notice Send a message to initiate L2 withdrawal\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external returns (uint256);\n\n    /**\n     * @notice Get the L1 fee for submitting a retryable\n     * @dev This fee can be paid by funds already in the L2 aliased address or by the current message value\n     * @dev This formula may change in the future, to future proof your code query this method instead of inlining!!\n     * @param dataLength The length of the retryable's calldata, in bytes\n     * @param baseFee The block basefee when the retryable is included in the chain, if 0 current block.basefee will be used\n     */\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Deposit eth from L1 to L2 to address of the sender if sender is an EOA, and to its aliased address if the sender is a contract\n     * @dev This does not trigger the fallback function when receiving in the L2 side.\n     *      Look into retryable tickets if you are interested in this functionality.\n     * @dev This function should not be called inside contract constructors\n     */\n    function depositEth() external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev all msg.value will deposited to callValueRefundAddress on L2\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev Same as createRetryableTicket, but does not guarantee that submission will succeed by requiring the needed funds\n     * come from the deposit alone, rather than falling back on the user's L2 balance\n     * @dev Advanced usage only (does not rewrite aliases for excessFeeRefundAddress and callValueRefundAddress).\n     * createRetryableTicket method is the recommended standard.\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /// @notice pauses all inbox functionality\n    function pause() external;\n\n    /// @notice unpauses all inbox functionality\n    function unpause() external;\n\n    // ---------- initializer ----------\n\n    /**\n     * @dev function to be called one time during the inbox upgrade process\n     *      this is used to fix the storage slots\n     */\n    function postUpgradeInit(IBridge _bridge) external;\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox) external;\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IInbox.sequencerInbox', 'start_line': 1307, 'end_line': 1307, 'offset_start': 47666, 'offset_end': 47731, 'content': 'function sequencerInbox() external view returns (ISequencerInbox);', 'contract_name': 'IInbox', 'contract_code': "{\n    function bridge() external view returns (IBridge);\n\n    function sequencerInbox() external view returns (ISequencerInbox);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method is an optimization to avoid having to emit the entirety of the messageData in a log. Instead validators are expected to be able to parse the data from the transaction's input\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2MessageFromOrigin(bytes calldata messageData) external returns (uint256);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method can be used to send any type of message that doesn't require L1 validation\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2Message(bytes calldata messageData) external returns (uint256);\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @notice Send a message to initiate L2 withdrawal\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external returns (uint256);\n\n    /**\n     * @notice Get the L1 fee for submitting a retryable\n     * @dev This fee can be paid by funds already in the L2 aliased address or by the current message value\n     * @dev This formula may change in the future, to future proof your code query this method instead of inlining!!\n     * @param dataLength The length of the retryable's calldata, in bytes\n     * @param baseFee The block basefee when the retryable is included in the chain, if 0 current block.basefee will be used\n     */\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Deposit eth from L1 to L2 to address of the sender if sender is an EOA, and to its aliased address if the sender is a contract\n     * @dev This does not trigger the fallback function when receiving in the L2 side.\n     *      Look into retryable tickets if you are interested in this functionality.\n     * @dev This function should not be called inside contract constructors\n     */\n    function depositEth() external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev all msg.value will deposited to callValueRefundAddress on L2\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev Same as createRetryableTicket, but does not guarantee that submission will succeed by requiring the needed funds\n     * come from the deposit alone, rather than falling back on the user's L2 balance\n     * @dev Advanced usage only (does not rewrite aliases for excessFeeRefundAddress and callValueRefundAddress).\n     * createRetryableTicket method is the recommended standard.\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /// @notice pauses all inbox functionality\n    function pause() external;\n\n    /// @notice unpauses all inbox functionality\n    function unpause() external;\n\n    // ---------- initializer ----------\n\n    /**\n     * @dev function to be called one time during the inbox upgrade process\n     *      this is used to fix the storage slots\n     */\n    function postUpgradeInit(IBridge _bridge) external;\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox) external;\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IInbox.sendL2MessageFromOrigin', 'start_line': 1315, 'end_line': 1315, 'offset_start': 48150, 'offset_end': 48237, 'content': 'function sendL2MessageFromOrigin(bytes calldata messageData) external returns (uint256);', 'contract_name': 'IInbox', 'contract_code': "{\n    function bridge() external view returns (IBridge);\n\n    function sequencerInbox() external view returns (ISequencerInbox);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method is an optimization to avoid having to emit the entirety of the messageData in a log. Instead validators are expected to be able to parse the data from the transaction's input\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2MessageFromOrigin(bytes calldata messageData) external returns (uint256);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method can be used to send any type of message that doesn't require L1 validation\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2Message(bytes calldata messageData) external returns (uint256);\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @notice Send a message to initiate L2 withdrawal\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external returns (uint256);\n\n    /**\n     * @notice Get the L1 fee for submitting a retryable\n     * @dev This fee can be paid by funds already in the L2 aliased address or by the current message value\n     * @dev This formula may change in the future, to future proof your code query this method instead of inlining!!\n     * @param dataLength The length of the retryable's calldata, in bytes\n     * @param baseFee The block basefee when the retryable is included in the chain, if 0 current block.basefee will be used\n     */\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Deposit eth from L1 to L2 to address of the sender if sender is an EOA, and to its aliased address if the sender is a contract\n     * @dev This does not trigger the fallback function when receiving in the L2 side.\n     *      Look into retryable tickets if you are interested in this functionality.\n     * @dev This function should not be called inside contract constructors\n     */\n    function depositEth() external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev all msg.value will deposited to callValueRefundAddress on L2\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev Same as createRetryableTicket, but does not guarantee that submission will succeed by requiring the needed funds\n     * come from the deposit alone, rather than falling back on the user's L2 balance\n     * @dev Advanced usage only (does not rewrite aliases for excessFeeRefundAddress and callValueRefundAddress).\n     * createRetryableTicket method is the recommended standard.\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /// @notice pauses all inbox functionality\n    function pause() external;\n\n    /// @notice unpauses all inbox functionality\n    function unpause() external;\n\n    // ---------- initializer ----------\n\n    /**\n     * @dev function to be called one time during the inbox upgrade process\n     *      this is used to fix the storage slots\n     */\n    function postUpgradeInit(IBridge _bridge) external;\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox) external;\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IInbox.sendL2Message', 'start_line': 1323, 'end_line': 1323, 'offset_start': 48556, 'offset_end': 48633, 'content': 'function sendL2Message(bytes calldata messageData) external returns (uint256);', 'contract_name': 'IInbox', 'contract_code': "{\n    function bridge() external view returns (IBridge);\n\n    function sequencerInbox() external view returns (ISequencerInbox);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method is an optimization to avoid having to emit the entirety of the messageData in a log. Instead validators are expected to be able to parse the data from the transaction's input\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2MessageFromOrigin(bytes calldata messageData) external returns (uint256);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method can be used to send any type of message that doesn't require L1 validation\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2Message(bytes calldata messageData) external returns (uint256);\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @notice Send a message to initiate L2 withdrawal\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external returns (uint256);\n\n    /**\n     * @notice Get the L1 fee for submitting a retryable\n     * @dev This fee can be paid by funds already in the L2 aliased address or by the current message value\n     * @dev This formula may change in the future, to future proof your code query this method instead of inlining!!\n     * @param dataLength The length of the retryable's calldata, in bytes\n     * @param baseFee The block basefee when the retryable is included in the chain, if 0 current block.basefee will be used\n     */\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Deposit eth from L1 to L2 to address of the sender if sender is an EOA, and to its aliased address if the sender is a contract\n     * @dev This does not trigger the fallback function when receiving in the L2 side.\n     *      Look into retryable tickets if you are interested in this functionality.\n     * @dev This function should not be called inside contract constructors\n     */\n    function depositEth() external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev all msg.value will deposited to callValueRefundAddress on L2\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev Same as createRetryableTicket, but does not guarantee that submission will succeed by requiring the needed funds\n     * come from the deposit alone, rather than falling back on the user's L2 balance\n     * @dev Advanced usage only (does not rewrite aliases for excessFeeRefundAddress and callValueRefundAddress).\n     * createRetryableTicket method is the recommended standard.\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /// @notice pauses all inbox functionality\n    function pause() external;\n\n    /// @notice unpauses all inbox functionality\n    function unpause() external;\n\n    // ---------- initializer ----------\n\n    /**\n     * @dev function to be called one time during the inbox upgrade process\n     *      this is used to fix the storage slots\n     */\n    function postUpgradeInit(IBridge _bridge) external;\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox) external;\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IInbox.sendL1FundedUnsignedTransaction', 'start_line': 1325, 'end_line': 1331, 'offset_start': 48640, 'offset_end': 48849, 'content': 'function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);', 'contract_name': 'IInbox', 'contract_code': "{\n    function bridge() external view returns (IBridge);\n\n    function sequencerInbox() external view returns (ISequencerInbox);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method is an optimization to avoid having to emit the entirety of the messageData in a log. Instead validators are expected to be able to parse the data from the transaction's input\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2MessageFromOrigin(bytes calldata messageData) external returns (uint256);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method can be used to send any type of message that doesn't require L1 validation\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2Message(bytes calldata messageData) external returns (uint256);\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @notice Send a message to initiate L2 withdrawal\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external returns (uint256);\n\n    /**\n     * @notice Get the L1 fee for submitting a retryable\n     * @dev This fee can be paid by funds already in the L2 aliased address or by the current message value\n     * @dev This formula may change in the future, to future proof your code query this method instead of inlining!!\n     * @param dataLength The length of the retryable's calldata, in bytes\n     * @param baseFee The block basefee when the retryable is included in the chain, if 0 current block.basefee will be used\n     */\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Deposit eth from L1 to L2 to address of the sender if sender is an EOA, and to its aliased address if the sender is a contract\n     * @dev This does not trigger the fallback function when receiving in the L2 side.\n     *      Look into retryable tickets if you are interested in this functionality.\n     * @dev This function should not be called inside contract constructors\n     */\n    function depositEth() external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev all msg.value will deposited to callValueRefundAddress on L2\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev Same as createRetryableTicket, but does not guarantee that submission will succeed by requiring the needed funds\n     * come from the deposit alone, rather than falling back on the user's L2 balance\n     * @dev Advanced usage only (does not rewrite aliases for excessFeeRefundAddress and callValueRefundAddress).\n     * createRetryableTicket method is the recommended standard.\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /// @notice pauses all inbox functionality\n    function pause() external;\n\n    /// @notice unpauses all inbox functionality\n    function unpause() external;\n\n    // ---------- initializer ----------\n\n    /**\n     * @dev function to be called one time during the inbox upgrade process\n     *      this is used to fix the storage slots\n     */\n    function postUpgradeInit(IBridge _bridge) external;\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox) external;\n}", 'modifiers': [], 'stateMutability': 'payable', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IInbox.sendL1FundedContractTransaction', 'start_line': 1333, 'end_line': 1338, 'offset_start': 48856, 'offset_end': 49042, 'content': 'function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);', 'contract_name': 'IInbox', 'contract_code': "{\n    function bridge() external view returns (IBridge);\n\n    function sequencerInbox() external view returns (ISequencerInbox);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method is an optimization to avoid having to emit the entirety of the messageData in a log. Instead validators are expected to be able to parse the data from the transaction's input\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2MessageFromOrigin(bytes calldata messageData) external returns (uint256);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method can be used to send any type of message that doesn't require L1 validation\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2Message(bytes calldata messageData) external returns (uint256);\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @notice Send a message to initiate L2 withdrawal\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external returns (uint256);\n\n    /**\n     * @notice Get the L1 fee for submitting a retryable\n     * @dev This fee can be paid by funds already in the L2 aliased address or by the current message value\n     * @dev This formula may change in the future, to future proof your code query this method instead of inlining!!\n     * @param dataLength The length of the retryable's calldata, in bytes\n     * @param baseFee The block basefee when the retryable is included in the chain, if 0 current block.basefee will be used\n     */\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Deposit eth from L1 to L2 to address of the sender if sender is an EOA, and to its aliased address if the sender is a contract\n     * @dev This does not trigger the fallback function when receiving in the L2 side.\n     *      Look into retryable tickets if you are interested in this functionality.\n     * @dev This function should not be called inside contract constructors\n     */\n    function depositEth() external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev all msg.value will deposited to callValueRefundAddress on L2\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev Same as createRetryableTicket, but does not guarantee that submission will succeed by requiring the needed funds\n     * come from the deposit alone, rather than falling back on the user's L2 balance\n     * @dev Advanced usage only (does not rewrite aliases for excessFeeRefundAddress and callValueRefundAddress).\n     * createRetryableTicket method is the recommended standard.\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /// @notice pauses all inbox functionality\n    function pause() external;\n\n    /// @notice unpauses all inbox functionality\n    function unpause() external;\n\n    // ---------- initializer ----------\n\n    /**\n     * @dev function to be called one time during the inbox upgrade process\n     *      this is used to fix the storage slots\n     */\n    function postUpgradeInit(IBridge _bridge) external;\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox) external;\n}", 'modifiers': [], 'stateMutability': 'payable', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IInbox.sendUnsignedTransaction', 'start_line': 1340, 'end_line': 1347, 'offset_start': 49049, 'offset_end': 49265, 'content': 'function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);', 'contract_name': 'IInbox', 'contract_code': "{\n    function bridge() external view returns (IBridge);\n\n    function sequencerInbox() external view returns (ISequencerInbox);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method is an optimization to avoid having to emit the entirety of the messageData in a log. Instead validators are expected to be able to parse the data from the transaction's input\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2MessageFromOrigin(bytes calldata messageData) external returns (uint256);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method can be used to send any type of message that doesn't require L1 validation\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2Message(bytes calldata messageData) external returns (uint256);\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @notice Send a message to initiate L2 withdrawal\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external returns (uint256);\n\n    /**\n     * @notice Get the L1 fee for submitting a retryable\n     * @dev This fee can be paid by funds already in the L2 aliased address or by the current message value\n     * @dev This formula may change in the future, to future proof your code query this method instead of inlining!!\n     * @param dataLength The length of the retryable's calldata, in bytes\n     * @param baseFee The block basefee when the retryable is included in the chain, if 0 current block.basefee will be used\n     */\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Deposit eth from L1 to L2 to address of the sender if sender is an EOA, and to its aliased address if the sender is a contract\n     * @dev This does not trigger the fallback function when receiving in the L2 side.\n     *      Look into retryable tickets if you are interested in this functionality.\n     * @dev This function should not be called inside contract constructors\n     */\n    function depositEth() external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev all msg.value will deposited to callValueRefundAddress on L2\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev Same as createRetryableTicket, but does not guarantee that submission will succeed by requiring the needed funds\n     * come from the deposit alone, rather than falling back on the user's L2 balance\n     * @dev Advanced usage only (does not rewrite aliases for excessFeeRefundAddress and callValueRefundAddress).\n     * createRetryableTicket method is the recommended standard.\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /// @notice pauses all inbox functionality\n    function pause() external;\n\n    /// @notice unpauses all inbox functionality\n    function unpause() external;\n\n    // ---------- initializer ----------\n\n    /**\n     * @dev function to be called one time during the inbox upgrade process\n     *      this is used to fix the storage slots\n     */\n    function postUpgradeInit(IBridge _bridge) external;\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox) external;\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IInbox.sendContractTransaction', 'start_line': 1349, 'end_line': 1355, 'offset_start': 49272, 'offset_end': 49465, 'content': 'function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);', 'contract_name': 'IInbox', 'contract_code': "{\n    function bridge() external view returns (IBridge);\n\n    function sequencerInbox() external view returns (ISequencerInbox);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method is an optimization to avoid having to emit the entirety of the messageData in a log. Instead validators are expected to be able to parse the data from the transaction's input\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2MessageFromOrigin(bytes calldata messageData) external returns (uint256);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method can be used to send any type of message that doesn't require L1 validation\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2Message(bytes calldata messageData) external returns (uint256);\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @notice Send a message to initiate L2 withdrawal\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external returns (uint256);\n\n    /**\n     * @notice Get the L1 fee for submitting a retryable\n     * @dev This fee can be paid by funds already in the L2 aliased address or by the current message value\n     * @dev This formula may change in the future, to future proof your code query this method instead of inlining!!\n     * @param dataLength The length of the retryable's calldata, in bytes\n     * @param baseFee The block basefee when the retryable is included in the chain, if 0 current block.basefee will be used\n     */\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Deposit eth from L1 to L2 to address of the sender if sender is an EOA, and to its aliased address if the sender is a contract\n     * @dev This does not trigger the fallback function when receiving in the L2 side.\n     *      Look into retryable tickets if you are interested in this functionality.\n     * @dev This function should not be called inside contract constructors\n     */\n    function depositEth() external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev all msg.value will deposited to callValueRefundAddress on L2\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev Same as createRetryableTicket, but does not guarantee that submission will succeed by requiring the needed funds\n     * come from the deposit alone, rather than falling back on the user's L2 balance\n     * @dev Advanced usage only (does not rewrite aliases for excessFeeRefundAddress and callValueRefundAddress).\n     * createRetryableTicket method is the recommended standard.\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /// @notice pauses all inbox functionality\n    function pause() external;\n\n    /// @notice unpauses all inbox functionality\n    function unpause() external;\n\n    // ---------- initializer ----------\n\n    /**\n     * @dev function to be called one time during the inbox upgrade process\n     *      this is used to fix the storage slots\n     */\n    function postUpgradeInit(IBridge _bridge) external;\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox) external;\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IInbox.sendL1FundedUnsignedTransactionToFork', 'start_line': 1361, 'end_line': 1367, 'offset_start': 49636, 'offset_end': 49851, 'content': 'function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);', 'contract_name': 'IInbox', 'contract_code': "{\n    function bridge() external view returns (IBridge);\n\n    function sequencerInbox() external view returns (ISequencerInbox);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method is an optimization to avoid having to emit the entirety of the messageData in a log. Instead validators are expected to be able to parse the data from the transaction's input\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2MessageFromOrigin(bytes calldata messageData) external returns (uint256);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method can be used to send any type of message that doesn't require L1 validation\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2Message(bytes calldata messageData) external returns (uint256);\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @notice Send a message to initiate L2 withdrawal\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external returns (uint256);\n\n    /**\n     * @notice Get the L1 fee for submitting a retryable\n     * @dev This fee can be paid by funds already in the L2 aliased address or by the current message value\n     * @dev This formula may change in the future, to future proof your code query this method instead of inlining!!\n     * @param dataLength The length of the retryable's calldata, in bytes\n     * @param baseFee The block basefee when the retryable is included in the chain, if 0 current block.basefee will be used\n     */\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Deposit eth from L1 to L2 to address of the sender if sender is an EOA, and to its aliased address if the sender is a contract\n     * @dev This does not trigger the fallback function when receiving in the L2 side.\n     *      Look into retryable tickets if you are interested in this functionality.\n     * @dev This function should not be called inside contract constructors\n     */\n    function depositEth() external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev all msg.value will deposited to callValueRefundAddress on L2\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev Same as createRetryableTicket, but does not guarantee that submission will succeed by requiring the needed funds\n     * come from the deposit alone, rather than falling back on the user's L2 balance\n     * @dev Advanced usage only (does not rewrite aliases for excessFeeRefundAddress and callValueRefundAddress).\n     * createRetryableTicket method is the recommended standard.\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /// @notice pauses all inbox functionality\n    function pause() external;\n\n    /// @notice unpauses all inbox functionality\n    function unpause() external;\n\n    // ---------- initializer ----------\n\n    /**\n     * @dev function to be called one time during the inbox upgrade process\n     *      this is used to fix the storage slots\n     */\n    function postUpgradeInit(IBridge _bridge) external;\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox) external;\n}", 'modifiers': [], 'stateMutability': 'payable', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IInbox.sendUnsignedTransactionToFork', 'start_line': 1373, 'end_line': 1380, 'offset_start': 50022, 'offset_end': 50244, 'content': 'function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);', 'contract_name': 'IInbox', 'contract_code': "{\n    function bridge() external view returns (IBridge);\n\n    function sequencerInbox() external view returns (ISequencerInbox);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method is an optimization to avoid having to emit the entirety of the messageData in a log. Instead validators are expected to be able to parse the data from the transaction's input\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2MessageFromOrigin(bytes calldata messageData) external returns (uint256);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method can be used to send any type of message that doesn't require L1 validation\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2Message(bytes calldata messageData) external returns (uint256);\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @notice Send a message to initiate L2 withdrawal\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external returns (uint256);\n\n    /**\n     * @notice Get the L1 fee for submitting a retryable\n     * @dev This fee can be paid by funds already in the L2 aliased address or by the current message value\n     * @dev This formula may change in the future, to future proof your code query this method instead of inlining!!\n     * @param dataLength The length of the retryable's calldata, in bytes\n     * @param baseFee The block basefee when the retryable is included in the chain, if 0 current block.basefee will be used\n     */\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Deposit eth from L1 to L2 to address of the sender if sender is an EOA, and to its aliased address if the sender is a contract\n     * @dev This does not trigger the fallback function when receiving in the L2 side.\n     *      Look into retryable tickets if you are interested in this functionality.\n     * @dev This function should not be called inside contract constructors\n     */\n    function depositEth() external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev all msg.value will deposited to callValueRefundAddress on L2\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev Same as createRetryableTicket, but does not guarantee that submission will succeed by requiring the needed funds\n     * come from the deposit alone, rather than falling back on the user's L2 balance\n     * @dev Advanced usage only (does not rewrite aliases for excessFeeRefundAddress and callValueRefundAddress).\n     * createRetryableTicket method is the recommended standard.\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /// @notice pauses all inbox functionality\n    function pause() external;\n\n    /// @notice unpauses all inbox functionality\n    function unpause() external;\n\n    // ---------- initializer ----------\n\n    /**\n     * @dev function to be called one time during the inbox upgrade process\n     *      this is used to fix the storage slots\n     */\n    function postUpgradeInit(IBridge _bridge) external;\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox) external;\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IInbox.sendWithdrawEthToFork', 'start_line': 1387, 'end_line': 1393, 'offset_start': 50471, 'offset_end': 50664, 'content': 'function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external returns (uint256);', 'contract_name': 'IInbox', 'contract_code': "{\n    function bridge() external view returns (IBridge);\n\n    function sequencerInbox() external view returns (ISequencerInbox);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method is an optimization to avoid having to emit the entirety of the messageData in a log. Instead validators are expected to be able to parse the data from the transaction's input\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2MessageFromOrigin(bytes calldata messageData) external returns (uint256);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method can be used to send any type of message that doesn't require L1 validation\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2Message(bytes calldata messageData) external returns (uint256);\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @notice Send a message to initiate L2 withdrawal\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external returns (uint256);\n\n    /**\n     * @notice Get the L1 fee for submitting a retryable\n     * @dev This fee can be paid by funds already in the L2 aliased address or by the current message value\n     * @dev This formula may change in the future, to future proof your code query this method instead of inlining!!\n     * @param dataLength The length of the retryable's calldata, in bytes\n     * @param baseFee The block basefee when the retryable is included in the chain, if 0 current block.basefee will be used\n     */\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Deposit eth from L1 to L2 to address of the sender if sender is an EOA, and to its aliased address if the sender is a contract\n     * @dev This does not trigger the fallback function when receiving in the L2 side.\n     *      Look into retryable tickets if you are interested in this functionality.\n     * @dev This function should not be called inside contract constructors\n     */\n    function depositEth() external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev all msg.value will deposited to callValueRefundAddress on L2\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev Same as createRetryableTicket, but does not guarantee that submission will succeed by requiring the needed funds\n     * come from the deposit alone, rather than falling back on the user's L2 balance\n     * @dev Advanced usage only (does not rewrite aliases for excessFeeRefundAddress and callValueRefundAddress).\n     * createRetryableTicket method is the recommended standard.\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /// @notice pauses all inbox functionality\n    function pause() external;\n\n    /// @notice unpauses all inbox functionality\n    function unpause() external;\n\n    // ---------- initializer ----------\n\n    /**\n     * @dev function to be called one time during the inbox upgrade process\n     *      this is used to fix the storage slots\n     */\n    function postUpgradeInit(IBridge _bridge) external;\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox) external;\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IInbox.calculateRetryableSubmissionFee', 'start_line': 1402, 'end_line': 1405, 'offset_start': 51168, 'offset_end': 51301, 'content': 'function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        external\n        view\n        returns (uint256);', 'contract_name': 'IInbox', 'contract_code': "{\n    function bridge() external view returns (IBridge);\n\n    function sequencerInbox() external view returns (ISequencerInbox);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method is an optimization to avoid having to emit the entirety of the messageData in a log. Instead validators are expected to be able to parse the data from the transaction's input\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2MessageFromOrigin(bytes calldata messageData) external returns (uint256);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method can be used to send any type of message that doesn't require L1 validation\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2Message(bytes calldata messageData) external returns (uint256);\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @notice Send a message to initiate L2 withdrawal\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external returns (uint256);\n\n    /**\n     * @notice Get the L1 fee for submitting a retryable\n     * @dev This fee can be paid by funds already in the L2 aliased address or by the current message value\n     * @dev This formula may change in the future, to future proof your code query this method instead of inlining!!\n     * @param dataLength The length of the retryable's calldata, in bytes\n     * @param baseFee The block basefee when the retryable is included in the chain, if 0 current block.basefee will be used\n     */\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Deposit eth from L1 to L2 to address of the sender if sender is an EOA, and to its aliased address if the sender is a contract\n     * @dev This does not trigger the fallback function when receiving in the L2 side.\n     *      Look into retryable tickets if you are interested in this functionality.\n     * @dev This function should not be called inside contract constructors\n     */\n    function depositEth() external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev all msg.value will deposited to callValueRefundAddress on L2\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev Same as createRetryableTicket, but does not guarantee that submission will succeed by requiring the needed funds\n     * come from the deposit alone, rather than falling back on the user's L2 balance\n     * @dev Advanced usage only (does not rewrite aliases for excessFeeRefundAddress and callValueRefundAddress).\n     * createRetryableTicket method is the recommended standard.\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /// @notice pauses all inbox functionality\n    function pause() external;\n\n    /// @notice unpauses all inbox functionality\n    function unpause() external;\n\n    // ---------- initializer ----------\n\n    /**\n     * @dev function to be called one time during the inbox upgrade process\n     *      this is used to fix the storage slots\n     */\n    function postUpgradeInit(IBridge _bridge) external;\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox) external;\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IInbox.depositEth', 'start_line': 1413, 'end_line': 1413, 'offset_start': 51714, 'offset_end': 51770, 'content': 'function depositEth() external payable returns (uint256);', 'contract_name': 'IInbox', 'contract_code': "{\n    function bridge() external view returns (IBridge);\n\n    function sequencerInbox() external view returns (ISequencerInbox);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method is an optimization to avoid having to emit the entirety of the messageData in a log. Instead validators are expected to be able to parse the data from the transaction's input\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2MessageFromOrigin(bytes calldata messageData) external returns (uint256);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method can be used to send any type of message that doesn't require L1 validation\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2Message(bytes calldata messageData) external returns (uint256);\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @notice Send a message to initiate L2 withdrawal\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external returns (uint256);\n\n    /**\n     * @notice Get the L1 fee for submitting a retryable\n     * @dev This fee can be paid by funds already in the L2 aliased address or by the current message value\n     * @dev This formula may change in the future, to future proof your code query this method instead of inlining!!\n     * @param dataLength The length of the retryable's calldata, in bytes\n     * @param baseFee The block basefee when the retryable is included in the chain, if 0 current block.basefee will be used\n     */\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Deposit eth from L1 to L2 to address of the sender if sender is an EOA, and to its aliased address if the sender is a contract\n     * @dev This does not trigger the fallback function when receiving in the L2 side.\n     *      Look into retryable tickets if you are interested in this functionality.\n     * @dev This function should not be called inside contract constructors\n     */\n    function depositEth() external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev all msg.value will deposited to callValueRefundAddress on L2\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev Same as createRetryableTicket, but does not guarantee that submission will succeed by requiring the needed funds\n     * come from the deposit alone, rather than falling back on the user's L2 balance\n     * @dev Advanced usage only (does not rewrite aliases for excessFeeRefundAddress and callValueRefundAddress).\n     * createRetryableTicket method is the recommended standard.\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /// @notice pauses all inbox functionality\n    function pause() external;\n\n    /// @notice unpauses all inbox functionality\n    function unpause() external;\n\n    // ---------- initializer ----------\n\n    /**\n     * @dev function to be called one time during the inbox upgrade process\n     *      this is used to fix the storage slots\n     */\n    function postUpgradeInit(IBridge _bridge) external;\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox) external;\n}", 'modifiers': [], 'stateMutability': 'payable', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IInbox.createRetryableTicket', 'start_line': 1429, 'end_line': 1438, 'offset_start': 52944, 'offset_end': 53264, 'content': 'function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);', 'contract_name': 'IInbox', 'contract_code': "{\n    function bridge() external view returns (IBridge);\n\n    function sequencerInbox() external view returns (ISequencerInbox);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method is an optimization to avoid having to emit the entirety of the messageData in a log. Instead validators are expected to be able to parse the data from the transaction's input\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2MessageFromOrigin(bytes calldata messageData) external returns (uint256);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method can be used to send any type of message that doesn't require L1 validation\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2Message(bytes calldata messageData) external returns (uint256);\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @notice Send a message to initiate L2 withdrawal\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external returns (uint256);\n\n    /**\n     * @notice Get the L1 fee for submitting a retryable\n     * @dev This fee can be paid by funds already in the L2 aliased address or by the current message value\n     * @dev This formula may change in the future, to future proof your code query this method instead of inlining!!\n     * @param dataLength The length of the retryable's calldata, in bytes\n     * @param baseFee The block basefee when the retryable is included in the chain, if 0 current block.basefee will be used\n     */\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Deposit eth from L1 to L2 to address of the sender if sender is an EOA, and to its aliased address if the sender is a contract\n     * @dev This does not trigger the fallback function when receiving in the L2 side.\n     *      Look into retryable tickets if you are interested in this functionality.\n     * @dev This function should not be called inside contract constructors\n     */\n    function depositEth() external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev all msg.value will deposited to callValueRefundAddress on L2\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev Same as createRetryableTicket, but does not guarantee that submission will succeed by requiring the needed funds\n     * come from the deposit alone, rather than falling back on the user's L2 balance\n     * @dev Advanced usage only (does not rewrite aliases for excessFeeRefundAddress and callValueRefundAddress).\n     * createRetryableTicket method is the recommended standard.\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /// @notice pauses all inbox functionality\n    function pause() external;\n\n    /// @notice unpauses all inbox functionality\n    function unpause() external;\n\n    // ---------- initializer ----------\n\n    /**\n     * @dev function to be called one time during the inbox upgrade process\n     *      this is used to fix the storage slots\n     */\n    function postUpgradeInit(IBridge _bridge) external;\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox) external;\n}", 'modifiers': [], 'stateMutability': 'payable', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IInbox.unsafeCreateRetryableTicket', 'start_line': 1457, 'end_line': 1466, 'offset_start': 54755, 'offset_end': 55081, 'content': 'function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);', 'contract_name': 'IInbox', 'contract_code': "{\n    function bridge() external view returns (IBridge);\n\n    function sequencerInbox() external view returns (ISequencerInbox);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method is an optimization to avoid having to emit the entirety of the messageData in a log. Instead validators are expected to be able to parse the data from the transaction's input\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2MessageFromOrigin(bytes calldata messageData) external returns (uint256);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method can be used to send any type of message that doesn't require L1 validation\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2Message(bytes calldata messageData) external returns (uint256);\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @notice Send a message to initiate L2 withdrawal\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external returns (uint256);\n\n    /**\n     * @notice Get the L1 fee for submitting a retryable\n     * @dev This fee can be paid by funds already in the L2 aliased address or by the current message value\n     * @dev This formula may change in the future, to future proof your code query this method instead of inlining!!\n     * @param dataLength The length of the retryable's calldata, in bytes\n     * @param baseFee The block basefee when the retryable is included in the chain, if 0 current block.basefee will be used\n     */\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Deposit eth from L1 to L2 to address of the sender if sender is an EOA, and to its aliased address if the sender is a contract\n     * @dev This does not trigger the fallback function when receiving in the L2 side.\n     *      Look into retryable tickets if you are interested in this functionality.\n     * @dev This function should not be called inside contract constructors\n     */\n    function depositEth() external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev all msg.value will deposited to callValueRefundAddress on L2\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev Same as createRetryableTicket, but does not guarantee that submission will succeed by requiring the needed funds\n     * come from the deposit alone, rather than falling back on the user's L2 balance\n     * @dev Advanced usage only (does not rewrite aliases for excessFeeRefundAddress and callValueRefundAddress).\n     * createRetryableTicket method is the recommended standard.\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /// @notice pauses all inbox functionality\n    function pause() external;\n\n    /// @notice unpauses all inbox functionality\n    function unpause() external;\n\n    // ---------- initializer ----------\n\n    /**\n     * @dev function to be called one time during the inbox upgrade process\n     *      this is used to fix the storage slots\n     */\n    function postUpgradeInit(IBridge _bridge) external;\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox) external;\n}", 'modifiers': [], 'stateMutability': 'payable', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IInbox.pause', 'start_line': 1471, 'end_line': 1471, 'offset_start': 55193, 'offset_end': 55218, 'content': 'function pause() external;', 'contract_name': 'IInbox', 'contract_code': "{\n    function bridge() external view returns (IBridge);\n\n    function sequencerInbox() external view returns (ISequencerInbox);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method is an optimization to avoid having to emit the entirety of the messageData in a log. Instead validators are expected to be able to parse the data from the transaction's input\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2MessageFromOrigin(bytes calldata messageData) external returns (uint256);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method can be used to send any type of message that doesn't require L1 validation\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2Message(bytes calldata messageData) external returns (uint256);\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @notice Send a message to initiate L2 withdrawal\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external returns (uint256);\n\n    /**\n     * @notice Get the L1 fee for submitting a retryable\n     * @dev This fee can be paid by funds already in the L2 aliased address or by the current message value\n     * @dev This formula may change in the future, to future proof your code query this method instead of inlining!!\n     * @param dataLength The length of the retryable's calldata, in bytes\n     * @param baseFee The block basefee when the retryable is included in the chain, if 0 current block.basefee will be used\n     */\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Deposit eth from L1 to L2 to address of the sender if sender is an EOA, and to its aliased address if the sender is a contract\n     * @dev This does not trigger the fallback function when receiving in the L2 side.\n     *      Look into retryable tickets if you are interested in this functionality.\n     * @dev This function should not be called inside contract constructors\n     */\n    function depositEth() external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev all msg.value will deposited to callValueRefundAddress on L2\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev Same as createRetryableTicket, but does not guarantee that submission will succeed by requiring the needed funds\n     * come from the deposit alone, rather than falling back on the user's L2 balance\n     * @dev Advanced usage only (does not rewrite aliases for excessFeeRefundAddress and callValueRefundAddress).\n     * createRetryableTicket method is the recommended standard.\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /// @notice pauses all inbox functionality\n    function pause() external;\n\n    /// @notice unpauses all inbox functionality\n    function unpause() external;\n\n    // ---------- initializer ----------\n\n    /**\n     * @dev function to be called one time during the inbox upgrade process\n     *      this is used to fix the storage slots\n     */\n    function postUpgradeInit(IBridge _bridge) external;\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox) external;\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IInbox.unpause', 'start_line': 1474, 'end_line': 1474, 'offset_start': 55274, 'offset_end': 55301, 'content': 'function unpause() external;', 'contract_name': 'IInbox', 'contract_code': "{\n    function bridge() external view returns (IBridge);\n\n    function sequencerInbox() external view returns (ISequencerInbox);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method is an optimization to avoid having to emit the entirety of the messageData in a log. Instead validators are expected to be able to parse the data from the transaction's input\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2MessageFromOrigin(bytes calldata messageData) external returns (uint256);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method can be used to send any type of message that doesn't require L1 validation\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2Message(bytes calldata messageData) external returns (uint256);\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @notice Send a message to initiate L2 withdrawal\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external returns (uint256);\n\n    /**\n     * @notice Get the L1 fee for submitting a retryable\n     * @dev This fee can be paid by funds already in the L2 aliased address or by the current message value\n     * @dev This formula may change in the future, to future proof your code query this method instead of inlining!!\n     * @param dataLength The length of the retryable's calldata, in bytes\n     * @param baseFee The block basefee when the retryable is included in the chain, if 0 current block.basefee will be used\n     */\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Deposit eth from L1 to L2 to address of the sender if sender is an EOA, and to its aliased address if the sender is a contract\n     * @dev This does not trigger the fallback function when receiving in the L2 side.\n     *      Look into retryable tickets if you are interested in this functionality.\n     * @dev This function should not be called inside contract constructors\n     */\n    function depositEth() external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev all msg.value will deposited to callValueRefundAddress on L2\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev Same as createRetryableTicket, but does not guarantee that submission will succeed by requiring the needed funds\n     * come from the deposit alone, rather than falling back on the user's L2 balance\n     * @dev Advanced usage only (does not rewrite aliases for excessFeeRefundAddress and callValueRefundAddress).\n     * createRetryableTicket method is the recommended standard.\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /// @notice pauses all inbox functionality\n    function pause() external;\n\n    /// @notice unpauses all inbox functionality\n    function unpause() external;\n\n    // ---------- initializer ----------\n\n    /**\n     * @dev function to be called one time during the inbox upgrade process\n     *      this is used to fix the storage slots\n     */\n    function postUpgradeInit(IBridge _bridge) external;\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox) external;\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IInbox.postUpgradeInit', 'start_line': 1482, 'end_line': 1482, 'offset_start': 55492, 'offset_end': 55542, 'content': 'function postUpgradeInit(IBridge _bridge) external;', 'contract_name': 'IInbox', 'contract_code': "{\n    function bridge() external view returns (IBridge);\n\n    function sequencerInbox() external view returns (ISequencerInbox);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method is an optimization to avoid having to emit the entirety of the messageData in a log. Instead validators are expected to be able to parse the data from the transaction's input\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2MessageFromOrigin(bytes calldata messageData) external returns (uint256);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method can be used to send any type of message that doesn't require L1 validation\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2Message(bytes calldata messageData) external returns (uint256);\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @notice Send a message to initiate L2 withdrawal\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external returns (uint256);\n\n    /**\n     * @notice Get the L1 fee for submitting a retryable\n     * @dev This fee can be paid by funds already in the L2 aliased address or by the current message value\n     * @dev This formula may change in the future, to future proof your code query this method instead of inlining!!\n     * @param dataLength The length of the retryable's calldata, in bytes\n     * @param baseFee The block basefee when the retryable is included in the chain, if 0 current block.basefee will be used\n     */\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Deposit eth from L1 to L2 to address of the sender if sender is an EOA, and to its aliased address if the sender is a contract\n     * @dev This does not trigger the fallback function when receiving in the L2 side.\n     *      Look into retryable tickets if you are interested in this functionality.\n     * @dev This function should not be called inside contract constructors\n     */\n    function depositEth() external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev all msg.value will deposited to callValueRefundAddress on L2\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev Same as createRetryableTicket, but does not guarantee that submission will succeed by requiring the needed funds\n     * come from the deposit alone, rather than falling back on the user's L2 balance\n     * @dev Advanced usage only (does not rewrite aliases for excessFeeRefundAddress and callValueRefundAddress).\n     * createRetryableTicket method is the recommended standard.\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /// @notice pauses all inbox functionality\n    function pause() external;\n\n    /// @notice unpauses all inbox functionality\n    function unpause() external;\n\n    // ---------- initializer ----------\n\n    /**\n     * @dev function to be called one time during the inbox upgrade process\n     *      this is used to fix the storage slots\n     */\n    function postUpgradeInit(IBridge _bridge) external;\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox) external;\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IInbox.initialize', 'start_line': 1484, 'end_line': 1484, 'offset_start': 55549, 'offset_end': 55627, 'content': 'function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox) external;', 'contract_name': 'IInbox', 'contract_code': "{\n    function bridge() external view returns (IBridge);\n\n    function sequencerInbox() external view returns (ISequencerInbox);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method is an optimization to avoid having to emit the entirety of the messageData in a log. Instead validators are expected to be able to parse the data from the transaction's input\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2MessageFromOrigin(bytes calldata messageData) external returns (uint256);\n\n    /**\n     * @notice Send a generic L2 message to the chain\n     * @dev This method can be used to send any type of message that doesn't require L1 validation\n     *      This method will be disabled upon L1 fork to prevent replay attacks on L2\n     * @param messageData Data of the message being sent\n     */\n    function sendL2Message(bytes calldata messageData) external returns (uint256);\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendL1FundedContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendUnsignedTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    function sendContractTransaction(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendL1FundedUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendUnsignedTransactionToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @notice Send a message to initiate L2 withdrawal\n     * @dev This method can only be called upon L1 fork and will not alias the caller\n     *      This method will revert if not called from origin\n     */\n    function sendWithdrawEthToFork(\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        uint256 nonce,\n        uint256 value,\n        address withdrawTo\n    ) external returns (uint256);\n\n    /**\n     * @notice Get the L1 fee for submitting a retryable\n     * @dev This fee can be paid by funds already in the L2 aliased address or by the current message value\n     * @dev This formula may change in the future, to future proof your code query this method instead of inlining!!\n     * @param dataLength The length of the retryable's calldata, in bytes\n     * @param baseFee The block basefee when the retryable is included in the chain, if 0 current block.basefee will be used\n     */\n    function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Deposit eth from L1 to L2 to address of the sender if sender is an EOA, and to its aliased address if the sender is a contract\n     * @dev This does not trigger the fallback function when receiving in the L2 side.\n     *      Look into retryable tickets if you are interested in this functionality.\n     * @dev This function should not be called inside contract constructors\n     */\n    function depositEth() external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev all msg.value will deposited to callValueRefundAddress on L2\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev Same as createRetryableTicket, but does not guarantee that submission will succeed by requiring the needed funds\n     * come from the deposit alone, rather than falling back on the user's L2 balance\n     * @dev Advanced usage only (does not rewrite aliases for excessFeeRefundAddress and callValueRefundAddress).\n     * createRetryableTicket method is the recommended standard.\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\n     * @param to destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\n     * @param data ABI encoded data of L2 message\n     * @return unique message number of the retryable transaction\n     */\n    function unsafeCreateRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /// @notice pauses all inbox functionality\n    function pause() external;\n\n    /// @notice unpauses all inbox functionality\n    function unpause() external;\n\n    // ---------- initializer ----------\n\n    /**\n     * @dev function to be called one time during the inbox upgrade process\n     *      this is used to fix the storage slots\n     */\n    function postUpgradeInit(IBridge _bridge) external;\n\n    function initialize(IBridge _bridge, ISequencerInbox _sequencerInbox) external;\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IBridge.allowedDelayedInboxList', 'start_line': 1521, 'end_line': 1521, 'offset_start': 56512, 'offset_end': 56580, 'content': 'function allowedDelayedInboxList(uint256) external returns (address);', 'contract_name': 'IBridge', 'contract_code': '{\n    event MessageDelivered(\n        uint256 indexed messageIndex,\n        bytes32 indexed beforeInboxAcc,\n        address inbox,\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash,\n        uint256 baseFeeL1,\n        uint64 timestamp\n    );\n\n    event BridgeCallTriggered(\n        address indexed outbox,\n        address indexed to,\n        uint256 value,\n        bytes data\n    );\n\n    event InboxToggle(address indexed inbox, bool enabled);\n\n    event OutboxToggle(address indexed outbox, bool enabled);\n\n    event SequencerInboxUpdated(address newSequencerInbox);\n\n    function allowedDelayedInboxList(uint256) external returns (address);\n\n    function allowedOutboxList(uint256) external returns (address);\n\n    /// @dev Accumulator for delayed inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function delayedInboxAccs(uint256) external view returns (bytes32);\n\n    /// @dev Accumulator for sequencer inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function sequencerInboxAccs(uint256) external view returns (bytes32);\n\n    function rollup() external view returns (IOwnable);\n\n    function sequencerInbox() external view returns (address);\n\n    function activeOutbox() external view returns (address);\n\n    function allowedDelayedInboxes(address inbox) external view returns (bool);\n\n    function allowedOutboxes(address outbox) external view returns (bool);\n\n    function sequencerReportedSubMessageCount() external view returns (uint256);\n\n    /**\n     * @dev Enqueue a message in the delayed inbox accumulator.\n     *      These messages are later sequenced in the SequencerInbox, either\n     *      by the sequencer as part of a normal batch, or by force inclusion.\n     */\n    function enqueueDelayedMessage(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) external payable returns (uint256);\n\n    function executeCall(\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bool success, bytes memory returnData);\n\n    function delayedMessageCount() external view returns (uint256);\n\n    function sequencerMessageCount() external view returns (uint256);\n\n    // ---------- onlySequencerInbox functions ----------\n\n    function enqueueSequencerMessage(\n        bytes32 dataHash,\n        uint256 afterDelayedMessagesRead,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    )\n        external\n        returns (\n            uint256 seqMessageIndex,\n            bytes32 beforeAcc,\n            bytes32 delayedAcc,\n            bytes32 acc\n        );\n\n    /**\n     * @dev Allows the sequencer inbox to submit a delayed message of the batchPostingReport type\n     *      This is done through a separate function entrypoint instead of allowing the sequencer inbox\n     *      to call `enqueueDelayedMessage` to avoid the gas overhead of an extra SLOAD in either\n     *      every delayed inbox or every sequencer inbox call.\n     */\n    function submitBatchSpendingReport(address batchPoster, bytes32 dataHash)\n        external\n        returns (uint256 msgNum);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    function setSequencerInbox(address _sequencerInbox) external;\n\n    function setDelayedInbox(address inbox, bool enabled) external;\n\n    function setOutbox(address inbox, bool enabled) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IOwnable rollup_) external;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IBridge.allowedOutboxList', 'start_line': 1523, 'end_line': 1523, 'offset_start': 56587, 'offset_end': 56649, 'content': 'function allowedOutboxList(uint256) external returns (address);', 'contract_name': 'IBridge', 'contract_code': '{\n    event MessageDelivered(\n        uint256 indexed messageIndex,\n        bytes32 indexed beforeInboxAcc,\n        address inbox,\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash,\n        uint256 baseFeeL1,\n        uint64 timestamp\n    );\n\n    event BridgeCallTriggered(\n        address indexed outbox,\n        address indexed to,\n        uint256 value,\n        bytes data\n    );\n\n    event InboxToggle(address indexed inbox, bool enabled);\n\n    event OutboxToggle(address indexed outbox, bool enabled);\n\n    event SequencerInboxUpdated(address newSequencerInbox);\n\n    function allowedDelayedInboxList(uint256) external returns (address);\n\n    function allowedOutboxList(uint256) external returns (address);\n\n    /// @dev Accumulator for delayed inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function delayedInboxAccs(uint256) external view returns (bytes32);\n\n    /// @dev Accumulator for sequencer inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function sequencerInboxAccs(uint256) external view returns (bytes32);\n\n    function rollup() external view returns (IOwnable);\n\n    function sequencerInbox() external view returns (address);\n\n    function activeOutbox() external view returns (address);\n\n    function allowedDelayedInboxes(address inbox) external view returns (bool);\n\n    function allowedOutboxes(address outbox) external view returns (bool);\n\n    function sequencerReportedSubMessageCount() external view returns (uint256);\n\n    /**\n     * @dev Enqueue a message in the delayed inbox accumulator.\n     *      These messages are later sequenced in the SequencerInbox, either\n     *      by the sequencer as part of a normal batch, or by force inclusion.\n     */\n    function enqueueDelayedMessage(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) external payable returns (uint256);\n\n    function executeCall(\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bool success, bytes memory returnData);\n\n    function delayedMessageCount() external view returns (uint256);\n\n    function sequencerMessageCount() external view returns (uint256);\n\n    // ---------- onlySequencerInbox functions ----------\n\n    function enqueueSequencerMessage(\n        bytes32 dataHash,\n        uint256 afterDelayedMessagesRead,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    )\n        external\n        returns (\n            uint256 seqMessageIndex,\n            bytes32 beforeAcc,\n            bytes32 delayedAcc,\n            bytes32 acc\n        );\n\n    /**\n     * @dev Allows the sequencer inbox to submit a delayed message of the batchPostingReport type\n     *      This is done through a separate function entrypoint instead of allowing the sequencer inbox\n     *      to call `enqueueDelayedMessage` to avoid the gas overhead of an extra SLOAD in either\n     *      every delayed inbox or every sequencer inbox call.\n     */\n    function submitBatchSpendingReport(address batchPoster, bytes32 dataHash)\n        external\n        returns (uint256 msgNum);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    function setSequencerInbox(address _sequencerInbox) external;\n\n    function setDelayedInbox(address inbox, bool enabled) external;\n\n    function setOutbox(address inbox, bool enabled) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IOwnable rollup_) external;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IBridge.delayedInboxAccs', 'start_line': 1526, 'end_line': 1526, 'offset_start': 56808, 'offset_end': 56874, 'content': 'function delayedInboxAccs(uint256) external view returns (bytes32);', 'contract_name': 'IBridge', 'contract_code': '{\n    event MessageDelivered(\n        uint256 indexed messageIndex,\n        bytes32 indexed beforeInboxAcc,\n        address inbox,\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash,\n        uint256 baseFeeL1,\n        uint64 timestamp\n    );\n\n    event BridgeCallTriggered(\n        address indexed outbox,\n        address indexed to,\n        uint256 value,\n        bytes data\n    );\n\n    event InboxToggle(address indexed inbox, bool enabled);\n\n    event OutboxToggle(address indexed outbox, bool enabled);\n\n    event SequencerInboxUpdated(address newSequencerInbox);\n\n    function allowedDelayedInboxList(uint256) external returns (address);\n\n    function allowedOutboxList(uint256) external returns (address);\n\n    /// @dev Accumulator for delayed inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function delayedInboxAccs(uint256) external view returns (bytes32);\n\n    /// @dev Accumulator for sequencer inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function sequencerInboxAccs(uint256) external view returns (bytes32);\n\n    function rollup() external view returns (IOwnable);\n\n    function sequencerInbox() external view returns (address);\n\n    function activeOutbox() external view returns (address);\n\n    function allowedDelayedInboxes(address inbox) external view returns (bool);\n\n    function allowedOutboxes(address outbox) external view returns (bool);\n\n    function sequencerReportedSubMessageCount() external view returns (uint256);\n\n    /**\n     * @dev Enqueue a message in the delayed inbox accumulator.\n     *      These messages are later sequenced in the SequencerInbox, either\n     *      by the sequencer as part of a normal batch, or by force inclusion.\n     */\n    function enqueueDelayedMessage(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) external payable returns (uint256);\n\n    function executeCall(\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bool success, bytes memory returnData);\n\n    function delayedMessageCount() external view returns (uint256);\n\n    function sequencerMessageCount() external view returns (uint256);\n\n    // ---------- onlySequencerInbox functions ----------\n\n    function enqueueSequencerMessage(\n        bytes32 dataHash,\n        uint256 afterDelayedMessagesRead,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    )\n        external\n        returns (\n            uint256 seqMessageIndex,\n            bytes32 beforeAcc,\n            bytes32 delayedAcc,\n            bytes32 acc\n        );\n\n    /**\n     * @dev Allows the sequencer inbox to submit a delayed message of the batchPostingReport type\n     *      This is done through a separate function entrypoint instead of allowing the sequencer inbox\n     *      to call `enqueueDelayedMessage` to avoid the gas overhead of an extra SLOAD in either\n     *      every delayed inbox or every sequencer inbox call.\n     */\n    function submitBatchSpendingReport(address batchPoster, bytes32 dataHash)\n        external\n        returns (uint256 msgNum);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    function setSequencerInbox(address _sequencerInbox) external;\n\n    function setDelayedInbox(address inbox, bool enabled) external;\n\n    function setOutbox(address inbox, bool enabled) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IOwnable rollup_) external;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IBridge.sequencerInboxAccs', 'start_line': 1529, 'end_line': 1529, 'offset_start': 57035, 'offset_end': 57103, 'content': 'function sequencerInboxAccs(uint256) external view returns (bytes32);', 'contract_name': 'IBridge', 'contract_code': '{\n    event MessageDelivered(\n        uint256 indexed messageIndex,\n        bytes32 indexed beforeInboxAcc,\n        address inbox,\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash,\n        uint256 baseFeeL1,\n        uint64 timestamp\n    );\n\n    event BridgeCallTriggered(\n        address indexed outbox,\n        address indexed to,\n        uint256 value,\n        bytes data\n    );\n\n    event InboxToggle(address indexed inbox, bool enabled);\n\n    event OutboxToggle(address indexed outbox, bool enabled);\n\n    event SequencerInboxUpdated(address newSequencerInbox);\n\n    function allowedDelayedInboxList(uint256) external returns (address);\n\n    function allowedOutboxList(uint256) external returns (address);\n\n    /// @dev Accumulator for delayed inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function delayedInboxAccs(uint256) external view returns (bytes32);\n\n    /// @dev Accumulator for sequencer inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function sequencerInboxAccs(uint256) external view returns (bytes32);\n\n    function rollup() external view returns (IOwnable);\n\n    function sequencerInbox() external view returns (address);\n\n    function activeOutbox() external view returns (address);\n\n    function allowedDelayedInboxes(address inbox) external view returns (bool);\n\n    function allowedOutboxes(address outbox) external view returns (bool);\n\n    function sequencerReportedSubMessageCount() external view returns (uint256);\n\n    /**\n     * @dev Enqueue a message in the delayed inbox accumulator.\n     *      These messages are later sequenced in the SequencerInbox, either\n     *      by the sequencer as part of a normal batch, or by force inclusion.\n     */\n    function enqueueDelayedMessage(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) external payable returns (uint256);\n\n    function executeCall(\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bool success, bytes memory returnData);\n\n    function delayedMessageCount() external view returns (uint256);\n\n    function sequencerMessageCount() external view returns (uint256);\n\n    // ---------- onlySequencerInbox functions ----------\n\n    function enqueueSequencerMessage(\n        bytes32 dataHash,\n        uint256 afterDelayedMessagesRead,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    )\n        external\n        returns (\n            uint256 seqMessageIndex,\n            bytes32 beforeAcc,\n            bytes32 delayedAcc,\n            bytes32 acc\n        );\n\n    /**\n     * @dev Allows the sequencer inbox to submit a delayed message of the batchPostingReport type\n     *      This is done through a separate function entrypoint instead of allowing the sequencer inbox\n     *      to call `enqueueDelayedMessage` to avoid the gas overhead of an extra SLOAD in either\n     *      every delayed inbox or every sequencer inbox call.\n     */\n    function submitBatchSpendingReport(address batchPoster, bytes32 dataHash)\n        external\n        returns (uint256 msgNum);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    function setSequencerInbox(address _sequencerInbox) external;\n\n    function setDelayedInbox(address inbox, bool enabled) external;\n\n    function setOutbox(address inbox, bool enabled) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IOwnable rollup_) external;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IBridge.rollup', 'start_line': 1531, 'end_line': 1531, 'offset_start': 57110, 'offset_end': 57160, 'content': 'function rollup() external view returns (IOwnable);', 'contract_name': 'IBridge', 'contract_code': '{\n    event MessageDelivered(\n        uint256 indexed messageIndex,\n        bytes32 indexed beforeInboxAcc,\n        address inbox,\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash,\n        uint256 baseFeeL1,\n        uint64 timestamp\n    );\n\n    event BridgeCallTriggered(\n        address indexed outbox,\n        address indexed to,\n        uint256 value,\n        bytes data\n    );\n\n    event InboxToggle(address indexed inbox, bool enabled);\n\n    event OutboxToggle(address indexed outbox, bool enabled);\n\n    event SequencerInboxUpdated(address newSequencerInbox);\n\n    function allowedDelayedInboxList(uint256) external returns (address);\n\n    function allowedOutboxList(uint256) external returns (address);\n\n    /// @dev Accumulator for delayed inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function delayedInboxAccs(uint256) external view returns (bytes32);\n\n    /// @dev Accumulator for sequencer inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function sequencerInboxAccs(uint256) external view returns (bytes32);\n\n    function rollup() external view returns (IOwnable);\n\n    function sequencerInbox() external view returns (address);\n\n    function activeOutbox() external view returns (address);\n\n    function allowedDelayedInboxes(address inbox) external view returns (bool);\n\n    function allowedOutboxes(address outbox) external view returns (bool);\n\n    function sequencerReportedSubMessageCount() external view returns (uint256);\n\n    /**\n     * @dev Enqueue a message in the delayed inbox accumulator.\n     *      These messages are later sequenced in the SequencerInbox, either\n     *      by the sequencer as part of a normal batch, or by force inclusion.\n     */\n    function enqueueDelayedMessage(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) external payable returns (uint256);\n\n    function executeCall(\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bool success, bytes memory returnData);\n\n    function delayedMessageCount() external view returns (uint256);\n\n    function sequencerMessageCount() external view returns (uint256);\n\n    // ---------- onlySequencerInbox functions ----------\n\n    function enqueueSequencerMessage(\n        bytes32 dataHash,\n        uint256 afterDelayedMessagesRead,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    )\n        external\n        returns (\n            uint256 seqMessageIndex,\n            bytes32 beforeAcc,\n            bytes32 delayedAcc,\n            bytes32 acc\n        );\n\n    /**\n     * @dev Allows the sequencer inbox to submit a delayed message of the batchPostingReport type\n     *      This is done through a separate function entrypoint instead of allowing the sequencer inbox\n     *      to call `enqueueDelayedMessage` to avoid the gas overhead of an extra SLOAD in either\n     *      every delayed inbox or every sequencer inbox call.\n     */\n    function submitBatchSpendingReport(address batchPoster, bytes32 dataHash)\n        external\n        returns (uint256 msgNum);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    function setSequencerInbox(address _sequencerInbox) external;\n\n    function setDelayedInbox(address inbox, bool enabled) external;\n\n    function setOutbox(address inbox, bool enabled) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IOwnable rollup_) external;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IBridge.sequencerInbox', 'start_line': 1533, 'end_line': 1533, 'offset_start': 57167, 'offset_end': 57224, 'content': 'function sequencerInbox() external view returns (address);', 'contract_name': 'IBridge', 'contract_code': '{\n    event MessageDelivered(\n        uint256 indexed messageIndex,\n        bytes32 indexed beforeInboxAcc,\n        address inbox,\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash,\n        uint256 baseFeeL1,\n        uint64 timestamp\n    );\n\n    event BridgeCallTriggered(\n        address indexed outbox,\n        address indexed to,\n        uint256 value,\n        bytes data\n    );\n\n    event InboxToggle(address indexed inbox, bool enabled);\n\n    event OutboxToggle(address indexed outbox, bool enabled);\n\n    event SequencerInboxUpdated(address newSequencerInbox);\n\n    function allowedDelayedInboxList(uint256) external returns (address);\n\n    function allowedOutboxList(uint256) external returns (address);\n\n    /// @dev Accumulator for delayed inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function delayedInboxAccs(uint256) external view returns (bytes32);\n\n    /// @dev Accumulator for sequencer inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function sequencerInboxAccs(uint256) external view returns (bytes32);\n\n    function rollup() external view returns (IOwnable);\n\n    function sequencerInbox() external view returns (address);\n\n    function activeOutbox() external view returns (address);\n\n    function allowedDelayedInboxes(address inbox) external view returns (bool);\n\n    function allowedOutboxes(address outbox) external view returns (bool);\n\n    function sequencerReportedSubMessageCount() external view returns (uint256);\n\n    /**\n     * @dev Enqueue a message in the delayed inbox accumulator.\n     *      These messages are later sequenced in the SequencerInbox, either\n     *      by the sequencer as part of a normal batch, or by force inclusion.\n     */\n    function enqueueDelayedMessage(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) external payable returns (uint256);\n\n    function executeCall(\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bool success, bytes memory returnData);\n\n    function delayedMessageCount() external view returns (uint256);\n\n    function sequencerMessageCount() external view returns (uint256);\n\n    // ---------- onlySequencerInbox functions ----------\n\n    function enqueueSequencerMessage(\n        bytes32 dataHash,\n        uint256 afterDelayedMessagesRead,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    )\n        external\n        returns (\n            uint256 seqMessageIndex,\n            bytes32 beforeAcc,\n            bytes32 delayedAcc,\n            bytes32 acc\n        );\n\n    /**\n     * @dev Allows the sequencer inbox to submit a delayed message of the batchPostingReport type\n     *      This is done through a separate function entrypoint instead of allowing the sequencer inbox\n     *      to call `enqueueDelayedMessage` to avoid the gas overhead of an extra SLOAD in either\n     *      every delayed inbox or every sequencer inbox call.\n     */\n    function submitBatchSpendingReport(address batchPoster, bytes32 dataHash)\n        external\n        returns (uint256 msgNum);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    function setSequencerInbox(address _sequencerInbox) external;\n\n    function setDelayedInbox(address inbox, bool enabled) external;\n\n    function setOutbox(address inbox, bool enabled) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IOwnable rollup_) external;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IBridge.activeOutbox', 'start_line': 1535, 'end_line': 1535, 'offset_start': 57231, 'offset_end': 57286, 'content': 'function activeOutbox() external view returns (address);', 'contract_name': 'IBridge', 'contract_code': '{\n    event MessageDelivered(\n        uint256 indexed messageIndex,\n        bytes32 indexed beforeInboxAcc,\n        address inbox,\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash,\n        uint256 baseFeeL1,\n        uint64 timestamp\n    );\n\n    event BridgeCallTriggered(\n        address indexed outbox,\n        address indexed to,\n        uint256 value,\n        bytes data\n    );\n\n    event InboxToggle(address indexed inbox, bool enabled);\n\n    event OutboxToggle(address indexed outbox, bool enabled);\n\n    event SequencerInboxUpdated(address newSequencerInbox);\n\n    function allowedDelayedInboxList(uint256) external returns (address);\n\n    function allowedOutboxList(uint256) external returns (address);\n\n    /// @dev Accumulator for delayed inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function delayedInboxAccs(uint256) external view returns (bytes32);\n\n    /// @dev Accumulator for sequencer inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function sequencerInboxAccs(uint256) external view returns (bytes32);\n\n    function rollup() external view returns (IOwnable);\n\n    function sequencerInbox() external view returns (address);\n\n    function activeOutbox() external view returns (address);\n\n    function allowedDelayedInboxes(address inbox) external view returns (bool);\n\n    function allowedOutboxes(address outbox) external view returns (bool);\n\n    function sequencerReportedSubMessageCount() external view returns (uint256);\n\n    /**\n     * @dev Enqueue a message in the delayed inbox accumulator.\n     *      These messages are later sequenced in the SequencerInbox, either\n     *      by the sequencer as part of a normal batch, or by force inclusion.\n     */\n    function enqueueDelayedMessage(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) external payable returns (uint256);\n\n    function executeCall(\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bool success, bytes memory returnData);\n\n    function delayedMessageCount() external view returns (uint256);\n\n    function sequencerMessageCount() external view returns (uint256);\n\n    // ---------- onlySequencerInbox functions ----------\n\n    function enqueueSequencerMessage(\n        bytes32 dataHash,\n        uint256 afterDelayedMessagesRead,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    )\n        external\n        returns (\n            uint256 seqMessageIndex,\n            bytes32 beforeAcc,\n            bytes32 delayedAcc,\n            bytes32 acc\n        );\n\n    /**\n     * @dev Allows the sequencer inbox to submit a delayed message of the batchPostingReport type\n     *      This is done through a separate function entrypoint instead of allowing the sequencer inbox\n     *      to call `enqueueDelayedMessage` to avoid the gas overhead of an extra SLOAD in either\n     *      every delayed inbox or every sequencer inbox call.\n     */\n    function submitBatchSpendingReport(address batchPoster, bytes32 dataHash)\n        external\n        returns (uint256 msgNum);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    function setSequencerInbox(address _sequencerInbox) external;\n\n    function setDelayedInbox(address inbox, bool enabled) external;\n\n    function setOutbox(address inbox, bool enabled) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IOwnable rollup_) external;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IBridge.allowedDelayedInboxes', 'start_line': 1537, 'end_line': 1537, 'offset_start': 57293, 'offset_end': 57367, 'content': 'function allowedDelayedInboxes(address inbox) external view returns (bool);', 'contract_name': 'IBridge', 'contract_code': '{\n    event MessageDelivered(\n        uint256 indexed messageIndex,\n        bytes32 indexed beforeInboxAcc,\n        address inbox,\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash,\n        uint256 baseFeeL1,\n        uint64 timestamp\n    );\n\n    event BridgeCallTriggered(\n        address indexed outbox,\n        address indexed to,\n        uint256 value,\n        bytes data\n    );\n\n    event InboxToggle(address indexed inbox, bool enabled);\n\n    event OutboxToggle(address indexed outbox, bool enabled);\n\n    event SequencerInboxUpdated(address newSequencerInbox);\n\n    function allowedDelayedInboxList(uint256) external returns (address);\n\n    function allowedOutboxList(uint256) external returns (address);\n\n    /// @dev Accumulator for delayed inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function delayedInboxAccs(uint256) external view returns (bytes32);\n\n    /// @dev Accumulator for sequencer inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function sequencerInboxAccs(uint256) external view returns (bytes32);\n\n    function rollup() external view returns (IOwnable);\n\n    function sequencerInbox() external view returns (address);\n\n    function activeOutbox() external view returns (address);\n\n    function allowedDelayedInboxes(address inbox) external view returns (bool);\n\n    function allowedOutboxes(address outbox) external view returns (bool);\n\n    function sequencerReportedSubMessageCount() external view returns (uint256);\n\n    /**\n     * @dev Enqueue a message in the delayed inbox accumulator.\n     *      These messages are later sequenced in the SequencerInbox, either\n     *      by the sequencer as part of a normal batch, or by force inclusion.\n     */\n    function enqueueDelayedMessage(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) external payable returns (uint256);\n\n    function executeCall(\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bool success, bytes memory returnData);\n\n    function delayedMessageCount() external view returns (uint256);\n\n    function sequencerMessageCount() external view returns (uint256);\n\n    // ---------- onlySequencerInbox functions ----------\n\n    function enqueueSequencerMessage(\n        bytes32 dataHash,\n        uint256 afterDelayedMessagesRead,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    )\n        external\n        returns (\n            uint256 seqMessageIndex,\n            bytes32 beforeAcc,\n            bytes32 delayedAcc,\n            bytes32 acc\n        );\n\n    /**\n     * @dev Allows the sequencer inbox to submit a delayed message of the batchPostingReport type\n     *      This is done through a separate function entrypoint instead of allowing the sequencer inbox\n     *      to call `enqueueDelayedMessage` to avoid the gas overhead of an extra SLOAD in either\n     *      every delayed inbox or every sequencer inbox call.\n     */\n    function submitBatchSpendingReport(address batchPoster, bytes32 dataHash)\n        external\n        returns (uint256 msgNum);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    function setSequencerInbox(address _sequencerInbox) external;\n\n    function setDelayedInbox(address inbox, bool enabled) external;\n\n    function setOutbox(address inbox, bool enabled) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IOwnable rollup_) external;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IBridge.allowedOutboxes', 'start_line': 1539, 'end_line': 1539, 'offset_start': 57374, 'offset_end': 57443, 'content': 'function allowedOutboxes(address outbox) external view returns (bool);', 'contract_name': 'IBridge', 'contract_code': '{\n    event MessageDelivered(\n        uint256 indexed messageIndex,\n        bytes32 indexed beforeInboxAcc,\n        address inbox,\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash,\n        uint256 baseFeeL1,\n        uint64 timestamp\n    );\n\n    event BridgeCallTriggered(\n        address indexed outbox,\n        address indexed to,\n        uint256 value,\n        bytes data\n    );\n\n    event InboxToggle(address indexed inbox, bool enabled);\n\n    event OutboxToggle(address indexed outbox, bool enabled);\n\n    event SequencerInboxUpdated(address newSequencerInbox);\n\n    function allowedDelayedInboxList(uint256) external returns (address);\n\n    function allowedOutboxList(uint256) external returns (address);\n\n    /// @dev Accumulator for delayed inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function delayedInboxAccs(uint256) external view returns (bytes32);\n\n    /// @dev Accumulator for sequencer inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function sequencerInboxAccs(uint256) external view returns (bytes32);\n\n    function rollup() external view returns (IOwnable);\n\n    function sequencerInbox() external view returns (address);\n\n    function activeOutbox() external view returns (address);\n\n    function allowedDelayedInboxes(address inbox) external view returns (bool);\n\n    function allowedOutboxes(address outbox) external view returns (bool);\n\n    function sequencerReportedSubMessageCount() external view returns (uint256);\n\n    /**\n     * @dev Enqueue a message in the delayed inbox accumulator.\n     *      These messages are later sequenced in the SequencerInbox, either\n     *      by the sequencer as part of a normal batch, or by force inclusion.\n     */\n    function enqueueDelayedMessage(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) external payable returns (uint256);\n\n    function executeCall(\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bool success, bytes memory returnData);\n\n    function delayedMessageCount() external view returns (uint256);\n\n    function sequencerMessageCount() external view returns (uint256);\n\n    // ---------- onlySequencerInbox functions ----------\n\n    function enqueueSequencerMessage(\n        bytes32 dataHash,\n        uint256 afterDelayedMessagesRead,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    )\n        external\n        returns (\n            uint256 seqMessageIndex,\n            bytes32 beforeAcc,\n            bytes32 delayedAcc,\n            bytes32 acc\n        );\n\n    /**\n     * @dev Allows the sequencer inbox to submit a delayed message of the batchPostingReport type\n     *      This is done through a separate function entrypoint instead of allowing the sequencer inbox\n     *      to call `enqueueDelayedMessage` to avoid the gas overhead of an extra SLOAD in either\n     *      every delayed inbox or every sequencer inbox call.\n     */\n    function submitBatchSpendingReport(address batchPoster, bytes32 dataHash)\n        external\n        returns (uint256 msgNum);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    function setSequencerInbox(address _sequencerInbox) external;\n\n    function setDelayedInbox(address inbox, bool enabled) external;\n\n    function setOutbox(address inbox, bool enabled) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IOwnable rollup_) external;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IBridge.sequencerReportedSubMessageCount', 'start_line': 1541, 'end_line': 1541, 'offset_start': 57450, 'offset_end': 57525, 'content': 'function sequencerReportedSubMessageCount() external view returns (uint256);', 'contract_name': 'IBridge', 'contract_code': '{\n    event MessageDelivered(\n        uint256 indexed messageIndex,\n        bytes32 indexed beforeInboxAcc,\n        address inbox,\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash,\n        uint256 baseFeeL1,\n        uint64 timestamp\n    );\n\n    event BridgeCallTriggered(\n        address indexed outbox,\n        address indexed to,\n        uint256 value,\n        bytes data\n    );\n\n    event InboxToggle(address indexed inbox, bool enabled);\n\n    event OutboxToggle(address indexed outbox, bool enabled);\n\n    event SequencerInboxUpdated(address newSequencerInbox);\n\n    function allowedDelayedInboxList(uint256) external returns (address);\n\n    function allowedOutboxList(uint256) external returns (address);\n\n    /// @dev Accumulator for delayed inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function delayedInboxAccs(uint256) external view returns (bytes32);\n\n    /// @dev Accumulator for sequencer inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function sequencerInboxAccs(uint256) external view returns (bytes32);\n\n    function rollup() external view returns (IOwnable);\n\n    function sequencerInbox() external view returns (address);\n\n    function activeOutbox() external view returns (address);\n\n    function allowedDelayedInboxes(address inbox) external view returns (bool);\n\n    function allowedOutboxes(address outbox) external view returns (bool);\n\n    function sequencerReportedSubMessageCount() external view returns (uint256);\n\n    /**\n     * @dev Enqueue a message in the delayed inbox accumulator.\n     *      These messages are later sequenced in the SequencerInbox, either\n     *      by the sequencer as part of a normal batch, or by force inclusion.\n     */\n    function enqueueDelayedMessage(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) external payable returns (uint256);\n\n    function executeCall(\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bool success, bytes memory returnData);\n\n    function delayedMessageCount() external view returns (uint256);\n\n    function sequencerMessageCount() external view returns (uint256);\n\n    // ---------- onlySequencerInbox functions ----------\n\n    function enqueueSequencerMessage(\n        bytes32 dataHash,\n        uint256 afterDelayedMessagesRead,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    )\n        external\n        returns (\n            uint256 seqMessageIndex,\n            bytes32 beforeAcc,\n            bytes32 delayedAcc,\n            bytes32 acc\n        );\n\n    /**\n     * @dev Allows the sequencer inbox to submit a delayed message of the batchPostingReport type\n     *      This is done through a separate function entrypoint instead of allowing the sequencer inbox\n     *      to call `enqueueDelayedMessage` to avoid the gas overhead of an extra SLOAD in either\n     *      every delayed inbox or every sequencer inbox call.\n     */\n    function submitBatchSpendingReport(address batchPoster, bytes32 dataHash)\n        external\n        returns (uint256 msgNum);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    function setSequencerInbox(address _sequencerInbox) external;\n\n    function setDelayedInbox(address inbox, bool enabled) external;\n\n    function setOutbox(address inbox, bool enabled) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IOwnable rollup_) external;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IBridge.enqueueDelayedMessage', 'start_line': 1548, 'end_line': 1552, 'offset_start': 57768, 'offset_end': 57916, 'content': 'function enqueueDelayedMessage(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) external payable returns (uint256);', 'contract_name': 'IBridge', 'contract_code': '{\n    event MessageDelivered(\n        uint256 indexed messageIndex,\n        bytes32 indexed beforeInboxAcc,\n        address inbox,\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash,\n        uint256 baseFeeL1,\n        uint64 timestamp\n    );\n\n    event BridgeCallTriggered(\n        address indexed outbox,\n        address indexed to,\n        uint256 value,\n        bytes data\n    );\n\n    event InboxToggle(address indexed inbox, bool enabled);\n\n    event OutboxToggle(address indexed outbox, bool enabled);\n\n    event SequencerInboxUpdated(address newSequencerInbox);\n\n    function allowedDelayedInboxList(uint256) external returns (address);\n\n    function allowedOutboxList(uint256) external returns (address);\n\n    /// @dev Accumulator for delayed inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function delayedInboxAccs(uint256) external view returns (bytes32);\n\n    /// @dev Accumulator for sequencer inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function sequencerInboxAccs(uint256) external view returns (bytes32);\n\n    function rollup() external view returns (IOwnable);\n\n    function sequencerInbox() external view returns (address);\n\n    function activeOutbox() external view returns (address);\n\n    function allowedDelayedInboxes(address inbox) external view returns (bool);\n\n    function allowedOutboxes(address outbox) external view returns (bool);\n\n    function sequencerReportedSubMessageCount() external view returns (uint256);\n\n    /**\n     * @dev Enqueue a message in the delayed inbox accumulator.\n     *      These messages are later sequenced in the SequencerInbox, either\n     *      by the sequencer as part of a normal batch, or by force inclusion.\n     */\n    function enqueueDelayedMessage(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) external payable returns (uint256);\n\n    function executeCall(\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bool success, bytes memory returnData);\n\n    function delayedMessageCount() external view returns (uint256);\n\n    function sequencerMessageCount() external view returns (uint256);\n\n    // ---------- onlySequencerInbox functions ----------\n\n    function enqueueSequencerMessage(\n        bytes32 dataHash,\n        uint256 afterDelayedMessagesRead,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    )\n        external\n        returns (\n            uint256 seqMessageIndex,\n            bytes32 beforeAcc,\n            bytes32 delayedAcc,\n            bytes32 acc\n        );\n\n    /**\n     * @dev Allows the sequencer inbox to submit a delayed message of the batchPostingReport type\n     *      This is done through a separate function entrypoint instead of allowing the sequencer inbox\n     *      to call `enqueueDelayedMessage` to avoid the gas overhead of an extra SLOAD in either\n     *      every delayed inbox or every sequencer inbox call.\n     */\n    function submitBatchSpendingReport(address batchPoster, bytes32 dataHash)\n        external\n        returns (uint256 msgNum);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    function setSequencerInbox(address _sequencerInbox) external;\n\n    function setDelayedInbox(address inbox, bool enabled) external;\n\n    function setOutbox(address inbox, bool enabled) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IOwnable rollup_) external;\n}', 'modifiers': [], 'stateMutability': 'payable', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IBridge.executeCall', 'start_line': 1554, 'end_line': 1558, 'offset_start': 57923, 'offset_end': 58078, 'content': 'function executeCall(\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bool success, bytes memory returnData);', 'contract_name': 'IBridge', 'contract_code': '{\n    event MessageDelivered(\n        uint256 indexed messageIndex,\n        bytes32 indexed beforeInboxAcc,\n        address inbox,\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash,\n        uint256 baseFeeL1,\n        uint64 timestamp\n    );\n\n    event BridgeCallTriggered(\n        address indexed outbox,\n        address indexed to,\n        uint256 value,\n        bytes data\n    );\n\n    event InboxToggle(address indexed inbox, bool enabled);\n\n    event OutboxToggle(address indexed outbox, bool enabled);\n\n    event SequencerInboxUpdated(address newSequencerInbox);\n\n    function allowedDelayedInboxList(uint256) external returns (address);\n\n    function allowedOutboxList(uint256) external returns (address);\n\n    /// @dev Accumulator for delayed inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function delayedInboxAccs(uint256) external view returns (bytes32);\n\n    /// @dev Accumulator for sequencer inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function sequencerInboxAccs(uint256) external view returns (bytes32);\n\n    function rollup() external view returns (IOwnable);\n\n    function sequencerInbox() external view returns (address);\n\n    function activeOutbox() external view returns (address);\n\n    function allowedDelayedInboxes(address inbox) external view returns (bool);\n\n    function allowedOutboxes(address outbox) external view returns (bool);\n\n    function sequencerReportedSubMessageCount() external view returns (uint256);\n\n    /**\n     * @dev Enqueue a message in the delayed inbox accumulator.\n     *      These messages are later sequenced in the SequencerInbox, either\n     *      by the sequencer as part of a normal batch, or by force inclusion.\n     */\n    function enqueueDelayedMessage(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) external payable returns (uint256);\n\n    function executeCall(\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bool success, bytes memory returnData);\n\n    function delayedMessageCount() external view returns (uint256);\n\n    function sequencerMessageCount() external view returns (uint256);\n\n    // ---------- onlySequencerInbox functions ----------\n\n    function enqueueSequencerMessage(\n        bytes32 dataHash,\n        uint256 afterDelayedMessagesRead,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    )\n        external\n        returns (\n            uint256 seqMessageIndex,\n            bytes32 beforeAcc,\n            bytes32 delayedAcc,\n            bytes32 acc\n        );\n\n    /**\n     * @dev Allows the sequencer inbox to submit a delayed message of the batchPostingReport type\n     *      This is done through a separate function entrypoint instead of allowing the sequencer inbox\n     *      to call `enqueueDelayedMessage` to avoid the gas overhead of an extra SLOAD in either\n     *      every delayed inbox or every sequencer inbox call.\n     */\n    function submitBatchSpendingReport(address batchPoster, bytes32 dataHash)\n        external\n        returns (uint256 msgNum);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    function setSequencerInbox(address _sequencerInbox) external;\n\n    function setDelayedInbox(address inbox, bool enabled) external;\n\n    function setOutbox(address inbox, bool enabled) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IOwnable rollup_) external;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IBridge.delayedMessageCount', 'start_line': 1560, 'end_line': 1560, 'offset_start': 58085, 'offset_end': 58147, 'content': 'function delayedMessageCount() external view returns (uint256);', 'contract_name': 'IBridge', 'contract_code': '{\n    event MessageDelivered(\n        uint256 indexed messageIndex,\n        bytes32 indexed beforeInboxAcc,\n        address inbox,\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash,\n        uint256 baseFeeL1,\n        uint64 timestamp\n    );\n\n    event BridgeCallTriggered(\n        address indexed outbox,\n        address indexed to,\n        uint256 value,\n        bytes data\n    );\n\n    event InboxToggle(address indexed inbox, bool enabled);\n\n    event OutboxToggle(address indexed outbox, bool enabled);\n\n    event SequencerInboxUpdated(address newSequencerInbox);\n\n    function allowedDelayedInboxList(uint256) external returns (address);\n\n    function allowedOutboxList(uint256) external returns (address);\n\n    /// @dev Accumulator for delayed inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function delayedInboxAccs(uint256) external view returns (bytes32);\n\n    /// @dev Accumulator for sequencer inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function sequencerInboxAccs(uint256) external view returns (bytes32);\n\n    function rollup() external view returns (IOwnable);\n\n    function sequencerInbox() external view returns (address);\n\n    function activeOutbox() external view returns (address);\n\n    function allowedDelayedInboxes(address inbox) external view returns (bool);\n\n    function allowedOutboxes(address outbox) external view returns (bool);\n\n    function sequencerReportedSubMessageCount() external view returns (uint256);\n\n    /**\n     * @dev Enqueue a message in the delayed inbox accumulator.\n     *      These messages are later sequenced in the SequencerInbox, either\n     *      by the sequencer as part of a normal batch, or by force inclusion.\n     */\n    function enqueueDelayedMessage(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) external payable returns (uint256);\n\n    function executeCall(\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bool success, bytes memory returnData);\n\n    function delayedMessageCount() external view returns (uint256);\n\n    function sequencerMessageCount() external view returns (uint256);\n\n    // ---------- onlySequencerInbox functions ----------\n\n    function enqueueSequencerMessage(\n        bytes32 dataHash,\n        uint256 afterDelayedMessagesRead,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    )\n        external\n        returns (\n            uint256 seqMessageIndex,\n            bytes32 beforeAcc,\n            bytes32 delayedAcc,\n            bytes32 acc\n        );\n\n    /**\n     * @dev Allows the sequencer inbox to submit a delayed message of the batchPostingReport type\n     *      This is done through a separate function entrypoint instead of allowing the sequencer inbox\n     *      to call `enqueueDelayedMessage` to avoid the gas overhead of an extra SLOAD in either\n     *      every delayed inbox or every sequencer inbox call.\n     */\n    function submitBatchSpendingReport(address batchPoster, bytes32 dataHash)\n        external\n        returns (uint256 msgNum);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    function setSequencerInbox(address _sequencerInbox) external;\n\n    function setDelayedInbox(address inbox, bool enabled) external;\n\n    function setOutbox(address inbox, bool enabled) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IOwnable rollup_) external;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IBridge.sequencerMessageCount', 'start_line': 1562, 'end_line': 1562, 'offset_start': 58154, 'offset_end': 58218, 'content': 'function sequencerMessageCount() external view returns (uint256);', 'contract_name': 'IBridge', 'contract_code': '{\n    event MessageDelivered(\n        uint256 indexed messageIndex,\n        bytes32 indexed beforeInboxAcc,\n        address inbox,\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash,\n        uint256 baseFeeL1,\n        uint64 timestamp\n    );\n\n    event BridgeCallTriggered(\n        address indexed outbox,\n        address indexed to,\n        uint256 value,\n        bytes data\n    );\n\n    event InboxToggle(address indexed inbox, bool enabled);\n\n    event OutboxToggle(address indexed outbox, bool enabled);\n\n    event SequencerInboxUpdated(address newSequencerInbox);\n\n    function allowedDelayedInboxList(uint256) external returns (address);\n\n    function allowedOutboxList(uint256) external returns (address);\n\n    /// @dev Accumulator for delayed inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function delayedInboxAccs(uint256) external view returns (bytes32);\n\n    /// @dev Accumulator for sequencer inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function sequencerInboxAccs(uint256) external view returns (bytes32);\n\n    function rollup() external view returns (IOwnable);\n\n    function sequencerInbox() external view returns (address);\n\n    function activeOutbox() external view returns (address);\n\n    function allowedDelayedInboxes(address inbox) external view returns (bool);\n\n    function allowedOutboxes(address outbox) external view returns (bool);\n\n    function sequencerReportedSubMessageCount() external view returns (uint256);\n\n    /**\n     * @dev Enqueue a message in the delayed inbox accumulator.\n     *      These messages are later sequenced in the SequencerInbox, either\n     *      by the sequencer as part of a normal batch, or by force inclusion.\n     */\n    function enqueueDelayedMessage(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) external payable returns (uint256);\n\n    function executeCall(\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bool success, bytes memory returnData);\n\n    function delayedMessageCount() external view returns (uint256);\n\n    function sequencerMessageCount() external view returns (uint256);\n\n    // ---------- onlySequencerInbox functions ----------\n\n    function enqueueSequencerMessage(\n        bytes32 dataHash,\n        uint256 afterDelayedMessagesRead,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    )\n        external\n        returns (\n            uint256 seqMessageIndex,\n            bytes32 beforeAcc,\n            bytes32 delayedAcc,\n            bytes32 acc\n        );\n\n    /**\n     * @dev Allows the sequencer inbox to submit a delayed message of the batchPostingReport type\n     *      This is done through a separate function entrypoint instead of allowing the sequencer inbox\n     *      to call `enqueueDelayedMessage` to avoid the gas overhead of an extra SLOAD in either\n     *      every delayed inbox or every sequencer inbox call.\n     */\n    function submitBatchSpendingReport(address batchPoster, bytes32 dataHash)\n        external\n        returns (uint256 msgNum);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    function setSequencerInbox(address _sequencerInbox) external;\n\n    function setDelayedInbox(address inbox, bool enabled) external;\n\n    function setOutbox(address inbox, bool enabled) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IOwnable rollup_) external;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IBridge.enqueueSequencerMessage', 'start_line': 1566, 'end_line': 1578, 'offset_start': 58284, 'offset_end': 58626, 'content': 'function enqueueSequencerMessage(\n        bytes32 dataHash,\n        uint256 afterDelayedMessagesRead,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    )\n        external\n        returns (\n            uint256 seqMessageIndex,\n            bytes32 beforeAcc,\n            bytes32 delayedAcc,\n            bytes32 acc\n        );', 'contract_name': 'IBridge', 'contract_code': '{\n    event MessageDelivered(\n        uint256 indexed messageIndex,\n        bytes32 indexed beforeInboxAcc,\n        address inbox,\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash,\n        uint256 baseFeeL1,\n        uint64 timestamp\n    );\n\n    event BridgeCallTriggered(\n        address indexed outbox,\n        address indexed to,\n        uint256 value,\n        bytes data\n    );\n\n    event InboxToggle(address indexed inbox, bool enabled);\n\n    event OutboxToggle(address indexed outbox, bool enabled);\n\n    event SequencerInboxUpdated(address newSequencerInbox);\n\n    function allowedDelayedInboxList(uint256) external returns (address);\n\n    function allowedOutboxList(uint256) external returns (address);\n\n    /// @dev Accumulator for delayed inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function delayedInboxAccs(uint256) external view returns (bytes32);\n\n    /// @dev Accumulator for sequencer inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function sequencerInboxAccs(uint256) external view returns (bytes32);\n\n    function rollup() external view returns (IOwnable);\n\n    function sequencerInbox() external view returns (address);\n\n    function activeOutbox() external view returns (address);\n\n    function allowedDelayedInboxes(address inbox) external view returns (bool);\n\n    function allowedOutboxes(address outbox) external view returns (bool);\n\n    function sequencerReportedSubMessageCount() external view returns (uint256);\n\n    /**\n     * @dev Enqueue a message in the delayed inbox accumulator.\n     *      These messages are later sequenced in the SequencerInbox, either\n     *      by the sequencer as part of a normal batch, or by force inclusion.\n     */\n    function enqueueDelayedMessage(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) external payable returns (uint256);\n\n    function executeCall(\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bool success, bytes memory returnData);\n\n    function delayedMessageCount() external view returns (uint256);\n\n    function sequencerMessageCount() external view returns (uint256);\n\n    // ---------- onlySequencerInbox functions ----------\n\n    function enqueueSequencerMessage(\n        bytes32 dataHash,\n        uint256 afterDelayedMessagesRead,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    )\n        external\n        returns (\n            uint256 seqMessageIndex,\n            bytes32 beforeAcc,\n            bytes32 delayedAcc,\n            bytes32 acc\n        );\n\n    /**\n     * @dev Allows the sequencer inbox to submit a delayed message of the batchPostingReport type\n     *      This is done through a separate function entrypoint instead of allowing the sequencer inbox\n     *      to call `enqueueDelayedMessage` to avoid the gas overhead of an extra SLOAD in either\n     *      every delayed inbox or every sequencer inbox call.\n     */\n    function submitBatchSpendingReport(address batchPoster, bytes32 dataHash)\n        external\n        returns (uint256 msgNum);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    function setSequencerInbox(address _sequencerInbox) external;\n\n    function setDelayedInbox(address inbox, bool enabled) external;\n\n    function setOutbox(address inbox, bool enabled) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IOwnable rollup_) external;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IBridge.submitBatchSpendingReport', 'start_line': 1586, 'end_line': 1588, 'offset_start': 59012, 'offset_end': 59135, 'content': 'function submitBatchSpendingReport(address batchPoster, bytes32 dataHash)\n        external\n        returns (uint256 msgNum);', 'contract_name': 'IBridge', 'contract_code': '{\n    event MessageDelivered(\n        uint256 indexed messageIndex,\n        bytes32 indexed beforeInboxAcc,\n        address inbox,\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash,\n        uint256 baseFeeL1,\n        uint64 timestamp\n    );\n\n    event BridgeCallTriggered(\n        address indexed outbox,\n        address indexed to,\n        uint256 value,\n        bytes data\n    );\n\n    event InboxToggle(address indexed inbox, bool enabled);\n\n    event OutboxToggle(address indexed outbox, bool enabled);\n\n    event SequencerInboxUpdated(address newSequencerInbox);\n\n    function allowedDelayedInboxList(uint256) external returns (address);\n\n    function allowedOutboxList(uint256) external returns (address);\n\n    /// @dev Accumulator for delayed inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function delayedInboxAccs(uint256) external view returns (bytes32);\n\n    /// @dev Accumulator for sequencer inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function sequencerInboxAccs(uint256) external view returns (bytes32);\n\n    function rollup() external view returns (IOwnable);\n\n    function sequencerInbox() external view returns (address);\n\n    function activeOutbox() external view returns (address);\n\n    function allowedDelayedInboxes(address inbox) external view returns (bool);\n\n    function allowedOutboxes(address outbox) external view returns (bool);\n\n    function sequencerReportedSubMessageCount() external view returns (uint256);\n\n    /**\n     * @dev Enqueue a message in the delayed inbox accumulator.\n     *      These messages are later sequenced in the SequencerInbox, either\n     *      by the sequencer as part of a normal batch, or by force inclusion.\n     */\n    function enqueueDelayedMessage(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) external payable returns (uint256);\n\n    function executeCall(\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bool success, bytes memory returnData);\n\n    function delayedMessageCount() external view returns (uint256);\n\n    function sequencerMessageCount() external view returns (uint256);\n\n    // ---------- onlySequencerInbox functions ----------\n\n    function enqueueSequencerMessage(\n        bytes32 dataHash,\n        uint256 afterDelayedMessagesRead,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    )\n        external\n        returns (\n            uint256 seqMessageIndex,\n            bytes32 beforeAcc,\n            bytes32 delayedAcc,\n            bytes32 acc\n        );\n\n    /**\n     * @dev Allows the sequencer inbox to submit a delayed message of the batchPostingReport type\n     *      This is done through a separate function entrypoint instead of allowing the sequencer inbox\n     *      to call `enqueueDelayedMessage` to avoid the gas overhead of an extra SLOAD in either\n     *      every delayed inbox or every sequencer inbox call.\n     */\n    function submitBatchSpendingReport(address batchPoster, bytes32 dataHash)\n        external\n        returns (uint256 msgNum);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    function setSequencerInbox(address _sequencerInbox) external;\n\n    function setDelayedInbox(address inbox, bool enabled) external;\n\n    function setOutbox(address inbox, bool enabled) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IOwnable rollup_) external;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IBridge.setSequencerInbox', 'start_line': 1592, 'end_line': 1592, 'offset_start': 59200, 'offset_end': 59260, 'content': 'function setSequencerInbox(address _sequencerInbox) external;', 'contract_name': 'IBridge', 'contract_code': '{\n    event MessageDelivered(\n        uint256 indexed messageIndex,\n        bytes32 indexed beforeInboxAcc,\n        address inbox,\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash,\n        uint256 baseFeeL1,\n        uint64 timestamp\n    );\n\n    event BridgeCallTriggered(\n        address indexed outbox,\n        address indexed to,\n        uint256 value,\n        bytes data\n    );\n\n    event InboxToggle(address indexed inbox, bool enabled);\n\n    event OutboxToggle(address indexed outbox, bool enabled);\n\n    event SequencerInboxUpdated(address newSequencerInbox);\n\n    function allowedDelayedInboxList(uint256) external returns (address);\n\n    function allowedOutboxList(uint256) external returns (address);\n\n    /// @dev Accumulator for delayed inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function delayedInboxAccs(uint256) external view returns (bytes32);\n\n    /// @dev Accumulator for sequencer inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function sequencerInboxAccs(uint256) external view returns (bytes32);\n\n    function rollup() external view returns (IOwnable);\n\n    function sequencerInbox() external view returns (address);\n\n    function activeOutbox() external view returns (address);\n\n    function allowedDelayedInboxes(address inbox) external view returns (bool);\n\n    function allowedOutboxes(address outbox) external view returns (bool);\n\n    function sequencerReportedSubMessageCount() external view returns (uint256);\n\n    /**\n     * @dev Enqueue a message in the delayed inbox accumulator.\n     *      These messages are later sequenced in the SequencerInbox, either\n     *      by the sequencer as part of a normal batch, or by force inclusion.\n     */\n    function enqueueDelayedMessage(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) external payable returns (uint256);\n\n    function executeCall(\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bool success, bytes memory returnData);\n\n    function delayedMessageCount() external view returns (uint256);\n\n    function sequencerMessageCount() external view returns (uint256);\n\n    // ---------- onlySequencerInbox functions ----------\n\n    function enqueueSequencerMessage(\n        bytes32 dataHash,\n        uint256 afterDelayedMessagesRead,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    )\n        external\n        returns (\n            uint256 seqMessageIndex,\n            bytes32 beforeAcc,\n            bytes32 delayedAcc,\n            bytes32 acc\n        );\n\n    /**\n     * @dev Allows the sequencer inbox to submit a delayed message of the batchPostingReport type\n     *      This is done through a separate function entrypoint instead of allowing the sequencer inbox\n     *      to call `enqueueDelayedMessage` to avoid the gas overhead of an extra SLOAD in either\n     *      every delayed inbox or every sequencer inbox call.\n     */\n    function submitBatchSpendingReport(address batchPoster, bytes32 dataHash)\n        external\n        returns (uint256 msgNum);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    function setSequencerInbox(address _sequencerInbox) external;\n\n    function setDelayedInbox(address inbox, bool enabled) external;\n\n    function setOutbox(address inbox, bool enabled) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IOwnable rollup_) external;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IBridge.setDelayedInbox', 'start_line': 1594, 'end_line': 1594, 'offset_start': 59267, 'offset_end': 59329, 'content': 'function setDelayedInbox(address inbox, bool enabled) external;', 'contract_name': 'IBridge', 'contract_code': '{\n    event MessageDelivered(\n        uint256 indexed messageIndex,\n        bytes32 indexed beforeInboxAcc,\n        address inbox,\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash,\n        uint256 baseFeeL1,\n        uint64 timestamp\n    );\n\n    event BridgeCallTriggered(\n        address indexed outbox,\n        address indexed to,\n        uint256 value,\n        bytes data\n    );\n\n    event InboxToggle(address indexed inbox, bool enabled);\n\n    event OutboxToggle(address indexed outbox, bool enabled);\n\n    event SequencerInboxUpdated(address newSequencerInbox);\n\n    function allowedDelayedInboxList(uint256) external returns (address);\n\n    function allowedOutboxList(uint256) external returns (address);\n\n    /// @dev Accumulator for delayed inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function delayedInboxAccs(uint256) external view returns (bytes32);\n\n    /// @dev Accumulator for sequencer inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function sequencerInboxAccs(uint256) external view returns (bytes32);\n\n    function rollup() external view returns (IOwnable);\n\n    function sequencerInbox() external view returns (address);\n\n    function activeOutbox() external view returns (address);\n\n    function allowedDelayedInboxes(address inbox) external view returns (bool);\n\n    function allowedOutboxes(address outbox) external view returns (bool);\n\n    function sequencerReportedSubMessageCount() external view returns (uint256);\n\n    /**\n     * @dev Enqueue a message in the delayed inbox accumulator.\n     *      These messages are later sequenced in the SequencerInbox, either\n     *      by the sequencer as part of a normal batch, or by force inclusion.\n     */\n    function enqueueDelayedMessage(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) external payable returns (uint256);\n\n    function executeCall(\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bool success, bytes memory returnData);\n\n    function delayedMessageCount() external view returns (uint256);\n\n    function sequencerMessageCount() external view returns (uint256);\n\n    // ---------- onlySequencerInbox functions ----------\n\n    function enqueueSequencerMessage(\n        bytes32 dataHash,\n        uint256 afterDelayedMessagesRead,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    )\n        external\n        returns (\n            uint256 seqMessageIndex,\n            bytes32 beforeAcc,\n            bytes32 delayedAcc,\n            bytes32 acc\n        );\n\n    /**\n     * @dev Allows the sequencer inbox to submit a delayed message of the batchPostingReport type\n     *      This is done through a separate function entrypoint instead of allowing the sequencer inbox\n     *      to call `enqueueDelayedMessage` to avoid the gas overhead of an extra SLOAD in either\n     *      every delayed inbox or every sequencer inbox call.\n     */\n    function submitBatchSpendingReport(address batchPoster, bytes32 dataHash)\n        external\n        returns (uint256 msgNum);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    function setSequencerInbox(address _sequencerInbox) external;\n\n    function setDelayedInbox(address inbox, bool enabled) external;\n\n    function setOutbox(address inbox, bool enabled) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IOwnable rollup_) external;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IBridge.setOutbox', 'start_line': 1596, 'end_line': 1596, 'offset_start': 59336, 'offset_end': 59392, 'content': 'function setOutbox(address inbox, bool enabled) external;', 'contract_name': 'IBridge', 'contract_code': '{\n    event MessageDelivered(\n        uint256 indexed messageIndex,\n        bytes32 indexed beforeInboxAcc,\n        address inbox,\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash,\n        uint256 baseFeeL1,\n        uint64 timestamp\n    );\n\n    event BridgeCallTriggered(\n        address indexed outbox,\n        address indexed to,\n        uint256 value,\n        bytes data\n    );\n\n    event InboxToggle(address indexed inbox, bool enabled);\n\n    event OutboxToggle(address indexed outbox, bool enabled);\n\n    event SequencerInboxUpdated(address newSequencerInbox);\n\n    function allowedDelayedInboxList(uint256) external returns (address);\n\n    function allowedOutboxList(uint256) external returns (address);\n\n    /// @dev Accumulator for delayed inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function delayedInboxAccs(uint256) external view returns (bytes32);\n\n    /// @dev Accumulator for sequencer inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function sequencerInboxAccs(uint256) external view returns (bytes32);\n\n    function rollup() external view returns (IOwnable);\n\n    function sequencerInbox() external view returns (address);\n\n    function activeOutbox() external view returns (address);\n\n    function allowedDelayedInboxes(address inbox) external view returns (bool);\n\n    function allowedOutboxes(address outbox) external view returns (bool);\n\n    function sequencerReportedSubMessageCount() external view returns (uint256);\n\n    /**\n     * @dev Enqueue a message in the delayed inbox accumulator.\n     *      These messages are later sequenced in the SequencerInbox, either\n     *      by the sequencer as part of a normal batch, or by force inclusion.\n     */\n    function enqueueDelayedMessage(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) external payable returns (uint256);\n\n    function executeCall(\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bool success, bytes memory returnData);\n\n    function delayedMessageCount() external view returns (uint256);\n\n    function sequencerMessageCount() external view returns (uint256);\n\n    // ---------- onlySequencerInbox functions ----------\n\n    function enqueueSequencerMessage(\n        bytes32 dataHash,\n        uint256 afterDelayedMessagesRead,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    )\n        external\n        returns (\n            uint256 seqMessageIndex,\n            bytes32 beforeAcc,\n            bytes32 delayedAcc,\n            bytes32 acc\n        );\n\n    /**\n     * @dev Allows the sequencer inbox to submit a delayed message of the batchPostingReport type\n     *      This is done through a separate function entrypoint instead of allowing the sequencer inbox\n     *      to call `enqueueDelayedMessage` to avoid the gas overhead of an extra SLOAD in either\n     *      every delayed inbox or every sequencer inbox call.\n     */\n    function submitBatchSpendingReport(address batchPoster, bytes32 dataHash)\n        external\n        returns (uint256 msgNum);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    function setSequencerInbox(address _sequencerInbox) external;\n\n    function setDelayedInbox(address inbox, bool enabled) external;\n\n    function setOutbox(address inbox, bool enabled) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IOwnable rollup_) external;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'IBridge.initialize', 'start_line': 1600, 'end_line': 1600, 'offset_start': 59441, 'offset_end': 59487, 'content': 'function initialize(IOwnable rollup_) external;', 'contract_name': 'IBridge', 'contract_code': '{\n    event MessageDelivered(\n        uint256 indexed messageIndex,\n        bytes32 indexed beforeInboxAcc,\n        address inbox,\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash,\n        uint256 baseFeeL1,\n        uint64 timestamp\n    );\n\n    event BridgeCallTriggered(\n        address indexed outbox,\n        address indexed to,\n        uint256 value,\n        bytes data\n    );\n\n    event InboxToggle(address indexed inbox, bool enabled);\n\n    event OutboxToggle(address indexed outbox, bool enabled);\n\n    event SequencerInboxUpdated(address newSequencerInbox);\n\n    function allowedDelayedInboxList(uint256) external returns (address);\n\n    function allowedOutboxList(uint256) external returns (address);\n\n    /// @dev Accumulator for delayed inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function delayedInboxAccs(uint256) external view returns (bytes32);\n\n    /// @dev Accumulator for sequencer inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\n    function sequencerInboxAccs(uint256) external view returns (bytes32);\n\n    function rollup() external view returns (IOwnable);\n\n    function sequencerInbox() external view returns (address);\n\n    function activeOutbox() external view returns (address);\n\n    function allowedDelayedInboxes(address inbox) external view returns (bool);\n\n    function allowedOutboxes(address outbox) external view returns (bool);\n\n    function sequencerReportedSubMessageCount() external view returns (uint256);\n\n    /**\n     * @dev Enqueue a message in the delayed inbox accumulator.\n     *      These messages are later sequenced in the SequencerInbox, either\n     *      by the sequencer as part of a normal batch, or by force inclusion.\n     */\n    function enqueueDelayedMessage(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) external payable returns (uint256);\n\n    function executeCall(\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bool success, bytes memory returnData);\n\n    function delayedMessageCount() external view returns (uint256);\n\n    function sequencerMessageCount() external view returns (uint256);\n\n    // ---------- onlySequencerInbox functions ----------\n\n    function enqueueSequencerMessage(\n        bytes32 dataHash,\n        uint256 afterDelayedMessagesRead,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    )\n        external\n        returns (\n            uint256 seqMessageIndex,\n            bytes32 beforeAcc,\n            bytes32 delayedAcc,\n            bytes32 acc\n        );\n\n    /**\n     * @dev Allows the sequencer inbox to submit a delayed message of the batchPostingReport type\n     *      This is done through a separate function entrypoint instead of allowing the sequencer inbox\n     *      to call `enqueueDelayedMessage` to avoid the gas overhead of an extra SLOAD in either\n     *      every delayed inbox or every sequencer inbox call.\n     */\n    function submitBatchSpendingReport(address batchPoster, bytes32 dataHash)\n        external\n        returns (uint256 msgNum);\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    function setSequencerInbox(address _sequencerInbox) external;\n\n    function setDelayedInbox(address inbox, bool enabled) external;\n\n    function setOutbox(address inbox, bool enabled) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IOwnable rollup_) external;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ContextUpgradeable.__Context_init', 'start_line': 1620, 'end_line': 1621, 'offset_start': 60203, 'offset_end': 60261, 'content': 'function __Context_init() internal onlyInitializing {\n    }', 'contract_name': 'ContextUpgradeable', 'contract_code': '{\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ContextUpgradeable.__Context_init_unchained', 'start_line': 1623, 'end_line': 1624, 'offset_start': 60268, 'offset_end': 60336, 'content': 'function __Context_init_unchained() internal onlyInitializing {\n    }', 'contract_name': 'ContextUpgradeable', 'contract_code': '{\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ContextUpgradeable._msgSender', 'start_line': 1625, 'end_line': 1627, 'offset_start': 60342, 'offset_end': 60437, 'content': 'function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }', 'contract_name': 'ContextUpgradeable', 'contract_code': '{\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ContextUpgradeable._msgData', 'start_line': 1629, 'end_line': 1631, 'offset_start': 60444, 'offset_end': 60542, 'content': 'function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }', 'contract_name': 'ContextUpgradeable', 'contract_code': '{\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'PausableUpgradeable.__Pausable_init', 'start_line': 1674, 'end_line': 1676, 'offset_start': 61886, 'offset_end': 61982, 'content': 'function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }', 'contract_name': 'PausableUpgradeable', 'contract_code': '{\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), "Pausable: paused");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), "Pausable: not paused");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'PausableUpgradeable.__Pausable_init_unchained', 'start_line': 1678, 'end_line': 1680, 'offset_start': 61989, 'offset_end': 62083, 'content': 'function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }', 'contract_name': 'PausableUpgradeable', 'contract_code': '{\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), "Pausable: paused");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), "Pausable: not paused");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'PausableUpgradeable.paused', 'start_line': 1685, 'end_line': 1687, 'offset_start': 62179, 'offset_end': 62262, 'content': 'function paused() public view virtual returns (bool) {\n        return _paused;\n    }', 'contract_name': 'PausableUpgradeable', 'contract_code': '{\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), "Pausable: paused");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), "Pausable: not paused");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'PausableUpgradeable._pause', 'start_line': 1720, 'end_line': 1723, 'offset_start': 62944, 'offset_end': 63058, 'content': 'function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }', 'contract_name': 'PausableUpgradeable', 'contract_code': '{\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), "Pausable: paused");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), "Pausable: not paused");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'PausableUpgradeable._unpause', 'start_line': 1732, 'end_line': 1735, 'offset_start': 63191, 'offset_end': 63307, 'content': 'function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }', 'contract_name': 'PausableUpgradeable', 'contract_code': '{\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), "Pausable: paused");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), "Pausable: not paused");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ArbSys.arbBlockNumber', 'start_line': 1761, 'end_line': 1761, 'offset_start': 64233, 'offset_end': 64290, 'content': 'function arbBlockNumber() external view returns (uint256);', 'contract_name': 'ArbSys', 'contract_code': "{\n    /**\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\n     * @return block number as int\n     */\n    function arbBlockNumber() external view returns (uint256);\n\n    /**\n     * @notice Get Arbitrum block hash (reverts unless currentBlockNum-256 <= arbBlockNum < currentBlockNum)\n     * @return block hash\n     */\n    function arbBlockHash(uint256 arbBlockNum) external view returns (bytes32);\n\n    /**\n     * @notice Gets the rollup's unique chain identifier\n     * @return Chain identifier as int\n     */\n    function arbChainID() external view returns (uint256);\n\n    /**\n     * @notice Get internal version number identifying an ArbOS build\n     * @return version number as int\n     */\n    function arbOSVersion() external view returns (uint256);\n\n    /**\n     * @notice Returns 0 since Nitro has no concept of storage gas\n     * @return uint 0\n     */\n    function getStorageGasAvailable() external view returns (uint256);\n\n    /**\n     * @notice (deprecated) check if current call is top level (meaning it was triggered by an EoA or a L1 contract)\n     * @dev this call has been deprecated and may be removed in a future release\n     * @return true if current execution frame is not a call by another L2 contract\n     */\n    function isTopLevelCall() external view returns (bool);\n\n    /**\n     * @notice map L1 sender contract address to its L2 alias\n     * @param sender sender address\n     * @param unused argument no longer used\n     * @return aliased sender address\n     */\n    function mapL1SenderContractAddressToL2Alias(address sender, address unused)\n        external\n        pure\n        returns (address);\n\n    /**\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\n     * @return true iff the caller's address is an alias for an L1 contract address\n     */\n    function wasMyCallersAddressAliased() external view returns (bool);\n\n    /**\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\n     * @return address of the caller's caller, without applying L1 contract address aliasing\n     */\n    function myCallersAddressWithoutAliasing() external view returns (address);\n\n    /**\n     * @notice Send given amount of Eth to dest from sender.\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty data.\n     * @param destination recipient address on L1\n     * @return unique identifier for this L2-to-L1 transaction.\n     */\n    function withdrawEth(address destination) external payable returns (uint256);\n\n    /**\n     * @notice Send a transaction to L1\n     * @dev it is not possible to execute on the L1 any L2-to-L1 transaction which contains data\n     * to a contract address without any code (as enforced by the Bridge contract).\n     * @param destination recipient address on L1\n     * @param data (optional) calldata for L1 contract call\n     * @return a unique identifier for this L2-to-L1 transaction.\n     */\n    function sendTxToL1(address destination, bytes calldata data)\n        external\n        payable\n        returns (uint256);\n\n    /**\n     * @notice Get send Merkle tree state\n     * @return size number of sends in the history\n     * @return root root hash of the send history\n     * @return partials hashes of partial subtrees in the send history tree\n     */\n    function sendMerkleTreeState()\n        external\n        view\n        returns (\n            uint256 size,\n            bytes32 root,\n            bytes32[] memory partials\n        );\n\n    /**\n     * @notice creates a send txn from L2 to L1\n     * @param position = (level << 192) + leaf = (0 << 192) + leaf = leaf\n     */\n    event L2ToL1Tx(\n        address caller,\n        address indexed destination,\n        uint256 indexed hash,\n        uint256 indexed position,\n        uint256 arbBlockNum,\n        uint256 ethBlockNum,\n        uint256 timestamp,\n        uint256 callvalue,\n        bytes data\n    );\n\n    /// @dev DEPRECATED in favour of the new L2ToL1Tx event above after the nitro upgrade\n    event L2ToL1Transaction(\n        address caller,\n        address indexed destination,\n        uint256 indexed uniqueId,\n        uint256 indexed batchNumber,\n        uint256 indexInBatch,\n        uint256 arbBlockNum,\n        uint256 ethBlockNum,\n        uint256 timestamp,\n        uint256 callvalue,\n        bytes data\n    );\n\n    /**\n     * @notice logs a merkle branch for proof synthesis\n     * @param reserved an index meant only to align the 4th index with L2ToL1Transaction's 4th event\n     * @param hash the merkle hash\n     * @param position = (level << 192) + leaf\n     */\n    event SendMerkleUpdate(\n        uint256 indexed reserved,\n        bytes32 indexed hash,\n        uint256 indexed position\n    );\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ArbSys.arbBlockHash', 'start_line': 1767, 'end_line': 1767, 'offset_start': 64448, 'offset_end': 64522, 'content': 'function arbBlockHash(uint256 arbBlockNum) external view returns (bytes32);', 'contract_name': 'ArbSys', 'contract_code': "{\n    /**\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\n     * @return block number as int\n     */\n    function arbBlockNumber() external view returns (uint256);\n\n    /**\n     * @notice Get Arbitrum block hash (reverts unless currentBlockNum-256 <= arbBlockNum < currentBlockNum)\n     * @return block hash\n     */\n    function arbBlockHash(uint256 arbBlockNum) external view returns (bytes32);\n\n    /**\n     * @notice Gets the rollup's unique chain identifier\n     * @return Chain identifier as int\n     */\n    function arbChainID() external view returns (uint256);\n\n    /**\n     * @notice Get internal version number identifying an ArbOS build\n     * @return version number as int\n     */\n    function arbOSVersion() external view returns (uint256);\n\n    /**\n     * @notice Returns 0 since Nitro has no concept of storage gas\n     * @return uint 0\n     */\n    function getStorageGasAvailable() external view returns (uint256);\n\n    /**\n     * @notice (deprecated) check if current call is top level (meaning it was triggered by an EoA or a L1 contract)\n     * @dev this call has been deprecated and may be removed in a future release\n     * @return true if current execution frame is not a call by another L2 contract\n     */\n    function isTopLevelCall() external view returns (bool);\n\n    /**\n     * @notice map L1 sender contract address to its L2 alias\n     * @param sender sender address\n     * @param unused argument no longer used\n     * @return aliased sender address\n     */\n    function mapL1SenderContractAddressToL2Alias(address sender, address unused)\n        external\n        pure\n        returns (address);\n\n    /**\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\n     * @return true iff the caller's address is an alias for an L1 contract address\n     */\n    function wasMyCallersAddressAliased() external view returns (bool);\n\n    /**\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\n     * @return address of the caller's caller, without applying L1 contract address aliasing\n     */\n    function myCallersAddressWithoutAliasing() external view returns (address);\n\n    /**\n     * @notice Send given amount of Eth to dest from sender.\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty data.\n     * @param destination recipient address on L1\n     * @return unique identifier for this L2-to-L1 transaction.\n     */\n    function withdrawEth(address destination) external payable returns (uint256);\n\n    /**\n     * @notice Send a transaction to L1\n     * @dev it is not possible to execute on the L1 any L2-to-L1 transaction which contains data\n     * to a contract address without any code (as enforced by the Bridge contract).\n     * @param destination recipient address on L1\n     * @param data (optional) calldata for L1 contract call\n     * @return a unique identifier for this L2-to-L1 transaction.\n     */\n    function sendTxToL1(address destination, bytes calldata data)\n        external\n        payable\n        returns (uint256);\n\n    /**\n     * @notice Get send Merkle tree state\n     * @return size number of sends in the history\n     * @return root root hash of the send history\n     * @return partials hashes of partial subtrees in the send history tree\n     */\n    function sendMerkleTreeState()\n        external\n        view\n        returns (\n            uint256 size,\n            bytes32 root,\n            bytes32[] memory partials\n        );\n\n    /**\n     * @notice creates a send txn from L2 to L1\n     * @param position = (level << 192) + leaf = (0 << 192) + leaf = leaf\n     */\n    event L2ToL1Tx(\n        address caller,\n        address indexed destination,\n        uint256 indexed hash,\n        uint256 indexed position,\n        uint256 arbBlockNum,\n        uint256 ethBlockNum,\n        uint256 timestamp,\n        uint256 callvalue,\n        bytes data\n    );\n\n    /// @dev DEPRECATED in favour of the new L2ToL1Tx event above after the nitro upgrade\n    event L2ToL1Transaction(\n        address caller,\n        address indexed destination,\n        uint256 indexed uniqueId,\n        uint256 indexed batchNumber,\n        uint256 indexInBatch,\n        uint256 arbBlockNum,\n        uint256 ethBlockNum,\n        uint256 timestamp,\n        uint256 callvalue,\n        bytes data\n    );\n\n    /**\n     * @notice logs a merkle branch for proof synthesis\n     * @param reserved an index meant only to align the 4th index with L2ToL1Transaction's 4th event\n     * @param hash the merkle hash\n     * @param position = (level << 192) + leaf\n     */\n    event SendMerkleUpdate(\n        uint256 indexed reserved,\n        bytes32 indexed hash,\n        uint256 indexed position\n    );\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ArbSys.arbChainID', 'start_line': 1773, 'end_line': 1773, 'offset_start': 64641, 'offset_end': 64694, 'content': 'function arbChainID() external view returns (uint256);', 'contract_name': 'ArbSys', 'contract_code': "{\n    /**\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\n     * @return block number as int\n     */\n    function arbBlockNumber() external view returns (uint256);\n\n    /**\n     * @notice Get Arbitrum block hash (reverts unless currentBlockNum-256 <= arbBlockNum < currentBlockNum)\n     * @return block hash\n     */\n    function arbBlockHash(uint256 arbBlockNum) external view returns (bytes32);\n\n    /**\n     * @notice Gets the rollup's unique chain identifier\n     * @return Chain identifier as int\n     */\n    function arbChainID() external view returns (uint256);\n\n    /**\n     * @notice Get internal version number identifying an ArbOS build\n     * @return version number as int\n     */\n    function arbOSVersion() external view returns (uint256);\n\n    /**\n     * @notice Returns 0 since Nitro has no concept of storage gas\n     * @return uint 0\n     */\n    function getStorageGasAvailable() external view returns (uint256);\n\n    /**\n     * @notice (deprecated) check if current call is top level (meaning it was triggered by an EoA or a L1 contract)\n     * @dev this call has been deprecated and may be removed in a future release\n     * @return true if current execution frame is not a call by another L2 contract\n     */\n    function isTopLevelCall() external view returns (bool);\n\n    /**\n     * @notice map L1 sender contract address to its L2 alias\n     * @param sender sender address\n     * @param unused argument no longer used\n     * @return aliased sender address\n     */\n    function mapL1SenderContractAddressToL2Alias(address sender, address unused)\n        external\n        pure\n        returns (address);\n\n    /**\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\n     * @return true iff the caller's address is an alias for an L1 contract address\n     */\n    function wasMyCallersAddressAliased() external view returns (bool);\n\n    /**\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\n     * @return address of the caller's caller, without applying L1 contract address aliasing\n     */\n    function myCallersAddressWithoutAliasing() external view returns (address);\n\n    /**\n     * @notice Send given amount of Eth to dest from sender.\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty data.\n     * @param destination recipient address on L1\n     * @return unique identifier for this L2-to-L1 transaction.\n     */\n    function withdrawEth(address destination) external payable returns (uint256);\n\n    /**\n     * @notice Send a transaction to L1\n     * @dev it is not possible to execute on the L1 any L2-to-L1 transaction which contains data\n     * to a contract address without any code (as enforced by the Bridge contract).\n     * @param destination recipient address on L1\n     * @param data (optional) calldata for L1 contract call\n     * @return a unique identifier for this L2-to-L1 transaction.\n     */\n    function sendTxToL1(address destination, bytes calldata data)\n        external\n        payable\n        returns (uint256);\n\n    /**\n     * @notice Get send Merkle tree state\n     * @return size number of sends in the history\n     * @return root root hash of the send history\n     * @return partials hashes of partial subtrees in the send history tree\n     */\n    function sendMerkleTreeState()\n        external\n        view\n        returns (\n            uint256 size,\n            bytes32 root,\n            bytes32[] memory partials\n        );\n\n    /**\n     * @notice creates a send txn from L2 to L1\n     * @param position = (level << 192) + leaf = (0 << 192) + leaf = leaf\n     */\n    event L2ToL1Tx(\n        address caller,\n        address indexed destination,\n        uint256 indexed hash,\n        uint256 indexed position,\n        uint256 arbBlockNum,\n        uint256 ethBlockNum,\n        uint256 timestamp,\n        uint256 callvalue,\n        bytes data\n    );\n\n    /// @dev DEPRECATED in favour of the new L2ToL1Tx event above after the nitro upgrade\n    event L2ToL1Transaction(\n        address caller,\n        address indexed destination,\n        uint256 indexed uniqueId,\n        uint256 indexed batchNumber,\n        uint256 indexInBatch,\n        uint256 arbBlockNum,\n        uint256 ethBlockNum,\n        uint256 timestamp,\n        uint256 callvalue,\n        bytes data\n    );\n\n    /**\n     * @notice logs a merkle branch for proof synthesis\n     * @param reserved an index meant only to align the 4th index with L2ToL1Transaction's 4th event\n     * @param hash the merkle hash\n     * @param position = (level << 192) + leaf\n     */\n    event SendMerkleUpdate(\n        uint256 indexed reserved,\n        bytes32 indexed hash,\n        uint256 indexed position\n    );\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ArbSys.arbOSVersion', 'start_line': 1779, 'end_line': 1779, 'offset_start': 64824, 'offset_end': 64879, 'content': 'function arbOSVersion() external view returns (uint256);', 'contract_name': 'ArbSys', 'contract_code': "{\n    /**\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\n     * @return block number as int\n     */\n    function arbBlockNumber() external view returns (uint256);\n\n    /**\n     * @notice Get Arbitrum block hash (reverts unless currentBlockNum-256 <= arbBlockNum < currentBlockNum)\n     * @return block hash\n     */\n    function arbBlockHash(uint256 arbBlockNum) external view returns (bytes32);\n\n    /**\n     * @notice Gets the rollup's unique chain identifier\n     * @return Chain identifier as int\n     */\n    function arbChainID() external view returns (uint256);\n\n    /**\n     * @notice Get internal version number identifying an ArbOS build\n     * @return version number as int\n     */\n    function arbOSVersion() external view returns (uint256);\n\n    /**\n     * @notice Returns 0 since Nitro has no concept of storage gas\n     * @return uint 0\n     */\n    function getStorageGasAvailable() external view returns (uint256);\n\n    /**\n     * @notice (deprecated) check if current call is top level (meaning it was triggered by an EoA or a L1 contract)\n     * @dev this call has been deprecated and may be removed in a future release\n     * @return true if current execution frame is not a call by another L2 contract\n     */\n    function isTopLevelCall() external view returns (bool);\n\n    /**\n     * @notice map L1 sender contract address to its L2 alias\n     * @param sender sender address\n     * @param unused argument no longer used\n     * @return aliased sender address\n     */\n    function mapL1SenderContractAddressToL2Alias(address sender, address unused)\n        external\n        pure\n        returns (address);\n\n    /**\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\n     * @return true iff the caller's address is an alias for an L1 contract address\n     */\n    function wasMyCallersAddressAliased() external view returns (bool);\n\n    /**\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\n     * @return address of the caller's caller, without applying L1 contract address aliasing\n     */\n    function myCallersAddressWithoutAliasing() external view returns (address);\n\n    /**\n     * @notice Send given amount of Eth to dest from sender.\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty data.\n     * @param destination recipient address on L1\n     * @return unique identifier for this L2-to-L1 transaction.\n     */\n    function withdrawEth(address destination) external payable returns (uint256);\n\n    /**\n     * @notice Send a transaction to L1\n     * @dev it is not possible to execute on the L1 any L2-to-L1 transaction which contains data\n     * to a contract address without any code (as enforced by the Bridge contract).\n     * @param destination recipient address on L1\n     * @param data (optional) calldata for L1 contract call\n     * @return a unique identifier for this L2-to-L1 transaction.\n     */\n    function sendTxToL1(address destination, bytes calldata data)\n        external\n        payable\n        returns (uint256);\n\n    /**\n     * @notice Get send Merkle tree state\n     * @return size number of sends in the history\n     * @return root root hash of the send history\n     * @return partials hashes of partial subtrees in the send history tree\n     */\n    function sendMerkleTreeState()\n        external\n        view\n        returns (\n            uint256 size,\n            bytes32 root,\n            bytes32[] memory partials\n        );\n\n    /**\n     * @notice creates a send txn from L2 to L1\n     * @param position = (level << 192) + leaf = (0 << 192) + leaf = leaf\n     */\n    event L2ToL1Tx(\n        address caller,\n        address indexed destination,\n        uint256 indexed hash,\n        uint256 indexed position,\n        uint256 arbBlockNum,\n        uint256 ethBlockNum,\n        uint256 timestamp,\n        uint256 callvalue,\n        bytes data\n    );\n\n    /// @dev DEPRECATED in favour of the new L2ToL1Tx event above after the nitro upgrade\n    event L2ToL1Transaction(\n        address caller,\n        address indexed destination,\n        uint256 indexed uniqueId,\n        uint256 indexed batchNumber,\n        uint256 indexInBatch,\n        uint256 arbBlockNum,\n        uint256 ethBlockNum,\n        uint256 timestamp,\n        uint256 callvalue,\n        bytes data\n    );\n\n    /**\n     * @notice logs a merkle branch for proof synthesis\n     * @param reserved an index meant only to align the 4th index with L2ToL1Transaction's 4th event\n     * @param hash the merkle hash\n     * @param position = (level << 192) + leaf\n     */\n    event SendMerkleUpdate(\n        uint256 indexed reserved,\n        bytes32 indexed hash,\n        uint256 indexed position\n    );\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ArbSys.getStorageGasAvailable', 'start_line': 1785, 'end_line': 1785, 'offset_start': 64991, 'offset_end': 65056, 'content': 'function getStorageGasAvailable() external view returns (uint256);', 'contract_name': 'ArbSys', 'contract_code': "{\n    /**\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\n     * @return block number as int\n     */\n    function arbBlockNumber() external view returns (uint256);\n\n    /**\n     * @notice Get Arbitrum block hash (reverts unless currentBlockNum-256 <= arbBlockNum < currentBlockNum)\n     * @return block hash\n     */\n    function arbBlockHash(uint256 arbBlockNum) external view returns (bytes32);\n\n    /**\n     * @notice Gets the rollup's unique chain identifier\n     * @return Chain identifier as int\n     */\n    function arbChainID() external view returns (uint256);\n\n    /**\n     * @notice Get internal version number identifying an ArbOS build\n     * @return version number as int\n     */\n    function arbOSVersion() external view returns (uint256);\n\n    /**\n     * @notice Returns 0 since Nitro has no concept of storage gas\n     * @return uint 0\n     */\n    function getStorageGasAvailable() external view returns (uint256);\n\n    /**\n     * @notice (deprecated) check if current call is top level (meaning it was triggered by an EoA or a L1 contract)\n     * @dev this call has been deprecated and may be removed in a future release\n     * @return true if current execution frame is not a call by another L2 contract\n     */\n    function isTopLevelCall() external view returns (bool);\n\n    /**\n     * @notice map L1 sender contract address to its L2 alias\n     * @param sender sender address\n     * @param unused argument no longer used\n     * @return aliased sender address\n     */\n    function mapL1SenderContractAddressToL2Alias(address sender, address unused)\n        external\n        pure\n        returns (address);\n\n    /**\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\n     * @return true iff the caller's address is an alias for an L1 contract address\n     */\n    function wasMyCallersAddressAliased() external view returns (bool);\n\n    /**\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\n     * @return address of the caller's caller, without applying L1 contract address aliasing\n     */\n    function myCallersAddressWithoutAliasing() external view returns (address);\n\n    /**\n     * @notice Send given amount of Eth to dest from sender.\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty data.\n     * @param destination recipient address on L1\n     * @return unique identifier for this L2-to-L1 transaction.\n     */\n    function withdrawEth(address destination) external payable returns (uint256);\n\n    /**\n     * @notice Send a transaction to L1\n     * @dev it is not possible to execute on the L1 any L2-to-L1 transaction which contains data\n     * to a contract address without any code (as enforced by the Bridge contract).\n     * @param destination recipient address on L1\n     * @param data (optional) calldata for L1 contract call\n     * @return a unique identifier for this L2-to-L1 transaction.\n     */\n    function sendTxToL1(address destination, bytes calldata data)\n        external\n        payable\n        returns (uint256);\n\n    /**\n     * @notice Get send Merkle tree state\n     * @return size number of sends in the history\n     * @return root root hash of the send history\n     * @return partials hashes of partial subtrees in the send history tree\n     */\n    function sendMerkleTreeState()\n        external\n        view\n        returns (\n            uint256 size,\n            bytes32 root,\n            bytes32[] memory partials\n        );\n\n    /**\n     * @notice creates a send txn from L2 to L1\n     * @param position = (level << 192) + leaf = (0 << 192) + leaf = leaf\n     */\n    event L2ToL1Tx(\n        address caller,\n        address indexed destination,\n        uint256 indexed hash,\n        uint256 indexed position,\n        uint256 arbBlockNum,\n        uint256 ethBlockNum,\n        uint256 timestamp,\n        uint256 callvalue,\n        bytes data\n    );\n\n    /// @dev DEPRECATED in favour of the new L2ToL1Tx event above after the nitro upgrade\n    event L2ToL1Transaction(\n        address caller,\n        address indexed destination,\n        uint256 indexed uniqueId,\n        uint256 indexed batchNumber,\n        uint256 indexInBatch,\n        uint256 arbBlockNum,\n        uint256 ethBlockNum,\n        uint256 timestamp,\n        uint256 callvalue,\n        bytes data\n    );\n\n    /**\n     * @notice logs a merkle branch for proof synthesis\n     * @param reserved an index meant only to align the 4th index with L2ToL1Transaction's 4th event\n     * @param hash the merkle hash\n     * @param position = (level << 192) + leaf\n     */\n    event SendMerkleUpdate(\n        uint256 indexed reserved,\n        bytes32 indexed hash,\n        uint256 indexed position\n    );\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ArbSys.isTopLevelCall', 'start_line': 1792, 'end_line': 1792, 'offset_start': 65361, 'offset_end': 65415, 'content': 'function isTopLevelCall() external view returns (bool);', 'contract_name': 'ArbSys', 'contract_code': "{\n    /**\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\n     * @return block number as int\n     */\n    function arbBlockNumber() external view returns (uint256);\n\n    /**\n     * @notice Get Arbitrum block hash (reverts unless currentBlockNum-256 <= arbBlockNum < currentBlockNum)\n     * @return block hash\n     */\n    function arbBlockHash(uint256 arbBlockNum) external view returns (bytes32);\n\n    /**\n     * @notice Gets the rollup's unique chain identifier\n     * @return Chain identifier as int\n     */\n    function arbChainID() external view returns (uint256);\n\n    /**\n     * @notice Get internal version number identifying an ArbOS build\n     * @return version number as int\n     */\n    function arbOSVersion() external view returns (uint256);\n\n    /**\n     * @notice Returns 0 since Nitro has no concept of storage gas\n     * @return uint 0\n     */\n    function getStorageGasAvailable() external view returns (uint256);\n\n    /**\n     * @notice (deprecated) check if current call is top level (meaning it was triggered by an EoA or a L1 contract)\n     * @dev this call has been deprecated and may be removed in a future release\n     * @return true if current execution frame is not a call by another L2 contract\n     */\n    function isTopLevelCall() external view returns (bool);\n\n    /**\n     * @notice map L1 sender contract address to its L2 alias\n     * @param sender sender address\n     * @param unused argument no longer used\n     * @return aliased sender address\n     */\n    function mapL1SenderContractAddressToL2Alias(address sender, address unused)\n        external\n        pure\n        returns (address);\n\n    /**\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\n     * @return true iff the caller's address is an alias for an L1 contract address\n     */\n    function wasMyCallersAddressAliased() external view returns (bool);\n\n    /**\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\n     * @return address of the caller's caller, without applying L1 contract address aliasing\n     */\n    function myCallersAddressWithoutAliasing() external view returns (address);\n\n    /**\n     * @notice Send given amount of Eth to dest from sender.\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty data.\n     * @param destination recipient address on L1\n     * @return unique identifier for this L2-to-L1 transaction.\n     */\n    function withdrawEth(address destination) external payable returns (uint256);\n\n    /**\n     * @notice Send a transaction to L1\n     * @dev it is not possible to execute on the L1 any L2-to-L1 transaction which contains data\n     * to a contract address without any code (as enforced by the Bridge contract).\n     * @param destination recipient address on L1\n     * @param data (optional) calldata for L1 contract call\n     * @return a unique identifier for this L2-to-L1 transaction.\n     */\n    function sendTxToL1(address destination, bytes calldata data)\n        external\n        payable\n        returns (uint256);\n\n    /**\n     * @notice Get send Merkle tree state\n     * @return size number of sends in the history\n     * @return root root hash of the send history\n     * @return partials hashes of partial subtrees in the send history tree\n     */\n    function sendMerkleTreeState()\n        external\n        view\n        returns (\n            uint256 size,\n            bytes32 root,\n            bytes32[] memory partials\n        );\n\n    /**\n     * @notice creates a send txn from L2 to L1\n     * @param position = (level << 192) + leaf = (0 << 192) + leaf = leaf\n     */\n    event L2ToL1Tx(\n        address caller,\n        address indexed destination,\n        uint256 indexed hash,\n        uint256 indexed position,\n        uint256 arbBlockNum,\n        uint256 ethBlockNum,\n        uint256 timestamp,\n        uint256 callvalue,\n        bytes data\n    );\n\n    /// @dev DEPRECATED in favour of the new L2ToL1Tx event above after the nitro upgrade\n    event L2ToL1Transaction(\n        address caller,\n        address indexed destination,\n        uint256 indexed uniqueId,\n        uint256 indexed batchNumber,\n        uint256 indexInBatch,\n        uint256 arbBlockNum,\n        uint256 ethBlockNum,\n        uint256 timestamp,\n        uint256 callvalue,\n        bytes data\n    );\n\n    /**\n     * @notice logs a merkle branch for proof synthesis\n     * @param reserved an index meant only to align the 4th index with L2ToL1Transaction's 4th event\n     * @param hash the merkle hash\n     * @param position = (level << 192) + leaf\n     */\n    event SendMerkleUpdate(\n        uint256 indexed reserved,\n        bytes32 indexed hash,\n        uint256 indexed position\n    );\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ArbSys.mapL1SenderContractAddressToL2Alias', 'start_line': 1800, 'end_line': 1803, 'offset_start': 65619, 'offset_end': 65751, 'content': 'function mapL1SenderContractAddressToL2Alias(address sender, address unused)\n        external\n        pure\n        returns (address);', 'contract_name': 'ArbSys', 'contract_code': "{\n    /**\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\n     * @return block number as int\n     */\n    function arbBlockNumber() external view returns (uint256);\n\n    /**\n     * @notice Get Arbitrum block hash (reverts unless currentBlockNum-256 <= arbBlockNum < currentBlockNum)\n     * @return block hash\n     */\n    function arbBlockHash(uint256 arbBlockNum) external view returns (bytes32);\n\n    /**\n     * @notice Gets the rollup's unique chain identifier\n     * @return Chain identifier as int\n     */\n    function arbChainID() external view returns (uint256);\n\n    /**\n     * @notice Get internal version number identifying an ArbOS build\n     * @return version number as int\n     */\n    function arbOSVersion() external view returns (uint256);\n\n    /**\n     * @notice Returns 0 since Nitro has no concept of storage gas\n     * @return uint 0\n     */\n    function getStorageGasAvailable() external view returns (uint256);\n\n    /**\n     * @notice (deprecated) check if current call is top level (meaning it was triggered by an EoA or a L1 contract)\n     * @dev this call has been deprecated and may be removed in a future release\n     * @return true if current execution frame is not a call by another L2 contract\n     */\n    function isTopLevelCall() external view returns (bool);\n\n    /**\n     * @notice map L1 sender contract address to its L2 alias\n     * @param sender sender address\n     * @param unused argument no longer used\n     * @return aliased sender address\n     */\n    function mapL1SenderContractAddressToL2Alias(address sender, address unused)\n        external\n        pure\n        returns (address);\n\n    /**\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\n     * @return true iff the caller's address is an alias for an L1 contract address\n     */\n    function wasMyCallersAddressAliased() external view returns (bool);\n\n    /**\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\n     * @return address of the caller's caller, without applying L1 contract address aliasing\n     */\n    function myCallersAddressWithoutAliasing() external view returns (address);\n\n    /**\n     * @notice Send given amount of Eth to dest from sender.\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty data.\n     * @param destination recipient address on L1\n     * @return unique identifier for this L2-to-L1 transaction.\n     */\n    function withdrawEth(address destination) external payable returns (uint256);\n\n    /**\n     * @notice Send a transaction to L1\n     * @dev it is not possible to execute on the L1 any L2-to-L1 transaction which contains data\n     * to a contract address without any code (as enforced by the Bridge contract).\n     * @param destination recipient address on L1\n     * @param data (optional) calldata for L1 contract call\n     * @return a unique identifier for this L2-to-L1 transaction.\n     */\n    function sendTxToL1(address destination, bytes calldata data)\n        external\n        payable\n        returns (uint256);\n\n    /**\n     * @notice Get send Merkle tree state\n     * @return size number of sends in the history\n     * @return root root hash of the send history\n     * @return partials hashes of partial subtrees in the send history tree\n     */\n    function sendMerkleTreeState()\n        external\n        view\n        returns (\n            uint256 size,\n            bytes32 root,\n            bytes32[] memory partials\n        );\n\n    /**\n     * @notice creates a send txn from L2 to L1\n     * @param position = (level << 192) + leaf = (0 << 192) + leaf = leaf\n     */\n    event L2ToL1Tx(\n        address caller,\n        address indexed destination,\n        uint256 indexed hash,\n        uint256 indexed position,\n        uint256 arbBlockNum,\n        uint256 ethBlockNum,\n        uint256 timestamp,\n        uint256 callvalue,\n        bytes data\n    );\n\n    /// @dev DEPRECATED in favour of the new L2ToL1Tx event above after the nitro upgrade\n    event L2ToL1Transaction(\n        address caller,\n        address indexed destination,\n        uint256 indexed uniqueId,\n        uint256 indexed batchNumber,\n        uint256 indexInBatch,\n        uint256 arbBlockNum,\n        uint256 ethBlockNum,\n        uint256 timestamp,\n        uint256 callvalue,\n        bytes data\n    );\n\n    /**\n     * @notice logs a merkle branch for proof synthesis\n     * @param reserved an index meant only to align the 4th index with L2ToL1Transaction's 4th event\n     * @param hash the merkle hash\n     * @param position = (level << 192) + leaf\n     */\n    event SendMerkleUpdate(\n        uint256 indexed reserved,\n        bytes32 indexed hash,\n        uint256 indexed position\n    );\n}", 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ArbSys.wasMyCallersAddressAliased', 'start_line': 1809, 'end_line': 1809, 'offset_start': 65952, 'offset_end': 66018, 'content': 'function wasMyCallersAddressAliased() external view returns (bool);', 'contract_name': 'ArbSys', 'contract_code': "{\n    /**\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\n     * @return block number as int\n     */\n    function arbBlockNumber() external view returns (uint256);\n\n    /**\n     * @notice Get Arbitrum block hash (reverts unless currentBlockNum-256 <= arbBlockNum < currentBlockNum)\n     * @return block hash\n     */\n    function arbBlockHash(uint256 arbBlockNum) external view returns (bytes32);\n\n    /**\n     * @notice Gets the rollup's unique chain identifier\n     * @return Chain identifier as int\n     */\n    function arbChainID() external view returns (uint256);\n\n    /**\n     * @notice Get internal version number identifying an ArbOS build\n     * @return version number as int\n     */\n    function arbOSVersion() external view returns (uint256);\n\n    /**\n     * @notice Returns 0 since Nitro has no concept of storage gas\n     * @return uint 0\n     */\n    function getStorageGasAvailable() external view returns (uint256);\n\n    /**\n     * @notice (deprecated) check if current call is top level (meaning it was triggered by an EoA or a L1 contract)\n     * @dev this call has been deprecated and may be removed in a future release\n     * @return true if current execution frame is not a call by another L2 contract\n     */\n    function isTopLevelCall() external view returns (bool);\n\n    /**\n     * @notice map L1 sender contract address to its L2 alias\n     * @param sender sender address\n     * @param unused argument no longer used\n     * @return aliased sender address\n     */\n    function mapL1SenderContractAddressToL2Alias(address sender, address unused)\n        external\n        pure\n        returns (address);\n\n    /**\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\n     * @return true iff the caller's address is an alias for an L1 contract address\n     */\n    function wasMyCallersAddressAliased() external view returns (bool);\n\n    /**\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\n     * @return address of the caller's caller, without applying L1 contract address aliasing\n     */\n    function myCallersAddressWithoutAliasing() external view returns (address);\n\n    /**\n     * @notice Send given amount of Eth to dest from sender.\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty data.\n     * @param destination recipient address on L1\n     * @return unique identifier for this L2-to-L1 transaction.\n     */\n    function withdrawEth(address destination) external payable returns (uint256);\n\n    /**\n     * @notice Send a transaction to L1\n     * @dev it is not possible to execute on the L1 any L2-to-L1 transaction which contains data\n     * to a contract address without any code (as enforced by the Bridge contract).\n     * @param destination recipient address on L1\n     * @param data (optional) calldata for L1 contract call\n     * @return a unique identifier for this L2-to-L1 transaction.\n     */\n    function sendTxToL1(address destination, bytes calldata data)\n        external\n        payable\n        returns (uint256);\n\n    /**\n     * @notice Get send Merkle tree state\n     * @return size number of sends in the history\n     * @return root root hash of the send history\n     * @return partials hashes of partial subtrees in the send history tree\n     */\n    function sendMerkleTreeState()\n        external\n        view\n        returns (\n            uint256 size,\n            bytes32 root,\n            bytes32[] memory partials\n        );\n\n    /**\n     * @notice creates a send txn from L2 to L1\n     * @param position = (level << 192) + leaf = (0 << 192) + leaf = leaf\n     */\n    event L2ToL1Tx(\n        address caller,\n        address indexed destination,\n        uint256 indexed hash,\n        uint256 indexed position,\n        uint256 arbBlockNum,\n        uint256 ethBlockNum,\n        uint256 timestamp,\n        uint256 callvalue,\n        bytes data\n    );\n\n    /// @dev DEPRECATED in favour of the new L2ToL1Tx event above after the nitro upgrade\n    event L2ToL1Transaction(\n        address caller,\n        address indexed destination,\n        uint256 indexed uniqueId,\n        uint256 indexed batchNumber,\n        uint256 indexInBatch,\n        uint256 arbBlockNum,\n        uint256 ethBlockNum,\n        uint256 timestamp,\n        uint256 callvalue,\n        bytes data\n    );\n\n    /**\n     * @notice logs a merkle branch for proof synthesis\n     * @param reserved an index meant only to align the 4th index with L2ToL1Transaction's 4th event\n     * @param hash the merkle hash\n     * @param position = (level << 192) + leaf\n     */\n    event SendMerkleUpdate(\n        uint256 indexed reserved,\n        bytes32 indexed hash,\n        uint256 indexed position\n    );\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ArbSys.myCallersAddressWithoutAliasing', 'start_line': 1815, 'end_line': 1815, 'offset_start': 66254, 'offset_end': 66328, 'content': 'function myCallersAddressWithoutAliasing() external view returns (address);', 'contract_name': 'ArbSys', 'contract_code': "{\n    /**\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\n     * @return block number as int\n     */\n    function arbBlockNumber() external view returns (uint256);\n\n    /**\n     * @notice Get Arbitrum block hash (reverts unless currentBlockNum-256 <= arbBlockNum < currentBlockNum)\n     * @return block hash\n     */\n    function arbBlockHash(uint256 arbBlockNum) external view returns (bytes32);\n\n    /**\n     * @notice Gets the rollup's unique chain identifier\n     * @return Chain identifier as int\n     */\n    function arbChainID() external view returns (uint256);\n\n    /**\n     * @notice Get internal version number identifying an ArbOS build\n     * @return version number as int\n     */\n    function arbOSVersion() external view returns (uint256);\n\n    /**\n     * @notice Returns 0 since Nitro has no concept of storage gas\n     * @return uint 0\n     */\n    function getStorageGasAvailable() external view returns (uint256);\n\n    /**\n     * @notice (deprecated) check if current call is top level (meaning it was triggered by an EoA or a L1 contract)\n     * @dev this call has been deprecated and may be removed in a future release\n     * @return true if current execution frame is not a call by another L2 contract\n     */\n    function isTopLevelCall() external view returns (bool);\n\n    /**\n     * @notice map L1 sender contract address to its L2 alias\n     * @param sender sender address\n     * @param unused argument no longer used\n     * @return aliased sender address\n     */\n    function mapL1SenderContractAddressToL2Alias(address sender, address unused)\n        external\n        pure\n        returns (address);\n\n    /**\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\n     * @return true iff the caller's address is an alias for an L1 contract address\n     */\n    function wasMyCallersAddressAliased() external view returns (bool);\n\n    /**\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\n     * @return address of the caller's caller, without applying L1 contract address aliasing\n     */\n    function myCallersAddressWithoutAliasing() external view returns (address);\n\n    /**\n     * @notice Send given amount of Eth to dest from sender.\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty data.\n     * @param destination recipient address on L1\n     * @return unique identifier for this L2-to-L1 transaction.\n     */\n    function withdrawEth(address destination) external payable returns (uint256);\n\n    /**\n     * @notice Send a transaction to L1\n     * @dev it is not possible to execute on the L1 any L2-to-L1 transaction which contains data\n     * to a contract address without any code (as enforced by the Bridge contract).\n     * @param destination recipient address on L1\n     * @param data (optional) calldata for L1 contract call\n     * @return a unique identifier for this L2-to-L1 transaction.\n     */\n    function sendTxToL1(address destination, bytes calldata data)\n        external\n        payable\n        returns (uint256);\n\n    /**\n     * @notice Get send Merkle tree state\n     * @return size number of sends in the history\n     * @return root root hash of the send history\n     * @return partials hashes of partial subtrees in the send history tree\n     */\n    function sendMerkleTreeState()\n        external\n        view\n        returns (\n            uint256 size,\n            bytes32 root,\n            bytes32[] memory partials\n        );\n\n    /**\n     * @notice creates a send txn from L2 to L1\n     * @param position = (level << 192) + leaf = (0 << 192) + leaf = leaf\n     */\n    event L2ToL1Tx(\n        address caller,\n        address indexed destination,\n        uint256 indexed hash,\n        uint256 indexed position,\n        uint256 arbBlockNum,\n        uint256 ethBlockNum,\n        uint256 timestamp,\n        uint256 callvalue,\n        bytes data\n    );\n\n    /// @dev DEPRECATED in favour of the new L2ToL1Tx event above after the nitro upgrade\n    event L2ToL1Transaction(\n        address caller,\n        address indexed destination,\n        uint256 indexed uniqueId,\n        uint256 indexed batchNumber,\n        uint256 indexInBatch,\n        uint256 arbBlockNum,\n        uint256 ethBlockNum,\n        uint256 timestamp,\n        uint256 callvalue,\n        bytes data\n    );\n\n    /**\n     * @notice logs a merkle branch for proof synthesis\n     * @param reserved an index meant only to align the 4th index with L2ToL1Transaction's 4th event\n     * @param hash the merkle hash\n     * @param position = (level << 192) + leaf\n     */\n    event SendMerkleUpdate(\n        uint256 indexed reserved,\n        bytes32 indexed hash,\n        uint256 indexed position\n    );\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ArbSys.withdrawEth', 'start_line': 1823, 'end_line': 1823, 'offset_start': 66624, 'offset_end': 66700, 'content': 'function withdrawEth(address destination) external payable returns (uint256);', 'contract_name': 'ArbSys', 'contract_code': "{\n    /**\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\n     * @return block number as int\n     */\n    function arbBlockNumber() external view returns (uint256);\n\n    /**\n     * @notice Get Arbitrum block hash (reverts unless currentBlockNum-256 <= arbBlockNum < currentBlockNum)\n     * @return block hash\n     */\n    function arbBlockHash(uint256 arbBlockNum) external view returns (bytes32);\n\n    /**\n     * @notice Gets the rollup's unique chain identifier\n     * @return Chain identifier as int\n     */\n    function arbChainID() external view returns (uint256);\n\n    /**\n     * @notice Get internal version number identifying an ArbOS build\n     * @return version number as int\n     */\n    function arbOSVersion() external view returns (uint256);\n\n    /**\n     * @notice Returns 0 since Nitro has no concept of storage gas\n     * @return uint 0\n     */\n    function getStorageGasAvailable() external view returns (uint256);\n\n    /**\n     * @notice (deprecated) check if current call is top level (meaning it was triggered by an EoA or a L1 contract)\n     * @dev this call has been deprecated and may be removed in a future release\n     * @return true if current execution frame is not a call by another L2 contract\n     */\n    function isTopLevelCall() external view returns (bool);\n\n    /**\n     * @notice map L1 sender contract address to its L2 alias\n     * @param sender sender address\n     * @param unused argument no longer used\n     * @return aliased sender address\n     */\n    function mapL1SenderContractAddressToL2Alias(address sender, address unused)\n        external\n        pure\n        returns (address);\n\n    /**\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\n     * @return true iff the caller's address is an alias for an L1 contract address\n     */\n    function wasMyCallersAddressAliased() external view returns (bool);\n\n    /**\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\n     * @return address of the caller's caller, without applying L1 contract address aliasing\n     */\n    function myCallersAddressWithoutAliasing() external view returns (address);\n\n    /**\n     * @notice Send given amount of Eth to dest from sender.\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty data.\n     * @param destination recipient address on L1\n     * @return unique identifier for this L2-to-L1 transaction.\n     */\n    function withdrawEth(address destination) external payable returns (uint256);\n\n    /**\n     * @notice Send a transaction to L1\n     * @dev it is not possible to execute on the L1 any L2-to-L1 transaction which contains data\n     * to a contract address without any code (as enforced by the Bridge contract).\n     * @param destination recipient address on L1\n     * @param data (optional) calldata for L1 contract call\n     * @return a unique identifier for this L2-to-L1 transaction.\n     */\n    function sendTxToL1(address destination, bytes calldata data)\n        external\n        payable\n        returns (uint256);\n\n    /**\n     * @notice Get send Merkle tree state\n     * @return size number of sends in the history\n     * @return root root hash of the send history\n     * @return partials hashes of partial subtrees in the send history tree\n     */\n    function sendMerkleTreeState()\n        external\n        view\n        returns (\n            uint256 size,\n            bytes32 root,\n            bytes32[] memory partials\n        );\n\n    /**\n     * @notice creates a send txn from L2 to L1\n     * @param position = (level << 192) + leaf = (0 << 192) + leaf = leaf\n     */\n    event L2ToL1Tx(\n        address caller,\n        address indexed destination,\n        uint256 indexed hash,\n        uint256 indexed position,\n        uint256 arbBlockNum,\n        uint256 ethBlockNum,\n        uint256 timestamp,\n        uint256 callvalue,\n        bytes data\n    );\n\n    /// @dev DEPRECATED in favour of the new L2ToL1Tx event above after the nitro upgrade\n    event L2ToL1Transaction(\n        address caller,\n        address indexed destination,\n        uint256 indexed uniqueId,\n        uint256 indexed batchNumber,\n        uint256 indexInBatch,\n        uint256 arbBlockNum,\n        uint256 ethBlockNum,\n        uint256 timestamp,\n        uint256 callvalue,\n        bytes data\n    );\n\n    /**\n     * @notice logs a merkle branch for proof synthesis\n     * @param reserved an index meant only to align the 4th index with L2ToL1Transaction's 4th event\n     * @param hash the merkle hash\n     * @param position = (level << 192) + leaf\n     */\n    event SendMerkleUpdate(\n        uint256 indexed reserved,\n        bytes32 indexed hash,\n        uint256 indexed position\n    );\n}", 'modifiers': [], 'stateMutability': 'payable', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ArbSys.sendTxToL1', 'start_line': 1833, 'end_line': 1836, 'offset_start': 67120, 'offset_end': 67240, 'content': 'function sendTxToL1(address destination, bytes calldata data)\n        external\n        payable\n        returns (uint256);', 'contract_name': 'ArbSys', 'contract_code': "{\n    /**\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\n     * @return block number as int\n     */\n    function arbBlockNumber() external view returns (uint256);\n\n    /**\n     * @notice Get Arbitrum block hash (reverts unless currentBlockNum-256 <= arbBlockNum < currentBlockNum)\n     * @return block hash\n     */\n    function arbBlockHash(uint256 arbBlockNum) external view returns (bytes32);\n\n    /**\n     * @notice Gets the rollup's unique chain identifier\n     * @return Chain identifier as int\n     */\n    function arbChainID() external view returns (uint256);\n\n    /**\n     * @notice Get internal version number identifying an ArbOS build\n     * @return version number as int\n     */\n    function arbOSVersion() external view returns (uint256);\n\n    /**\n     * @notice Returns 0 since Nitro has no concept of storage gas\n     * @return uint 0\n     */\n    function getStorageGasAvailable() external view returns (uint256);\n\n    /**\n     * @notice (deprecated) check if current call is top level (meaning it was triggered by an EoA or a L1 contract)\n     * @dev this call has been deprecated and may be removed in a future release\n     * @return true if current execution frame is not a call by another L2 contract\n     */\n    function isTopLevelCall() external view returns (bool);\n\n    /**\n     * @notice map L1 sender contract address to its L2 alias\n     * @param sender sender address\n     * @param unused argument no longer used\n     * @return aliased sender address\n     */\n    function mapL1SenderContractAddressToL2Alias(address sender, address unused)\n        external\n        pure\n        returns (address);\n\n    /**\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\n     * @return true iff the caller's address is an alias for an L1 contract address\n     */\n    function wasMyCallersAddressAliased() external view returns (bool);\n\n    /**\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\n     * @return address of the caller's caller, without applying L1 contract address aliasing\n     */\n    function myCallersAddressWithoutAliasing() external view returns (address);\n\n    /**\n     * @notice Send given amount of Eth to dest from sender.\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty data.\n     * @param destination recipient address on L1\n     * @return unique identifier for this L2-to-L1 transaction.\n     */\n    function withdrawEth(address destination) external payable returns (uint256);\n\n    /**\n     * @notice Send a transaction to L1\n     * @dev it is not possible to execute on the L1 any L2-to-L1 transaction which contains data\n     * to a contract address without any code (as enforced by the Bridge contract).\n     * @param destination recipient address on L1\n     * @param data (optional) calldata for L1 contract call\n     * @return a unique identifier for this L2-to-L1 transaction.\n     */\n    function sendTxToL1(address destination, bytes calldata data)\n        external\n        payable\n        returns (uint256);\n\n    /**\n     * @notice Get send Merkle tree state\n     * @return size number of sends in the history\n     * @return root root hash of the send history\n     * @return partials hashes of partial subtrees in the send history tree\n     */\n    function sendMerkleTreeState()\n        external\n        view\n        returns (\n            uint256 size,\n            bytes32 root,\n            bytes32[] memory partials\n        );\n\n    /**\n     * @notice creates a send txn from L2 to L1\n     * @param position = (level << 192) + leaf = (0 << 192) + leaf = leaf\n     */\n    event L2ToL1Tx(\n        address caller,\n        address indexed destination,\n        uint256 indexed hash,\n        uint256 indexed position,\n        uint256 arbBlockNum,\n        uint256 ethBlockNum,\n        uint256 timestamp,\n        uint256 callvalue,\n        bytes data\n    );\n\n    /// @dev DEPRECATED in favour of the new L2ToL1Tx event above after the nitro upgrade\n    event L2ToL1Transaction(\n        address caller,\n        address indexed destination,\n        uint256 indexed uniqueId,\n        uint256 indexed batchNumber,\n        uint256 indexInBatch,\n        uint256 arbBlockNum,\n        uint256 ethBlockNum,\n        uint256 timestamp,\n        uint256 callvalue,\n        bytes data\n    );\n\n    /**\n     * @notice logs a merkle branch for proof synthesis\n     * @param reserved an index meant only to align the 4th index with L2ToL1Transaction's 4th event\n     * @param hash the merkle hash\n     * @param position = (level << 192) + leaf\n     */\n    event SendMerkleUpdate(\n        uint256 indexed reserved,\n        bytes32 indexed hash,\n        uint256 indexed position\n    );\n}", 'modifiers': [], 'stateMutability': 'payable', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ArbSys.sendMerkleTreeState', 'start_line': 1844, 'end_line': 1851, 'offset_start': 67482, 'offset_end': 67660, 'content': 'function sendMerkleTreeState()\n        external\n        view\n        returns (\n            uint256 size,\n            bytes32 root,\n            bytes32[] memory partials\n        );', 'contract_name': 'ArbSys', 'contract_code': "{\n    /**\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\n     * @return block number as int\n     */\n    function arbBlockNumber() external view returns (uint256);\n\n    /**\n     * @notice Get Arbitrum block hash (reverts unless currentBlockNum-256 <= arbBlockNum < currentBlockNum)\n     * @return block hash\n     */\n    function arbBlockHash(uint256 arbBlockNum) external view returns (bytes32);\n\n    /**\n     * @notice Gets the rollup's unique chain identifier\n     * @return Chain identifier as int\n     */\n    function arbChainID() external view returns (uint256);\n\n    /**\n     * @notice Get internal version number identifying an ArbOS build\n     * @return version number as int\n     */\n    function arbOSVersion() external view returns (uint256);\n\n    /**\n     * @notice Returns 0 since Nitro has no concept of storage gas\n     * @return uint 0\n     */\n    function getStorageGasAvailable() external view returns (uint256);\n\n    /**\n     * @notice (deprecated) check if current call is top level (meaning it was triggered by an EoA or a L1 contract)\n     * @dev this call has been deprecated and may be removed in a future release\n     * @return true if current execution frame is not a call by another L2 contract\n     */\n    function isTopLevelCall() external view returns (bool);\n\n    /**\n     * @notice map L1 sender contract address to its L2 alias\n     * @param sender sender address\n     * @param unused argument no longer used\n     * @return aliased sender address\n     */\n    function mapL1SenderContractAddressToL2Alias(address sender, address unused)\n        external\n        pure\n        returns (address);\n\n    /**\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\n     * @return true iff the caller's address is an alias for an L1 contract address\n     */\n    function wasMyCallersAddressAliased() external view returns (bool);\n\n    /**\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\n     * @return address of the caller's caller, without applying L1 contract address aliasing\n     */\n    function myCallersAddressWithoutAliasing() external view returns (address);\n\n    /**\n     * @notice Send given amount of Eth to dest from sender.\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty data.\n     * @param destination recipient address on L1\n     * @return unique identifier for this L2-to-L1 transaction.\n     */\n    function withdrawEth(address destination) external payable returns (uint256);\n\n    /**\n     * @notice Send a transaction to L1\n     * @dev it is not possible to execute on the L1 any L2-to-L1 transaction which contains data\n     * to a contract address without any code (as enforced by the Bridge contract).\n     * @param destination recipient address on L1\n     * @param data (optional) calldata for L1 contract call\n     * @return a unique identifier for this L2-to-L1 transaction.\n     */\n    function sendTxToL1(address destination, bytes calldata data)\n        external\n        payable\n        returns (uint256);\n\n    /**\n     * @notice Get send Merkle tree state\n     * @return size number of sends in the history\n     * @return root root hash of the send history\n     * @return partials hashes of partial subtrees in the send history tree\n     */\n    function sendMerkleTreeState()\n        external\n        view\n        returns (\n            uint256 size,\n            bytes32 root,\n            bytes32[] memory partials\n        );\n\n    /**\n     * @notice creates a send txn from L2 to L1\n     * @param position = (level << 192) + leaf = (0 << 192) + leaf = leaf\n     */\n    event L2ToL1Tx(\n        address caller,\n        address indexed destination,\n        uint256 indexed hash,\n        uint256 indexed position,\n        uint256 arbBlockNum,\n        uint256 ethBlockNum,\n        uint256 timestamp,\n        uint256 callvalue,\n        bytes data\n    );\n\n    /// @dev DEPRECATED in favour of the new L2ToL1Tx event above after the nitro upgrade\n    event L2ToL1Transaction(\n        address caller,\n        address indexed destination,\n        uint256 indexed uniqueId,\n        uint256 indexed batchNumber,\n        uint256 indexInBatch,\n        uint256 arbBlockNum,\n        uint256 ethBlockNum,\n        uint256 timestamp,\n        uint256 callvalue,\n        bytes data\n    );\n\n    /**\n     * @notice logs a merkle branch for proof synthesis\n     * @param reserved an index meant only to align the 4th index with L2ToL1Transaction's 4th event\n     * @param hash the merkle hash\n     * @param position = (level << 192) + leaf\n     */\n    event SendMerkleUpdate(\n        uint256 indexed reserved,\n        bytes32 indexed hash,\n        uint256 indexed position\n    );\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ISequencerInbox.totalDelayedMessagesRead', 'start_line': 1950, 'end_line': 1950, 'offset_start': 70473, 'offset_end': 70540, 'content': 'function totalDelayedMessagesRead() external view returns (uint256);', 'contract_name': 'ISequencerInbox', 'contract_code': "{\n    struct MaxTimeVariation {\n        uint256 delayBlocks;\n        uint256 futureBlocks;\n        uint256 delaySeconds;\n        uint256 futureSeconds;\n    }\n\n    struct TimeBounds {\n        uint64 minTimestamp;\n        uint64 maxTimestamp;\n        uint64 minBlockNumber;\n        uint64 maxBlockNumber;\n    }\n\n    enum BatchDataLocation {\n        TxInput,\n        SeparateBatchEvent,\n        NoData\n    }\n\n    event SequencerBatchDelivered(\n        uint256 indexed batchSequenceNumber,\n        bytes32 indexed beforeAcc,\n        bytes32 indexed afterAcc,\n        bytes32 delayedAcc,\n        uint256 afterDelayedMessagesRead,\n        TimeBounds timeBounds,\n        BatchDataLocation dataLocation\n    );\n\n    event OwnerFunctionCalled(uint256 indexed id);\n\n    /// @dev a separate event that emits batch data when this isn't easily accessible in the tx.input\n    event SequencerBatchData(uint256 indexed batchSequenceNumber, bytes data);\n\n    /// @dev a valid keyset was added\n    event SetValidKeyset(bytes32 indexed keysetHash, bytes keysetBytes);\n\n    /// @dev a keyset was invalidated\n    event InvalidateKeyset(bytes32 indexed keysetHash);\n\n    function totalDelayedMessagesRead() external view returns (uint256);\n\n    function bridge() external view returns (IBridge);\n\n    /// @dev The size of the batch header\n    // solhint-disable-next-line func-name-mixedcase\n    function HEADER_LENGTH() external view returns (uint256);\n\n    /// @dev If the first batch data byte after the header has this bit set,\n    ///      the sequencer inbox has authenticated the data. Currently not used.\n    // solhint-disable-next-line func-name-mixedcase\n    function DATA_AUTHENTICATED_FLAG() external view returns (bytes1);\n\n    function rollup() external view returns (IOwnable);\n\n    function isBatchPoster(address) external view returns (bool);\n\n    struct DasKeySetInfo {\n        bool isValidKeyset;\n        uint64 creationBlock;\n    }\n\n    // https://github.com/ethereum/solidity/issues/11826\n    // function maxTimeVariation() external view returns (MaxTimeVariation calldata);\n    // function dasKeySetInfo(bytes32) external view returns (DasKeySetInfo calldata);\n\n    /// @notice Remove force inclusion delay after a L1 chainId fork\n    function removeDelayAfterFork() external;\n\n    /// @notice Force messages from the delayed inbox to be included in the chain\n    ///         Callable by any address, but message can only be force-included after maxTimeVariation.delayBlocks and\n    ///         maxTimeVariation.delaySeconds has elapsed. As part of normal behaviour the sequencer will include these\n    ///         messages so it's only necessary to call this if the sequencer is down, or not including any delayed messages.\n    /// @param _totalDelayedMessagesRead The total number of messages to read up to\n    /// @param kind The kind of the last message to be included\n    /// @param l1BlockAndTime The l1 block and the l1 timestamp of the last message to be included\n    /// @param baseFeeL1 The l1 gas price of the last message to be included\n    /// @param sender The sender of the last message to be included\n    /// @param messageDataHash The messageDataHash of the last message to be included\n    function forceInclusion(\n        uint256 _totalDelayedMessagesRead,\n        uint8 kind,\n        uint64[2] calldata l1BlockAndTime,\n        uint256 baseFeeL1,\n        address sender,\n        bytes32 messageDataHash\n    ) external;\n\n    function inboxAccs(uint256 index) external view returns (bytes32);\n\n    function batchCount() external view returns (uint256);\n\n    function isValidKeysetHash(bytes32 ksHash) external view returns (bool);\n\n    /// @notice the creation block is intended to still be available after a keyset is deleted\n    function getKeysetCreationBlock(bytes32 ksHash) external view returns (uint256);\n\n    // ---------- BatchPoster functions ----------\n\n    function addSequencerL2BatchFromOrigin(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder\n    ) external;\n\n    function addSequencerL2Batch(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    ) external;\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /**\n     * @notice Set max delay for sequencer inbox\n     * @param maxTimeVariation_ the maximum time variation parameters\n     */\n    function setMaxTimeVariation(MaxTimeVariation memory maxTimeVariation_) external;\n\n    /**\n     * @notice Updates whether an address is authorized to be a batch poster at the sequencer inbox\n     * @param addr the address\n     * @param isBatchPoster_ if the specified address should be authorized as a batch poster\n     */\n    function setIsBatchPoster(address addr, bool isBatchPoster_) external;\n\n    /**\n     * @notice Makes Data Availability Service keyset valid\n     * @param keysetBytes bytes of the serialized keyset\n     */\n    function setValidKeyset(bytes calldata keysetBytes) external;\n\n    /**\n     * @notice Invalidates a Data Availability Service keyset\n     * @param ksHash hash of the keyset\n     */\n    function invalidateKeysetHash(bytes32 ksHash) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IBridge bridge_, MaxTimeVariation calldata maxTimeVariation_) external;\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ISequencerInbox.bridge', 'start_line': 1952, 'end_line': 1952, 'offset_start': 70547, 'offset_end': 70596, 'content': 'function bridge() external view returns (IBridge);', 'contract_name': 'ISequencerInbox', 'contract_code': "{\n    struct MaxTimeVariation {\n        uint256 delayBlocks;\n        uint256 futureBlocks;\n        uint256 delaySeconds;\n        uint256 futureSeconds;\n    }\n\n    struct TimeBounds {\n        uint64 minTimestamp;\n        uint64 maxTimestamp;\n        uint64 minBlockNumber;\n        uint64 maxBlockNumber;\n    }\n\n    enum BatchDataLocation {\n        TxInput,\n        SeparateBatchEvent,\n        NoData\n    }\n\n    event SequencerBatchDelivered(\n        uint256 indexed batchSequenceNumber,\n        bytes32 indexed beforeAcc,\n        bytes32 indexed afterAcc,\n        bytes32 delayedAcc,\n        uint256 afterDelayedMessagesRead,\n        TimeBounds timeBounds,\n        BatchDataLocation dataLocation\n    );\n\n    event OwnerFunctionCalled(uint256 indexed id);\n\n    /// @dev a separate event that emits batch data when this isn't easily accessible in the tx.input\n    event SequencerBatchData(uint256 indexed batchSequenceNumber, bytes data);\n\n    /// @dev a valid keyset was added\n    event SetValidKeyset(bytes32 indexed keysetHash, bytes keysetBytes);\n\n    /// @dev a keyset was invalidated\n    event InvalidateKeyset(bytes32 indexed keysetHash);\n\n    function totalDelayedMessagesRead() external view returns (uint256);\n\n    function bridge() external view returns (IBridge);\n\n    /// @dev The size of the batch header\n    // solhint-disable-next-line func-name-mixedcase\n    function HEADER_LENGTH() external view returns (uint256);\n\n    /// @dev If the first batch data byte after the header has this bit set,\n    ///      the sequencer inbox has authenticated the data. Currently not used.\n    // solhint-disable-next-line func-name-mixedcase\n    function DATA_AUTHENTICATED_FLAG() external view returns (bytes1);\n\n    function rollup() external view returns (IOwnable);\n\n    function isBatchPoster(address) external view returns (bool);\n\n    struct DasKeySetInfo {\n        bool isValidKeyset;\n        uint64 creationBlock;\n    }\n\n    // https://github.com/ethereum/solidity/issues/11826\n    // function maxTimeVariation() external view returns (MaxTimeVariation calldata);\n    // function dasKeySetInfo(bytes32) external view returns (DasKeySetInfo calldata);\n\n    /// @notice Remove force inclusion delay after a L1 chainId fork\n    function removeDelayAfterFork() external;\n\n    /// @notice Force messages from the delayed inbox to be included in the chain\n    ///         Callable by any address, but message can only be force-included after maxTimeVariation.delayBlocks and\n    ///         maxTimeVariation.delaySeconds has elapsed. As part of normal behaviour the sequencer will include these\n    ///         messages so it's only necessary to call this if the sequencer is down, or not including any delayed messages.\n    /// @param _totalDelayedMessagesRead The total number of messages to read up to\n    /// @param kind The kind of the last message to be included\n    /// @param l1BlockAndTime The l1 block and the l1 timestamp of the last message to be included\n    /// @param baseFeeL1 The l1 gas price of the last message to be included\n    /// @param sender The sender of the last message to be included\n    /// @param messageDataHash The messageDataHash of the last message to be included\n    function forceInclusion(\n        uint256 _totalDelayedMessagesRead,\n        uint8 kind,\n        uint64[2] calldata l1BlockAndTime,\n        uint256 baseFeeL1,\n        address sender,\n        bytes32 messageDataHash\n    ) external;\n\n    function inboxAccs(uint256 index) external view returns (bytes32);\n\n    function batchCount() external view returns (uint256);\n\n    function isValidKeysetHash(bytes32 ksHash) external view returns (bool);\n\n    /// @notice the creation block is intended to still be available after a keyset is deleted\n    function getKeysetCreationBlock(bytes32 ksHash) external view returns (uint256);\n\n    // ---------- BatchPoster functions ----------\n\n    function addSequencerL2BatchFromOrigin(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder\n    ) external;\n\n    function addSequencerL2Batch(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    ) external;\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /**\n     * @notice Set max delay for sequencer inbox\n     * @param maxTimeVariation_ the maximum time variation parameters\n     */\n    function setMaxTimeVariation(MaxTimeVariation memory maxTimeVariation_) external;\n\n    /**\n     * @notice Updates whether an address is authorized to be a batch poster at the sequencer inbox\n     * @param addr the address\n     * @param isBatchPoster_ if the specified address should be authorized as a batch poster\n     */\n    function setIsBatchPoster(address addr, bool isBatchPoster_) external;\n\n    /**\n     * @notice Makes Data Availability Service keyset valid\n     * @param keysetBytes bytes of the serialized keyset\n     */\n    function setValidKeyset(bytes calldata keysetBytes) external;\n\n    /**\n     * @notice Invalidates a Data Availability Service keyset\n     * @param ksHash hash of the keyset\n     */\n    function invalidateKeysetHash(bytes32 ksHash) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IBridge bridge_, MaxTimeVariation calldata maxTimeVariation_) external;\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ISequencerInbox.HEADER_LENGTH', 'start_line': 1956, 'end_line': 1956, 'offset_start': 70698, 'offset_end': 70754, 'content': 'function HEADER_LENGTH() external view returns (uint256);', 'contract_name': 'ISequencerInbox', 'contract_code': "{\n    struct MaxTimeVariation {\n        uint256 delayBlocks;\n        uint256 futureBlocks;\n        uint256 delaySeconds;\n        uint256 futureSeconds;\n    }\n\n    struct TimeBounds {\n        uint64 minTimestamp;\n        uint64 maxTimestamp;\n        uint64 minBlockNumber;\n        uint64 maxBlockNumber;\n    }\n\n    enum BatchDataLocation {\n        TxInput,\n        SeparateBatchEvent,\n        NoData\n    }\n\n    event SequencerBatchDelivered(\n        uint256 indexed batchSequenceNumber,\n        bytes32 indexed beforeAcc,\n        bytes32 indexed afterAcc,\n        bytes32 delayedAcc,\n        uint256 afterDelayedMessagesRead,\n        TimeBounds timeBounds,\n        BatchDataLocation dataLocation\n    );\n\n    event OwnerFunctionCalled(uint256 indexed id);\n\n    /// @dev a separate event that emits batch data when this isn't easily accessible in the tx.input\n    event SequencerBatchData(uint256 indexed batchSequenceNumber, bytes data);\n\n    /// @dev a valid keyset was added\n    event SetValidKeyset(bytes32 indexed keysetHash, bytes keysetBytes);\n\n    /// @dev a keyset was invalidated\n    event InvalidateKeyset(bytes32 indexed keysetHash);\n\n    function totalDelayedMessagesRead() external view returns (uint256);\n\n    function bridge() external view returns (IBridge);\n\n    /// @dev The size of the batch header\n    // solhint-disable-next-line func-name-mixedcase\n    function HEADER_LENGTH() external view returns (uint256);\n\n    /// @dev If the first batch data byte after the header has this bit set,\n    ///      the sequencer inbox has authenticated the data. Currently not used.\n    // solhint-disable-next-line func-name-mixedcase\n    function DATA_AUTHENTICATED_FLAG() external view returns (bytes1);\n\n    function rollup() external view returns (IOwnable);\n\n    function isBatchPoster(address) external view returns (bool);\n\n    struct DasKeySetInfo {\n        bool isValidKeyset;\n        uint64 creationBlock;\n    }\n\n    // https://github.com/ethereum/solidity/issues/11826\n    // function maxTimeVariation() external view returns (MaxTimeVariation calldata);\n    // function dasKeySetInfo(bytes32) external view returns (DasKeySetInfo calldata);\n\n    /// @notice Remove force inclusion delay after a L1 chainId fork\n    function removeDelayAfterFork() external;\n\n    /// @notice Force messages from the delayed inbox to be included in the chain\n    ///         Callable by any address, but message can only be force-included after maxTimeVariation.delayBlocks and\n    ///         maxTimeVariation.delaySeconds has elapsed. As part of normal behaviour the sequencer will include these\n    ///         messages so it's only necessary to call this if the sequencer is down, or not including any delayed messages.\n    /// @param _totalDelayedMessagesRead The total number of messages to read up to\n    /// @param kind The kind of the last message to be included\n    /// @param l1BlockAndTime The l1 block and the l1 timestamp of the last message to be included\n    /// @param baseFeeL1 The l1 gas price of the last message to be included\n    /// @param sender The sender of the last message to be included\n    /// @param messageDataHash The messageDataHash of the last message to be included\n    function forceInclusion(\n        uint256 _totalDelayedMessagesRead,\n        uint8 kind,\n        uint64[2] calldata l1BlockAndTime,\n        uint256 baseFeeL1,\n        address sender,\n        bytes32 messageDataHash\n    ) external;\n\n    function inboxAccs(uint256 index) external view returns (bytes32);\n\n    function batchCount() external view returns (uint256);\n\n    function isValidKeysetHash(bytes32 ksHash) external view returns (bool);\n\n    /// @notice the creation block is intended to still be available after a keyset is deleted\n    function getKeysetCreationBlock(bytes32 ksHash) external view returns (uint256);\n\n    // ---------- BatchPoster functions ----------\n\n    function addSequencerL2BatchFromOrigin(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder\n    ) external;\n\n    function addSequencerL2Batch(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    ) external;\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /**\n     * @notice Set max delay for sequencer inbox\n     * @param maxTimeVariation_ the maximum time variation parameters\n     */\n    function setMaxTimeVariation(MaxTimeVariation memory maxTimeVariation_) external;\n\n    /**\n     * @notice Updates whether an address is authorized to be a batch poster at the sequencer inbox\n     * @param addr the address\n     * @param isBatchPoster_ if the specified address should be authorized as a batch poster\n     */\n    function setIsBatchPoster(address addr, bool isBatchPoster_) external;\n\n    /**\n     * @notice Makes Data Availability Service keyset valid\n     * @param keysetBytes bytes of the serialized keyset\n     */\n    function setValidKeyset(bytes calldata keysetBytes) external;\n\n    /**\n     * @notice Invalidates a Data Availability Service keyset\n     * @param ksHash hash of the keyset\n     */\n    function invalidateKeysetHash(bytes32 ksHash) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IBridge bridge_, MaxTimeVariation calldata maxTimeVariation_) external;\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ISequencerInbox.DATA_AUTHENTICATED_FLAG', 'start_line': 1961, 'end_line': 1961, 'offset_start': 70972, 'offset_end': 71037, 'content': 'function DATA_AUTHENTICATED_FLAG() external view returns (bytes1);', 'contract_name': 'ISequencerInbox', 'contract_code': "{\n    struct MaxTimeVariation {\n        uint256 delayBlocks;\n        uint256 futureBlocks;\n        uint256 delaySeconds;\n        uint256 futureSeconds;\n    }\n\n    struct TimeBounds {\n        uint64 minTimestamp;\n        uint64 maxTimestamp;\n        uint64 minBlockNumber;\n        uint64 maxBlockNumber;\n    }\n\n    enum BatchDataLocation {\n        TxInput,\n        SeparateBatchEvent,\n        NoData\n    }\n\n    event SequencerBatchDelivered(\n        uint256 indexed batchSequenceNumber,\n        bytes32 indexed beforeAcc,\n        bytes32 indexed afterAcc,\n        bytes32 delayedAcc,\n        uint256 afterDelayedMessagesRead,\n        TimeBounds timeBounds,\n        BatchDataLocation dataLocation\n    );\n\n    event OwnerFunctionCalled(uint256 indexed id);\n\n    /// @dev a separate event that emits batch data when this isn't easily accessible in the tx.input\n    event SequencerBatchData(uint256 indexed batchSequenceNumber, bytes data);\n\n    /// @dev a valid keyset was added\n    event SetValidKeyset(bytes32 indexed keysetHash, bytes keysetBytes);\n\n    /// @dev a keyset was invalidated\n    event InvalidateKeyset(bytes32 indexed keysetHash);\n\n    function totalDelayedMessagesRead() external view returns (uint256);\n\n    function bridge() external view returns (IBridge);\n\n    /// @dev The size of the batch header\n    // solhint-disable-next-line func-name-mixedcase\n    function HEADER_LENGTH() external view returns (uint256);\n\n    /// @dev If the first batch data byte after the header has this bit set,\n    ///      the sequencer inbox has authenticated the data. Currently not used.\n    // solhint-disable-next-line func-name-mixedcase\n    function DATA_AUTHENTICATED_FLAG() external view returns (bytes1);\n\n    function rollup() external view returns (IOwnable);\n\n    function isBatchPoster(address) external view returns (bool);\n\n    struct DasKeySetInfo {\n        bool isValidKeyset;\n        uint64 creationBlock;\n    }\n\n    // https://github.com/ethereum/solidity/issues/11826\n    // function maxTimeVariation() external view returns (MaxTimeVariation calldata);\n    // function dasKeySetInfo(bytes32) external view returns (DasKeySetInfo calldata);\n\n    /// @notice Remove force inclusion delay after a L1 chainId fork\n    function removeDelayAfterFork() external;\n\n    /// @notice Force messages from the delayed inbox to be included in the chain\n    ///         Callable by any address, but message can only be force-included after maxTimeVariation.delayBlocks and\n    ///         maxTimeVariation.delaySeconds has elapsed. As part of normal behaviour the sequencer will include these\n    ///         messages so it's only necessary to call this if the sequencer is down, or not including any delayed messages.\n    /// @param _totalDelayedMessagesRead The total number of messages to read up to\n    /// @param kind The kind of the last message to be included\n    /// @param l1BlockAndTime The l1 block and the l1 timestamp of the last message to be included\n    /// @param baseFeeL1 The l1 gas price of the last message to be included\n    /// @param sender The sender of the last message to be included\n    /// @param messageDataHash The messageDataHash of the last message to be included\n    function forceInclusion(\n        uint256 _totalDelayedMessagesRead,\n        uint8 kind,\n        uint64[2] calldata l1BlockAndTime,\n        uint256 baseFeeL1,\n        address sender,\n        bytes32 messageDataHash\n    ) external;\n\n    function inboxAccs(uint256 index) external view returns (bytes32);\n\n    function batchCount() external view returns (uint256);\n\n    function isValidKeysetHash(bytes32 ksHash) external view returns (bool);\n\n    /// @notice the creation block is intended to still be available after a keyset is deleted\n    function getKeysetCreationBlock(bytes32 ksHash) external view returns (uint256);\n\n    // ---------- BatchPoster functions ----------\n\n    function addSequencerL2BatchFromOrigin(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder\n    ) external;\n\n    function addSequencerL2Batch(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    ) external;\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /**\n     * @notice Set max delay for sequencer inbox\n     * @param maxTimeVariation_ the maximum time variation parameters\n     */\n    function setMaxTimeVariation(MaxTimeVariation memory maxTimeVariation_) external;\n\n    /**\n     * @notice Updates whether an address is authorized to be a batch poster at the sequencer inbox\n     * @param addr the address\n     * @param isBatchPoster_ if the specified address should be authorized as a batch poster\n     */\n    function setIsBatchPoster(address addr, bool isBatchPoster_) external;\n\n    /**\n     * @notice Makes Data Availability Service keyset valid\n     * @param keysetBytes bytes of the serialized keyset\n     */\n    function setValidKeyset(bytes calldata keysetBytes) external;\n\n    /**\n     * @notice Invalidates a Data Availability Service keyset\n     * @param ksHash hash of the keyset\n     */\n    function invalidateKeysetHash(bytes32 ksHash) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IBridge bridge_, MaxTimeVariation calldata maxTimeVariation_) external;\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ISequencerInbox.rollup', 'start_line': 1963, 'end_line': 1963, 'offset_start': 71044, 'offset_end': 71094, 'content': 'function rollup() external view returns (IOwnable);', 'contract_name': 'ISequencerInbox', 'contract_code': "{\n    struct MaxTimeVariation {\n        uint256 delayBlocks;\n        uint256 futureBlocks;\n        uint256 delaySeconds;\n        uint256 futureSeconds;\n    }\n\n    struct TimeBounds {\n        uint64 minTimestamp;\n        uint64 maxTimestamp;\n        uint64 minBlockNumber;\n        uint64 maxBlockNumber;\n    }\n\n    enum BatchDataLocation {\n        TxInput,\n        SeparateBatchEvent,\n        NoData\n    }\n\n    event SequencerBatchDelivered(\n        uint256 indexed batchSequenceNumber,\n        bytes32 indexed beforeAcc,\n        bytes32 indexed afterAcc,\n        bytes32 delayedAcc,\n        uint256 afterDelayedMessagesRead,\n        TimeBounds timeBounds,\n        BatchDataLocation dataLocation\n    );\n\n    event OwnerFunctionCalled(uint256 indexed id);\n\n    /// @dev a separate event that emits batch data when this isn't easily accessible in the tx.input\n    event SequencerBatchData(uint256 indexed batchSequenceNumber, bytes data);\n\n    /// @dev a valid keyset was added\n    event SetValidKeyset(bytes32 indexed keysetHash, bytes keysetBytes);\n\n    /// @dev a keyset was invalidated\n    event InvalidateKeyset(bytes32 indexed keysetHash);\n\n    function totalDelayedMessagesRead() external view returns (uint256);\n\n    function bridge() external view returns (IBridge);\n\n    /// @dev The size of the batch header\n    // solhint-disable-next-line func-name-mixedcase\n    function HEADER_LENGTH() external view returns (uint256);\n\n    /// @dev If the first batch data byte after the header has this bit set,\n    ///      the sequencer inbox has authenticated the data. Currently not used.\n    // solhint-disable-next-line func-name-mixedcase\n    function DATA_AUTHENTICATED_FLAG() external view returns (bytes1);\n\n    function rollup() external view returns (IOwnable);\n\n    function isBatchPoster(address) external view returns (bool);\n\n    struct DasKeySetInfo {\n        bool isValidKeyset;\n        uint64 creationBlock;\n    }\n\n    // https://github.com/ethereum/solidity/issues/11826\n    // function maxTimeVariation() external view returns (MaxTimeVariation calldata);\n    // function dasKeySetInfo(bytes32) external view returns (DasKeySetInfo calldata);\n\n    /// @notice Remove force inclusion delay after a L1 chainId fork\n    function removeDelayAfterFork() external;\n\n    /// @notice Force messages from the delayed inbox to be included in the chain\n    ///         Callable by any address, but message can only be force-included after maxTimeVariation.delayBlocks and\n    ///         maxTimeVariation.delaySeconds has elapsed. As part of normal behaviour the sequencer will include these\n    ///         messages so it's only necessary to call this if the sequencer is down, or not including any delayed messages.\n    /// @param _totalDelayedMessagesRead The total number of messages to read up to\n    /// @param kind The kind of the last message to be included\n    /// @param l1BlockAndTime The l1 block and the l1 timestamp of the last message to be included\n    /// @param baseFeeL1 The l1 gas price of the last message to be included\n    /// @param sender The sender of the last message to be included\n    /// @param messageDataHash The messageDataHash of the last message to be included\n    function forceInclusion(\n        uint256 _totalDelayedMessagesRead,\n        uint8 kind,\n        uint64[2] calldata l1BlockAndTime,\n        uint256 baseFeeL1,\n        address sender,\n        bytes32 messageDataHash\n    ) external;\n\n    function inboxAccs(uint256 index) external view returns (bytes32);\n\n    function batchCount() external view returns (uint256);\n\n    function isValidKeysetHash(bytes32 ksHash) external view returns (bool);\n\n    /// @notice the creation block is intended to still be available after a keyset is deleted\n    function getKeysetCreationBlock(bytes32 ksHash) external view returns (uint256);\n\n    // ---------- BatchPoster functions ----------\n\n    function addSequencerL2BatchFromOrigin(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder\n    ) external;\n\n    function addSequencerL2Batch(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    ) external;\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /**\n     * @notice Set max delay for sequencer inbox\n     * @param maxTimeVariation_ the maximum time variation parameters\n     */\n    function setMaxTimeVariation(MaxTimeVariation memory maxTimeVariation_) external;\n\n    /**\n     * @notice Updates whether an address is authorized to be a batch poster at the sequencer inbox\n     * @param addr the address\n     * @param isBatchPoster_ if the specified address should be authorized as a batch poster\n     */\n    function setIsBatchPoster(address addr, bool isBatchPoster_) external;\n\n    /**\n     * @notice Makes Data Availability Service keyset valid\n     * @param keysetBytes bytes of the serialized keyset\n     */\n    function setValidKeyset(bytes calldata keysetBytes) external;\n\n    /**\n     * @notice Invalidates a Data Availability Service keyset\n     * @param ksHash hash of the keyset\n     */\n    function invalidateKeysetHash(bytes32 ksHash) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IBridge bridge_, MaxTimeVariation calldata maxTimeVariation_) external;\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ISequencerInbox.isBatchPoster', 'start_line': 1965, 'end_line': 1965, 'offset_start': 71101, 'offset_end': 71161, 'content': 'function isBatchPoster(address) external view returns (bool);', 'contract_name': 'ISequencerInbox', 'contract_code': "{\n    struct MaxTimeVariation {\n        uint256 delayBlocks;\n        uint256 futureBlocks;\n        uint256 delaySeconds;\n        uint256 futureSeconds;\n    }\n\n    struct TimeBounds {\n        uint64 minTimestamp;\n        uint64 maxTimestamp;\n        uint64 minBlockNumber;\n        uint64 maxBlockNumber;\n    }\n\n    enum BatchDataLocation {\n        TxInput,\n        SeparateBatchEvent,\n        NoData\n    }\n\n    event SequencerBatchDelivered(\n        uint256 indexed batchSequenceNumber,\n        bytes32 indexed beforeAcc,\n        bytes32 indexed afterAcc,\n        bytes32 delayedAcc,\n        uint256 afterDelayedMessagesRead,\n        TimeBounds timeBounds,\n        BatchDataLocation dataLocation\n    );\n\n    event OwnerFunctionCalled(uint256 indexed id);\n\n    /// @dev a separate event that emits batch data when this isn't easily accessible in the tx.input\n    event SequencerBatchData(uint256 indexed batchSequenceNumber, bytes data);\n\n    /// @dev a valid keyset was added\n    event SetValidKeyset(bytes32 indexed keysetHash, bytes keysetBytes);\n\n    /// @dev a keyset was invalidated\n    event InvalidateKeyset(bytes32 indexed keysetHash);\n\n    function totalDelayedMessagesRead() external view returns (uint256);\n\n    function bridge() external view returns (IBridge);\n\n    /// @dev The size of the batch header\n    // solhint-disable-next-line func-name-mixedcase\n    function HEADER_LENGTH() external view returns (uint256);\n\n    /// @dev If the first batch data byte after the header has this bit set,\n    ///      the sequencer inbox has authenticated the data. Currently not used.\n    // solhint-disable-next-line func-name-mixedcase\n    function DATA_AUTHENTICATED_FLAG() external view returns (bytes1);\n\n    function rollup() external view returns (IOwnable);\n\n    function isBatchPoster(address) external view returns (bool);\n\n    struct DasKeySetInfo {\n        bool isValidKeyset;\n        uint64 creationBlock;\n    }\n\n    // https://github.com/ethereum/solidity/issues/11826\n    // function maxTimeVariation() external view returns (MaxTimeVariation calldata);\n    // function dasKeySetInfo(bytes32) external view returns (DasKeySetInfo calldata);\n\n    /// @notice Remove force inclusion delay after a L1 chainId fork\n    function removeDelayAfterFork() external;\n\n    /// @notice Force messages from the delayed inbox to be included in the chain\n    ///         Callable by any address, but message can only be force-included after maxTimeVariation.delayBlocks and\n    ///         maxTimeVariation.delaySeconds has elapsed. As part of normal behaviour the sequencer will include these\n    ///         messages so it's only necessary to call this if the sequencer is down, or not including any delayed messages.\n    /// @param _totalDelayedMessagesRead The total number of messages to read up to\n    /// @param kind The kind of the last message to be included\n    /// @param l1BlockAndTime The l1 block and the l1 timestamp of the last message to be included\n    /// @param baseFeeL1 The l1 gas price of the last message to be included\n    /// @param sender The sender of the last message to be included\n    /// @param messageDataHash The messageDataHash of the last message to be included\n    function forceInclusion(\n        uint256 _totalDelayedMessagesRead,\n        uint8 kind,\n        uint64[2] calldata l1BlockAndTime,\n        uint256 baseFeeL1,\n        address sender,\n        bytes32 messageDataHash\n    ) external;\n\n    function inboxAccs(uint256 index) external view returns (bytes32);\n\n    function batchCount() external view returns (uint256);\n\n    function isValidKeysetHash(bytes32 ksHash) external view returns (bool);\n\n    /// @notice the creation block is intended to still be available after a keyset is deleted\n    function getKeysetCreationBlock(bytes32 ksHash) external view returns (uint256);\n\n    // ---------- BatchPoster functions ----------\n\n    function addSequencerL2BatchFromOrigin(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder\n    ) external;\n\n    function addSequencerL2Batch(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    ) external;\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /**\n     * @notice Set max delay for sequencer inbox\n     * @param maxTimeVariation_ the maximum time variation parameters\n     */\n    function setMaxTimeVariation(MaxTimeVariation memory maxTimeVariation_) external;\n\n    /**\n     * @notice Updates whether an address is authorized to be a batch poster at the sequencer inbox\n     * @param addr the address\n     * @param isBatchPoster_ if the specified address should be authorized as a batch poster\n     */\n    function setIsBatchPoster(address addr, bool isBatchPoster_) external;\n\n    /**\n     * @notice Makes Data Availability Service keyset valid\n     * @param keysetBytes bytes of the serialized keyset\n     */\n    function setValidKeyset(bytes calldata keysetBytes) external;\n\n    /**\n     * @notice Invalidates a Data Availability Service keyset\n     * @param ksHash hash of the keyset\n     */\n    function invalidateKeysetHash(bytes32 ksHash) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IBridge bridge_, MaxTimeVariation calldata maxTimeVariation_) external;\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ISequencerInbox.removeDelayAfterFork', 'start_line': 1977, 'end_line': 1977, 'offset_start': 71560, 'offset_end': 71600, 'content': 'function removeDelayAfterFork() external;', 'contract_name': 'ISequencerInbox', 'contract_code': "{\n    struct MaxTimeVariation {\n        uint256 delayBlocks;\n        uint256 futureBlocks;\n        uint256 delaySeconds;\n        uint256 futureSeconds;\n    }\n\n    struct TimeBounds {\n        uint64 minTimestamp;\n        uint64 maxTimestamp;\n        uint64 minBlockNumber;\n        uint64 maxBlockNumber;\n    }\n\n    enum BatchDataLocation {\n        TxInput,\n        SeparateBatchEvent,\n        NoData\n    }\n\n    event SequencerBatchDelivered(\n        uint256 indexed batchSequenceNumber,\n        bytes32 indexed beforeAcc,\n        bytes32 indexed afterAcc,\n        bytes32 delayedAcc,\n        uint256 afterDelayedMessagesRead,\n        TimeBounds timeBounds,\n        BatchDataLocation dataLocation\n    );\n\n    event OwnerFunctionCalled(uint256 indexed id);\n\n    /// @dev a separate event that emits batch data when this isn't easily accessible in the tx.input\n    event SequencerBatchData(uint256 indexed batchSequenceNumber, bytes data);\n\n    /// @dev a valid keyset was added\n    event SetValidKeyset(bytes32 indexed keysetHash, bytes keysetBytes);\n\n    /// @dev a keyset was invalidated\n    event InvalidateKeyset(bytes32 indexed keysetHash);\n\n    function totalDelayedMessagesRead() external view returns (uint256);\n\n    function bridge() external view returns (IBridge);\n\n    /// @dev The size of the batch header\n    // solhint-disable-next-line func-name-mixedcase\n    function HEADER_LENGTH() external view returns (uint256);\n\n    /// @dev If the first batch data byte after the header has this bit set,\n    ///      the sequencer inbox has authenticated the data. Currently not used.\n    // solhint-disable-next-line func-name-mixedcase\n    function DATA_AUTHENTICATED_FLAG() external view returns (bytes1);\n\n    function rollup() external view returns (IOwnable);\n\n    function isBatchPoster(address) external view returns (bool);\n\n    struct DasKeySetInfo {\n        bool isValidKeyset;\n        uint64 creationBlock;\n    }\n\n    // https://github.com/ethereum/solidity/issues/11826\n    // function maxTimeVariation() external view returns (MaxTimeVariation calldata);\n    // function dasKeySetInfo(bytes32) external view returns (DasKeySetInfo calldata);\n\n    /// @notice Remove force inclusion delay after a L1 chainId fork\n    function removeDelayAfterFork() external;\n\n    /// @notice Force messages from the delayed inbox to be included in the chain\n    ///         Callable by any address, but message can only be force-included after maxTimeVariation.delayBlocks and\n    ///         maxTimeVariation.delaySeconds has elapsed. As part of normal behaviour the sequencer will include these\n    ///         messages so it's only necessary to call this if the sequencer is down, or not including any delayed messages.\n    /// @param _totalDelayedMessagesRead The total number of messages to read up to\n    /// @param kind The kind of the last message to be included\n    /// @param l1BlockAndTime The l1 block and the l1 timestamp of the last message to be included\n    /// @param baseFeeL1 The l1 gas price of the last message to be included\n    /// @param sender The sender of the last message to be included\n    /// @param messageDataHash The messageDataHash of the last message to be included\n    function forceInclusion(\n        uint256 _totalDelayedMessagesRead,\n        uint8 kind,\n        uint64[2] calldata l1BlockAndTime,\n        uint256 baseFeeL1,\n        address sender,\n        bytes32 messageDataHash\n    ) external;\n\n    function inboxAccs(uint256 index) external view returns (bytes32);\n\n    function batchCount() external view returns (uint256);\n\n    function isValidKeysetHash(bytes32 ksHash) external view returns (bool);\n\n    /// @notice the creation block is intended to still be available after a keyset is deleted\n    function getKeysetCreationBlock(bytes32 ksHash) external view returns (uint256);\n\n    // ---------- BatchPoster functions ----------\n\n    function addSequencerL2BatchFromOrigin(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder\n    ) external;\n\n    function addSequencerL2Batch(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    ) external;\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /**\n     * @notice Set max delay for sequencer inbox\n     * @param maxTimeVariation_ the maximum time variation parameters\n     */\n    function setMaxTimeVariation(MaxTimeVariation memory maxTimeVariation_) external;\n\n    /**\n     * @notice Updates whether an address is authorized to be a batch poster at the sequencer inbox\n     * @param addr the address\n     * @param isBatchPoster_ if the specified address should be authorized as a batch poster\n     */\n    function setIsBatchPoster(address addr, bool isBatchPoster_) external;\n\n    /**\n     * @notice Makes Data Availability Service keyset valid\n     * @param keysetBytes bytes of the serialized keyset\n     */\n    function setValidKeyset(bytes calldata keysetBytes) external;\n\n    /**\n     * @notice Invalidates a Data Availability Service keyset\n     * @param ksHash hash of the keyset\n     */\n    function invalidateKeysetHash(bytes32 ksHash) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IBridge bridge_, MaxTimeVariation calldata maxTimeVariation_) external;\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ISequencerInbox.forceInclusion', 'start_line': 1989, 'end_line': 1996, 'offset_start': 72532, 'offset_end': 72760, 'content': 'function forceInclusion(\n        uint256 _totalDelayedMessagesRead,\n        uint8 kind,\n        uint64[2] calldata l1BlockAndTime,\n        uint256 baseFeeL1,\n        address sender,\n        bytes32 messageDataHash\n    ) external;', 'contract_name': 'ISequencerInbox', 'contract_code': "{\n    struct MaxTimeVariation {\n        uint256 delayBlocks;\n        uint256 futureBlocks;\n        uint256 delaySeconds;\n        uint256 futureSeconds;\n    }\n\n    struct TimeBounds {\n        uint64 minTimestamp;\n        uint64 maxTimestamp;\n        uint64 minBlockNumber;\n        uint64 maxBlockNumber;\n    }\n\n    enum BatchDataLocation {\n        TxInput,\n        SeparateBatchEvent,\n        NoData\n    }\n\n    event SequencerBatchDelivered(\n        uint256 indexed batchSequenceNumber,\n        bytes32 indexed beforeAcc,\n        bytes32 indexed afterAcc,\n        bytes32 delayedAcc,\n        uint256 afterDelayedMessagesRead,\n        TimeBounds timeBounds,\n        BatchDataLocation dataLocation\n    );\n\n    event OwnerFunctionCalled(uint256 indexed id);\n\n    /// @dev a separate event that emits batch data when this isn't easily accessible in the tx.input\n    event SequencerBatchData(uint256 indexed batchSequenceNumber, bytes data);\n\n    /// @dev a valid keyset was added\n    event SetValidKeyset(bytes32 indexed keysetHash, bytes keysetBytes);\n\n    /// @dev a keyset was invalidated\n    event InvalidateKeyset(bytes32 indexed keysetHash);\n\n    function totalDelayedMessagesRead() external view returns (uint256);\n\n    function bridge() external view returns (IBridge);\n\n    /// @dev The size of the batch header\n    // solhint-disable-next-line func-name-mixedcase\n    function HEADER_LENGTH() external view returns (uint256);\n\n    /// @dev If the first batch data byte after the header has this bit set,\n    ///      the sequencer inbox has authenticated the data. Currently not used.\n    // solhint-disable-next-line func-name-mixedcase\n    function DATA_AUTHENTICATED_FLAG() external view returns (bytes1);\n\n    function rollup() external view returns (IOwnable);\n\n    function isBatchPoster(address) external view returns (bool);\n\n    struct DasKeySetInfo {\n        bool isValidKeyset;\n        uint64 creationBlock;\n    }\n\n    // https://github.com/ethereum/solidity/issues/11826\n    // function maxTimeVariation() external view returns (MaxTimeVariation calldata);\n    // function dasKeySetInfo(bytes32) external view returns (DasKeySetInfo calldata);\n\n    /// @notice Remove force inclusion delay after a L1 chainId fork\n    function removeDelayAfterFork() external;\n\n    /// @notice Force messages from the delayed inbox to be included in the chain\n    ///         Callable by any address, but message can only be force-included after maxTimeVariation.delayBlocks and\n    ///         maxTimeVariation.delaySeconds has elapsed. As part of normal behaviour the sequencer will include these\n    ///         messages so it's only necessary to call this if the sequencer is down, or not including any delayed messages.\n    /// @param _totalDelayedMessagesRead The total number of messages to read up to\n    /// @param kind The kind of the last message to be included\n    /// @param l1BlockAndTime The l1 block and the l1 timestamp of the last message to be included\n    /// @param baseFeeL1 The l1 gas price of the last message to be included\n    /// @param sender The sender of the last message to be included\n    /// @param messageDataHash The messageDataHash of the last message to be included\n    function forceInclusion(\n        uint256 _totalDelayedMessagesRead,\n        uint8 kind,\n        uint64[2] calldata l1BlockAndTime,\n        uint256 baseFeeL1,\n        address sender,\n        bytes32 messageDataHash\n    ) external;\n\n    function inboxAccs(uint256 index) external view returns (bytes32);\n\n    function batchCount() external view returns (uint256);\n\n    function isValidKeysetHash(bytes32 ksHash) external view returns (bool);\n\n    /// @notice the creation block is intended to still be available after a keyset is deleted\n    function getKeysetCreationBlock(bytes32 ksHash) external view returns (uint256);\n\n    // ---------- BatchPoster functions ----------\n\n    function addSequencerL2BatchFromOrigin(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder\n    ) external;\n\n    function addSequencerL2Batch(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    ) external;\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /**\n     * @notice Set max delay for sequencer inbox\n     * @param maxTimeVariation_ the maximum time variation parameters\n     */\n    function setMaxTimeVariation(MaxTimeVariation memory maxTimeVariation_) external;\n\n    /**\n     * @notice Updates whether an address is authorized to be a batch poster at the sequencer inbox\n     * @param addr the address\n     * @param isBatchPoster_ if the specified address should be authorized as a batch poster\n     */\n    function setIsBatchPoster(address addr, bool isBatchPoster_) external;\n\n    /**\n     * @notice Makes Data Availability Service keyset valid\n     * @param keysetBytes bytes of the serialized keyset\n     */\n    function setValidKeyset(bytes calldata keysetBytes) external;\n\n    /**\n     * @notice Invalidates a Data Availability Service keyset\n     * @param ksHash hash of the keyset\n     */\n    function invalidateKeysetHash(bytes32 ksHash) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IBridge bridge_, MaxTimeVariation calldata maxTimeVariation_) external;\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ISequencerInbox.inboxAccs', 'start_line': 1998, 'end_line': 1998, 'offset_start': 72767, 'offset_end': 72832, 'content': 'function inboxAccs(uint256 index) external view returns (bytes32);', 'contract_name': 'ISequencerInbox', 'contract_code': "{\n    struct MaxTimeVariation {\n        uint256 delayBlocks;\n        uint256 futureBlocks;\n        uint256 delaySeconds;\n        uint256 futureSeconds;\n    }\n\n    struct TimeBounds {\n        uint64 minTimestamp;\n        uint64 maxTimestamp;\n        uint64 minBlockNumber;\n        uint64 maxBlockNumber;\n    }\n\n    enum BatchDataLocation {\n        TxInput,\n        SeparateBatchEvent,\n        NoData\n    }\n\n    event SequencerBatchDelivered(\n        uint256 indexed batchSequenceNumber,\n        bytes32 indexed beforeAcc,\n        bytes32 indexed afterAcc,\n        bytes32 delayedAcc,\n        uint256 afterDelayedMessagesRead,\n        TimeBounds timeBounds,\n        BatchDataLocation dataLocation\n    );\n\n    event OwnerFunctionCalled(uint256 indexed id);\n\n    /// @dev a separate event that emits batch data when this isn't easily accessible in the tx.input\n    event SequencerBatchData(uint256 indexed batchSequenceNumber, bytes data);\n\n    /// @dev a valid keyset was added\n    event SetValidKeyset(bytes32 indexed keysetHash, bytes keysetBytes);\n\n    /// @dev a keyset was invalidated\n    event InvalidateKeyset(bytes32 indexed keysetHash);\n\n    function totalDelayedMessagesRead() external view returns (uint256);\n\n    function bridge() external view returns (IBridge);\n\n    /// @dev The size of the batch header\n    // solhint-disable-next-line func-name-mixedcase\n    function HEADER_LENGTH() external view returns (uint256);\n\n    /// @dev If the first batch data byte after the header has this bit set,\n    ///      the sequencer inbox has authenticated the data. Currently not used.\n    // solhint-disable-next-line func-name-mixedcase\n    function DATA_AUTHENTICATED_FLAG() external view returns (bytes1);\n\n    function rollup() external view returns (IOwnable);\n\n    function isBatchPoster(address) external view returns (bool);\n\n    struct DasKeySetInfo {\n        bool isValidKeyset;\n        uint64 creationBlock;\n    }\n\n    // https://github.com/ethereum/solidity/issues/11826\n    // function maxTimeVariation() external view returns (MaxTimeVariation calldata);\n    // function dasKeySetInfo(bytes32) external view returns (DasKeySetInfo calldata);\n\n    /// @notice Remove force inclusion delay after a L1 chainId fork\n    function removeDelayAfterFork() external;\n\n    /// @notice Force messages from the delayed inbox to be included in the chain\n    ///         Callable by any address, but message can only be force-included after maxTimeVariation.delayBlocks and\n    ///         maxTimeVariation.delaySeconds has elapsed. As part of normal behaviour the sequencer will include these\n    ///         messages so it's only necessary to call this if the sequencer is down, or not including any delayed messages.\n    /// @param _totalDelayedMessagesRead The total number of messages to read up to\n    /// @param kind The kind of the last message to be included\n    /// @param l1BlockAndTime The l1 block and the l1 timestamp of the last message to be included\n    /// @param baseFeeL1 The l1 gas price of the last message to be included\n    /// @param sender The sender of the last message to be included\n    /// @param messageDataHash The messageDataHash of the last message to be included\n    function forceInclusion(\n        uint256 _totalDelayedMessagesRead,\n        uint8 kind,\n        uint64[2] calldata l1BlockAndTime,\n        uint256 baseFeeL1,\n        address sender,\n        bytes32 messageDataHash\n    ) external;\n\n    function inboxAccs(uint256 index) external view returns (bytes32);\n\n    function batchCount() external view returns (uint256);\n\n    function isValidKeysetHash(bytes32 ksHash) external view returns (bool);\n\n    /// @notice the creation block is intended to still be available after a keyset is deleted\n    function getKeysetCreationBlock(bytes32 ksHash) external view returns (uint256);\n\n    // ---------- BatchPoster functions ----------\n\n    function addSequencerL2BatchFromOrigin(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder\n    ) external;\n\n    function addSequencerL2Batch(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    ) external;\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /**\n     * @notice Set max delay for sequencer inbox\n     * @param maxTimeVariation_ the maximum time variation parameters\n     */\n    function setMaxTimeVariation(MaxTimeVariation memory maxTimeVariation_) external;\n\n    /**\n     * @notice Updates whether an address is authorized to be a batch poster at the sequencer inbox\n     * @param addr the address\n     * @param isBatchPoster_ if the specified address should be authorized as a batch poster\n     */\n    function setIsBatchPoster(address addr, bool isBatchPoster_) external;\n\n    /**\n     * @notice Makes Data Availability Service keyset valid\n     * @param keysetBytes bytes of the serialized keyset\n     */\n    function setValidKeyset(bytes calldata keysetBytes) external;\n\n    /**\n     * @notice Invalidates a Data Availability Service keyset\n     * @param ksHash hash of the keyset\n     */\n    function invalidateKeysetHash(bytes32 ksHash) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IBridge bridge_, MaxTimeVariation calldata maxTimeVariation_) external;\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ISequencerInbox.batchCount', 'start_line': 2000, 'end_line': 2000, 'offset_start': 72839, 'offset_end': 72892, 'content': 'function batchCount() external view returns (uint256);', 'contract_name': 'ISequencerInbox', 'contract_code': "{\n    struct MaxTimeVariation {\n        uint256 delayBlocks;\n        uint256 futureBlocks;\n        uint256 delaySeconds;\n        uint256 futureSeconds;\n    }\n\n    struct TimeBounds {\n        uint64 minTimestamp;\n        uint64 maxTimestamp;\n        uint64 minBlockNumber;\n        uint64 maxBlockNumber;\n    }\n\n    enum BatchDataLocation {\n        TxInput,\n        SeparateBatchEvent,\n        NoData\n    }\n\n    event SequencerBatchDelivered(\n        uint256 indexed batchSequenceNumber,\n        bytes32 indexed beforeAcc,\n        bytes32 indexed afterAcc,\n        bytes32 delayedAcc,\n        uint256 afterDelayedMessagesRead,\n        TimeBounds timeBounds,\n        BatchDataLocation dataLocation\n    );\n\n    event OwnerFunctionCalled(uint256 indexed id);\n\n    /// @dev a separate event that emits batch data when this isn't easily accessible in the tx.input\n    event SequencerBatchData(uint256 indexed batchSequenceNumber, bytes data);\n\n    /// @dev a valid keyset was added\n    event SetValidKeyset(bytes32 indexed keysetHash, bytes keysetBytes);\n\n    /// @dev a keyset was invalidated\n    event InvalidateKeyset(bytes32 indexed keysetHash);\n\n    function totalDelayedMessagesRead() external view returns (uint256);\n\n    function bridge() external view returns (IBridge);\n\n    /// @dev The size of the batch header\n    // solhint-disable-next-line func-name-mixedcase\n    function HEADER_LENGTH() external view returns (uint256);\n\n    /// @dev If the first batch data byte after the header has this bit set,\n    ///      the sequencer inbox has authenticated the data. Currently not used.\n    // solhint-disable-next-line func-name-mixedcase\n    function DATA_AUTHENTICATED_FLAG() external view returns (bytes1);\n\n    function rollup() external view returns (IOwnable);\n\n    function isBatchPoster(address) external view returns (bool);\n\n    struct DasKeySetInfo {\n        bool isValidKeyset;\n        uint64 creationBlock;\n    }\n\n    // https://github.com/ethereum/solidity/issues/11826\n    // function maxTimeVariation() external view returns (MaxTimeVariation calldata);\n    // function dasKeySetInfo(bytes32) external view returns (DasKeySetInfo calldata);\n\n    /// @notice Remove force inclusion delay after a L1 chainId fork\n    function removeDelayAfterFork() external;\n\n    /// @notice Force messages from the delayed inbox to be included in the chain\n    ///         Callable by any address, but message can only be force-included after maxTimeVariation.delayBlocks and\n    ///         maxTimeVariation.delaySeconds has elapsed. As part of normal behaviour the sequencer will include these\n    ///         messages so it's only necessary to call this if the sequencer is down, or not including any delayed messages.\n    /// @param _totalDelayedMessagesRead The total number of messages to read up to\n    /// @param kind The kind of the last message to be included\n    /// @param l1BlockAndTime The l1 block and the l1 timestamp of the last message to be included\n    /// @param baseFeeL1 The l1 gas price of the last message to be included\n    /// @param sender The sender of the last message to be included\n    /// @param messageDataHash The messageDataHash of the last message to be included\n    function forceInclusion(\n        uint256 _totalDelayedMessagesRead,\n        uint8 kind,\n        uint64[2] calldata l1BlockAndTime,\n        uint256 baseFeeL1,\n        address sender,\n        bytes32 messageDataHash\n    ) external;\n\n    function inboxAccs(uint256 index) external view returns (bytes32);\n\n    function batchCount() external view returns (uint256);\n\n    function isValidKeysetHash(bytes32 ksHash) external view returns (bool);\n\n    /// @notice the creation block is intended to still be available after a keyset is deleted\n    function getKeysetCreationBlock(bytes32 ksHash) external view returns (uint256);\n\n    // ---------- BatchPoster functions ----------\n\n    function addSequencerL2BatchFromOrigin(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder\n    ) external;\n\n    function addSequencerL2Batch(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    ) external;\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /**\n     * @notice Set max delay for sequencer inbox\n     * @param maxTimeVariation_ the maximum time variation parameters\n     */\n    function setMaxTimeVariation(MaxTimeVariation memory maxTimeVariation_) external;\n\n    /**\n     * @notice Updates whether an address is authorized to be a batch poster at the sequencer inbox\n     * @param addr the address\n     * @param isBatchPoster_ if the specified address should be authorized as a batch poster\n     */\n    function setIsBatchPoster(address addr, bool isBatchPoster_) external;\n\n    /**\n     * @notice Makes Data Availability Service keyset valid\n     * @param keysetBytes bytes of the serialized keyset\n     */\n    function setValidKeyset(bytes calldata keysetBytes) external;\n\n    /**\n     * @notice Invalidates a Data Availability Service keyset\n     * @param ksHash hash of the keyset\n     */\n    function invalidateKeysetHash(bytes32 ksHash) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IBridge bridge_, MaxTimeVariation calldata maxTimeVariation_) external;\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ISequencerInbox.isValidKeysetHash', 'start_line': 2002, 'end_line': 2002, 'offset_start': 72899, 'offset_end': 72970, 'content': 'function isValidKeysetHash(bytes32 ksHash) external view returns (bool);', 'contract_name': 'ISequencerInbox', 'contract_code': "{\n    struct MaxTimeVariation {\n        uint256 delayBlocks;\n        uint256 futureBlocks;\n        uint256 delaySeconds;\n        uint256 futureSeconds;\n    }\n\n    struct TimeBounds {\n        uint64 minTimestamp;\n        uint64 maxTimestamp;\n        uint64 minBlockNumber;\n        uint64 maxBlockNumber;\n    }\n\n    enum BatchDataLocation {\n        TxInput,\n        SeparateBatchEvent,\n        NoData\n    }\n\n    event SequencerBatchDelivered(\n        uint256 indexed batchSequenceNumber,\n        bytes32 indexed beforeAcc,\n        bytes32 indexed afterAcc,\n        bytes32 delayedAcc,\n        uint256 afterDelayedMessagesRead,\n        TimeBounds timeBounds,\n        BatchDataLocation dataLocation\n    );\n\n    event OwnerFunctionCalled(uint256 indexed id);\n\n    /// @dev a separate event that emits batch data when this isn't easily accessible in the tx.input\n    event SequencerBatchData(uint256 indexed batchSequenceNumber, bytes data);\n\n    /// @dev a valid keyset was added\n    event SetValidKeyset(bytes32 indexed keysetHash, bytes keysetBytes);\n\n    /// @dev a keyset was invalidated\n    event InvalidateKeyset(bytes32 indexed keysetHash);\n\n    function totalDelayedMessagesRead() external view returns (uint256);\n\n    function bridge() external view returns (IBridge);\n\n    /// @dev The size of the batch header\n    // solhint-disable-next-line func-name-mixedcase\n    function HEADER_LENGTH() external view returns (uint256);\n\n    /// @dev If the first batch data byte after the header has this bit set,\n    ///      the sequencer inbox has authenticated the data. Currently not used.\n    // solhint-disable-next-line func-name-mixedcase\n    function DATA_AUTHENTICATED_FLAG() external view returns (bytes1);\n\n    function rollup() external view returns (IOwnable);\n\n    function isBatchPoster(address) external view returns (bool);\n\n    struct DasKeySetInfo {\n        bool isValidKeyset;\n        uint64 creationBlock;\n    }\n\n    // https://github.com/ethereum/solidity/issues/11826\n    // function maxTimeVariation() external view returns (MaxTimeVariation calldata);\n    // function dasKeySetInfo(bytes32) external view returns (DasKeySetInfo calldata);\n\n    /// @notice Remove force inclusion delay after a L1 chainId fork\n    function removeDelayAfterFork() external;\n\n    /// @notice Force messages from the delayed inbox to be included in the chain\n    ///         Callable by any address, but message can only be force-included after maxTimeVariation.delayBlocks and\n    ///         maxTimeVariation.delaySeconds has elapsed. As part of normal behaviour the sequencer will include these\n    ///         messages so it's only necessary to call this if the sequencer is down, or not including any delayed messages.\n    /// @param _totalDelayedMessagesRead The total number of messages to read up to\n    /// @param kind The kind of the last message to be included\n    /// @param l1BlockAndTime The l1 block and the l1 timestamp of the last message to be included\n    /// @param baseFeeL1 The l1 gas price of the last message to be included\n    /// @param sender The sender of the last message to be included\n    /// @param messageDataHash The messageDataHash of the last message to be included\n    function forceInclusion(\n        uint256 _totalDelayedMessagesRead,\n        uint8 kind,\n        uint64[2] calldata l1BlockAndTime,\n        uint256 baseFeeL1,\n        address sender,\n        bytes32 messageDataHash\n    ) external;\n\n    function inboxAccs(uint256 index) external view returns (bytes32);\n\n    function batchCount() external view returns (uint256);\n\n    function isValidKeysetHash(bytes32 ksHash) external view returns (bool);\n\n    /// @notice the creation block is intended to still be available after a keyset is deleted\n    function getKeysetCreationBlock(bytes32 ksHash) external view returns (uint256);\n\n    // ---------- BatchPoster functions ----------\n\n    function addSequencerL2BatchFromOrigin(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder\n    ) external;\n\n    function addSequencerL2Batch(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    ) external;\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /**\n     * @notice Set max delay for sequencer inbox\n     * @param maxTimeVariation_ the maximum time variation parameters\n     */\n    function setMaxTimeVariation(MaxTimeVariation memory maxTimeVariation_) external;\n\n    /**\n     * @notice Updates whether an address is authorized to be a batch poster at the sequencer inbox\n     * @param addr the address\n     * @param isBatchPoster_ if the specified address should be authorized as a batch poster\n     */\n    function setIsBatchPoster(address addr, bool isBatchPoster_) external;\n\n    /**\n     * @notice Makes Data Availability Service keyset valid\n     * @param keysetBytes bytes of the serialized keyset\n     */\n    function setValidKeyset(bytes calldata keysetBytes) external;\n\n    /**\n     * @notice Invalidates a Data Availability Service keyset\n     * @param ksHash hash of the keyset\n     */\n    function invalidateKeysetHash(bytes32 ksHash) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IBridge bridge_, MaxTimeVariation calldata maxTimeVariation_) external;\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ISequencerInbox.getKeysetCreationBlock', 'start_line': 2005, 'end_line': 2005, 'offset_start': 73072, 'offset_end': 73151, 'content': 'function getKeysetCreationBlock(bytes32 ksHash) external view returns (uint256);', 'contract_name': 'ISequencerInbox', 'contract_code': "{\n    struct MaxTimeVariation {\n        uint256 delayBlocks;\n        uint256 futureBlocks;\n        uint256 delaySeconds;\n        uint256 futureSeconds;\n    }\n\n    struct TimeBounds {\n        uint64 minTimestamp;\n        uint64 maxTimestamp;\n        uint64 minBlockNumber;\n        uint64 maxBlockNumber;\n    }\n\n    enum BatchDataLocation {\n        TxInput,\n        SeparateBatchEvent,\n        NoData\n    }\n\n    event SequencerBatchDelivered(\n        uint256 indexed batchSequenceNumber,\n        bytes32 indexed beforeAcc,\n        bytes32 indexed afterAcc,\n        bytes32 delayedAcc,\n        uint256 afterDelayedMessagesRead,\n        TimeBounds timeBounds,\n        BatchDataLocation dataLocation\n    );\n\n    event OwnerFunctionCalled(uint256 indexed id);\n\n    /// @dev a separate event that emits batch data when this isn't easily accessible in the tx.input\n    event SequencerBatchData(uint256 indexed batchSequenceNumber, bytes data);\n\n    /// @dev a valid keyset was added\n    event SetValidKeyset(bytes32 indexed keysetHash, bytes keysetBytes);\n\n    /// @dev a keyset was invalidated\n    event InvalidateKeyset(bytes32 indexed keysetHash);\n\n    function totalDelayedMessagesRead() external view returns (uint256);\n\n    function bridge() external view returns (IBridge);\n\n    /// @dev The size of the batch header\n    // solhint-disable-next-line func-name-mixedcase\n    function HEADER_LENGTH() external view returns (uint256);\n\n    /// @dev If the first batch data byte after the header has this bit set,\n    ///      the sequencer inbox has authenticated the data. Currently not used.\n    // solhint-disable-next-line func-name-mixedcase\n    function DATA_AUTHENTICATED_FLAG() external view returns (bytes1);\n\n    function rollup() external view returns (IOwnable);\n\n    function isBatchPoster(address) external view returns (bool);\n\n    struct DasKeySetInfo {\n        bool isValidKeyset;\n        uint64 creationBlock;\n    }\n\n    // https://github.com/ethereum/solidity/issues/11826\n    // function maxTimeVariation() external view returns (MaxTimeVariation calldata);\n    // function dasKeySetInfo(bytes32) external view returns (DasKeySetInfo calldata);\n\n    /// @notice Remove force inclusion delay after a L1 chainId fork\n    function removeDelayAfterFork() external;\n\n    /// @notice Force messages from the delayed inbox to be included in the chain\n    ///         Callable by any address, but message can only be force-included after maxTimeVariation.delayBlocks and\n    ///         maxTimeVariation.delaySeconds has elapsed. As part of normal behaviour the sequencer will include these\n    ///         messages so it's only necessary to call this if the sequencer is down, or not including any delayed messages.\n    /// @param _totalDelayedMessagesRead The total number of messages to read up to\n    /// @param kind The kind of the last message to be included\n    /// @param l1BlockAndTime The l1 block and the l1 timestamp of the last message to be included\n    /// @param baseFeeL1 The l1 gas price of the last message to be included\n    /// @param sender The sender of the last message to be included\n    /// @param messageDataHash The messageDataHash of the last message to be included\n    function forceInclusion(\n        uint256 _totalDelayedMessagesRead,\n        uint8 kind,\n        uint64[2] calldata l1BlockAndTime,\n        uint256 baseFeeL1,\n        address sender,\n        bytes32 messageDataHash\n    ) external;\n\n    function inboxAccs(uint256 index) external view returns (bytes32);\n\n    function batchCount() external view returns (uint256);\n\n    function isValidKeysetHash(bytes32 ksHash) external view returns (bool);\n\n    /// @notice the creation block is intended to still be available after a keyset is deleted\n    function getKeysetCreationBlock(bytes32 ksHash) external view returns (uint256);\n\n    // ---------- BatchPoster functions ----------\n\n    function addSequencerL2BatchFromOrigin(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder\n    ) external;\n\n    function addSequencerL2Batch(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    ) external;\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /**\n     * @notice Set max delay for sequencer inbox\n     * @param maxTimeVariation_ the maximum time variation parameters\n     */\n    function setMaxTimeVariation(MaxTimeVariation memory maxTimeVariation_) external;\n\n    /**\n     * @notice Updates whether an address is authorized to be a batch poster at the sequencer inbox\n     * @param addr the address\n     * @param isBatchPoster_ if the specified address should be authorized as a batch poster\n     */\n    function setIsBatchPoster(address addr, bool isBatchPoster_) external;\n\n    /**\n     * @notice Makes Data Availability Service keyset valid\n     * @param keysetBytes bytes of the serialized keyset\n     */\n    function setValidKeyset(bytes calldata keysetBytes) external;\n\n    /**\n     * @notice Invalidates a Data Availability Service keyset\n     * @param ksHash hash of the keyset\n     */\n    function invalidateKeysetHash(bytes32 ksHash) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IBridge bridge_, MaxTimeVariation calldata maxTimeVariation_) external;\n}", 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ISequencerInbox.addSequencerL2BatchFromOrigin', 'start_line': 2009, 'end_line': 2014, 'offset_start': 73210, 'offset_end': 73400, 'content': 'function addSequencerL2BatchFromOrigin(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder\n    ) external;', 'contract_name': 'ISequencerInbox', 'contract_code': "{\n    struct MaxTimeVariation {\n        uint256 delayBlocks;\n        uint256 futureBlocks;\n        uint256 delaySeconds;\n        uint256 futureSeconds;\n    }\n\n    struct TimeBounds {\n        uint64 minTimestamp;\n        uint64 maxTimestamp;\n        uint64 minBlockNumber;\n        uint64 maxBlockNumber;\n    }\n\n    enum BatchDataLocation {\n        TxInput,\n        SeparateBatchEvent,\n        NoData\n    }\n\n    event SequencerBatchDelivered(\n        uint256 indexed batchSequenceNumber,\n        bytes32 indexed beforeAcc,\n        bytes32 indexed afterAcc,\n        bytes32 delayedAcc,\n        uint256 afterDelayedMessagesRead,\n        TimeBounds timeBounds,\n        BatchDataLocation dataLocation\n    );\n\n    event OwnerFunctionCalled(uint256 indexed id);\n\n    /// @dev a separate event that emits batch data when this isn't easily accessible in the tx.input\n    event SequencerBatchData(uint256 indexed batchSequenceNumber, bytes data);\n\n    /// @dev a valid keyset was added\n    event SetValidKeyset(bytes32 indexed keysetHash, bytes keysetBytes);\n\n    /// @dev a keyset was invalidated\n    event InvalidateKeyset(bytes32 indexed keysetHash);\n\n    function totalDelayedMessagesRead() external view returns (uint256);\n\n    function bridge() external view returns (IBridge);\n\n    /// @dev The size of the batch header\n    // solhint-disable-next-line func-name-mixedcase\n    function HEADER_LENGTH() external view returns (uint256);\n\n    /// @dev If the first batch data byte after the header has this bit set,\n    ///      the sequencer inbox has authenticated the data. Currently not used.\n    // solhint-disable-next-line func-name-mixedcase\n    function DATA_AUTHENTICATED_FLAG() external view returns (bytes1);\n\n    function rollup() external view returns (IOwnable);\n\n    function isBatchPoster(address) external view returns (bool);\n\n    struct DasKeySetInfo {\n        bool isValidKeyset;\n        uint64 creationBlock;\n    }\n\n    // https://github.com/ethereum/solidity/issues/11826\n    // function maxTimeVariation() external view returns (MaxTimeVariation calldata);\n    // function dasKeySetInfo(bytes32) external view returns (DasKeySetInfo calldata);\n\n    /// @notice Remove force inclusion delay after a L1 chainId fork\n    function removeDelayAfterFork() external;\n\n    /// @notice Force messages from the delayed inbox to be included in the chain\n    ///         Callable by any address, but message can only be force-included after maxTimeVariation.delayBlocks and\n    ///         maxTimeVariation.delaySeconds has elapsed. As part of normal behaviour the sequencer will include these\n    ///         messages so it's only necessary to call this if the sequencer is down, or not including any delayed messages.\n    /// @param _totalDelayedMessagesRead The total number of messages to read up to\n    /// @param kind The kind of the last message to be included\n    /// @param l1BlockAndTime The l1 block and the l1 timestamp of the last message to be included\n    /// @param baseFeeL1 The l1 gas price of the last message to be included\n    /// @param sender The sender of the last message to be included\n    /// @param messageDataHash The messageDataHash of the last message to be included\n    function forceInclusion(\n        uint256 _totalDelayedMessagesRead,\n        uint8 kind,\n        uint64[2] calldata l1BlockAndTime,\n        uint256 baseFeeL1,\n        address sender,\n        bytes32 messageDataHash\n    ) external;\n\n    function inboxAccs(uint256 index) external view returns (bytes32);\n\n    function batchCount() external view returns (uint256);\n\n    function isValidKeysetHash(bytes32 ksHash) external view returns (bool);\n\n    /// @notice the creation block is intended to still be available after a keyset is deleted\n    function getKeysetCreationBlock(bytes32 ksHash) external view returns (uint256);\n\n    // ---------- BatchPoster functions ----------\n\n    function addSequencerL2BatchFromOrigin(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder\n    ) external;\n\n    function addSequencerL2Batch(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    ) external;\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /**\n     * @notice Set max delay for sequencer inbox\n     * @param maxTimeVariation_ the maximum time variation parameters\n     */\n    function setMaxTimeVariation(MaxTimeVariation memory maxTimeVariation_) external;\n\n    /**\n     * @notice Updates whether an address is authorized to be a batch poster at the sequencer inbox\n     * @param addr the address\n     * @param isBatchPoster_ if the specified address should be authorized as a batch poster\n     */\n    function setIsBatchPoster(address addr, bool isBatchPoster_) external;\n\n    /**\n     * @notice Makes Data Availability Service keyset valid\n     * @param keysetBytes bytes of the serialized keyset\n     */\n    function setValidKeyset(bytes calldata keysetBytes) external;\n\n    /**\n     * @notice Invalidates a Data Availability Service keyset\n     * @param ksHash hash of the keyset\n     */\n    function invalidateKeysetHash(bytes32 ksHash) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IBridge bridge_, MaxTimeVariation calldata maxTimeVariation_) external;\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ISequencerInbox.addSequencerL2Batch', 'start_line': 2016, 'end_line': 2023, 'offset_start': 73407, 'offset_end': 73654, 'content': 'function addSequencerL2Batch(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    ) external;', 'contract_name': 'ISequencerInbox', 'contract_code': "{\n    struct MaxTimeVariation {\n        uint256 delayBlocks;\n        uint256 futureBlocks;\n        uint256 delaySeconds;\n        uint256 futureSeconds;\n    }\n\n    struct TimeBounds {\n        uint64 minTimestamp;\n        uint64 maxTimestamp;\n        uint64 minBlockNumber;\n        uint64 maxBlockNumber;\n    }\n\n    enum BatchDataLocation {\n        TxInput,\n        SeparateBatchEvent,\n        NoData\n    }\n\n    event SequencerBatchDelivered(\n        uint256 indexed batchSequenceNumber,\n        bytes32 indexed beforeAcc,\n        bytes32 indexed afterAcc,\n        bytes32 delayedAcc,\n        uint256 afterDelayedMessagesRead,\n        TimeBounds timeBounds,\n        BatchDataLocation dataLocation\n    );\n\n    event OwnerFunctionCalled(uint256 indexed id);\n\n    /// @dev a separate event that emits batch data when this isn't easily accessible in the tx.input\n    event SequencerBatchData(uint256 indexed batchSequenceNumber, bytes data);\n\n    /// @dev a valid keyset was added\n    event SetValidKeyset(bytes32 indexed keysetHash, bytes keysetBytes);\n\n    /// @dev a keyset was invalidated\n    event InvalidateKeyset(bytes32 indexed keysetHash);\n\n    function totalDelayedMessagesRead() external view returns (uint256);\n\n    function bridge() external view returns (IBridge);\n\n    /// @dev The size of the batch header\n    // solhint-disable-next-line func-name-mixedcase\n    function HEADER_LENGTH() external view returns (uint256);\n\n    /// @dev If the first batch data byte after the header has this bit set,\n    ///      the sequencer inbox has authenticated the data. Currently not used.\n    // solhint-disable-next-line func-name-mixedcase\n    function DATA_AUTHENTICATED_FLAG() external view returns (bytes1);\n\n    function rollup() external view returns (IOwnable);\n\n    function isBatchPoster(address) external view returns (bool);\n\n    struct DasKeySetInfo {\n        bool isValidKeyset;\n        uint64 creationBlock;\n    }\n\n    // https://github.com/ethereum/solidity/issues/11826\n    // function maxTimeVariation() external view returns (MaxTimeVariation calldata);\n    // function dasKeySetInfo(bytes32) external view returns (DasKeySetInfo calldata);\n\n    /// @notice Remove force inclusion delay after a L1 chainId fork\n    function removeDelayAfterFork() external;\n\n    /// @notice Force messages from the delayed inbox to be included in the chain\n    ///         Callable by any address, but message can only be force-included after maxTimeVariation.delayBlocks and\n    ///         maxTimeVariation.delaySeconds has elapsed. As part of normal behaviour the sequencer will include these\n    ///         messages so it's only necessary to call this if the sequencer is down, or not including any delayed messages.\n    /// @param _totalDelayedMessagesRead The total number of messages to read up to\n    /// @param kind The kind of the last message to be included\n    /// @param l1BlockAndTime The l1 block and the l1 timestamp of the last message to be included\n    /// @param baseFeeL1 The l1 gas price of the last message to be included\n    /// @param sender The sender of the last message to be included\n    /// @param messageDataHash The messageDataHash of the last message to be included\n    function forceInclusion(\n        uint256 _totalDelayedMessagesRead,\n        uint8 kind,\n        uint64[2] calldata l1BlockAndTime,\n        uint256 baseFeeL1,\n        address sender,\n        bytes32 messageDataHash\n    ) external;\n\n    function inboxAccs(uint256 index) external view returns (bytes32);\n\n    function batchCount() external view returns (uint256);\n\n    function isValidKeysetHash(bytes32 ksHash) external view returns (bool);\n\n    /// @notice the creation block is intended to still be available after a keyset is deleted\n    function getKeysetCreationBlock(bytes32 ksHash) external view returns (uint256);\n\n    // ---------- BatchPoster functions ----------\n\n    function addSequencerL2BatchFromOrigin(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder\n    ) external;\n\n    function addSequencerL2Batch(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    ) external;\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /**\n     * @notice Set max delay for sequencer inbox\n     * @param maxTimeVariation_ the maximum time variation parameters\n     */\n    function setMaxTimeVariation(MaxTimeVariation memory maxTimeVariation_) external;\n\n    /**\n     * @notice Updates whether an address is authorized to be a batch poster at the sequencer inbox\n     * @param addr the address\n     * @param isBatchPoster_ if the specified address should be authorized as a batch poster\n     */\n    function setIsBatchPoster(address addr, bool isBatchPoster_) external;\n\n    /**\n     * @notice Makes Data Availability Service keyset valid\n     * @param keysetBytes bytes of the serialized keyset\n     */\n    function setValidKeyset(bytes calldata keysetBytes) external;\n\n    /**\n     * @notice Invalidates a Data Availability Service keyset\n     * @param ksHash hash of the keyset\n     */\n    function invalidateKeysetHash(bytes32 ksHash) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IBridge bridge_, MaxTimeVariation calldata maxTimeVariation_) external;\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ISequencerInbox.setMaxTimeVariation', 'start_line': 2031, 'end_line': 2031, 'offset_start': 73854, 'offset_end': 73934, 'content': 'function setMaxTimeVariation(MaxTimeVariation memory maxTimeVariation_) external;', 'contract_name': 'ISequencerInbox', 'contract_code': "{\n    struct MaxTimeVariation {\n        uint256 delayBlocks;\n        uint256 futureBlocks;\n        uint256 delaySeconds;\n        uint256 futureSeconds;\n    }\n\n    struct TimeBounds {\n        uint64 minTimestamp;\n        uint64 maxTimestamp;\n        uint64 minBlockNumber;\n        uint64 maxBlockNumber;\n    }\n\n    enum BatchDataLocation {\n        TxInput,\n        SeparateBatchEvent,\n        NoData\n    }\n\n    event SequencerBatchDelivered(\n        uint256 indexed batchSequenceNumber,\n        bytes32 indexed beforeAcc,\n        bytes32 indexed afterAcc,\n        bytes32 delayedAcc,\n        uint256 afterDelayedMessagesRead,\n        TimeBounds timeBounds,\n        BatchDataLocation dataLocation\n    );\n\n    event OwnerFunctionCalled(uint256 indexed id);\n\n    /// @dev a separate event that emits batch data when this isn't easily accessible in the tx.input\n    event SequencerBatchData(uint256 indexed batchSequenceNumber, bytes data);\n\n    /// @dev a valid keyset was added\n    event SetValidKeyset(bytes32 indexed keysetHash, bytes keysetBytes);\n\n    /// @dev a keyset was invalidated\n    event InvalidateKeyset(bytes32 indexed keysetHash);\n\n    function totalDelayedMessagesRead() external view returns (uint256);\n\n    function bridge() external view returns (IBridge);\n\n    /// @dev The size of the batch header\n    // solhint-disable-next-line func-name-mixedcase\n    function HEADER_LENGTH() external view returns (uint256);\n\n    /// @dev If the first batch data byte after the header has this bit set,\n    ///      the sequencer inbox has authenticated the data. Currently not used.\n    // solhint-disable-next-line func-name-mixedcase\n    function DATA_AUTHENTICATED_FLAG() external view returns (bytes1);\n\n    function rollup() external view returns (IOwnable);\n\n    function isBatchPoster(address) external view returns (bool);\n\n    struct DasKeySetInfo {\n        bool isValidKeyset;\n        uint64 creationBlock;\n    }\n\n    // https://github.com/ethereum/solidity/issues/11826\n    // function maxTimeVariation() external view returns (MaxTimeVariation calldata);\n    // function dasKeySetInfo(bytes32) external view returns (DasKeySetInfo calldata);\n\n    /// @notice Remove force inclusion delay after a L1 chainId fork\n    function removeDelayAfterFork() external;\n\n    /// @notice Force messages from the delayed inbox to be included in the chain\n    ///         Callable by any address, but message can only be force-included after maxTimeVariation.delayBlocks and\n    ///         maxTimeVariation.delaySeconds has elapsed. As part of normal behaviour the sequencer will include these\n    ///         messages so it's only necessary to call this if the sequencer is down, or not including any delayed messages.\n    /// @param _totalDelayedMessagesRead The total number of messages to read up to\n    /// @param kind The kind of the last message to be included\n    /// @param l1BlockAndTime The l1 block and the l1 timestamp of the last message to be included\n    /// @param baseFeeL1 The l1 gas price of the last message to be included\n    /// @param sender The sender of the last message to be included\n    /// @param messageDataHash The messageDataHash of the last message to be included\n    function forceInclusion(\n        uint256 _totalDelayedMessagesRead,\n        uint8 kind,\n        uint64[2] calldata l1BlockAndTime,\n        uint256 baseFeeL1,\n        address sender,\n        bytes32 messageDataHash\n    ) external;\n\n    function inboxAccs(uint256 index) external view returns (bytes32);\n\n    function batchCount() external view returns (uint256);\n\n    function isValidKeysetHash(bytes32 ksHash) external view returns (bool);\n\n    /// @notice the creation block is intended to still be available after a keyset is deleted\n    function getKeysetCreationBlock(bytes32 ksHash) external view returns (uint256);\n\n    // ---------- BatchPoster functions ----------\n\n    function addSequencerL2BatchFromOrigin(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder\n    ) external;\n\n    function addSequencerL2Batch(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    ) external;\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /**\n     * @notice Set max delay for sequencer inbox\n     * @param maxTimeVariation_ the maximum time variation parameters\n     */\n    function setMaxTimeVariation(MaxTimeVariation memory maxTimeVariation_) external;\n\n    /**\n     * @notice Updates whether an address is authorized to be a batch poster at the sequencer inbox\n     * @param addr the address\n     * @param isBatchPoster_ if the specified address should be authorized as a batch poster\n     */\n    function setIsBatchPoster(address addr, bool isBatchPoster_) external;\n\n    /**\n     * @notice Makes Data Availability Service keyset valid\n     * @param keysetBytes bytes of the serialized keyset\n     */\n    function setValidKeyset(bytes calldata keysetBytes) external;\n\n    /**\n     * @notice Invalidates a Data Availability Service keyset\n     * @param ksHash hash of the keyset\n     */\n    function invalidateKeysetHash(bytes32 ksHash) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IBridge bridge_, MaxTimeVariation calldata maxTimeVariation_) external;\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ISequencerInbox.setIsBatchPoster', 'start_line': 2038, 'end_line': 2038, 'offset_start': 74181, 'offset_end': 74250, 'content': 'function setIsBatchPoster(address addr, bool isBatchPoster_) external;', 'contract_name': 'ISequencerInbox', 'contract_code': "{\n    struct MaxTimeVariation {\n        uint256 delayBlocks;\n        uint256 futureBlocks;\n        uint256 delaySeconds;\n        uint256 futureSeconds;\n    }\n\n    struct TimeBounds {\n        uint64 minTimestamp;\n        uint64 maxTimestamp;\n        uint64 minBlockNumber;\n        uint64 maxBlockNumber;\n    }\n\n    enum BatchDataLocation {\n        TxInput,\n        SeparateBatchEvent,\n        NoData\n    }\n\n    event SequencerBatchDelivered(\n        uint256 indexed batchSequenceNumber,\n        bytes32 indexed beforeAcc,\n        bytes32 indexed afterAcc,\n        bytes32 delayedAcc,\n        uint256 afterDelayedMessagesRead,\n        TimeBounds timeBounds,\n        BatchDataLocation dataLocation\n    );\n\n    event OwnerFunctionCalled(uint256 indexed id);\n\n    /// @dev a separate event that emits batch data when this isn't easily accessible in the tx.input\n    event SequencerBatchData(uint256 indexed batchSequenceNumber, bytes data);\n\n    /// @dev a valid keyset was added\n    event SetValidKeyset(bytes32 indexed keysetHash, bytes keysetBytes);\n\n    /// @dev a keyset was invalidated\n    event InvalidateKeyset(bytes32 indexed keysetHash);\n\n    function totalDelayedMessagesRead() external view returns (uint256);\n\n    function bridge() external view returns (IBridge);\n\n    /// @dev The size of the batch header\n    // solhint-disable-next-line func-name-mixedcase\n    function HEADER_LENGTH() external view returns (uint256);\n\n    /// @dev If the first batch data byte after the header has this bit set,\n    ///      the sequencer inbox has authenticated the data. Currently not used.\n    // solhint-disable-next-line func-name-mixedcase\n    function DATA_AUTHENTICATED_FLAG() external view returns (bytes1);\n\n    function rollup() external view returns (IOwnable);\n\n    function isBatchPoster(address) external view returns (bool);\n\n    struct DasKeySetInfo {\n        bool isValidKeyset;\n        uint64 creationBlock;\n    }\n\n    // https://github.com/ethereum/solidity/issues/11826\n    // function maxTimeVariation() external view returns (MaxTimeVariation calldata);\n    // function dasKeySetInfo(bytes32) external view returns (DasKeySetInfo calldata);\n\n    /// @notice Remove force inclusion delay after a L1 chainId fork\n    function removeDelayAfterFork() external;\n\n    /// @notice Force messages from the delayed inbox to be included in the chain\n    ///         Callable by any address, but message can only be force-included after maxTimeVariation.delayBlocks and\n    ///         maxTimeVariation.delaySeconds has elapsed. As part of normal behaviour the sequencer will include these\n    ///         messages so it's only necessary to call this if the sequencer is down, or not including any delayed messages.\n    /// @param _totalDelayedMessagesRead The total number of messages to read up to\n    /// @param kind The kind of the last message to be included\n    /// @param l1BlockAndTime The l1 block and the l1 timestamp of the last message to be included\n    /// @param baseFeeL1 The l1 gas price of the last message to be included\n    /// @param sender The sender of the last message to be included\n    /// @param messageDataHash The messageDataHash of the last message to be included\n    function forceInclusion(\n        uint256 _totalDelayedMessagesRead,\n        uint8 kind,\n        uint64[2] calldata l1BlockAndTime,\n        uint256 baseFeeL1,\n        address sender,\n        bytes32 messageDataHash\n    ) external;\n\n    function inboxAccs(uint256 index) external view returns (bytes32);\n\n    function batchCount() external view returns (uint256);\n\n    function isValidKeysetHash(bytes32 ksHash) external view returns (bool);\n\n    /// @notice the creation block is intended to still be available after a keyset is deleted\n    function getKeysetCreationBlock(bytes32 ksHash) external view returns (uint256);\n\n    // ---------- BatchPoster functions ----------\n\n    function addSequencerL2BatchFromOrigin(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder\n    ) external;\n\n    function addSequencerL2Batch(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    ) external;\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /**\n     * @notice Set max delay for sequencer inbox\n     * @param maxTimeVariation_ the maximum time variation parameters\n     */\n    function setMaxTimeVariation(MaxTimeVariation memory maxTimeVariation_) external;\n\n    /**\n     * @notice Updates whether an address is authorized to be a batch poster at the sequencer inbox\n     * @param addr the address\n     * @param isBatchPoster_ if the specified address should be authorized as a batch poster\n     */\n    function setIsBatchPoster(address addr, bool isBatchPoster_) external;\n\n    /**\n     * @notice Makes Data Availability Service keyset valid\n     * @param keysetBytes bytes of the serialized keyset\n     */\n    function setValidKeyset(bytes calldata keysetBytes) external;\n\n    /**\n     * @notice Invalidates a Data Availability Service keyset\n     * @param ksHash hash of the keyset\n     */\n    function invalidateKeysetHash(bytes32 ksHash) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IBridge bridge_, MaxTimeVariation calldata maxTimeVariation_) external;\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ISequencerInbox.setValidKeyset', 'start_line': 2044, 'end_line': 2044, 'offset_start': 74390, 'offset_end': 74450, 'content': 'function setValidKeyset(bytes calldata keysetBytes) external;', 'contract_name': 'ISequencerInbox', 'contract_code': "{\n    struct MaxTimeVariation {\n        uint256 delayBlocks;\n        uint256 futureBlocks;\n        uint256 delaySeconds;\n        uint256 futureSeconds;\n    }\n\n    struct TimeBounds {\n        uint64 minTimestamp;\n        uint64 maxTimestamp;\n        uint64 minBlockNumber;\n        uint64 maxBlockNumber;\n    }\n\n    enum BatchDataLocation {\n        TxInput,\n        SeparateBatchEvent,\n        NoData\n    }\n\n    event SequencerBatchDelivered(\n        uint256 indexed batchSequenceNumber,\n        bytes32 indexed beforeAcc,\n        bytes32 indexed afterAcc,\n        bytes32 delayedAcc,\n        uint256 afterDelayedMessagesRead,\n        TimeBounds timeBounds,\n        BatchDataLocation dataLocation\n    );\n\n    event OwnerFunctionCalled(uint256 indexed id);\n\n    /// @dev a separate event that emits batch data when this isn't easily accessible in the tx.input\n    event SequencerBatchData(uint256 indexed batchSequenceNumber, bytes data);\n\n    /// @dev a valid keyset was added\n    event SetValidKeyset(bytes32 indexed keysetHash, bytes keysetBytes);\n\n    /// @dev a keyset was invalidated\n    event InvalidateKeyset(bytes32 indexed keysetHash);\n\n    function totalDelayedMessagesRead() external view returns (uint256);\n\n    function bridge() external view returns (IBridge);\n\n    /// @dev The size of the batch header\n    // solhint-disable-next-line func-name-mixedcase\n    function HEADER_LENGTH() external view returns (uint256);\n\n    /// @dev If the first batch data byte after the header has this bit set,\n    ///      the sequencer inbox has authenticated the data. Currently not used.\n    // solhint-disable-next-line func-name-mixedcase\n    function DATA_AUTHENTICATED_FLAG() external view returns (bytes1);\n\n    function rollup() external view returns (IOwnable);\n\n    function isBatchPoster(address) external view returns (bool);\n\n    struct DasKeySetInfo {\n        bool isValidKeyset;\n        uint64 creationBlock;\n    }\n\n    // https://github.com/ethereum/solidity/issues/11826\n    // function maxTimeVariation() external view returns (MaxTimeVariation calldata);\n    // function dasKeySetInfo(bytes32) external view returns (DasKeySetInfo calldata);\n\n    /// @notice Remove force inclusion delay after a L1 chainId fork\n    function removeDelayAfterFork() external;\n\n    /// @notice Force messages from the delayed inbox to be included in the chain\n    ///         Callable by any address, but message can only be force-included after maxTimeVariation.delayBlocks and\n    ///         maxTimeVariation.delaySeconds has elapsed. As part of normal behaviour the sequencer will include these\n    ///         messages so it's only necessary to call this if the sequencer is down, or not including any delayed messages.\n    /// @param _totalDelayedMessagesRead The total number of messages to read up to\n    /// @param kind The kind of the last message to be included\n    /// @param l1BlockAndTime The l1 block and the l1 timestamp of the last message to be included\n    /// @param baseFeeL1 The l1 gas price of the last message to be included\n    /// @param sender The sender of the last message to be included\n    /// @param messageDataHash The messageDataHash of the last message to be included\n    function forceInclusion(\n        uint256 _totalDelayedMessagesRead,\n        uint8 kind,\n        uint64[2] calldata l1BlockAndTime,\n        uint256 baseFeeL1,\n        address sender,\n        bytes32 messageDataHash\n    ) external;\n\n    function inboxAccs(uint256 index) external view returns (bytes32);\n\n    function batchCount() external view returns (uint256);\n\n    function isValidKeysetHash(bytes32 ksHash) external view returns (bool);\n\n    /// @notice the creation block is intended to still be available after a keyset is deleted\n    function getKeysetCreationBlock(bytes32 ksHash) external view returns (uint256);\n\n    // ---------- BatchPoster functions ----------\n\n    function addSequencerL2BatchFromOrigin(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder\n    ) external;\n\n    function addSequencerL2Batch(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    ) external;\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /**\n     * @notice Set max delay for sequencer inbox\n     * @param maxTimeVariation_ the maximum time variation parameters\n     */\n    function setMaxTimeVariation(MaxTimeVariation memory maxTimeVariation_) external;\n\n    /**\n     * @notice Updates whether an address is authorized to be a batch poster at the sequencer inbox\n     * @param addr the address\n     * @param isBatchPoster_ if the specified address should be authorized as a batch poster\n     */\n    function setIsBatchPoster(address addr, bool isBatchPoster_) external;\n\n    /**\n     * @notice Makes Data Availability Service keyset valid\n     * @param keysetBytes bytes of the serialized keyset\n     */\n    function setValidKeyset(bytes calldata keysetBytes) external;\n\n    /**\n     * @notice Invalidates a Data Availability Service keyset\n     * @param ksHash hash of the keyset\n     */\n    function invalidateKeysetHash(bytes32 ksHash) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IBridge bridge_, MaxTimeVariation calldata maxTimeVariation_) external;\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ISequencerInbox.invalidateKeysetHash', 'start_line': 2050, 'end_line': 2050, 'offset_start': 74575, 'offset_end': 74629, 'content': 'function invalidateKeysetHash(bytes32 ksHash) external;', 'contract_name': 'ISequencerInbox', 'contract_code': "{\n    struct MaxTimeVariation {\n        uint256 delayBlocks;\n        uint256 futureBlocks;\n        uint256 delaySeconds;\n        uint256 futureSeconds;\n    }\n\n    struct TimeBounds {\n        uint64 minTimestamp;\n        uint64 maxTimestamp;\n        uint64 minBlockNumber;\n        uint64 maxBlockNumber;\n    }\n\n    enum BatchDataLocation {\n        TxInput,\n        SeparateBatchEvent,\n        NoData\n    }\n\n    event SequencerBatchDelivered(\n        uint256 indexed batchSequenceNumber,\n        bytes32 indexed beforeAcc,\n        bytes32 indexed afterAcc,\n        bytes32 delayedAcc,\n        uint256 afterDelayedMessagesRead,\n        TimeBounds timeBounds,\n        BatchDataLocation dataLocation\n    );\n\n    event OwnerFunctionCalled(uint256 indexed id);\n\n    /// @dev a separate event that emits batch data when this isn't easily accessible in the tx.input\n    event SequencerBatchData(uint256 indexed batchSequenceNumber, bytes data);\n\n    /// @dev a valid keyset was added\n    event SetValidKeyset(bytes32 indexed keysetHash, bytes keysetBytes);\n\n    /// @dev a keyset was invalidated\n    event InvalidateKeyset(bytes32 indexed keysetHash);\n\n    function totalDelayedMessagesRead() external view returns (uint256);\n\n    function bridge() external view returns (IBridge);\n\n    /// @dev The size of the batch header\n    // solhint-disable-next-line func-name-mixedcase\n    function HEADER_LENGTH() external view returns (uint256);\n\n    /// @dev If the first batch data byte after the header has this bit set,\n    ///      the sequencer inbox has authenticated the data. Currently not used.\n    // solhint-disable-next-line func-name-mixedcase\n    function DATA_AUTHENTICATED_FLAG() external view returns (bytes1);\n\n    function rollup() external view returns (IOwnable);\n\n    function isBatchPoster(address) external view returns (bool);\n\n    struct DasKeySetInfo {\n        bool isValidKeyset;\n        uint64 creationBlock;\n    }\n\n    // https://github.com/ethereum/solidity/issues/11826\n    // function maxTimeVariation() external view returns (MaxTimeVariation calldata);\n    // function dasKeySetInfo(bytes32) external view returns (DasKeySetInfo calldata);\n\n    /// @notice Remove force inclusion delay after a L1 chainId fork\n    function removeDelayAfterFork() external;\n\n    /// @notice Force messages from the delayed inbox to be included in the chain\n    ///         Callable by any address, but message can only be force-included after maxTimeVariation.delayBlocks and\n    ///         maxTimeVariation.delaySeconds has elapsed. As part of normal behaviour the sequencer will include these\n    ///         messages so it's only necessary to call this if the sequencer is down, or not including any delayed messages.\n    /// @param _totalDelayedMessagesRead The total number of messages to read up to\n    /// @param kind The kind of the last message to be included\n    /// @param l1BlockAndTime The l1 block and the l1 timestamp of the last message to be included\n    /// @param baseFeeL1 The l1 gas price of the last message to be included\n    /// @param sender The sender of the last message to be included\n    /// @param messageDataHash The messageDataHash of the last message to be included\n    function forceInclusion(\n        uint256 _totalDelayedMessagesRead,\n        uint8 kind,\n        uint64[2] calldata l1BlockAndTime,\n        uint256 baseFeeL1,\n        address sender,\n        bytes32 messageDataHash\n    ) external;\n\n    function inboxAccs(uint256 index) external view returns (bytes32);\n\n    function batchCount() external view returns (uint256);\n\n    function isValidKeysetHash(bytes32 ksHash) external view returns (bool);\n\n    /// @notice the creation block is intended to still be available after a keyset is deleted\n    function getKeysetCreationBlock(bytes32 ksHash) external view returns (uint256);\n\n    // ---------- BatchPoster functions ----------\n\n    function addSequencerL2BatchFromOrigin(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder\n    ) external;\n\n    function addSequencerL2Batch(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    ) external;\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /**\n     * @notice Set max delay for sequencer inbox\n     * @param maxTimeVariation_ the maximum time variation parameters\n     */\n    function setMaxTimeVariation(MaxTimeVariation memory maxTimeVariation_) external;\n\n    /**\n     * @notice Updates whether an address is authorized to be a batch poster at the sequencer inbox\n     * @param addr the address\n     * @param isBatchPoster_ if the specified address should be authorized as a batch poster\n     */\n    function setIsBatchPoster(address addr, bool isBatchPoster_) external;\n\n    /**\n     * @notice Makes Data Availability Service keyset valid\n     * @param keysetBytes bytes of the serialized keyset\n     */\n    function setValidKeyset(bytes calldata keysetBytes) external;\n\n    /**\n     * @notice Invalidates a Data Availability Service keyset\n     * @param ksHash hash of the keyset\n     */\n    function invalidateKeysetHash(bytes32 ksHash) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IBridge bridge_, MaxTimeVariation calldata maxTimeVariation_) external;\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
{'type': 'FunctionDefinition', 'name': 'ISequencerInbox.initialize', 'start_line': 2054, 'end_line': 2054, 'offset_start': 74678, 'offset_end': 74768, 'content': 'function initialize(IBridge bridge_, MaxTimeVariation calldata maxTimeVariation_) external;', 'contract_name': 'ISequencerInbox', 'contract_code': "{\n    struct MaxTimeVariation {\n        uint256 delayBlocks;\n        uint256 futureBlocks;\n        uint256 delaySeconds;\n        uint256 futureSeconds;\n    }\n\n    struct TimeBounds {\n        uint64 minTimestamp;\n        uint64 maxTimestamp;\n        uint64 minBlockNumber;\n        uint64 maxBlockNumber;\n    }\n\n    enum BatchDataLocation {\n        TxInput,\n        SeparateBatchEvent,\n        NoData\n    }\n\n    event SequencerBatchDelivered(\n        uint256 indexed batchSequenceNumber,\n        bytes32 indexed beforeAcc,\n        bytes32 indexed afterAcc,\n        bytes32 delayedAcc,\n        uint256 afterDelayedMessagesRead,\n        TimeBounds timeBounds,\n        BatchDataLocation dataLocation\n    );\n\n    event OwnerFunctionCalled(uint256 indexed id);\n\n    /// @dev a separate event that emits batch data when this isn't easily accessible in the tx.input\n    event SequencerBatchData(uint256 indexed batchSequenceNumber, bytes data);\n\n    /// @dev a valid keyset was added\n    event SetValidKeyset(bytes32 indexed keysetHash, bytes keysetBytes);\n\n    /// @dev a keyset was invalidated\n    event InvalidateKeyset(bytes32 indexed keysetHash);\n\n    function totalDelayedMessagesRead() external view returns (uint256);\n\n    function bridge() external view returns (IBridge);\n\n    /// @dev The size of the batch header\n    // solhint-disable-next-line func-name-mixedcase\n    function HEADER_LENGTH() external view returns (uint256);\n\n    /// @dev If the first batch data byte after the header has this bit set,\n    ///      the sequencer inbox has authenticated the data. Currently not used.\n    // solhint-disable-next-line func-name-mixedcase\n    function DATA_AUTHENTICATED_FLAG() external view returns (bytes1);\n\n    function rollup() external view returns (IOwnable);\n\n    function isBatchPoster(address) external view returns (bool);\n\n    struct DasKeySetInfo {\n        bool isValidKeyset;\n        uint64 creationBlock;\n    }\n\n    // https://github.com/ethereum/solidity/issues/11826\n    // function maxTimeVariation() external view returns (MaxTimeVariation calldata);\n    // function dasKeySetInfo(bytes32) external view returns (DasKeySetInfo calldata);\n\n    /// @notice Remove force inclusion delay after a L1 chainId fork\n    function removeDelayAfterFork() external;\n\n    /// @notice Force messages from the delayed inbox to be included in the chain\n    ///         Callable by any address, but message can only be force-included after maxTimeVariation.delayBlocks and\n    ///         maxTimeVariation.delaySeconds has elapsed. As part of normal behaviour the sequencer will include these\n    ///         messages so it's only necessary to call this if the sequencer is down, or not including any delayed messages.\n    /// @param _totalDelayedMessagesRead The total number of messages to read up to\n    /// @param kind The kind of the last message to be included\n    /// @param l1BlockAndTime The l1 block and the l1 timestamp of the last message to be included\n    /// @param baseFeeL1 The l1 gas price of the last message to be included\n    /// @param sender The sender of the last message to be included\n    /// @param messageDataHash The messageDataHash of the last message to be included\n    function forceInclusion(\n        uint256 _totalDelayedMessagesRead,\n        uint8 kind,\n        uint64[2] calldata l1BlockAndTime,\n        uint256 baseFeeL1,\n        address sender,\n        bytes32 messageDataHash\n    ) external;\n\n    function inboxAccs(uint256 index) external view returns (bytes32);\n\n    function batchCount() external view returns (uint256);\n\n    function isValidKeysetHash(bytes32 ksHash) external view returns (bool);\n\n    /// @notice the creation block is intended to still be available after a keyset is deleted\n    function getKeysetCreationBlock(bytes32 ksHash) external view returns (uint256);\n\n    // ---------- BatchPoster functions ----------\n\n    function addSequencerL2BatchFromOrigin(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder\n    ) external;\n\n    function addSequencerL2Batch(\n        uint256 sequenceNumber,\n        bytes calldata data,\n        uint256 afterDelayedMessagesRead,\n        IGasRefunder gasRefunder,\n        uint256 prevMessageCount,\n        uint256 newMessageCount\n    ) external;\n\n    // ---------- onlyRollupOrOwner functions ----------\n\n    /**\n     * @notice Set max delay for sequencer inbox\n     * @param maxTimeVariation_ the maximum time variation parameters\n     */\n    function setMaxTimeVariation(MaxTimeVariation memory maxTimeVariation_) external;\n\n    /**\n     * @notice Updates whether an address is authorized to be a batch poster at the sequencer inbox\n     * @param addr the address\n     * @param isBatchPoster_ if the specified address should be authorized as a batch poster\n     */\n    function setIsBatchPoster(address addr, bool isBatchPoster_) external;\n\n    /**\n     * @notice Makes Data Availability Service keyset valid\n     * @param keysetBytes bytes of the serialized keyset\n     */\n    function setValidKeyset(bytes calldata keysetBytes) external;\n\n    /**\n     * @notice Invalidates a Data Availability Service keyset\n     * @param ksHash hash of the keyset\n     */\n    function invalidateKeysetHash(bytes32 ksHash) external;\n\n    // ---------- initializer ----------\n\n    function initialize(IBridge bridge_, MaxTimeVariation calldata maxTimeVariation_) external;\n}", 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f/0x4dbd4fc535ac27206064b68ffcf827b0a60bab3f.sol'}
