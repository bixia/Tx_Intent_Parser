{'type': 'FunctionDefinition', 'name': 'ElixirDeposit.tor', 'start_line': 58, 'end_line': 58, 'offset_start': 2202, 'offset_end': 2247, 'content': 'constructor(address _owner) Ownable(_owner) {}', 'contract_name': 'ElixirDeposit', 'contract_code': '{\n    /*//////////////////////////////////////////////////////////////\n                                VARIABLES\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice The address of the Elixir multisig wallet with control of funds\n    address public controller;\n\n    /// @notice Mapping of address to deposited amount\n    mapping(address user => uint256 amount) public deposits;\n\n    /// @notice The pause status of deposits. True if deposits are paused.\n    bool public depositsPaused;\n\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Emitted when a deposit is made.\n    /// @param caller The caller of the deposit function, for which tokens are taken from.\n    /// @param amount The token amount deposited.\n    event Deposit(address indexed caller, uint256 indexed amount);\n\n    /*//////////////////////////////////////////////////////////////\n                                 ERRORS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Emitted when deposits are paused.\n    error DepositsPaused();\n\n    /// @notice Emitted when deposit fails.\n    error DepositFailed();\n\n    /*//////////////////////////////////////////////////////////////\n                                MODIFIERS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Reverts when deposits are paused.\n    modifier whenDepositNotPaused() {\n        if (depositsPaused) revert DepositsPaused();\n        _;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Constructor for the ElixirDeposit contract\n    /// @param _owner The address of the owner of the contract\n    constructor(address _owner) Ownable(_owner) {}\n\n    /*//////////////////////////////////////////////////////////////\n                             EXTERNAL FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Deposit funds into the contract\n    function deposit() external payable whenDepositNotPaused {\n        deposits[msg.sender] += msg.value;\n\n        (bool sent,) = controller.call{value: msg.value}("");\n        if (!sent) revert DepositFailed();\n\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    /// @notice Pause deposits, callable by the owner\n    /// @param pauseDeposits True if deposits are to be paused, false if they are to be unpaused\n    function pause(bool pauseDeposits) external onlyOwner {\n        depositsPaused = pauseDeposits;\n    }\n\n    /// @notice Set controller address, callable by the owner\n    /// @param _controller controller address to be set\n    function setController(address _controller) external onlyOwner {\n        controller = _controller;\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'default', 'node_count': 4, 'relative_file_path': './testDownload/1/0x1f75881dc0707b5236f739b5b64a87c211294abb/0x1f75881dc0707b5236f739b5b64a87c211294abb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x1f75881dc0707b5236f739b5b64a87c211294abb/0x1f75881dc0707b5236f739b5b64a87c211294abb.sol'}
{'type': 'FunctionDefinition', 'name': 'ElixirDeposit.deposit', 'start_line': 65, 'end_line': 72, 'offset_start': 2489, 'offset_end': 2747, 'content': 'function deposit() external payable whenDepositNotPaused {\n        deposits[msg.sender] += msg.value;\n\n        (bool sent,) = controller.call{value: msg.value}("");\n        if (!sent) revert DepositFailed();\n\n        emit Deposit(msg.sender, msg.value);\n    }', 'contract_name': 'ElixirDeposit', 'contract_code': '{\n    /*//////////////////////////////////////////////////////////////\n                                VARIABLES\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice The address of the Elixir multisig wallet with control of funds\n    address public controller;\n\n    /// @notice Mapping of address to deposited amount\n    mapping(address user => uint256 amount) public deposits;\n\n    /// @notice The pause status of deposits. True if deposits are paused.\n    bool public depositsPaused;\n\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Emitted when a deposit is made.\n    /// @param caller The caller of the deposit function, for which tokens are taken from.\n    /// @param amount The token amount deposited.\n    event Deposit(address indexed caller, uint256 indexed amount);\n\n    /*//////////////////////////////////////////////////////////////\n                                 ERRORS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Emitted when deposits are paused.\n    error DepositsPaused();\n\n    /// @notice Emitted when deposit fails.\n    error DepositFailed();\n\n    /*//////////////////////////////////////////////////////////////\n                                MODIFIERS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Reverts when deposits are paused.\n    modifier whenDepositNotPaused() {\n        if (depositsPaused) revert DepositsPaused();\n        _;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Constructor for the ElixirDeposit contract\n    /// @param _owner The address of the owner of the contract\n    constructor(address _owner) Ownable(_owner) {}\n\n    /*//////////////////////////////////////////////////////////////\n                             EXTERNAL FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Deposit funds into the contract\n    function deposit() external payable whenDepositNotPaused {\n        deposits[msg.sender] += msg.value;\n\n        (bool sent,) = controller.call{value: msg.value}("");\n        if (!sent) revert DepositFailed();\n\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    /// @notice Pause deposits, callable by the owner\n    /// @param pauseDeposits True if deposits are to be paused, false if they are to be unpaused\n    function pause(bool pauseDeposits) external onlyOwner {\n        depositsPaused = pauseDeposits;\n    }\n\n    /// @notice Set controller address, callable by the owner\n    /// @param _controller controller address to be set\n    function setController(address _controller) external onlyOwner {\n        controller = _controller;\n    }\n}', 'modifiers': [None], 'stateMutability': 'payable', 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0x1f75881dc0707b5236f739b5b64a87c211294abb/0x1f75881dc0707b5236f739b5b64a87c211294abb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x1f75881dc0707b5236f739b5b64a87c211294abb/0x1f75881dc0707b5236f739b5b64a87c211294abb.sol'}
{'type': 'FunctionDefinition', 'name': 'ElixirDeposit.pause', 'start_line': 76, 'end_line': 78, 'offset_start': 2905, 'offset_end': 3005, 'content': 'function pause(bool pauseDeposits) external onlyOwner {\n        depositsPaused = pauseDeposits;\n    }', 'contract_name': 'ElixirDeposit', 'contract_code': '{\n    /*//////////////////////////////////////////////////////////////\n                                VARIABLES\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice The address of the Elixir multisig wallet with control of funds\n    address public controller;\n\n    /// @notice Mapping of address to deposited amount\n    mapping(address user => uint256 amount) public deposits;\n\n    /// @notice The pause status of deposits. True if deposits are paused.\n    bool public depositsPaused;\n\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Emitted when a deposit is made.\n    /// @param caller The caller of the deposit function, for which tokens are taken from.\n    /// @param amount The token amount deposited.\n    event Deposit(address indexed caller, uint256 indexed amount);\n\n    /*//////////////////////////////////////////////////////////////\n                                 ERRORS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Emitted when deposits are paused.\n    error DepositsPaused();\n\n    /// @notice Emitted when deposit fails.\n    error DepositFailed();\n\n    /*//////////////////////////////////////////////////////////////\n                                MODIFIERS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Reverts when deposits are paused.\n    modifier whenDepositNotPaused() {\n        if (depositsPaused) revert DepositsPaused();\n        _;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Constructor for the ElixirDeposit contract\n    /// @param _owner The address of the owner of the contract\n    constructor(address _owner) Ownable(_owner) {}\n\n    /*//////////////////////////////////////////////////////////////\n                             EXTERNAL FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Deposit funds into the contract\n    function deposit() external payable whenDepositNotPaused {\n        deposits[msg.sender] += msg.value;\n\n        (bool sent,) = controller.call{value: msg.value}("");\n        if (!sent) revert DepositFailed();\n\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    /// @notice Pause deposits, callable by the owner\n    /// @param pauseDeposits True if deposits are to be paused, false if they are to be unpaused\n    function pause(bool pauseDeposits) external onlyOwner {\n        depositsPaused = pauseDeposits;\n    }\n\n    /// @notice Set controller address, callable by the owner\n    /// @param _controller controller address to be set\n    function setController(address _controller) external onlyOwner {\n        controller = _controller;\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0x1f75881dc0707b5236f739b5b64a87c211294abb/0x1f75881dc0707b5236f739b5b64a87c211294abb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x1f75881dc0707b5236f739b5b64a87c211294abb/0x1f75881dc0707b5236f739b5b64a87c211294abb.sol'}
{'type': 'FunctionDefinition', 'name': 'ElixirDeposit.setController', 'start_line': 82, 'end_line': 84, 'offset_start': 3130, 'offset_end': 3233, 'content': 'function setController(address _controller) external onlyOwner {\n        controller = _controller;\n    }', 'contract_name': 'ElixirDeposit', 'contract_code': '{\n    /*//////////////////////////////////////////////////////////////\n                                VARIABLES\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice The address of the Elixir multisig wallet with control of funds\n    address public controller;\n\n    /// @notice Mapping of address to deposited amount\n    mapping(address user => uint256 amount) public deposits;\n\n    /// @notice The pause status of deposits. True if deposits are paused.\n    bool public depositsPaused;\n\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Emitted when a deposit is made.\n    /// @param caller The caller of the deposit function, for which tokens are taken from.\n    /// @param amount The token amount deposited.\n    event Deposit(address indexed caller, uint256 indexed amount);\n\n    /*//////////////////////////////////////////////////////////////\n                                 ERRORS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Emitted when deposits are paused.\n    error DepositsPaused();\n\n    /// @notice Emitted when deposit fails.\n    error DepositFailed();\n\n    /*//////////////////////////////////////////////////////////////\n                                MODIFIERS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Reverts when deposits are paused.\n    modifier whenDepositNotPaused() {\n        if (depositsPaused) revert DepositsPaused();\n        _;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Constructor for the ElixirDeposit contract\n    /// @param _owner The address of the owner of the contract\n    constructor(address _owner) Ownable(_owner) {}\n\n    /*//////////////////////////////////////////////////////////////\n                             EXTERNAL FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Deposit funds into the contract\n    function deposit() external payable whenDepositNotPaused {\n        deposits[msg.sender] += msg.value;\n\n        (bool sent,) = controller.call{value: msg.value}("");\n        if (!sent) revert DepositFailed();\n\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    /// @notice Pause deposits, callable by the owner\n    /// @param pauseDeposits True if deposits are to be paused, false if they are to be unpaused\n    function pause(bool pauseDeposits) external onlyOwner {\n        depositsPaused = pauseDeposits;\n    }\n\n    /// @notice Set controller address, callable by the owner\n    /// @param _controller controller address to be set\n    function setController(address _controller) external onlyOwner {\n        controller = _controller;\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/1/0x1f75881dc0707b5236f739b5b64a87c211294abb/0x1f75881dc0707b5236f739b5b64a87c211294abb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x1f75881dc0707b5236f739b5b64a87c211294abb/0x1f75881dc0707b5236f739b5b64a87c211294abb.sol'}
{'type': 'FunctionDefinition', 'name': 'Ownable.tor', 'start_line': 124, 'end_line': 129, 'offset_start': 4463, 'offset_end': 4649, 'content': 'constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }', 'contract_name': 'Ownable', 'contract_code': '{\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'default', 'node_count': 4, 'relative_file_path': './testDownload/1/0x1f75881dc0707b5236f739b5b64a87c211294abb/0x1f75881dc0707b5236f739b5b64a87c211294abb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x1f75881dc0707b5236f739b5b64a87c211294abb/0x1f75881dc0707b5236f739b5b64a87c211294abb.sol'}
{'type': 'FunctionDefinition', 'name': 'Ownable.owner', 'start_line': 142, 'end_line': 144, 'offset_start': 4876, 'offset_end': 4960, 'content': 'function owner() public view virtual returns (address) {\n        return _owner;\n    }', 'contract_name': 'Ownable', 'contract_code': '{\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/1/0x1f75881dc0707b5236f739b5b64a87c211294abb/0x1f75881dc0707b5236f739b5b64a87c211294abb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x1f75881dc0707b5236f739b5b64a87c211294abb/0x1f75881dc0707b5236f739b5b64a87c211294abb.sol'}
{'type': 'FunctionDefinition', 'name': 'Ownable._checkOwner', 'start_line': 149, 'end_line': 153, 'offset_start': 5034, 'offset_end': 5195, 'content': 'function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }', 'contract_name': 'Ownable', 'contract_code': '{\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0x1f75881dc0707b5236f739b5b64a87c211294abb/0x1f75881dc0707b5236f739b5b64a87c211294abb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x1f75881dc0707b5236f739b5b64a87c211294abb/0x1f75881dc0707b5236f739b5b64a87c211294abb.sol'}
{'type': 'FunctionDefinition', 'name': 'Ownable.renounceOwnership', 'start_line': 162, 'end_line': 164, 'offset_start': 5531, 'offset_end': 5631, 'content': 'function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }', 'contract_name': 'Ownable', 'contract_code': '{\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/1/0x1f75881dc0707b5236f739b5b64a87c211294abb/0x1f75881dc0707b5236f739b5b64a87c211294abb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x1f75881dc0707b5236f739b5b64a87c211294abb/0x1f75881dc0707b5236f739b5b64a87c211294abb.sol'}
{'type': 'FunctionDefinition', 'name': 'Ownable.transferOwnership', 'start_line': 170, 'end_line': 175, 'offset_start': 5781, 'offset_end': 5995, 'content': 'function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }', 'contract_name': 'Ownable', 'contract_code': '{\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/1/0x1f75881dc0707b5236f739b5b64a87c211294abb/0x1f75881dc0707b5236f739b5b64a87c211294abb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x1f75881dc0707b5236f739b5b64a87c211294abb/0x1f75881dc0707b5236f739b5b64a87c211294abb.sol'}
{'type': 'FunctionDefinition', 'name': 'Ownable._transferOwnership', 'start_line': 181, 'end_line': 185, 'offset_start': 6150, 'offset_end': 6336, 'content': 'function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }', 'contract_name': 'Ownable', 'contract_code': '{\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/1/0x1f75881dc0707b5236f739b5b64a87c211294abb/0x1f75881dc0707b5236f739b5b64a87c211294abb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x1f75881dc0707b5236f739b5b64a87c211294abb/0x1f75881dc0707b5236f739b5b64a87c211294abb.sol'}
{'type': 'FunctionDefinition', 'name': 'Context._msgSender', 'start_line': 204, 'end_line': 206, 'offset_start': 6997, 'offset_end': 7092, 'content': 'function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }', 'contract_name': 'Context', 'contract_code': '{\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x1f75881dc0707b5236f739b5b64a87c211294abb/0x1f75881dc0707b5236f739b5b64a87c211294abb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x1f75881dc0707b5236f739b5b64a87c211294abb/0x1f75881dc0707b5236f739b5b64a87c211294abb.sol'}
{'type': 'FunctionDefinition', 'name': 'Context._msgData', 'start_line': 208, 'end_line': 210, 'offset_start': 7099, 'offset_end': 7197, 'content': 'function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }', 'contract_name': 'Context', 'contract_code': '{\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x1f75881dc0707b5236f739b5b64a87c211294abb/0x1f75881dc0707b5236f739b5b64a87c211294abb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x1f75881dc0707b5236f739b5b64a87c211294abb/0x1f75881dc0707b5236f739b5b64a87c211294abb.sol'}
{'type': 'FunctionDefinition', 'name': 'Context._contextSuffixLength', 'start_line': 212, 'end_line': 214, 'offset_start': 7204, 'offset_end': 7300, 'content': 'function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }', 'contract_name': 'Context', 'contract_code': '{\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/1/0x1f75881dc0707b5236f739b5b64a87c211294abb/0x1f75881dc0707b5236f739b5b64a87c211294abb.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/1/0x1f75881dc0707b5236f739b5b64a87c211294abb/0x1f75881dc0707b5236f739b5b64a87c211294abb.sol'}
