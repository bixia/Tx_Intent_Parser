{'type': 'FunctionDefinition', 'name': 'DailySignIn.tor', 'start_line': 12, 'end_line': 16, 'offset_start': 493, 'offset_end': 602, 'content': 'constructor() {\n        admin = msg.sender;\n        maxConsecutiveDays = 7;\n        setDefaultRewards();\n    }', 'contract_name': 'DailySignIn', 'contract_code': '{\n    address public admin;\n    mapping(address => uint256) private lastSignInDate;\n    mapping(address => uint256) private consecutiveSignInDays;\n    mapping(uint256 => uint256) private signInRewards;\n    uint256 private maxConsecutiveDays;\n    uint256 private signInInterval = 1 days;\n    uint256 private constant TIME_OFFSET = 8 hours; \n    event UserSignedIn(address indexed user, uint256 date, uint256 consecutiveDays, uint256 rewardXP);\n    constructor() {\n        admin = msg.sender;\n        maxConsecutiveDays = 7;\n        setDefaultRewards();\n    }\n    modifier onlyAdmin() {\n        require(msg.sender == admin, "Only admin can call this function.");\n        _;\n    }\n    function _getStartOfUTC8Day(uint256 timestamp) private view returns (uint256) {\n        return (timestamp + TIME_OFFSET) / signInInterval * signInInterval - TIME_OFFSET;\n    }\n    function signIn() external {\n        uint256 today = _getStartOfUTC8Day(block.timestamp);\n        require(lastSignInDate[msg.sender] < today, "Already signed in for today");\n        if (lastSignInDate[msg.sender] == today - signInInterval) {\n            consecutiveSignInDays[msg.sender] = (consecutiveSignInDays[msg.sender] % maxConsecutiveDays) + 1;\n        } else {\n            consecutiveSignInDays[msg.sender] = 1; \n        }\n        uint256 rewardXP = signInRewards[consecutiveSignInDays[msg.sender]];\n        lastSignInDate[msg.sender] = today;\n        emit UserSignedIn(msg.sender, today, consecutiveSignInDays[msg.sender], rewardXP);\n    }\n    function setMaxConsecutiveDays(uint256 _maxDays) external onlyAdmin {\n        maxConsecutiveDays = _maxDays;\n    }\n    function setSignInInterval(uint256 _interval) external onlyAdmin {\n        signInInterval = _interval;\n    }\n    function setSignInReward(uint256 day, uint256 rewardXP) external onlyAdmin {\n        signInRewards[day] = rewardXP;\n    }\n    function setDefaultRewards() public onlyAdmin {\n        signInRewards[1] = 2;\n        signInRewards[2] = 4;\n        signInRewards[3] = 6;\n        signInRewards[4] = 8;\n        signInRewards[5] = 10;\n        signInRewards[6] = 12;\n        signInRewards[7] = 15;\n    }\n    function getSignInInterval() public view returns (uint256) {\n        return signInInterval;\n    }\n    function getRewardXP(uint256 day) public view returns (uint256) {\n        return signInRewards[day];\n    }\n    function hasBrokenStreak(address user) public view returns (bool) {\n        uint256 today = _getStartOfUTC8Day(block.timestamp);\n        uint256 yesterday = today - signInInterval;\n        return lastSignInDate[user] != yesterday && lastSignInDate[user] != today;\n    }\n    function getConsecutiveSignInDays(address user) public view returns (uint256) {\n        if (hasBrokenStreak(user)) {\n            return 0;\n        }\n        return consecutiveSignInDays[user];\n    }\n    function getLastSignInDate(address user) public view returns (uint256) {\n        return lastSignInDate[user];\n    }\n    function getTimeUntilNextSignIn(address user) public view returns (uint256) {\n        uint256 currentTime = block.timestamp;\n        uint256 startOfToday = _getStartOfUTC8Day(currentTime);\n        uint256 startOfNextDay = startOfToday + signInInterval;\n        if (lastSignInDate[user] == startOfToday) {\n            return startOfNextDay - currentTime;\n        } else {\n            return 0;\n        }\n    }\n    function updateSignReward(uint256 day, uint256 reward) external onlyAdmin {\n        signInRewards[day] = reward;\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'default', 'node_count': 4, 'relative_file_path': './testDownload/56/0xe3ba0072d1da98269133852fba1795419d72baf4/0xe3ba0072d1da98269133852fba1795419d72baf4.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0xe3ba0072d1da98269133852fba1795419d72baf4/0xe3ba0072d1da98269133852fba1795419d72baf4.sol'}
{'type': 'FunctionDefinition', 'name': 'DailySignIn._getStartOfUTC8Day', 'start_line': 21, 'end_line': 23, 'offset_start': 728, 'offset_end': 902, 'content': 'function _getStartOfUTC8Day(uint256 timestamp) private view returns (uint256) {\n        return (timestamp + TIME_OFFSET) / signInInterval * signInInterval - TIME_OFFSET;\n    }', 'contract_name': 'DailySignIn', 'contract_code': '{\n    address public admin;\n    mapping(address => uint256) private lastSignInDate;\n    mapping(address => uint256) private consecutiveSignInDays;\n    mapping(uint256 => uint256) private signInRewards;\n    uint256 private maxConsecutiveDays;\n    uint256 private signInInterval = 1 days;\n    uint256 private constant TIME_OFFSET = 8 hours; \n    event UserSignedIn(address indexed user, uint256 date, uint256 consecutiveDays, uint256 rewardXP);\n    constructor() {\n        admin = msg.sender;\n        maxConsecutiveDays = 7;\n        setDefaultRewards();\n    }\n    modifier onlyAdmin() {\n        require(msg.sender == admin, "Only admin can call this function.");\n        _;\n    }\n    function _getStartOfUTC8Day(uint256 timestamp) private view returns (uint256) {\n        return (timestamp + TIME_OFFSET) / signInInterval * signInInterval - TIME_OFFSET;\n    }\n    function signIn() external {\n        uint256 today = _getStartOfUTC8Day(block.timestamp);\n        require(lastSignInDate[msg.sender] < today, "Already signed in for today");\n        if (lastSignInDate[msg.sender] == today - signInInterval) {\n            consecutiveSignInDays[msg.sender] = (consecutiveSignInDays[msg.sender] % maxConsecutiveDays) + 1;\n        } else {\n            consecutiveSignInDays[msg.sender] = 1; \n        }\n        uint256 rewardXP = signInRewards[consecutiveSignInDays[msg.sender]];\n        lastSignInDate[msg.sender] = today;\n        emit UserSignedIn(msg.sender, today, consecutiveSignInDays[msg.sender], rewardXP);\n    }\n    function setMaxConsecutiveDays(uint256 _maxDays) external onlyAdmin {\n        maxConsecutiveDays = _maxDays;\n    }\n    function setSignInInterval(uint256 _interval) external onlyAdmin {\n        signInInterval = _interval;\n    }\n    function setSignInReward(uint256 day, uint256 rewardXP) external onlyAdmin {\n        signInRewards[day] = rewardXP;\n    }\n    function setDefaultRewards() public onlyAdmin {\n        signInRewards[1] = 2;\n        signInRewards[2] = 4;\n        signInRewards[3] = 6;\n        signInRewards[4] = 8;\n        signInRewards[5] = 10;\n        signInRewards[6] = 12;\n        signInRewards[7] = 15;\n    }\n    function getSignInInterval() public view returns (uint256) {\n        return signInInterval;\n    }\n    function getRewardXP(uint256 day) public view returns (uint256) {\n        return signInRewards[day];\n    }\n    function hasBrokenStreak(address user) public view returns (bool) {\n        uint256 today = _getStartOfUTC8Day(block.timestamp);\n        uint256 yesterday = today - signInInterval;\n        return lastSignInDate[user] != yesterday && lastSignInDate[user] != today;\n    }\n    function getConsecutiveSignInDays(address user) public view returns (uint256) {\n        if (hasBrokenStreak(user)) {\n            return 0;\n        }\n        return consecutiveSignInDays[user];\n    }\n    function getLastSignInDate(address user) public view returns (uint256) {\n        return lastSignInDate[user];\n    }\n    function getTimeUntilNextSignIn(address user) public view returns (uint256) {\n        uint256 currentTime = block.timestamp;\n        uint256 startOfToday = _getStartOfUTC8Day(currentTime);\n        uint256 startOfNextDay = startOfToday + signInInterval;\n        if (lastSignInDate[user] == startOfToday) {\n            return startOfNextDay - currentTime;\n        } else {\n            return 0;\n        }\n    }\n    function updateSignReward(uint256 day, uint256 reward) external onlyAdmin {\n        signInRewards[day] = reward;\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'private', 'node_count': 5, 'relative_file_path': './testDownload/56/0xe3ba0072d1da98269133852fba1795419d72baf4/0xe3ba0072d1da98269133852fba1795419d72baf4.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0xe3ba0072d1da98269133852fba1795419d72baf4/0xe3ba0072d1da98269133852fba1795419d72baf4.sol'}
{'type': 'FunctionDefinition', 'name': 'DailySignIn.signIn', 'start_line': 24, 'end_line': 35, 'offset_start': 908, 'offset_end': 1555, 'content': 'function signIn() external {\n        uint256 today = _getStartOfUTC8Day(block.timestamp);\n        require(lastSignInDate[msg.sender] < today, "Already signed in for today");\n        if (lastSignInDate[msg.sender] == today - signInInterval) {\n            consecutiveSignInDays[msg.sender] = (consecutiveSignInDays[msg.sender] % maxConsecutiveDays) + 1;\n        } else {\n            consecutiveSignInDays[msg.sender] = 1; \n        }\n        uint256 rewardXP = signInRewards[consecutiveSignInDays[msg.sender]];\n        lastSignInDate[msg.sender] = today;\n        emit UserSignedIn(msg.sender, today, consecutiveSignInDays[msg.sender], rewardXP);\n    }', 'contract_name': 'DailySignIn', 'contract_code': '{\n    address public admin;\n    mapping(address => uint256) private lastSignInDate;\n    mapping(address => uint256) private consecutiveSignInDays;\n    mapping(uint256 => uint256) private signInRewards;\n    uint256 private maxConsecutiveDays;\n    uint256 private signInInterval = 1 days;\n    uint256 private constant TIME_OFFSET = 8 hours; \n    event UserSignedIn(address indexed user, uint256 date, uint256 consecutiveDays, uint256 rewardXP);\n    constructor() {\n        admin = msg.sender;\n        maxConsecutiveDays = 7;\n        setDefaultRewards();\n    }\n    modifier onlyAdmin() {\n        require(msg.sender == admin, "Only admin can call this function.");\n        _;\n    }\n    function _getStartOfUTC8Day(uint256 timestamp) private view returns (uint256) {\n        return (timestamp + TIME_OFFSET) / signInInterval * signInInterval - TIME_OFFSET;\n    }\n    function signIn() external {\n        uint256 today = _getStartOfUTC8Day(block.timestamp);\n        require(lastSignInDate[msg.sender] < today, "Already signed in for today");\n        if (lastSignInDate[msg.sender] == today - signInInterval) {\n            consecutiveSignInDays[msg.sender] = (consecutiveSignInDays[msg.sender] % maxConsecutiveDays) + 1;\n        } else {\n            consecutiveSignInDays[msg.sender] = 1; \n        }\n        uint256 rewardXP = signInRewards[consecutiveSignInDays[msg.sender]];\n        lastSignInDate[msg.sender] = today;\n        emit UserSignedIn(msg.sender, today, consecutiveSignInDays[msg.sender], rewardXP);\n    }\n    function setMaxConsecutiveDays(uint256 _maxDays) external onlyAdmin {\n        maxConsecutiveDays = _maxDays;\n    }\n    function setSignInInterval(uint256 _interval) external onlyAdmin {\n        signInInterval = _interval;\n    }\n    function setSignInReward(uint256 day, uint256 rewardXP) external onlyAdmin {\n        signInRewards[day] = rewardXP;\n    }\n    function setDefaultRewards() public onlyAdmin {\n        signInRewards[1] = 2;\n        signInRewards[2] = 4;\n        signInRewards[3] = 6;\n        signInRewards[4] = 8;\n        signInRewards[5] = 10;\n        signInRewards[6] = 12;\n        signInRewards[7] = 15;\n    }\n    function getSignInInterval() public view returns (uint256) {\n        return signInInterval;\n    }\n    function getRewardXP(uint256 day) public view returns (uint256) {\n        return signInRewards[day];\n    }\n    function hasBrokenStreak(address user) public view returns (bool) {\n        uint256 today = _getStartOfUTC8Day(block.timestamp);\n        uint256 yesterday = today - signInInterval;\n        return lastSignInDate[user] != yesterday && lastSignInDate[user] != today;\n    }\n    function getConsecutiveSignInDays(address user) public view returns (uint256) {\n        if (hasBrokenStreak(user)) {\n            return 0;\n        }\n        return consecutiveSignInDays[user];\n    }\n    function getLastSignInDate(address user) public view returns (uint256) {\n        return lastSignInDate[user];\n    }\n    function getTimeUntilNextSignIn(address user) public view returns (uint256) {\n        uint256 currentTime = block.timestamp;\n        uint256 startOfToday = _getStartOfUTC8Day(currentTime);\n        uint256 startOfNextDay = startOfToday + signInInterval;\n        if (lastSignInDate[user] == startOfToday) {\n            return startOfNextDay - currentTime;\n        } else {\n            return 0;\n        }\n    }\n    function updateSignReward(uint256 day, uint256 reward) external onlyAdmin {\n        signInRewards[day] = reward;\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/56/0xe3ba0072d1da98269133852fba1795419d72baf4/0xe3ba0072d1da98269133852fba1795419d72baf4.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0xe3ba0072d1da98269133852fba1795419d72baf4/0xe3ba0072d1da98269133852fba1795419d72baf4.sol'}
{'type': 'FunctionDefinition', 'name': 'DailySignIn.setMaxConsecutiveDays', 'start_line': 36, 'end_line': 38, 'offset_start': 1561, 'offset_end': 1674, 'content': 'function setMaxConsecutiveDays(uint256 _maxDays) external onlyAdmin {\n        maxConsecutiveDays = _maxDays;\n    }', 'contract_name': 'DailySignIn', 'contract_code': '{\n    address public admin;\n    mapping(address => uint256) private lastSignInDate;\n    mapping(address => uint256) private consecutiveSignInDays;\n    mapping(uint256 => uint256) private signInRewards;\n    uint256 private maxConsecutiveDays;\n    uint256 private signInInterval = 1 days;\n    uint256 private constant TIME_OFFSET = 8 hours; \n    event UserSignedIn(address indexed user, uint256 date, uint256 consecutiveDays, uint256 rewardXP);\n    constructor() {\n        admin = msg.sender;\n        maxConsecutiveDays = 7;\n        setDefaultRewards();\n    }\n    modifier onlyAdmin() {\n        require(msg.sender == admin, "Only admin can call this function.");\n        _;\n    }\n    function _getStartOfUTC8Day(uint256 timestamp) private view returns (uint256) {\n        return (timestamp + TIME_OFFSET) / signInInterval * signInInterval - TIME_OFFSET;\n    }\n    function signIn() external {\n        uint256 today = _getStartOfUTC8Day(block.timestamp);\n        require(lastSignInDate[msg.sender] < today, "Already signed in for today");\n        if (lastSignInDate[msg.sender] == today - signInInterval) {\n            consecutiveSignInDays[msg.sender] = (consecutiveSignInDays[msg.sender] % maxConsecutiveDays) + 1;\n        } else {\n            consecutiveSignInDays[msg.sender] = 1; \n        }\n        uint256 rewardXP = signInRewards[consecutiveSignInDays[msg.sender]];\n        lastSignInDate[msg.sender] = today;\n        emit UserSignedIn(msg.sender, today, consecutiveSignInDays[msg.sender], rewardXP);\n    }\n    function setMaxConsecutiveDays(uint256 _maxDays) external onlyAdmin {\n        maxConsecutiveDays = _maxDays;\n    }\n    function setSignInInterval(uint256 _interval) external onlyAdmin {\n        signInInterval = _interval;\n    }\n    function setSignInReward(uint256 day, uint256 rewardXP) external onlyAdmin {\n        signInRewards[day] = rewardXP;\n    }\n    function setDefaultRewards() public onlyAdmin {\n        signInRewards[1] = 2;\n        signInRewards[2] = 4;\n        signInRewards[3] = 6;\n        signInRewards[4] = 8;\n        signInRewards[5] = 10;\n        signInRewards[6] = 12;\n        signInRewards[7] = 15;\n    }\n    function getSignInInterval() public view returns (uint256) {\n        return signInInterval;\n    }\n    function getRewardXP(uint256 day) public view returns (uint256) {\n        return signInRewards[day];\n    }\n    function hasBrokenStreak(address user) public view returns (bool) {\n        uint256 today = _getStartOfUTC8Day(block.timestamp);\n        uint256 yesterday = today - signInInterval;\n        return lastSignInDate[user] != yesterday && lastSignInDate[user] != today;\n    }\n    function getConsecutiveSignInDays(address user) public view returns (uint256) {\n        if (hasBrokenStreak(user)) {\n            return 0;\n        }\n        return consecutiveSignInDays[user];\n    }\n    function getLastSignInDate(address user) public view returns (uint256) {\n        return lastSignInDate[user];\n    }\n    function getTimeUntilNextSignIn(address user) public view returns (uint256) {\n        uint256 currentTime = block.timestamp;\n        uint256 startOfToday = _getStartOfUTC8Day(currentTime);\n        uint256 startOfNextDay = startOfToday + signInInterval;\n        if (lastSignInDate[user] == startOfToday) {\n            return startOfNextDay - currentTime;\n        } else {\n            return 0;\n        }\n    }\n    function updateSignReward(uint256 day, uint256 reward) external onlyAdmin {\n        signInRewards[day] = reward;\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/56/0xe3ba0072d1da98269133852fba1795419d72baf4/0xe3ba0072d1da98269133852fba1795419d72baf4.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0xe3ba0072d1da98269133852fba1795419d72baf4/0xe3ba0072d1da98269133852fba1795419d72baf4.sol'}
{'type': 'FunctionDefinition', 'name': 'DailySignIn.setSignInInterval', 'start_line': 39, 'end_line': 41, 'offset_start': 1680, 'offset_end': 1787, 'content': 'function setSignInInterval(uint256 _interval) external onlyAdmin {\n        signInInterval = _interval;\n    }', 'contract_name': 'DailySignIn', 'contract_code': '{\n    address public admin;\n    mapping(address => uint256) private lastSignInDate;\n    mapping(address => uint256) private consecutiveSignInDays;\n    mapping(uint256 => uint256) private signInRewards;\n    uint256 private maxConsecutiveDays;\n    uint256 private signInInterval = 1 days;\n    uint256 private constant TIME_OFFSET = 8 hours; \n    event UserSignedIn(address indexed user, uint256 date, uint256 consecutiveDays, uint256 rewardXP);\n    constructor() {\n        admin = msg.sender;\n        maxConsecutiveDays = 7;\n        setDefaultRewards();\n    }\n    modifier onlyAdmin() {\n        require(msg.sender == admin, "Only admin can call this function.");\n        _;\n    }\n    function _getStartOfUTC8Day(uint256 timestamp) private view returns (uint256) {\n        return (timestamp + TIME_OFFSET) / signInInterval * signInInterval - TIME_OFFSET;\n    }\n    function signIn() external {\n        uint256 today = _getStartOfUTC8Day(block.timestamp);\n        require(lastSignInDate[msg.sender] < today, "Already signed in for today");\n        if (lastSignInDate[msg.sender] == today - signInInterval) {\n            consecutiveSignInDays[msg.sender] = (consecutiveSignInDays[msg.sender] % maxConsecutiveDays) + 1;\n        } else {\n            consecutiveSignInDays[msg.sender] = 1; \n        }\n        uint256 rewardXP = signInRewards[consecutiveSignInDays[msg.sender]];\n        lastSignInDate[msg.sender] = today;\n        emit UserSignedIn(msg.sender, today, consecutiveSignInDays[msg.sender], rewardXP);\n    }\n    function setMaxConsecutiveDays(uint256 _maxDays) external onlyAdmin {\n        maxConsecutiveDays = _maxDays;\n    }\n    function setSignInInterval(uint256 _interval) external onlyAdmin {\n        signInInterval = _interval;\n    }\n    function setSignInReward(uint256 day, uint256 rewardXP) external onlyAdmin {\n        signInRewards[day] = rewardXP;\n    }\n    function setDefaultRewards() public onlyAdmin {\n        signInRewards[1] = 2;\n        signInRewards[2] = 4;\n        signInRewards[3] = 6;\n        signInRewards[4] = 8;\n        signInRewards[5] = 10;\n        signInRewards[6] = 12;\n        signInRewards[7] = 15;\n    }\n    function getSignInInterval() public view returns (uint256) {\n        return signInInterval;\n    }\n    function getRewardXP(uint256 day) public view returns (uint256) {\n        return signInRewards[day];\n    }\n    function hasBrokenStreak(address user) public view returns (bool) {\n        uint256 today = _getStartOfUTC8Day(block.timestamp);\n        uint256 yesterday = today - signInInterval;\n        return lastSignInDate[user] != yesterday && lastSignInDate[user] != today;\n    }\n    function getConsecutiveSignInDays(address user) public view returns (uint256) {\n        if (hasBrokenStreak(user)) {\n            return 0;\n        }\n        return consecutiveSignInDays[user];\n    }\n    function getLastSignInDate(address user) public view returns (uint256) {\n        return lastSignInDate[user];\n    }\n    function getTimeUntilNextSignIn(address user) public view returns (uint256) {\n        uint256 currentTime = block.timestamp;\n        uint256 startOfToday = _getStartOfUTC8Day(currentTime);\n        uint256 startOfNextDay = startOfToday + signInInterval;\n        if (lastSignInDate[user] == startOfToday) {\n            return startOfNextDay - currentTime;\n        } else {\n            return 0;\n        }\n    }\n    function updateSignReward(uint256 day, uint256 reward) external onlyAdmin {\n        signInRewards[day] = reward;\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/56/0xe3ba0072d1da98269133852fba1795419d72baf4/0xe3ba0072d1da98269133852fba1795419d72baf4.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0xe3ba0072d1da98269133852fba1795419d72baf4/0xe3ba0072d1da98269133852fba1795419d72baf4.sol'}
{'type': 'FunctionDefinition', 'name': 'DailySignIn.setSignInReward', 'start_line': 42, 'end_line': 44, 'offset_start': 1793, 'offset_end': 1913, 'content': 'function setSignInReward(uint256 day, uint256 rewardXP) external onlyAdmin {\n        signInRewards[day] = rewardXP;\n    }', 'contract_name': 'DailySignIn', 'contract_code': '{\n    address public admin;\n    mapping(address => uint256) private lastSignInDate;\n    mapping(address => uint256) private consecutiveSignInDays;\n    mapping(uint256 => uint256) private signInRewards;\n    uint256 private maxConsecutiveDays;\n    uint256 private signInInterval = 1 days;\n    uint256 private constant TIME_OFFSET = 8 hours; \n    event UserSignedIn(address indexed user, uint256 date, uint256 consecutiveDays, uint256 rewardXP);\n    constructor() {\n        admin = msg.sender;\n        maxConsecutiveDays = 7;\n        setDefaultRewards();\n    }\n    modifier onlyAdmin() {\n        require(msg.sender == admin, "Only admin can call this function.");\n        _;\n    }\n    function _getStartOfUTC8Day(uint256 timestamp) private view returns (uint256) {\n        return (timestamp + TIME_OFFSET) / signInInterval * signInInterval - TIME_OFFSET;\n    }\n    function signIn() external {\n        uint256 today = _getStartOfUTC8Day(block.timestamp);\n        require(lastSignInDate[msg.sender] < today, "Already signed in for today");\n        if (lastSignInDate[msg.sender] == today - signInInterval) {\n            consecutiveSignInDays[msg.sender] = (consecutiveSignInDays[msg.sender] % maxConsecutiveDays) + 1;\n        } else {\n            consecutiveSignInDays[msg.sender] = 1; \n        }\n        uint256 rewardXP = signInRewards[consecutiveSignInDays[msg.sender]];\n        lastSignInDate[msg.sender] = today;\n        emit UserSignedIn(msg.sender, today, consecutiveSignInDays[msg.sender], rewardXP);\n    }\n    function setMaxConsecutiveDays(uint256 _maxDays) external onlyAdmin {\n        maxConsecutiveDays = _maxDays;\n    }\n    function setSignInInterval(uint256 _interval) external onlyAdmin {\n        signInInterval = _interval;\n    }\n    function setSignInReward(uint256 day, uint256 rewardXP) external onlyAdmin {\n        signInRewards[day] = rewardXP;\n    }\n    function setDefaultRewards() public onlyAdmin {\n        signInRewards[1] = 2;\n        signInRewards[2] = 4;\n        signInRewards[3] = 6;\n        signInRewards[4] = 8;\n        signInRewards[5] = 10;\n        signInRewards[6] = 12;\n        signInRewards[7] = 15;\n    }\n    function getSignInInterval() public view returns (uint256) {\n        return signInInterval;\n    }\n    function getRewardXP(uint256 day) public view returns (uint256) {\n        return signInRewards[day];\n    }\n    function hasBrokenStreak(address user) public view returns (bool) {\n        uint256 today = _getStartOfUTC8Day(block.timestamp);\n        uint256 yesterday = today - signInInterval;\n        return lastSignInDate[user] != yesterday && lastSignInDate[user] != today;\n    }\n    function getConsecutiveSignInDays(address user) public view returns (uint256) {\n        if (hasBrokenStreak(user)) {\n            return 0;\n        }\n        return consecutiveSignInDays[user];\n    }\n    function getLastSignInDate(address user) public view returns (uint256) {\n        return lastSignInDate[user];\n    }\n    function getTimeUntilNextSignIn(address user) public view returns (uint256) {\n        uint256 currentTime = block.timestamp;\n        uint256 startOfToday = _getStartOfUTC8Day(currentTime);\n        uint256 startOfNextDay = startOfToday + signInInterval;\n        if (lastSignInDate[user] == startOfToday) {\n            return startOfNextDay - currentTime;\n        } else {\n            return 0;\n        }\n    }\n    function updateSignReward(uint256 day, uint256 reward) external onlyAdmin {\n        signInRewards[day] = reward;\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/56/0xe3ba0072d1da98269133852fba1795419d72baf4/0xe3ba0072d1da98269133852fba1795419d72baf4.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0xe3ba0072d1da98269133852fba1795419d72baf4/0xe3ba0072d1da98269133852fba1795419d72baf4.sol'}
{'type': 'FunctionDefinition', 'name': 'DailySignIn.setDefaultRewards', 'start_line': 45, 'end_line': 53, 'offset_start': 1919, 'offset_end': 2184, 'content': 'function setDefaultRewards() public onlyAdmin {\n        signInRewards[1] = 2;\n        signInRewards[2] = 4;\n        signInRewards[3] = 6;\n        signInRewards[4] = 8;\n        signInRewards[5] = 10;\n        signInRewards[6] = 12;\n        signInRewards[7] = 15;\n    }', 'contract_name': 'DailySignIn', 'contract_code': '{\n    address public admin;\n    mapping(address => uint256) private lastSignInDate;\n    mapping(address => uint256) private consecutiveSignInDays;\n    mapping(uint256 => uint256) private signInRewards;\n    uint256 private maxConsecutiveDays;\n    uint256 private signInInterval = 1 days;\n    uint256 private constant TIME_OFFSET = 8 hours; \n    event UserSignedIn(address indexed user, uint256 date, uint256 consecutiveDays, uint256 rewardXP);\n    constructor() {\n        admin = msg.sender;\n        maxConsecutiveDays = 7;\n        setDefaultRewards();\n    }\n    modifier onlyAdmin() {\n        require(msg.sender == admin, "Only admin can call this function.");\n        _;\n    }\n    function _getStartOfUTC8Day(uint256 timestamp) private view returns (uint256) {\n        return (timestamp + TIME_OFFSET) / signInInterval * signInInterval - TIME_OFFSET;\n    }\n    function signIn() external {\n        uint256 today = _getStartOfUTC8Day(block.timestamp);\n        require(lastSignInDate[msg.sender] < today, "Already signed in for today");\n        if (lastSignInDate[msg.sender] == today - signInInterval) {\n            consecutiveSignInDays[msg.sender] = (consecutiveSignInDays[msg.sender] % maxConsecutiveDays) + 1;\n        } else {\n            consecutiveSignInDays[msg.sender] = 1; \n        }\n        uint256 rewardXP = signInRewards[consecutiveSignInDays[msg.sender]];\n        lastSignInDate[msg.sender] = today;\n        emit UserSignedIn(msg.sender, today, consecutiveSignInDays[msg.sender], rewardXP);\n    }\n    function setMaxConsecutiveDays(uint256 _maxDays) external onlyAdmin {\n        maxConsecutiveDays = _maxDays;\n    }\n    function setSignInInterval(uint256 _interval) external onlyAdmin {\n        signInInterval = _interval;\n    }\n    function setSignInReward(uint256 day, uint256 rewardXP) external onlyAdmin {\n        signInRewards[day] = rewardXP;\n    }\n    function setDefaultRewards() public onlyAdmin {\n        signInRewards[1] = 2;\n        signInRewards[2] = 4;\n        signInRewards[3] = 6;\n        signInRewards[4] = 8;\n        signInRewards[5] = 10;\n        signInRewards[6] = 12;\n        signInRewards[7] = 15;\n    }\n    function getSignInInterval() public view returns (uint256) {\n        return signInInterval;\n    }\n    function getRewardXP(uint256 day) public view returns (uint256) {\n        return signInRewards[day];\n    }\n    function hasBrokenStreak(address user) public view returns (bool) {\n        uint256 today = _getStartOfUTC8Day(block.timestamp);\n        uint256 yesterday = today - signInInterval;\n        return lastSignInDate[user] != yesterday && lastSignInDate[user] != today;\n    }\n    function getConsecutiveSignInDays(address user) public view returns (uint256) {\n        if (hasBrokenStreak(user)) {\n            return 0;\n        }\n        return consecutiveSignInDays[user];\n    }\n    function getLastSignInDate(address user) public view returns (uint256) {\n        return lastSignInDate[user];\n    }\n    function getTimeUntilNextSignIn(address user) public view returns (uint256) {\n        uint256 currentTime = block.timestamp;\n        uint256 startOfToday = _getStartOfUTC8Day(currentTime);\n        uint256 startOfNextDay = startOfToday + signInInterval;\n        if (lastSignInDate[user] == startOfToday) {\n            return startOfNextDay - currentTime;\n        } else {\n            return 0;\n        }\n    }\n    function updateSignReward(uint256 day, uint256 reward) external onlyAdmin {\n        signInRewards[day] = reward;\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/56/0xe3ba0072d1da98269133852fba1795419d72baf4/0xe3ba0072d1da98269133852fba1795419d72baf4.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0xe3ba0072d1da98269133852fba1795419d72baf4/0xe3ba0072d1da98269133852fba1795419d72baf4.sol'}
{'type': 'FunctionDefinition', 'name': 'DailySignIn.getSignInInterval', 'start_line': 54, 'end_line': 56, 'offset_start': 2190, 'offset_end': 2286, 'content': 'function getSignInInterval() public view returns (uint256) {\n        return signInInterval;\n    }', 'contract_name': 'DailySignIn', 'contract_code': '{\n    address public admin;\n    mapping(address => uint256) private lastSignInDate;\n    mapping(address => uint256) private consecutiveSignInDays;\n    mapping(uint256 => uint256) private signInRewards;\n    uint256 private maxConsecutiveDays;\n    uint256 private signInInterval = 1 days;\n    uint256 private constant TIME_OFFSET = 8 hours; \n    event UserSignedIn(address indexed user, uint256 date, uint256 consecutiveDays, uint256 rewardXP);\n    constructor() {\n        admin = msg.sender;\n        maxConsecutiveDays = 7;\n        setDefaultRewards();\n    }\n    modifier onlyAdmin() {\n        require(msg.sender == admin, "Only admin can call this function.");\n        _;\n    }\n    function _getStartOfUTC8Day(uint256 timestamp) private view returns (uint256) {\n        return (timestamp + TIME_OFFSET) / signInInterval * signInInterval - TIME_OFFSET;\n    }\n    function signIn() external {\n        uint256 today = _getStartOfUTC8Day(block.timestamp);\n        require(lastSignInDate[msg.sender] < today, "Already signed in for today");\n        if (lastSignInDate[msg.sender] == today - signInInterval) {\n            consecutiveSignInDays[msg.sender] = (consecutiveSignInDays[msg.sender] % maxConsecutiveDays) + 1;\n        } else {\n            consecutiveSignInDays[msg.sender] = 1; \n        }\n        uint256 rewardXP = signInRewards[consecutiveSignInDays[msg.sender]];\n        lastSignInDate[msg.sender] = today;\n        emit UserSignedIn(msg.sender, today, consecutiveSignInDays[msg.sender], rewardXP);\n    }\n    function setMaxConsecutiveDays(uint256 _maxDays) external onlyAdmin {\n        maxConsecutiveDays = _maxDays;\n    }\n    function setSignInInterval(uint256 _interval) external onlyAdmin {\n        signInInterval = _interval;\n    }\n    function setSignInReward(uint256 day, uint256 rewardXP) external onlyAdmin {\n        signInRewards[day] = rewardXP;\n    }\n    function setDefaultRewards() public onlyAdmin {\n        signInRewards[1] = 2;\n        signInRewards[2] = 4;\n        signInRewards[3] = 6;\n        signInRewards[4] = 8;\n        signInRewards[5] = 10;\n        signInRewards[6] = 12;\n        signInRewards[7] = 15;\n    }\n    function getSignInInterval() public view returns (uint256) {\n        return signInInterval;\n    }\n    function getRewardXP(uint256 day) public view returns (uint256) {\n        return signInRewards[day];\n    }\n    function hasBrokenStreak(address user) public view returns (bool) {\n        uint256 today = _getStartOfUTC8Day(block.timestamp);\n        uint256 yesterday = today - signInInterval;\n        return lastSignInDate[user] != yesterday && lastSignInDate[user] != today;\n    }\n    function getConsecutiveSignInDays(address user) public view returns (uint256) {\n        if (hasBrokenStreak(user)) {\n            return 0;\n        }\n        return consecutiveSignInDays[user];\n    }\n    function getLastSignInDate(address user) public view returns (uint256) {\n        return lastSignInDate[user];\n    }\n    function getTimeUntilNextSignIn(address user) public view returns (uint256) {\n        uint256 currentTime = block.timestamp;\n        uint256 startOfToday = _getStartOfUTC8Day(currentTime);\n        uint256 startOfNextDay = startOfToday + signInInterval;\n        if (lastSignInDate[user] == startOfToday) {\n            return startOfNextDay - currentTime;\n        } else {\n            return 0;\n        }\n    }\n    function updateSignReward(uint256 day, uint256 reward) external onlyAdmin {\n        signInRewards[day] = reward;\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/56/0xe3ba0072d1da98269133852fba1795419d72baf4/0xe3ba0072d1da98269133852fba1795419d72baf4.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0xe3ba0072d1da98269133852fba1795419d72baf4/0xe3ba0072d1da98269133852fba1795419d72baf4.sol'}
{'type': 'FunctionDefinition', 'name': 'DailySignIn.getRewardXP', 'start_line': 57, 'end_line': 59, 'offset_start': 2292, 'offset_end': 2397, 'content': 'function getRewardXP(uint256 day) public view returns (uint256) {\n        return signInRewards[day];\n    }', 'contract_name': 'DailySignIn', 'contract_code': '{\n    address public admin;\n    mapping(address => uint256) private lastSignInDate;\n    mapping(address => uint256) private consecutiveSignInDays;\n    mapping(uint256 => uint256) private signInRewards;\n    uint256 private maxConsecutiveDays;\n    uint256 private signInInterval = 1 days;\n    uint256 private constant TIME_OFFSET = 8 hours; \n    event UserSignedIn(address indexed user, uint256 date, uint256 consecutiveDays, uint256 rewardXP);\n    constructor() {\n        admin = msg.sender;\n        maxConsecutiveDays = 7;\n        setDefaultRewards();\n    }\n    modifier onlyAdmin() {\n        require(msg.sender == admin, "Only admin can call this function.");\n        _;\n    }\n    function _getStartOfUTC8Day(uint256 timestamp) private view returns (uint256) {\n        return (timestamp + TIME_OFFSET) / signInInterval * signInInterval - TIME_OFFSET;\n    }\n    function signIn() external {\n        uint256 today = _getStartOfUTC8Day(block.timestamp);\n        require(lastSignInDate[msg.sender] < today, "Already signed in for today");\n        if (lastSignInDate[msg.sender] == today - signInInterval) {\n            consecutiveSignInDays[msg.sender] = (consecutiveSignInDays[msg.sender] % maxConsecutiveDays) + 1;\n        } else {\n            consecutiveSignInDays[msg.sender] = 1; \n        }\n        uint256 rewardXP = signInRewards[consecutiveSignInDays[msg.sender]];\n        lastSignInDate[msg.sender] = today;\n        emit UserSignedIn(msg.sender, today, consecutiveSignInDays[msg.sender], rewardXP);\n    }\n    function setMaxConsecutiveDays(uint256 _maxDays) external onlyAdmin {\n        maxConsecutiveDays = _maxDays;\n    }\n    function setSignInInterval(uint256 _interval) external onlyAdmin {\n        signInInterval = _interval;\n    }\n    function setSignInReward(uint256 day, uint256 rewardXP) external onlyAdmin {\n        signInRewards[day] = rewardXP;\n    }\n    function setDefaultRewards() public onlyAdmin {\n        signInRewards[1] = 2;\n        signInRewards[2] = 4;\n        signInRewards[3] = 6;\n        signInRewards[4] = 8;\n        signInRewards[5] = 10;\n        signInRewards[6] = 12;\n        signInRewards[7] = 15;\n    }\n    function getSignInInterval() public view returns (uint256) {\n        return signInInterval;\n    }\n    function getRewardXP(uint256 day) public view returns (uint256) {\n        return signInRewards[day];\n    }\n    function hasBrokenStreak(address user) public view returns (bool) {\n        uint256 today = _getStartOfUTC8Day(block.timestamp);\n        uint256 yesterday = today - signInInterval;\n        return lastSignInDate[user] != yesterday && lastSignInDate[user] != today;\n    }\n    function getConsecutiveSignInDays(address user) public view returns (uint256) {\n        if (hasBrokenStreak(user)) {\n            return 0;\n        }\n        return consecutiveSignInDays[user];\n    }\n    function getLastSignInDate(address user) public view returns (uint256) {\n        return lastSignInDate[user];\n    }\n    function getTimeUntilNextSignIn(address user) public view returns (uint256) {\n        uint256 currentTime = block.timestamp;\n        uint256 startOfToday = _getStartOfUTC8Day(currentTime);\n        uint256 startOfNextDay = startOfToday + signInInterval;\n        if (lastSignInDate[user] == startOfToday) {\n            return startOfNextDay - currentTime;\n        } else {\n            return 0;\n        }\n    }\n    function updateSignReward(uint256 day, uint256 reward) external onlyAdmin {\n        signInRewards[day] = reward;\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/56/0xe3ba0072d1da98269133852fba1795419d72baf4/0xe3ba0072d1da98269133852fba1795419d72baf4.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0xe3ba0072d1da98269133852fba1795419d72baf4/0xe3ba0072d1da98269133852fba1795419d72baf4.sol'}
{'type': 'FunctionDefinition', 'name': 'DailySignIn.hasBrokenStreak', 'start_line': 60, 'end_line': 64, 'offset_start': 2403, 'offset_end': 2671, 'content': 'function hasBrokenStreak(address user) public view returns (bool) {\n        uint256 today = _getStartOfUTC8Day(block.timestamp);\n        uint256 yesterday = today - signInInterval;\n        return lastSignInDate[user] != yesterday && lastSignInDate[user] != today;\n    }', 'contract_name': 'DailySignIn', 'contract_code': '{\n    address public admin;\n    mapping(address => uint256) private lastSignInDate;\n    mapping(address => uint256) private consecutiveSignInDays;\n    mapping(uint256 => uint256) private signInRewards;\n    uint256 private maxConsecutiveDays;\n    uint256 private signInInterval = 1 days;\n    uint256 private constant TIME_OFFSET = 8 hours; \n    event UserSignedIn(address indexed user, uint256 date, uint256 consecutiveDays, uint256 rewardXP);\n    constructor() {\n        admin = msg.sender;\n        maxConsecutiveDays = 7;\n        setDefaultRewards();\n    }\n    modifier onlyAdmin() {\n        require(msg.sender == admin, "Only admin can call this function.");\n        _;\n    }\n    function _getStartOfUTC8Day(uint256 timestamp) private view returns (uint256) {\n        return (timestamp + TIME_OFFSET) / signInInterval * signInInterval - TIME_OFFSET;\n    }\n    function signIn() external {\n        uint256 today = _getStartOfUTC8Day(block.timestamp);\n        require(lastSignInDate[msg.sender] < today, "Already signed in for today");\n        if (lastSignInDate[msg.sender] == today - signInInterval) {\n            consecutiveSignInDays[msg.sender] = (consecutiveSignInDays[msg.sender] % maxConsecutiveDays) + 1;\n        } else {\n            consecutiveSignInDays[msg.sender] = 1; \n        }\n        uint256 rewardXP = signInRewards[consecutiveSignInDays[msg.sender]];\n        lastSignInDate[msg.sender] = today;\n        emit UserSignedIn(msg.sender, today, consecutiveSignInDays[msg.sender], rewardXP);\n    }\n    function setMaxConsecutiveDays(uint256 _maxDays) external onlyAdmin {\n        maxConsecutiveDays = _maxDays;\n    }\n    function setSignInInterval(uint256 _interval) external onlyAdmin {\n        signInInterval = _interval;\n    }\n    function setSignInReward(uint256 day, uint256 rewardXP) external onlyAdmin {\n        signInRewards[day] = rewardXP;\n    }\n    function setDefaultRewards() public onlyAdmin {\n        signInRewards[1] = 2;\n        signInRewards[2] = 4;\n        signInRewards[3] = 6;\n        signInRewards[4] = 8;\n        signInRewards[5] = 10;\n        signInRewards[6] = 12;\n        signInRewards[7] = 15;\n    }\n    function getSignInInterval() public view returns (uint256) {\n        return signInInterval;\n    }\n    function getRewardXP(uint256 day) public view returns (uint256) {\n        return signInRewards[day];\n    }\n    function hasBrokenStreak(address user) public view returns (bool) {\n        uint256 today = _getStartOfUTC8Day(block.timestamp);\n        uint256 yesterday = today - signInInterval;\n        return lastSignInDate[user] != yesterday && lastSignInDate[user] != today;\n    }\n    function getConsecutiveSignInDays(address user) public view returns (uint256) {\n        if (hasBrokenStreak(user)) {\n            return 0;\n        }\n        return consecutiveSignInDays[user];\n    }\n    function getLastSignInDate(address user) public view returns (uint256) {\n        return lastSignInDate[user];\n    }\n    function getTimeUntilNextSignIn(address user) public view returns (uint256) {\n        uint256 currentTime = block.timestamp;\n        uint256 startOfToday = _getStartOfUTC8Day(currentTime);\n        uint256 startOfNextDay = startOfToday + signInInterval;\n        if (lastSignInDate[user] == startOfToday) {\n            return startOfNextDay - currentTime;\n        } else {\n            return 0;\n        }\n    }\n    function updateSignReward(uint256 day, uint256 reward) external onlyAdmin {\n        signInRewards[day] = reward;\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/56/0xe3ba0072d1da98269133852fba1795419d72baf4/0xe3ba0072d1da98269133852fba1795419d72baf4.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0xe3ba0072d1da98269133852fba1795419d72baf4/0xe3ba0072d1da98269133852fba1795419d72baf4.sol'}
{'type': 'FunctionDefinition', 'name': 'DailySignIn.getConsecutiveSignInDays', 'start_line': 65, 'end_line': 70, 'offset_start': 2677, 'offset_end': 2874, 'content': 'function getConsecutiveSignInDays(address user) public view returns (uint256) {\n        if (hasBrokenStreak(user)) {\n            return 0;\n        }\n        return consecutiveSignInDays[user];\n    }', 'contract_name': 'DailySignIn', 'contract_code': '{\n    address public admin;\n    mapping(address => uint256) private lastSignInDate;\n    mapping(address => uint256) private consecutiveSignInDays;\n    mapping(uint256 => uint256) private signInRewards;\n    uint256 private maxConsecutiveDays;\n    uint256 private signInInterval = 1 days;\n    uint256 private constant TIME_OFFSET = 8 hours; \n    event UserSignedIn(address indexed user, uint256 date, uint256 consecutiveDays, uint256 rewardXP);\n    constructor() {\n        admin = msg.sender;\n        maxConsecutiveDays = 7;\n        setDefaultRewards();\n    }\n    modifier onlyAdmin() {\n        require(msg.sender == admin, "Only admin can call this function.");\n        _;\n    }\n    function _getStartOfUTC8Day(uint256 timestamp) private view returns (uint256) {\n        return (timestamp + TIME_OFFSET) / signInInterval * signInInterval - TIME_OFFSET;\n    }\n    function signIn() external {\n        uint256 today = _getStartOfUTC8Day(block.timestamp);\n        require(lastSignInDate[msg.sender] < today, "Already signed in for today");\n        if (lastSignInDate[msg.sender] == today - signInInterval) {\n            consecutiveSignInDays[msg.sender] = (consecutiveSignInDays[msg.sender] % maxConsecutiveDays) + 1;\n        } else {\n            consecutiveSignInDays[msg.sender] = 1; \n        }\n        uint256 rewardXP = signInRewards[consecutiveSignInDays[msg.sender]];\n        lastSignInDate[msg.sender] = today;\n        emit UserSignedIn(msg.sender, today, consecutiveSignInDays[msg.sender], rewardXP);\n    }\n    function setMaxConsecutiveDays(uint256 _maxDays) external onlyAdmin {\n        maxConsecutiveDays = _maxDays;\n    }\n    function setSignInInterval(uint256 _interval) external onlyAdmin {\n        signInInterval = _interval;\n    }\n    function setSignInReward(uint256 day, uint256 rewardXP) external onlyAdmin {\n        signInRewards[day] = rewardXP;\n    }\n    function setDefaultRewards() public onlyAdmin {\n        signInRewards[1] = 2;\n        signInRewards[2] = 4;\n        signInRewards[3] = 6;\n        signInRewards[4] = 8;\n        signInRewards[5] = 10;\n        signInRewards[6] = 12;\n        signInRewards[7] = 15;\n    }\n    function getSignInInterval() public view returns (uint256) {\n        return signInInterval;\n    }\n    function getRewardXP(uint256 day) public view returns (uint256) {\n        return signInRewards[day];\n    }\n    function hasBrokenStreak(address user) public view returns (bool) {\n        uint256 today = _getStartOfUTC8Day(block.timestamp);\n        uint256 yesterday = today - signInInterval;\n        return lastSignInDate[user] != yesterday && lastSignInDate[user] != today;\n    }\n    function getConsecutiveSignInDays(address user) public view returns (uint256) {\n        if (hasBrokenStreak(user)) {\n            return 0;\n        }\n        return consecutiveSignInDays[user];\n    }\n    function getLastSignInDate(address user) public view returns (uint256) {\n        return lastSignInDate[user];\n    }\n    function getTimeUntilNextSignIn(address user) public view returns (uint256) {\n        uint256 currentTime = block.timestamp;\n        uint256 startOfToday = _getStartOfUTC8Day(currentTime);\n        uint256 startOfNextDay = startOfToday + signInInterval;\n        if (lastSignInDate[user] == startOfToday) {\n            return startOfNextDay - currentTime;\n        } else {\n            return 0;\n        }\n    }\n    function updateSignReward(uint256 day, uint256 reward) external onlyAdmin {\n        signInRewards[day] = reward;\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/56/0xe3ba0072d1da98269133852fba1795419d72baf4/0xe3ba0072d1da98269133852fba1795419d72baf4.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0xe3ba0072d1da98269133852fba1795419d72baf4/0xe3ba0072d1da98269133852fba1795419d72baf4.sol'}
{'type': 'FunctionDefinition', 'name': 'DailySignIn.getLastSignInDate', 'start_line': 71, 'end_line': 73, 'offset_start': 2880, 'offset_end': 2994, 'content': 'function getLastSignInDate(address user) public view returns (uint256) {\n        return lastSignInDate[user];\n    }', 'contract_name': 'DailySignIn', 'contract_code': '{\n    address public admin;\n    mapping(address => uint256) private lastSignInDate;\n    mapping(address => uint256) private consecutiveSignInDays;\n    mapping(uint256 => uint256) private signInRewards;\n    uint256 private maxConsecutiveDays;\n    uint256 private signInInterval = 1 days;\n    uint256 private constant TIME_OFFSET = 8 hours; \n    event UserSignedIn(address indexed user, uint256 date, uint256 consecutiveDays, uint256 rewardXP);\n    constructor() {\n        admin = msg.sender;\n        maxConsecutiveDays = 7;\n        setDefaultRewards();\n    }\n    modifier onlyAdmin() {\n        require(msg.sender == admin, "Only admin can call this function.");\n        _;\n    }\n    function _getStartOfUTC8Day(uint256 timestamp) private view returns (uint256) {\n        return (timestamp + TIME_OFFSET) / signInInterval * signInInterval - TIME_OFFSET;\n    }\n    function signIn() external {\n        uint256 today = _getStartOfUTC8Day(block.timestamp);\n        require(lastSignInDate[msg.sender] < today, "Already signed in for today");\n        if (lastSignInDate[msg.sender] == today - signInInterval) {\n            consecutiveSignInDays[msg.sender] = (consecutiveSignInDays[msg.sender] % maxConsecutiveDays) + 1;\n        } else {\n            consecutiveSignInDays[msg.sender] = 1; \n        }\n        uint256 rewardXP = signInRewards[consecutiveSignInDays[msg.sender]];\n        lastSignInDate[msg.sender] = today;\n        emit UserSignedIn(msg.sender, today, consecutiveSignInDays[msg.sender], rewardXP);\n    }\n    function setMaxConsecutiveDays(uint256 _maxDays) external onlyAdmin {\n        maxConsecutiveDays = _maxDays;\n    }\n    function setSignInInterval(uint256 _interval) external onlyAdmin {\n        signInInterval = _interval;\n    }\n    function setSignInReward(uint256 day, uint256 rewardXP) external onlyAdmin {\n        signInRewards[day] = rewardXP;\n    }\n    function setDefaultRewards() public onlyAdmin {\n        signInRewards[1] = 2;\n        signInRewards[2] = 4;\n        signInRewards[3] = 6;\n        signInRewards[4] = 8;\n        signInRewards[5] = 10;\n        signInRewards[6] = 12;\n        signInRewards[7] = 15;\n    }\n    function getSignInInterval() public view returns (uint256) {\n        return signInInterval;\n    }\n    function getRewardXP(uint256 day) public view returns (uint256) {\n        return signInRewards[day];\n    }\n    function hasBrokenStreak(address user) public view returns (bool) {\n        uint256 today = _getStartOfUTC8Day(block.timestamp);\n        uint256 yesterday = today - signInInterval;\n        return lastSignInDate[user] != yesterday && lastSignInDate[user] != today;\n    }\n    function getConsecutiveSignInDays(address user) public view returns (uint256) {\n        if (hasBrokenStreak(user)) {\n            return 0;\n        }\n        return consecutiveSignInDays[user];\n    }\n    function getLastSignInDate(address user) public view returns (uint256) {\n        return lastSignInDate[user];\n    }\n    function getTimeUntilNextSignIn(address user) public view returns (uint256) {\n        uint256 currentTime = block.timestamp;\n        uint256 startOfToday = _getStartOfUTC8Day(currentTime);\n        uint256 startOfNextDay = startOfToday + signInInterval;\n        if (lastSignInDate[user] == startOfToday) {\n            return startOfNextDay - currentTime;\n        } else {\n            return 0;\n        }\n    }\n    function updateSignReward(uint256 day, uint256 reward) external onlyAdmin {\n        signInRewards[day] = reward;\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/56/0xe3ba0072d1da98269133852fba1795419d72baf4/0xe3ba0072d1da98269133852fba1795419d72baf4.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0xe3ba0072d1da98269133852fba1795419d72baf4/0xe3ba0072d1da98269133852fba1795419d72baf4.sol'}
{'type': 'FunctionDefinition', 'name': 'DailySignIn.getTimeUntilNextSignIn', 'start_line': 74, 'end_line': 83, 'offset_start': 3000, 'offset_end': 3407, 'content': 'function getTimeUntilNextSignIn(address user) public view returns (uint256) {\n        uint256 currentTime = block.timestamp;\n        uint256 startOfToday = _getStartOfUTC8Day(currentTime);\n        uint256 startOfNextDay = startOfToday + signInInterval;\n        if (lastSignInDate[user] == startOfToday) {\n            return startOfNextDay - currentTime;\n        } else {\n            return 0;\n        }\n    }', 'contract_name': 'DailySignIn', 'contract_code': '{\n    address public admin;\n    mapping(address => uint256) private lastSignInDate;\n    mapping(address => uint256) private consecutiveSignInDays;\n    mapping(uint256 => uint256) private signInRewards;\n    uint256 private maxConsecutiveDays;\n    uint256 private signInInterval = 1 days;\n    uint256 private constant TIME_OFFSET = 8 hours; \n    event UserSignedIn(address indexed user, uint256 date, uint256 consecutiveDays, uint256 rewardXP);\n    constructor() {\n        admin = msg.sender;\n        maxConsecutiveDays = 7;\n        setDefaultRewards();\n    }\n    modifier onlyAdmin() {\n        require(msg.sender == admin, "Only admin can call this function.");\n        _;\n    }\n    function _getStartOfUTC8Day(uint256 timestamp) private view returns (uint256) {\n        return (timestamp + TIME_OFFSET) / signInInterval * signInInterval - TIME_OFFSET;\n    }\n    function signIn() external {\n        uint256 today = _getStartOfUTC8Day(block.timestamp);\n        require(lastSignInDate[msg.sender] < today, "Already signed in for today");\n        if (lastSignInDate[msg.sender] == today - signInInterval) {\n            consecutiveSignInDays[msg.sender] = (consecutiveSignInDays[msg.sender] % maxConsecutiveDays) + 1;\n        } else {\n            consecutiveSignInDays[msg.sender] = 1; \n        }\n        uint256 rewardXP = signInRewards[consecutiveSignInDays[msg.sender]];\n        lastSignInDate[msg.sender] = today;\n        emit UserSignedIn(msg.sender, today, consecutiveSignInDays[msg.sender], rewardXP);\n    }\n    function setMaxConsecutiveDays(uint256 _maxDays) external onlyAdmin {\n        maxConsecutiveDays = _maxDays;\n    }\n    function setSignInInterval(uint256 _interval) external onlyAdmin {\n        signInInterval = _interval;\n    }\n    function setSignInReward(uint256 day, uint256 rewardXP) external onlyAdmin {\n        signInRewards[day] = rewardXP;\n    }\n    function setDefaultRewards() public onlyAdmin {\n        signInRewards[1] = 2;\n        signInRewards[2] = 4;\n        signInRewards[3] = 6;\n        signInRewards[4] = 8;\n        signInRewards[5] = 10;\n        signInRewards[6] = 12;\n        signInRewards[7] = 15;\n    }\n    function getSignInInterval() public view returns (uint256) {\n        return signInInterval;\n    }\n    function getRewardXP(uint256 day) public view returns (uint256) {\n        return signInRewards[day];\n    }\n    function hasBrokenStreak(address user) public view returns (bool) {\n        uint256 today = _getStartOfUTC8Day(block.timestamp);\n        uint256 yesterday = today - signInInterval;\n        return lastSignInDate[user] != yesterday && lastSignInDate[user] != today;\n    }\n    function getConsecutiveSignInDays(address user) public view returns (uint256) {\n        if (hasBrokenStreak(user)) {\n            return 0;\n        }\n        return consecutiveSignInDays[user];\n    }\n    function getLastSignInDate(address user) public view returns (uint256) {\n        return lastSignInDate[user];\n    }\n    function getTimeUntilNextSignIn(address user) public view returns (uint256) {\n        uint256 currentTime = block.timestamp;\n        uint256 startOfToday = _getStartOfUTC8Day(currentTime);\n        uint256 startOfNextDay = startOfToday + signInInterval;\n        if (lastSignInDate[user] == startOfToday) {\n            return startOfNextDay - currentTime;\n        } else {\n            return 0;\n        }\n    }\n    function updateSignReward(uint256 day, uint256 reward) external onlyAdmin {\n        signInRewards[day] = reward;\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/56/0xe3ba0072d1da98269133852fba1795419d72baf4/0xe3ba0072d1da98269133852fba1795419d72baf4.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0xe3ba0072d1da98269133852fba1795419d72baf4/0xe3ba0072d1da98269133852fba1795419d72baf4.sol'}
{'type': 'FunctionDefinition', 'name': 'DailySignIn.updateSignReward', 'start_line': 84, 'end_line': 86, 'offset_start': 3413, 'offset_end': 3530, 'content': 'function updateSignReward(uint256 day, uint256 reward) external onlyAdmin {\n        signInRewards[day] = reward;\n    }', 'contract_name': 'DailySignIn', 'contract_code': '{\n    address public admin;\n    mapping(address => uint256) private lastSignInDate;\n    mapping(address => uint256) private consecutiveSignInDays;\n    mapping(uint256 => uint256) private signInRewards;\n    uint256 private maxConsecutiveDays;\n    uint256 private signInInterval = 1 days;\n    uint256 private constant TIME_OFFSET = 8 hours; \n    event UserSignedIn(address indexed user, uint256 date, uint256 consecutiveDays, uint256 rewardXP);\n    constructor() {\n        admin = msg.sender;\n        maxConsecutiveDays = 7;\n        setDefaultRewards();\n    }\n    modifier onlyAdmin() {\n        require(msg.sender == admin, "Only admin can call this function.");\n        _;\n    }\n    function _getStartOfUTC8Day(uint256 timestamp) private view returns (uint256) {\n        return (timestamp + TIME_OFFSET) / signInInterval * signInInterval - TIME_OFFSET;\n    }\n    function signIn() external {\n        uint256 today = _getStartOfUTC8Day(block.timestamp);\n        require(lastSignInDate[msg.sender] < today, "Already signed in for today");\n        if (lastSignInDate[msg.sender] == today - signInInterval) {\n            consecutiveSignInDays[msg.sender] = (consecutiveSignInDays[msg.sender] % maxConsecutiveDays) + 1;\n        } else {\n            consecutiveSignInDays[msg.sender] = 1; \n        }\n        uint256 rewardXP = signInRewards[consecutiveSignInDays[msg.sender]];\n        lastSignInDate[msg.sender] = today;\n        emit UserSignedIn(msg.sender, today, consecutiveSignInDays[msg.sender], rewardXP);\n    }\n    function setMaxConsecutiveDays(uint256 _maxDays) external onlyAdmin {\n        maxConsecutiveDays = _maxDays;\n    }\n    function setSignInInterval(uint256 _interval) external onlyAdmin {\n        signInInterval = _interval;\n    }\n    function setSignInReward(uint256 day, uint256 rewardXP) external onlyAdmin {\n        signInRewards[day] = rewardXP;\n    }\n    function setDefaultRewards() public onlyAdmin {\n        signInRewards[1] = 2;\n        signInRewards[2] = 4;\n        signInRewards[3] = 6;\n        signInRewards[4] = 8;\n        signInRewards[5] = 10;\n        signInRewards[6] = 12;\n        signInRewards[7] = 15;\n    }\n    function getSignInInterval() public view returns (uint256) {\n        return signInInterval;\n    }\n    function getRewardXP(uint256 day) public view returns (uint256) {\n        return signInRewards[day];\n    }\n    function hasBrokenStreak(address user) public view returns (bool) {\n        uint256 today = _getStartOfUTC8Day(block.timestamp);\n        uint256 yesterday = today - signInInterval;\n        return lastSignInDate[user] != yesterday && lastSignInDate[user] != today;\n    }\n    function getConsecutiveSignInDays(address user) public view returns (uint256) {\n        if (hasBrokenStreak(user)) {\n            return 0;\n        }\n        return consecutiveSignInDays[user];\n    }\n    function getLastSignInDate(address user) public view returns (uint256) {\n        return lastSignInDate[user];\n    }\n    function getTimeUntilNextSignIn(address user) public view returns (uint256) {\n        uint256 currentTime = block.timestamp;\n        uint256 startOfToday = _getStartOfUTC8Day(currentTime);\n        uint256 startOfNextDay = startOfToday + signInInterval;\n        if (lastSignInDate[user] == startOfToday) {\n            return startOfNextDay - currentTime;\n        } else {\n            return 0;\n        }\n    }\n    function updateSignReward(uint256 day, uint256 reward) external onlyAdmin {\n        signInRewards[day] = reward;\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/56/0xe3ba0072d1da98269133852fba1795419d72baf4/0xe3ba0072d1da98269133852fba1795419d72baf4.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0xe3ba0072d1da98269133852fba1795419d72baf4/0xe3ba0072d1da98269133852fba1795419d72baf4.sol'}
