{'type': 'FunctionDefinition', 'name': 'IMemberManager.sponsor', 'start_line': 4, 'end_line': 4, 'offset_start': 56, 'offset_end': 126, 'content': 'function sponsor(address childAddress) external view returns (address);', 'contract_name': 'IMemberManager', 'contract_code': '{\n    function sponsor(address childAddress) external view returns (address);\n    function addMember(address _member, address _sponsor) external;\n    function getTotalMember() external view returns (uint256);\n    function isParent(\n        address _parent,\n        address _child\n    ) external view returns (bool);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IMemberManager.addMember', 'start_line': 5, 'end_line': 5, 'offset_start': 132, 'offset_end': 194, 'content': 'function addMember(address _member, address _sponsor) external;', 'contract_name': 'IMemberManager', 'contract_code': '{\n    function sponsor(address childAddress) external view returns (address);\n    function addMember(address _member, address _sponsor) external;\n    function getTotalMember() external view returns (uint256);\n    function isParent(\n        address _parent,\n        address _child\n    ) external view returns (bool);\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IMemberManager.getTotalMember', 'start_line': 6, 'end_line': 6, 'offset_start': 200, 'offset_end': 257, 'content': 'function getTotalMember() external view returns (uint256);', 'contract_name': 'IMemberManager', 'contract_code': '{\n    function sponsor(address childAddress) external view returns (address);\n    function addMember(address _member, address _sponsor) external;\n    function getTotalMember() external view returns (uint256);\n    function isParent(\n        address _parent,\n        address _child\n    ) external view returns (bool);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IMemberManager.isParent', 'start_line': 7, 'end_line': 10, 'offset_start': 263, 'offset_end': 364, 'content': 'function isParent(\n        address _parent,\n        address _child\n    ) external view returns (bool);', 'contract_name': 'IMemberManager', 'contract_code': '{\n    function sponsor(address childAddress) external view returns (address);\n    function addMember(address _member, address _sponsor) external;\n    function getTotalMember() external view returns (uint256);\n    function isParent(\n        address _parent,\n        address _child\n    ) external view returns (bool);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Router01.factory', 'start_line': 14, 'end_line': 14, 'offset_start': 428, 'offset_end': 478, 'content': 'function factory() external pure returns (address);', 'contract_name': 'IUniswapV2Router01', 'contract_code': '{\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Router01.WETH', 'start_line': 15, 'end_line': 15, 'offset_start': 484, 'offset_end': 531, 'content': 'function WETH() external pure returns (address);', 'contract_name': 'IUniswapV2Router01', 'contract_code': '{\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Router01.addLiquidity', 'start_line': 16, 'end_line': 25, 'offset_start': 537, 'offset_end': 825, 'content': 'function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);', 'contract_name': 'IUniswapV2Router01', 'contract_code': '{\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Router01.addLiquidityETH', 'start_line': 26, 'end_line': 33, 'offset_start': 831, 'offset_end': 1092, 'content': 'function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);', 'contract_name': 'IUniswapV2Router01', 'contract_code': '{\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}', 'modifiers': [], 'stateMutability': 'payable', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Router01.removeLiquidity', 'start_line': 34, 'end_line': 42, 'offset_start': 1098, 'offset_end': 1339, 'content': 'function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);', 'contract_name': 'IUniswapV2Router01', 'contract_code': '{\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Router01.removeLiquidityETH', 'start_line': 43, 'end_line': 50, 'offset_start': 1345, 'offset_end': 1576, 'content': 'function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);', 'contract_name': 'IUniswapV2Router01', 'contract_code': '{\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Router01.removeLiquidityWithPermit', 'start_line': 51, 'end_line': 60, 'offset_start': 1582, 'offset_end': 1889, 'content': 'function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);', 'contract_name': 'IUniswapV2Router01', 'contract_code': '{\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Router01.removeLiquidityETHWithPermit', 'start_line': 61, 'end_line': 69, 'offset_start': 1895, 'offset_end': 2192, 'content': 'function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);', 'contract_name': 'IUniswapV2Router01', 'contract_code': '{\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Router01.swapExactTokensForTokens', 'start_line': 70, 'end_line': 76, 'offset_start': 2198, 'offset_end': 2404, 'content': 'function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);', 'contract_name': 'IUniswapV2Router01', 'contract_code': '{\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Router01.swapTokensForExactTokens', 'start_line': 77, 'end_line': 83, 'offset_start': 2410, 'offset_end': 2616, 'content': 'function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);', 'contract_name': 'IUniswapV2Router01', 'contract_code': '{\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Router01.swapExactETHForTokens', 'start_line': 84, 'end_line': 87, 'offset_start': 2622, 'offset_end': 2796, 'content': 'function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);', 'contract_name': 'IUniswapV2Router01', 'contract_code': '{\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}', 'modifiers': [], 'stateMutability': 'payable', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Router01.swapTokensForExactETH', 'start_line': 88, 'end_line': 90, 'offset_start': 2802, 'offset_end': 2975, 'content': 'function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);', 'contract_name': 'IUniswapV2Router01', 'contract_code': '{\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Router01.swapExactTokensForETH', 'start_line': 91, 'end_line': 93, 'offset_start': 2981, 'offset_end': 3154, 'content': 'function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);', 'contract_name': 'IUniswapV2Router01', 'contract_code': '{\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Router01.swapETHForExactTokens', 'start_line': 94, 'end_line': 97, 'offset_start': 3160, 'offset_end': 3331, 'content': 'function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);', 'contract_name': 'IUniswapV2Router01', 'contract_code': '{\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}', 'modifiers': [], 'stateMutability': 'payable', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Router01.quote', 'start_line': 98, 'end_line': 98, 'offset_start': 3337, 'offset_end': 3432, 'content': 'function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);', 'contract_name': 'IUniswapV2Router01', 'contract_code': '{\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Router01.getAmountOut', 'start_line': 99, 'end_line': 99, 'offset_start': 3438, 'offset_end': 3546, 'content': 'function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);', 'contract_name': 'IUniswapV2Router01', 'contract_code': '{\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Router01.getAmountIn', 'start_line': 100, 'end_line': 100, 'offset_start': 3552, 'offset_end': 3659, 'content': 'function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);', 'contract_name': 'IUniswapV2Router01', 'contract_code': '{\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Router01.getAmountsOut', 'start_line': 101, 'end_line': 101, 'offset_start': 3665, 'offset_end': 3773, 'content': 'function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);', 'contract_name': 'IUniswapV2Router01', 'contract_code': '{\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Router01.getAmountsIn', 'start_line': 102, 'end_line': 102, 'offset_start': 3779, 'offset_end': 3887, 'content': 'function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);', 'contract_name': 'IUniswapV2Router01', 'contract_code': '{\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Router02.removeLiquidityETHSupportingFeeOnTransferTokens', 'start_line': 107, 'end_line': 114, 'offset_start': 4008, 'offset_end': 4250, 'content': 'function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);', 'contract_name': 'IUniswapV2Router02', 'contract_code': '{\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Router02.removeLiquidityETHWithPermitSupportingFeeOnTransferTokens', 'start_line': 115, 'end_line': 123, 'offset_start': 4256, 'offset_end': 4564, 'content': 'function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);', 'contract_name': 'IUniswapV2Router02', 'contract_code': '{\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Router02.swapExactTokensForTokensSupportingFeeOnTransferTokens', 'start_line': 124, 'end_line': 130, 'offset_start': 4570, 'offset_end': 4773, 'content': 'function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;', 'contract_name': 'IUniswapV2Router02', 'contract_code': '{\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Router02.swapExactETHForTokensSupportingFeeOnTransferTokens', 'start_line': 131, 'end_line': 136, 'offset_start': 4779, 'offset_end': 4964, 'content': 'function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;', 'contract_name': 'IUniswapV2Router02', 'contract_code': '{\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}', 'modifiers': [], 'stateMutability': 'payable', 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Router02.swapExactTokensForETHSupportingFeeOnTransferTokens', 'start_line': 137, 'end_line': 143, 'offset_start': 4970, 'offset_end': 5170, 'content': 'function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;', 'contract_name': 'IUniswapV2Router02', 'contract_code': '{\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'NewVoteContract.tor', 'start_line': 177, 'end_line': 208, 'offset_start': 6684, 'offset_end': 7669, 'content': 'constructor(\n        address _memberAddress,\n        IERC20 _usd,\n        IERC20 _token,\n        DataStorage _data,\n        address _feeAddress,\n        address _feeMatchAddress,\n        address _globalFund,\n        address _mtcFund,\n        address _sponsorFund,\n        address _feeActions\n    ) {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        member = IMemberManager(_memberAddress);\n        usd = _usd;\n        token = _token;\n        feeAddress = _feeAddress;\n        data = _data;\n        feeMatchAddress = _feeMatchAddress;\n        globalFund = _globalFund;\n        mtcFund = _mtcFund;\n        sponsorFund = _sponsorFund;\n        feeActions = _feeActions;\n        uniswapPair = IUniswapV2Pair(\n            IUniswapV2Factory(uniswapV2Router.factory()).getPair(\n                address(usd),\n                address(token)\n            )\n        );\n        usd.approve(address(uniswapV2Router), MAX_INT);\n        token.approve(address(uniswapV2Router), MAX_INT);\n    }', 'contract_name': 'NewVoteContract', 'contract_code': '{\n    uint public FEE = 300000000000000;\n    uint public VOTE_FEE = 0;\n    bytes32 public constant EDITOR = keccak256("EDITOR");\n    IUniswapV2Pair public uniswapPair;\n    IUniswapV2Router02 public immutable uniswapV2Router =\n        IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n    uint public constant VOTE_PERIOD = 1 days;\n    uint public constant VOTE_EPOCH_PERIOD = 30;\n    uint public constant VOTE_AMOUNT = 31e18;\n    uint[5] public RANK_PERCENT = [4, 8, 12, 16, 20];\n    uint public PERCENT_DIF = 6;\n    IMemberManager public member;\n    IERC20 public usd;\n    IERC20 public token;\n    DataStorage public data;\n    address public feeAddress;\n    address public feeMatchAddress;\n    address public globalFund;\n    address public mtcFund;\n    address public sponsorFund;\n    address public feeActions;\n    uint256 MAX_INT =\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n    constructor(\n        address _memberAddress,\n        IERC20 _usd,\n        IERC20 _token,\n        DataStorage _data,\n        address _feeAddress,\n        address _feeMatchAddress,\n        address _globalFund,\n        address _mtcFund,\n        address _sponsorFund,\n        address _feeActions\n    ) {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        member = IMemberManager(_memberAddress);\n        usd = _usd;\n        token = _token;\n        feeAddress = _feeAddress;\n        data = _data;\n        feeMatchAddress = _feeMatchAddress;\n        globalFund = _globalFund;\n        mtcFund = _mtcFund;\n        sponsorFund = _sponsorFund;\n        feeActions = _feeActions;\n        uniswapPair = IUniswapV2Pair(\n            IUniswapV2Factory(uniswapV2Router.factory()).getPair(\n                address(usd),\n                address(token)\n            )\n        );\n        usd.approve(address(uniswapV2Router), MAX_INT);\n        token.approve(address(uniswapV2Router), MAX_INT);\n    }\n    function vote() public payable {\n        require(msg.value >= VOTE_FEE, "Must pay fee");\n        if (VOTE_FEE > 0) {\n            payable(feeActions).transfer(VOTE_FEE);\n        }\n        address sponsor = member.sponsor(msg.sender);\n        require(sponsor != address(0x0), "Must be member");\n        require(data.isActiveVote(), "Must be active vote");\n        usd.transferFrom(msg.sender, address(this), VOTE_AMOUNT);\n        usd.transfer(feeAddress, 1e18);\n        usd.transfer(globalFund, 6e16);\n        if (sponsorActive(sponsor)) {\n            usd.transfer(sponsor, 5e18);\n        } else {\n            usd.transfer(sponsorFund, 5e18);\n        }\n        swapTokens(2434e16);\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        address[5] memory usersMatch = searchMatchAddress(msg.sender, epoch);\n        uint paid = 0;\n        for (uint i = 0; i < 5; i++) {\n            if (usersMatch[i] != address(0x0)) {\n                usd.transfer(\n                    usersMatch[i],\n                    ((VOTE_AMOUNT - 1e18) * (RANK_PERCENT[i] - paid)) / 1000\n                );\n                paid = RANK_PERCENT[i];\n            }\n        }\n        if (paid < RANK_PERCENT[4]) {\n            usd.transfer(\n                feeMatchAddress,\n                ((VOTE_AMOUNT - 1e18) * (RANK_PERCENT[4] - paid)) / 1000\n            );\n        }\n        uint16 percent = uint16(\n            ((uint256(\n                keccak256(\n                    abi.encodePacked(\n                        msg.sender,\n                        block.timestamp,\n                        getAmountOut(2434e16)\n                    )\n                )\n            ) % PERCENT_DIF) + (30 - PERCENT_DIF)) * 1000\n        );\n        data.userVote(msg.sender, percent);\n    }\n    function editPercentDif(uint percent) public {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be editor");\n        PERCENT_DIF = percent;\n    }\n    function sponsorActive(address user) public view returns (bool) {\n        uint today = (block.timestamp - 20 days) / VOTE_PERIOD;\n        return (data.getVote(user, today) > 0 ||\n            data.getVote(user, today - 1) > 0 ||\n            data.getVote(user, today - 2) > 0);\n    }\n    function getAmountOut(uint amountIn) public view returns (uint amountOut) {\n        (uint256 reserve0, uint256 reserve1, ) = uniswapPair.getReserves();\n        (uint reserveIn, uint reserveOut) = address(usd) < address(token)\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n        uint256 numerator = amountIn * reserveOut;\n        uint256 denominator = reserveIn + amountIn;\n        amountOut = numerator / denominator;\n    }\n    function swapTokens(uint256 tokenAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = address(usd);\n        path[1] = address(token);\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, \n            path,\n            mtcFund,\n            block.timestamp\n        );\n    }\n    function searchMatchAddress(\n        address user,\n        uint epoch\n    ) public view returns (address[5] memory usersMatch) {\n        uint current = 0;\n        address sponsor = member.sponsor(user);\n        while (current < 5) {\n            uint rank = data.userRank(sponsor, epoch);\n            if (rank > current) {\n                usersMatch[rank - 1] = sponsor;\n                current = rank;\n            }\n            sponsor = member.sponsor(sponsor);\n            if (sponsor == address(0x0)) break;\n        }\n    }\n    function claim(uint day) public payable {\n        require(msg.value >= FEE, "Must pay fee");\n        if (FEE > 0) {\n            payable(feeActions).transfer(FEE);\n        }\n        uint today = (block.timestamp - 20 days) / VOTE_PERIOD;\n        require(today >= day + VOTE_EPOCH_PERIOD, "Frozen time vote");\n        (uint64 totalVote, uint64 totalClaim) = data.userInfo(msg.sender);\n        require(totalVote > totalClaim + 3, "Frozen 3 vote");\n        uint percent = data.userClaim(msg.sender, day);\n        uint amount = getAmountOut(\n            ((VOTE_AMOUNT - 1e18) * percent) / 100000 + (VOTE_AMOUNT - 1e18)\n        );\n        token.transfer(msg.sender, amount);\n    }\n    function rankSet(\n        address[] calldata users,\n        uint8[] calldata rank,\n        bool ended\n    ) public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        require(!data.isActiveVote(), "Not active vote");\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        for (uint i = 0; i < users.length; i++) {\n            data.setUserRank(users[i], epoch, rank[i]);\n        }\n        if (ended) {\n            data.activeVote();\n        }\n    }\n    function changeFee(uint newFEE) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        FEE = newFEE;\n    }\n    function changeVoteFee(uint newFEE) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        VOTE_FEE = newFEE;\n    }\n    function withdrawStuck() external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        uint256 balance = token.balanceOf(address(this));\n        token.transfer(msg.sender, balance);\n        uint256 balanceU = usd.balanceOf(address(this));\n        usd.transfer(msg.sender, balanceU);\n        payable(msg.sender).transfer(address(this).balance);\n    }\n    function withdrawTokenStuck(address _token) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        uint256 balance = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).transfer(msg.sender, balance);\n    }\n    function withdrawStuckEth(address toAddr) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        (bool success, ) = toAddr.call{value: address(this).balance}("");\n        require(success);\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'default', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'NewVoteContract.vote', 'start_line': 209, 'end_line': 257, 'offset_start': 7675, 'offset_end': 9463, 'content': 'function vote() public payable {\n        require(msg.value >= VOTE_FEE, "Must pay fee");\n        if (VOTE_FEE > 0) {\n            payable(feeActions).transfer(VOTE_FEE);\n        }\n        address sponsor = member.sponsor(msg.sender);\n        require(sponsor != address(0x0), "Must be member");\n        require(data.isActiveVote(), "Must be active vote");\n        usd.transferFrom(msg.sender, address(this), VOTE_AMOUNT);\n        usd.transfer(feeAddress, 1e18);\n        usd.transfer(globalFund, 6e16);\n        if (sponsorActive(sponsor)) {\n            usd.transfer(sponsor, 5e18);\n        } else {\n            usd.transfer(sponsorFund, 5e18);\n        }\n        swapTokens(2434e16);\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        address[5] memory usersMatch = searchMatchAddress(msg.sender, epoch);\n        uint paid = 0;\n        for (uint i = 0; i < 5; i++) {\n            if (usersMatch[i] != address(0x0)) {\n                usd.transfer(\n                    usersMatch[i],\n                    ((VOTE_AMOUNT - 1e18) * (RANK_PERCENT[i] - paid)) / 1000\n                );\n                paid = RANK_PERCENT[i];\n            }\n        }\n        if (paid < RANK_PERCENT[4]) {\n            usd.transfer(\n                feeMatchAddress,\n                ((VOTE_AMOUNT - 1e18) * (RANK_PERCENT[4] - paid)) / 1000\n            );\n        }\n        uint16 percent = uint16(\n            ((uint256(\n                keccak256(\n                    abi.encodePacked(\n                        msg.sender,\n                        block.timestamp,\n                        getAmountOut(2434e16)\n                    )\n                )\n            ) % PERCENT_DIF) + (30 - PERCENT_DIF)) * 1000\n        );\n        data.userVote(msg.sender, percent);\n    }', 'contract_name': 'NewVoteContract', 'contract_code': '{\n    uint public FEE = 300000000000000;\n    uint public VOTE_FEE = 0;\n    bytes32 public constant EDITOR = keccak256("EDITOR");\n    IUniswapV2Pair public uniswapPair;\n    IUniswapV2Router02 public immutable uniswapV2Router =\n        IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n    uint public constant VOTE_PERIOD = 1 days;\n    uint public constant VOTE_EPOCH_PERIOD = 30;\n    uint public constant VOTE_AMOUNT = 31e18;\n    uint[5] public RANK_PERCENT = [4, 8, 12, 16, 20];\n    uint public PERCENT_DIF = 6;\n    IMemberManager public member;\n    IERC20 public usd;\n    IERC20 public token;\n    DataStorage public data;\n    address public feeAddress;\n    address public feeMatchAddress;\n    address public globalFund;\n    address public mtcFund;\n    address public sponsorFund;\n    address public feeActions;\n    uint256 MAX_INT =\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n    constructor(\n        address _memberAddress,\n        IERC20 _usd,\n        IERC20 _token,\n        DataStorage _data,\n        address _feeAddress,\n        address _feeMatchAddress,\n        address _globalFund,\n        address _mtcFund,\n        address _sponsorFund,\n        address _feeActions\n    ) {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        member = IMemberManager(_memberAddress);\n        usd = _usd;\n        token = _token;\n        feeAddress = _feeAddress;\n        data = _data;\n        feeMatchAddress = _feeMatchAddress;\n        globalFund = _globalFund;\n        mtcFund = _mtcFund;\n        sponsorFund = _sponsorFund;\n        feeActions = _feeActions;\n        uniswapPair = IUniswapV2Pair(\n            IUniswapV2Factory(uniswapV2Router.factory()).getPair(\n                address(usd),\n                address(token)\n            )\n        );\n        usd.approve(address(uniswapV2Router), MAX_INT);\n        token.approve(address(uniswapV2Router), MAX_INT);\n    }\n    function vote() public payable {\n        require(msg.value >= VOTE_FEE, "Must pay fee");\n        if (VOTE_FEE > 0) {\n            payable(feeActions).transfer(VOTE_FEE);\n        }\n        address sponsor = member.sponsor(msg.sender);\n        require(sponsor != address(0x0), "Must be member");\n        require(data.isActiveVote(), "Must be active vote");\n        usd.transferFrom(msg.sender, address(this), VOTE_AMOUNT);\n        usd.transfer(feeAddress, 1e18);\n        usd.transfer(globalFund, 6e16);\n        if (sponsorActive(sponsor)) {\n            usd.transfer(sponsor, 5e18);\n        } else {\n            usd.transfer(sponsorFund, 5e18);\n        }\n        swapTokens(2434e16);\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        address[5] memory usersMatch = searchMatchAddress(msg.sender, epoch);\n        uint paid = 0;\n        for (uint i = 0; i < 5; i++) {\n            if (usersMatch[i] != address(0x0)) {\n                usd.transfer(\n                    usersMatch[i],\n                    ((VOTE_AMOUNT - 1e18) * (RANK_PERCENT[i] - paid)) / 1000\n                );\n                paid = RANK_PERCENT[i];\n            }\n        }\n        if (paid < RANK_PERCENT[4]) {\n            usd.transfer(\n                feeMatchAddress,\n                ((VOTE_AMOUNT - 1e18) * (RANK_PERCENT[4] - paid)) / 1000\n            );\n        }\n        uint16 percent = uint16(\n            ((uint256(\n                keccak256(\n                    abi.encodePacked(\n                        msg.sender,\n                        block.timestamp,\n                        getAmountOut(2434e16)\n                    )\n                )\n            ) % PERCENT_DIF) + (30 - PERCENT_DIF)) * 1000\n        );\n        data.userVote(msg.sender, percent);\n    }\n    function editPercentDif(uint percent) public {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be editor");\n        PERCENT_DIF = percent;\n    }\n    function sponsorActive(address user) public view returns (bool) {\n        uint today = (block.timestamp - 20 days) / VOTE_PERIOD;\n        return (data.getVote(user, today) > 0 ||\n            data.getVote(user, today - 1) > 0 ||\n            data.getVote(user, today - 2) > 0);\n    }\n    function getAmountOut(uint amountIn) public view returns (uint amountOut) {\n        (uint256 reserve0, uint256 reserve1, ) = uniswapPair.getReserves();\n        (uint reserveIn, uint reserveOut) = address(usd) < address(token)\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n        uint256 numerator = amountIn * reserveOut;\n        uint256 denominator = reserveIn + amountIn;\n        amountOut = numerator / denominator;\n    }\n    function swapTokens(uint256 tokenAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = address(usd);\n        path[1] = address(token);\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, \n            path,\n            mtcFund,\n            block.timestamp\n        );\n    }\n    function searchMatchAddress(\n        address user,\n        uint epoch\n    ) public view returns (address[5] memory usersMatch) {\n        uint current = 0;\n        address sponsor = member.sponsor(user);\n        while (current < 5) {\n            uint rank = data.userRank(sponsor, epoch);\n            if (rank > current) {\n                usersMatch[rank - 1] = sponsor;\n                current = rank;\n            }\n            sponsor = member.sponsor(sponsor);\n            if (sponsor == address(0x0)) break;\n        }\n    }\n    function claim(uint day) public payable {\n        require(msg.value >= FEE, "Must pay fee");\n        if (FEE > 0) {\n            payable(feeActions).transfer(FEE);\n        }\n        uint today = (block.timestamp - 20 days) / VOTE_PERIOD;\n        require(today >= day + VOTE_EPOCH_PERIOD, "Frozen time vote");\n        (uint64 totalVote, uint64 totalClaim) = data.userInfo(msg.sender);\n        require(totalVote > totalClaim + 3, "Frozen 3 vote");\n        uint percent = data.userClaim(msg.sender, day);\n        uint amount = getAmountOut(\n            ((VOTE_AMOUNT - 1e18) * percent) / 100000 + (VOTE_AMOUNT - 1e18)\n        );\n        token.transfer(msg.sender, amount);\n    }\n    function rankSet(\n        address[] calldata users,\n        uint8[] calldata rank,\n        bool ended\n    ) public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        require(!data.isActiveVote(), "Not active vote");\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        for (uint i = 0; i < users.length; i++) {\n            data.setUserRank(users[i], epoch, rank[i]);\n        }\n        if (ended) {\n            data.activeVote();\n        }\n    }\n    function changeFee(uint newFEE) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        FEE = newFEE;\n    }\n    function changeVoteFee(uint newFEE) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        VOTE_FEE = newFEE;\n    }\n    function withdrawStuck() external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        uint256 balance = token.balanceOf(address(this));\n        token.transfer(msg.sender, balance);\n        uint256 balanceU = usd.balanceOf(address(this));\n        usd.transfer(msg.sender, balanceU);\n        payable(msg.sender).transfer(address(this).balance);\n    }\n    function withdrawTokenStuck(address _token) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        uint256 balance = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).transfer(msg.sender, balance);\n    }\n    function withdrawStuckEth(address toAddr) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        (bool success, ) = toAddr.call{value: address(this).balance}("");\n        require(success);\n    }\n}', 'modifiers': [], 'stateMutability': 'payable', 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'NewVoteContract.editPercentDif', 'start_line': 258, 'end_line': 261, 'offset_start': 9469, 'offset_end': 9627, 'content': 'function editPercentDif(uint percent) public {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be editor");\n        PERCENT_DIF = percent;\n    }', 'contract_name': 'NewVoteContract', 'contract_code': '{\n    uint public FEE = 300000000000000;\n    uint public VOTE_FEE = 0;\n    bytes32 public constant EDITOR = keccak256("EDITOR");\n    IUniswapV2Pair public uniswapPair;\n    IUniswapV2Router02 public immutable uniswapV2Router =\n        IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n    uint public constant VOTE_PERIOD = 1 days;\n    uint public constant VOTE_EPOCH_PERIOD = 30;\n    uint public constant VOTE_AMOUNT = 31e18;\n    uint[5] public RANK_PERCENT = [4, 8, 12, 16, 20];\n    uint public PERCENT_DIF = 6;\n    IMemberManager public member;\n    IERC20 public usd;\n    IERC20 public token;\n    DataStorage public data;\n    address public feeAddress;\n    address public feeMatchAddress;\n    address public globalFund;\n    address public mtcFund;\n    address public sponsorFund;\n    address public feeActions;\n    uint256 MAX_INT =\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n    constructor(\n        address _memberAddress,\n        IERC20 _usd,\n        IERC20 _token,\n        DataStorage _data,\n        address _feeAddress,\n        address _feeMatchAddress,\n        address _globalFund,\n        address _mtcFund,\n        address _sponsorFund,\n        address _feeActions\n    ) {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        member = IMemberManager(_memberAddress);\n        usd = _usd;\n        token = _token;\n        feeAddress = _feeAddress;\n        data = _data;\n        feeMatchAddress = _feeMatchAddress;\n        globalFund = _globalFund;\n        mtcFund = _mtcFund;\n        sponsorFund = _sponsorFund;\n        feeActions = _feeActions;\n        uniswapPair = IUniswapV2Pair(\n            IUniswapV2Factory(uniswapV2Router.factory()).getPair(\n                address(usd),\n                address(token)\n            )\n        );\n        usd.approve(address(uniswapV2Router), MAX_INT);\n        token.approve(address(uniswapV2Router), MAX_INT);\n    }\n    function vote() public payable {\n        require(msg.value >= VOTE_FEE, "Must pay fee");\n        if (VOTE_FEE > 0) {\n            payable(feeActions).transfer(VOTE_FEE);\n        }\n        address sponsor = member.sponsor(msg.sender);\n        require(sponsor != address(0x0), "Must be member");\n        require(data.isActiveVote(), "Must be active vote");\n        usd.transferFrom(msg.sender, address(this), VOTE_AMOUNT);\n        usd.transfer(feeAddress, 1e18);\n        usd.transfer(globalFund, 6e16);\n        if (sponsorActive(sponsor)) {\n            usd.transfer(sponsor, 5e18);\n        } else {\n            usd.transfer(sponsorFund, 5e18);\n        }\n        swapTokens(2434e16);\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        address[5] memory usersMatch = searchMatchAddress(msg.sender, epoch);\n        uint paid = 0;\n        for (uint i = 0; i < 5; i++) {\n            if (usersMatch[i] != address(0x0)) {\n                usd.transfer(\n                    usersMatch[i],\n                    ((VOTE_AMOUNT - 1e18) * (RANK_PERCENT[i] - paid)) / 1000\n                );\n                paid = RANK_PERCENT[i];\n            }\n        }\n        if (paid < RANK_PERCENT[4]) {\n            usd.transfer(\n                feeMatchAddress,\n                ((VOTE_AMOUNT - 1e18) * (RANK_PERCENT[4] - paid)) / 1000\n            );\n        }\n        uint16 percent = uint16(\n            ((uint256(\n                keccak256(\n                    abi.encodePacked(\n                        msg.sender,\n                        block.timestamp,\n                        getAmountOut(2434e16)\n                    )\n                )\n            ) % PERCENT_DIF) + (30 - PERCENT_DIF)) * 1000\n        );\n        data.userVote(msg.sender, percent);\n    }\n    function editPercentDif(uint percent) public {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be editor");\n        PERCENT_DIF = percent;\n    }\n    function sponsorActive(address user) public view returns (bool) {\n        uint today = (block.timestamp - 20 days) / VOTE_PERIOD;\n        return (data.getVote(user, today) > 0 ||\n            data.getVote(user, today - 1) > 0 ||\n            data.getVote(user, today - 2) > 0);\n    }\n    function getAmountOut(uint amountIn) public view returns (uint amountOut) {\n        (uint256 reserve0, uint256 reserve1, ) = uniswapPair.getReserves();\n        (uint reserveIn, uint reserveOut) = address(usd) < address(token)\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n        uint256 numerator = amountIn * reserveOut;\n        uint256 denominator = reserveIn + amountIn;\n        amountOut = numerator / denominator;\n    }\n    function swapTokens(uint256 tokenAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = address(usd);\n        path[1] = address(token);\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, \n            path,\n            mtcFund,\n            block.timestamp\n        );\n    }\n    function searchMatchAddress(\n        address user,\n        uint epoch\n    ) public view returns (address[5] memory usersMatch) {\n        uint current = 0;\n        address sponsor = member.sponsor(user);\n        while (current < 5) {\n            uint rank = data.userRank(sponsor, epoch);\n            if (rank > current) {\n                usersMatch[rank - 1] = sponsor;\n                current = rank;\n            }\n            sponsor = member.sponsor(sponsor);\n            if (sponsor == address(0x0)) break;\n        }\n    }\n    function claim(uint day) public payable {\n        require(msg.value >= FEE, "Must pay fee");\n        if (FEE > 0) {\n            payable(feeActions).transfer(FEE);\n        }\n        uint today = (block.timestamp - 20 days) / VOTE_PERIOD;\n        require(today >= day + VOTE_EPOCH_PERIOD, "Frozen time vote");\n        (uint64 totalVote, uint64 totalClaim) = data.userInfo(msg.sender);\n        require(totalVote > totalClaim + 3, "Frozen 3 vote");\n        uint percent = data.userClaim(msg.sender, day);\n        uint amount = getAmountOut(\n            ((VOTE_AMOUNT - 1e18) * percent) / 100000 + (VOTE_AMOUNT - 1e18)\n        );\n        token.transfer(msg.sender, amount);\n    }\n    function rankSet(\n        address[] calldata users,\n        uint8[] calldata rank,\n        bool ended\n    ) public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        require(!data.isActiveVote(), "Not active vote");\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        for (uint i = 0; i < users.length; i++) {\n            data.setUserRank(users[i], epoch, rank[i]);\n        }\n        if (ended) {\n            data.activeVote();\n        }\n    }\n    function changeFee(uint newFEE) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        FEE = newFEE;\n    }\n    function changeVoteFee(uint newFEE) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        VOTE_FEE = newFEE;\n    }\n    function withdrawStuck() external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        uint256 balance = token.balanceOf(address(this));\n        token.transfer(msg.sender, balance);\n        uint256 balanceU = usd.balanceOf(address(this));\n        usd.transfer(msg.sender, balanceU);\n        payable(msg.sender).transfer(address(this).balance);\n    }\n    function withdrawTokenStuck(address _token) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        uint256 balance = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).transfer(msg.sender, balance);\n    }\n    function withdrawStuckEth(address toAddr) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        (bool success, ) = toAddr.call{value: address(this).balance}("");\n        require(success);\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'NewVoteContract.sponsorActive', 'start_line': 262, 'end_line': 267, 'offset_start': 9633, 'offset_end': 9913, 'content': 'function sponsorActive(address user) public view returns (bool) {\n        uint today = (block.timestamp - 20 days) / VOTE_PERIOD;\n        return (data.getVote(user, today) > 0 ||\n            data.getVote(user, today - 1) > 0 ||\n            data.getVote(user, today - 2) > 0);\n    }', 'contract_name': 'NewVoteContract', 'contract_code': '{\n    uint public FEE = 300000000000000;\n    uint public VOTE_FEE = 0;\n    bytes32 public constant EDITOR = keccak256("EDITOR");\n    IUniswapV2Pair public uniswapPair;\n    IUniswapV2Router02 public immutable uniswapV2Router =\n        IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n    uint public constant VOTE_PERIOD = 1 days;\n    uint public constant VOTE_EPOCH_PERIOD = 30;\n    uint public constant VOTE_AMOUNT = 31e18;\n    uint[5] public RANK_PERCENT = [4, 8, 12, 16, 20];\n    uint public PERCENT_DIF = 6;\n    IMemberManager public member;\n    IERC20 public usd;\n    IERC20 public token;\n    DataStorage public data;\n    address public feeAddress;\n    address public feeMatchAddress;\n    address public globalFund;\n    address public mtcFund;\n    address public sponsorFund;\n    address public feeActions;\n    uint256 MAX_INT =\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n    constructor(\n        address _memberAddress,\n        IERC20 _usd,\n        IERC20 _token,\n        DataStorage _data,\n        address _feeAddress,\n        address _feeMatchAddress,\n        address _globalFund,\n        address _mtcFund,\n        address _sponsorFund,\n        address _feeActions\n    ) {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        member = IMemberManager(_memberAddress);\n        usd = _usd;\n        token = _token;\n        feeAddress = _feeAddress;\n        data = _data;\n        feeMatchAddress = _feeMatchAddress;\n        globalFund = _globalFund;\n        mtcFund = _mtcFund;\n        sponsorFund = _sponsorFund;\n        feeActions = _feeActions;\n        uniswapPair = IUniswapV2Pair(\n            IUniswapV2Factory(uniswapV2Router.factory()).getPair(\n                address(usd),\n                address(token)\n            )\n        );\n        usd.approve(address(uniswapV2Router), MAX_INT);\n        token.approve(address(uniswapV2Router), MAX_INT);\n    }\n    function vote() public payable {\n        require(msg.value >= VOTE_FEE, "Must pay fee");\n        if (VOTE_FEE > 0) {\n            payable(feeActions).transfer(VOTE_FEE);\n        }\n        address sponsor = member.sponsor(msg.sender);\n        require(sponsor != address(0x0), "Must be member");\n        require(data.isActiveVote(), "Must be active vote");\n        usd.transferFrom(msg.sender, address(this), VOTE_AMOUNT);\n        usd.transfer(feeAddress, 1e18);\n        usd.transfer(globalFund, 6e16);\n        if (sponsorActive(sponsor)) {\n            usd.transfer(sponsor, 5e18);\n        } else {\n            usd.transfer(sponsorFund, 5e18);\n        }\n        swapTokens(2434e16);\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        address[5] memory usersMatch = searchMatchAddress(msg.sender, epoch);\n        uint paid = 0;\n        for (uint i = 0; i < 5; i++) {\n            if (usersMatch[i] != address(0x0)) {\n                usd.transfer(\n                    usersMatch[i],\n                    ((VOTE_AMOUNT - 1e18) * (RANK_PERCENT[i] - paid)) / 1000\n                );\n                paid = RANK_PERCENT[i];\n            }\n        }\n        if (paid < RANK_PERCENT[4]) {\n            usd.transfer(\n                feeMatchAddress,\n                ((VOTE_AMOUNT - 1e18) * (RANK_PERCENT[4] - paid)) / 1000\n            );\n        }\n        uint16 percent = uint16(\n            ((uint256(\n                keccak256(\n                    abi.encodePacked(\n                        msg.sender,\n                        block.timestamp,\n                        getAmountOut(2434e16)\n                    )\n                )\n            ) % PERCENT_DIF) + (30 - PERCENT_DIF)) * 1000\n        );\n        data.userVote(msg.sender, percent);\n    }\n    function editPercentDif(uint percent) public {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be editor");\n        PERCENT_DIF = percent;\n    }\n    function sponsorActive(address user) public view returns (bool) {\n        uint today = (block.timestamp - 20 days) / VOTE_PERIOD;\n        return (data.getVote(user, today) > 0 ||\n            data.getVote(user, today - 1) > 0 ||\n            data.getVote(user, today - 2) > 0);\n    }\n    function getAmountOut(uint amountIn) public view returns (uint amountOut) {\n        (uint256 reserve0, uint256 reserve1, ) = uniswapPair.getReserves();\n        (uint reserveIn, uint reserveOut) = address(usd) < address(token)\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n        uint256 numerator = amountIn * reserveOut;\n        uint256 denominator = reserveIn + amountIn;\n        amountOut = numerator / denominator;\n    }\n    function swapTokens(uint256 tokenAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = address(usd);\n        path[1] = address(token);\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, \n            path,\n            mtcFund,\n            block.timestamp\n        );\n    }\n    function searchMatchAddress(\n        address user,\n        uint epoch\n    ) public view returns (address[5] memory usersMatch) {\n        uint current = 0;\n        address sponsor = member.sponsor(user);\n        while (current < 5) {\n            uint rank = data.userRank(sponsor, epoch);\n            if (rank > current) {\n                usersMatch[rank - 1] = sponsor;\n                current = rank;\n            }\n            sponsor = member.sponsor(sponsor);\n            if (sponsor == address(0x0)) break;\n        }\n    }\n    function claim(uint day) public payable {\n        require(msg.value >= FEE, "Must pay fee");\n        if (FEE > 0) {\n            payable(feeActions).transfer(FEE);\n        }\n        uint today = (block.timestamp - 20 days) / VOTE_PERIOD;\n        require(today >= day + VOTE_EPOCH_PERIOD, "Frozen time vote");\n        (uint64 totalVote, uint64 totalClaim) = data.userInfo(msg.sender);\n        require(totalVote > totalClaim + 3, "Frozen 3 vote");\n        uint percent = data.userClaim(msg.sender, day);\n        uint amount = getAmountOut(\n            ((VOTE_AMOUNT - 1e18) * percent) / 100000 + (VOTE_AMOUNT - 1e18)\n        );\n        token.transfer(msg.sender, amount);\n    }\n    function rankSet(\n        address[] calldata users,\n        uint8[] calldata rank,\n        bool ended\n    ) public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        require(!data.isActiveVote(), "Not active vote");\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        for (uint i = 0; i < users.length; i++) {\n            data.setUserRank(users[i], epoch, rank[i]);\n        }\n        if (ended) {\n            data.activeVote();\n        }\n    }\n    function changeFee(uint newFEE) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        FEE = newFEE;\n    }\n    function changeVoteFee(uint newFEE) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        VOTE_FEE = newFEE;\n    }\n    function withdrawStuck() external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        uint256 balance = token.balanceOf(address(this));\n        token.transfer(msg.sender, balance);\n        uint256 balanceU = usd.balanceOf(address(this));\n        usd.transfer(msg.sender, balanceU);\n        payable(msg.sender).transfer(address(this).balance);\n    }\n    function withdrawTokenStuck(address _token) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        uint256 balance = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).transfer(msg.sender, balance);\n    }\n    function withdrawStuckEth(address toAddr) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        (bool success, ) = toAddr.call{value: address(this).balance}("");\n        require(success);\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'NewVoteContract.getAmountOut', 'start_line': 268, 'end_line': 276, 'offset_start': 9919, 'offset_end': 10368, 'content': 'function getAmountOut(uint amountIn) public view returns (uint amountOut) {\n        (uint256 reserve0, uint256 reserve1, ) = uniswapPair.getReserves();\n        (uint reserveIn, uint reserveOut) = address(usd) < address(token)\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n        uint256 numerator = amountIn * reserveOut;\n        uint256 denominator = reserveIn + amountIn;\n        amountOut = numerator / denominator;\n    }', 'contract_name': 'NewVoteContract', 'contract_code': '{\n    uint public FEE = 300000000000000;\n    uint public VOTE_FEE = 0;\n    bytes32 public constant EDITOR = keccak256("EDITOR");\n    IUniswapV2Pair public uniswapPair;\n    IUniswapV2Router02 public immutable uniswapV2Router =\n        IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n    uint public constant VOTE_PERIOD = 1 days;\n    uint public constant VOTE_EPOCH_PERIOD = 30;\n    uint public constant VOTE_AMOUNT = 31e18;\n    uint[5] public RANK_PERCENT = [4, 8, 12, 16, 20];\n    uint public PERCENT_DIF = 6;\n    IMemberManager public member;\n    IERC20 public usd;\n    IERC20 public token;\n    DataStorage public data;\n    address public feeAddress;\n    address public feeMatchAddress;\n    address public globalFund;\n    address public mtcFund;\n    address public sponsorFund;\n    address public feeActions;\n    uint256 MAX_INT =\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n    constructor(\n        address _memberAddress,\n        IERC20 _usd,\n        IERC20 _token,\n        DataStorage _data,\n        address _feeAddress,\n        address _feeMatchAddress,\n        address _globalFund,\n        address _mtcFund,\n        address _sponsorFund,\n        address _feeActions\n    ) {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        member = IMemberManager(_memberAddress);\n        usd = _usd;\n        token = _token;\n        feeAddress = _feeAddress;\n        data = _data;\n        feeMatchAddress = _feeMatchAddress;\n        globalFund = _globalFund;\n        mtcFund = _mtcFund;\n        sponsorFund = _sponsorFund;\n        feeActions = _feeActions;\n        uniswapPair = IUniswapV2Pair(\n            IUniswapV2Factory(uniswapV2Router.factory()).getPair(\n                address(usd),\n                address(token)\n            )\n        );\n        usd.approve(address(uniswapV2Router), MAX_INT);\n        token.approve(address(uniswapV2Router), MAX_INT);\n    }\n    function vote() public payable {\n        require(msg.value >= VOTE_FEE, "Must pay fee");\n        if (VOTE_FEE > 0) {\n            payable(feeActions).transfer(VOTE_FEE);\n        }\n        address sponsor = member.sponsor(msg.sender);\n        require(sponsor != address(0x0), "Must be member");\n        require(data.isActiveVote(), "Must be active vote");\n        usd.transferFrom(msg.sender, address(this), VOTE_AMOUNT);\n        usd.transfer(feeAddress, 1e18);\n        usd.transfer(globalFund, 6e16);\n        if (sponsorActive(sponsor)) {\n            usd.transfer(sponsor, 5e18);\n        } else {\n            usd.transfer(sponsorFund, 5e18);\n        }\n        swapTokens(2434e16);\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        address[5] memory usersMatch = searchMatchAddress(msg.sender, epoch);\n        uint paid = 0;\n        for (uint i = 0; i < 5; i++) {\n            if (usersMatch[i] != address(0x0)) {\n                usd.transfer(\n                    usersMatch[i],\n                    ((VOTE_AMOUNT - 1e18) * (RANK_PERCENT[i] - paid)) / 1000\n                );\n                paid = RANK_PERCENT[i];\n            }\n        }\n        if (paid < RANK_PERCENT[4]) {\n            usd.transfer(\n                feeMatchAddress,\n                ((VOTE_AMOUNT - 1e18) * (RANK_PERCENT[4] - paid)) / 1000\n            );\n        }\n        uint16 percent = uint16(\n            ((uint256(\n                keccak256(\n                    abi.encodePacked(\n                        msg.sender,\n                        block.timestamp,\n                        getAmountOut(2434e16)\n                    )\n                )\n            ) % PERCENT_DIF) + (30 - PERCENT_DIF)) * 1000\n        );\n        data.userVote(msg.sender, percent);\n    }\n    function editPercentDif(uint percent) public {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be editor");\n        PERCENT_DIF = percent;\n    }\n    function sponsorActive(address user) public view returns (bool) {\n        uint today = (block.timestamp - 20 days) / VOTE_PERIOD;\n        return (data.getVote(user, today) > 0 ||\n            data.getVote(user, today - 1) > 0 ||\n            data.getVote(user, today - 2) > 0);\n    }\n    function getAmountOut(uint amountIn) public view returns (uint amountOut) {\n        (uint256 reserve0, uint256 reserve1, ) = uniswapPair.getReserves();\n        (uint reserveIn, uint reserveOut) = address(usd) < address(token)\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n        uint256 numerator = amountIn * reserveOut;\n        uint256 denominator = reserveIn + amountIn;\n        amountOut = numerator / denominator;\n    }\n    function swapTokens(uint256 tokenAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = address(usd);\n        path[1] = address(token);\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, \n            path,\n            mtcFund,\n            block.timestamp\n        );\n    }\n    function searchMatchAddress(\n        address user,\n        uint epoch\n    ) public view returns (address[5] memory usersMatch) {\n        uint current = 0;\n        address sponsor = member.sponsor(user);\n        while (current < 5) {\n            uint rank = data.userRank(sponsor, epoch);\n            if (rank > current) {\n                usersMatch[rank - 1] = sponsor;\n                current = rank;\n            }\n            sponsor = member.sponsor(sponsor);\n            if (sponsor == address(0x0)) break;\n        }\n    }\n    function claim(uint day) public payable {\n        require(msg.value >= FEE, "Must pay fee");\n        if (FEE > 0) {\n            payable(feeActions).transfer(FEE);\n        }\n        uint today = (block.timestamp - 20 days) / VOTE_PERIOD;\n        require(today >= day + VOTE_EPOCH_PERIOD, "Frozen time vote");\n        (uint64 totalVote, uint64 totalClaim) = data.userInfo(msg.sender);\n        require(totalVote > totalClaim + 3, "Frozen 3 vote");\n        uint percent = data.userClaim(msg.sender, day);\n        uint amount = getAmountOut(\n            ((VOTE_AMOUNT - 1e18) * percent) / 100000 + (VOTE_AMOUNT - 1e18)\n        );\n        token.transfer(msg.sender, amount);\n    }\n    function rankSet(\n        address[] calldata users,\n        uint8[] calldata rank,\n        bool ended\n    ) public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        require(!data.isActiveVote(), "Not active vote");\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        for (uint i = 0; i < users.length; i++) {\n            data.setUserRank(users[i], epoch, rank[i]);\n        }\n        if (ended) {\n            data.activeVote();\n        }\n    }\n    function changeFee(uint newFEE) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        FEE = newFEE;\n    }\n    function changeVoteFee(uint newFEE) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        VOTE_FEE = newFEE;\n    }\n    function withdrawStuck() external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        uint256 balance = token.balanceOf(address(this));\n        token.transfer(msg.sender, balance);\n        uint256 balanceU = usd.balanceOf(address(this));\n        usd.transfer(msg.sender, balanceU);\n        payable(msg.sender).transfer(address(this).balance);\n    }\n    function withdrawTokenStuck(address _token) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        uint256 balance = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).transfer(msg.sender, balance);\n    }\n    function withdrawStuckEth(address toAddr) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        (bool success, ) = toAddr.call{value: address(this).balance}("");\n        require(success);\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'NewVoteContract.swapTokens', 'start_line': 277, 'end_line': 288, 'offset_start': 10374, 'offset_end': 10743, 'content': 'function swapTokens(uint256 tokenAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = address(usd);\n        path[1] = address(token);\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, \n            path,\n            mtcFund,\n            block.timestamp\n        );\n    }', 'contract_name': 'NewVoteContract', 'contract_code': '{\n    uint public FEE = 300000000000000;\n    uint public VOTE_FEE = 0;\n    bytes32 public constant EDITOR = keccak256("EDITOR");\n    IUniswapV2Pair public uniswapPair;\n    IUniswapV2Router02 public immutable uniswapV2Router =\n        IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n    uint public constant VOTE_PERIOD = 1 days;\n    uint public constant VOTE_EPOCH_PERIOD = 30;\n    uint public constant VOTE_AMOUNT = 31e18;\n    uint[5] public RANK_PERCENT = [4, 8, 12, 16, 20];\n    uint public PERCENT_DIF = 6;\n    IMemberManager public member;\n    IERC20 public usd;\n    IERC20 public token;\n    DataStorage public data;\n    address public feeAddress;\n    address public feeMatchAddress;\n    address public globalFund;\n    address public mtcFund;\n    address public sponsorFund;\n    address public feeActions;\n    uint256 MAX_INT =\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n    constructor(\n        address _memberAddress,\n        IERC20 _usd,\n        IERC20 _token,\n        DataStorage _data,\n        address _feeAddress,\n        address _feeMatchAddress,\n        address _globalFund,\n        address _mtcFund,\n        address _sponsorFund,\n        address _feeActions\n    ) {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        member = IMemberManager(_memberAddress);\n        usd = _usd;\n        token = _token;\n        feeAddress = _feeAddress;\n        data = _data;\n        feeMatchAddress = _feeMatchAddress;\n        globalFund = _globalFund;\n        mtcFund = _mtcFund;\n        sponsorFund = _sponsorFund;\n        feeActions = _feeActions;\n        uniswapPair = IUniswapV2Pair(\n            IUniswapV2Factory(uniswapV2Router.factory()).getPair(\n                address(usd),\n                address(token)\n            )\n        );\n        usd.approve(address(uniswapV2Router), MAX_INT);\n        token.approve(address(uniswapV2Router), MAX_INT);\n    }\n    function vote() public payable {\n        require(msg.value >= VOTE_FEE, "Must pay fee");\n        if (VOTE_FEE > 0) {\n            payable(feeActions).transfer(VOTE_FEE);\n        }\n        address sponsor = member.sponsor(msg.sender);\n        require(sponsor != address(0x0), "Must be member");\n        require(data.isActiveVote(), "Must be active vote");\n        usd.transferFrom(msg.sender, address(this), VOTE_AMOUNT);\n        usd.transfer(feeAddress, 1e18);\n        usd.transfer(globalFund, 6e16);\n        if (sponsorActive(sponsor)) {\n            usd.transfer(sponsor, 5e18);\n        } else {\n            usd.transfer(sponsorFund, 5e18);\n        }\n        swapTokens(2434e16);\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        address[5] memory usersMatch = searchMatchAddress(msg.sender, epoch);\n        uint paid = 0;\n        for (uint i = 0; i < 5; i++) {\n            if (usersMatch[i] != address(0x0)) {\n                usd.transfer(\n                    usersMatch[i],\n                    ((VOTE_AMOUNT - 1e18) * (RANK_PERCENT[i] - paid)) / 1000\n                );\n                paid = RANK_PERCENT[i];\n            }\n        }\n        if (paid < RANK_PERCENT[4]) {\n            usd.transfer(\n                feeMatchAddress,\n                ((VOTE_AMOUNT - 1e18) * (RANK_PERCENT[4] - paid)) / 1000\n            );\n        }\n        uint16 percent = uint16(\n            ((uint256(\n                keccak256(\n                    abi.encodePacked(\n                        msg.sender,\n                        block.timestamp,\n                        getAmountOut(2434e16)\n                    )\n                )\n            ) % PERCENT_DIF) + (30 - PERCENT_DIF)) * 1000\n        );\n        data.userVote(msg.sender, percent);\n    }\n    function editPercentDif(uint percent) public {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be editor");\n        PERCENT_DIF = percent;\n    }\n    function sponsorActive(address user) public view returns (bool) {\n        uint today = (block.timestamp - 20 days) / VOTE_PERIOD;\n        return (data.getVote(user, today) > 0 ||\n            data.getVote(user, today - 1) > 0 ||\n            data.getVote(user, today - 2) > 0);\n    }\n    function getAmountOut(uint amountIn) public view returns (uint amountOut) {\n        (uint256 reserve0, uint256 reserve1, ) = uniswapPair.getReserves();\n        (uint reserveIn, uint reserveOut) = address(usd) < address(token)\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n        uint256 numerator = amountIn * reserveOut;\n        uint256 denominator = reserveIn + amountIn;\n        amountOut = numerator / denominator;\n    }\n    function swapTokens(uint256 tokenAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = address(usd);\n        path[1] = address(token);\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, \n            path,\n            mtcFund,\n            block.timestamp\n        );\n    }\n    function searchMatchAddress(\n        address user,\n        uint epoch\n    ) public view returns (address[5] memory usersMatch) {\n        uint current = 0;\n        address sponsor = member.sponsor(user);\n        while (current < 5) {\n            uint rank = data.userRank(sponsor, epoch);\n            if (rank > current) {\n                usersMatch[rank - 1] = sponsor;\n                current = rank;\n            }\n            sponsor = member.sponsor(sponsor);\n            if (sponsor == address(0x0)) break;\n        }\n    }\n    function claim(uint day) public payable {\n        require(msg.value >= FEE, "Must pay fee");\n        if (FEE > 0) {\n            payable(feeActions).transfer(FEE);\n        }\n        uint today = (block.timestamp - 20 days) / VOTE_PERIOD;\n        require(today >= day + VOTE_EPOCH_PERIOD, "Frozen time vote");\n        (uint64 totalVote, uint64 totalClaim) = data.userInfo(msg.sender);\n        require(totalVote > totalClaim + 3, "Frozen 3 vote");\n        uint percent = data.userClaim(msg.sender, day);\n        uint amount = getAmountOut(\n            ((VOTE_AMOUNT - 1e18) * percent) / 100000 + (VOTE_AMOUNT - 1e18)\n        );\n        token.transfer(msg.sender, amount);\n    }\n    function rankSet(\n        address[] calldata users,\n        uint8[] calldata rank,\n        bool ended\n    ) public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        require(!data.isActiveVote(), "Not active vote");\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        for (uint i = 0; i < users.length; i++) {\n            data.setUserRank(users[i], epoch, rank[i]);\n        }\n        if (ended) {\n            data.activeVote();\n        }\n    }\n    function changeFee(uint newFEE) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        FEE = newFEE;\n    }\n    function changeVoteFee(uint newFEE) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        VOTE_FEE = newFEE;\n    }\n    function withdrawStuck() external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        uint256 balance = token.balanceOf(address(this));\n        token.transfer(msg.sender, balance);\n        uint256 balanceU = usd.balanceOf(address(this));\n        usd.transfer(msg.sender, balanceU);\n        payable(msg.sender).transfer(address(this).balance);\n    }\n    function withdrawTokenStuck(address _token) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        uint256 balance = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).transfer(msg.sender, balance);\n    }\n    function withdrawStuckEth(address toAddr) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        (bool success, ) = toAddr.call{value: address(this).balance}("");\n        require(success);\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'private', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'NewVoteContract.searchMatchAddress', 'start_line': 289, 'end_line': 304, 'offset_start': 10749, 'offset_end': 11274, 'content': 'function searchMatchAddress(\n        address user,\n        uint epoch\n    ) public view returns (address[5] memory usersMatch) {\n        uint current = 0;\n        address sponsor = member.sponsor(user);\n        while (current < 5) {\n            uint rank = data.userRank(sponsor, epoch);\n            if (rank > current) {\n                usersMatch[rank - 1] = sponsor;\n                current = rank;\n            }\n            sponsor = member.sponsor(sponsor);\n            if (sponsor == address(0x0)) break;\n        }\n    }', 'contract_name': 'NewVoteContract', 'contract_code': '{\n    uint public FEE = 300000000000000;\n    uint public VOTE_FEE = 0;\n    bytes32 public constant EDITOR = keccak256("EDITOR");\n    IUniswapV2Pair public uniswapPair;\n    IUniswapV2Router02 public immutable uniswapV2Router =\n        IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n    uint public constant VOTE_PERIOD = 1 days;\n    uint public constant VOTE_EPOCH_PERIOD = 30;\n    uint public constant VOTE_AMOUNT = 31e18;\n    uint[5] public RANK_PERCENT = [4, 8, 12, 16, 20];\n    uint public PERCENT_DIF = 6;\n    IMemberManager public member;\n    IERC20 public usd;\n    IERC20 public token;\n    DataStorage public data;\n    address public feeAddress;\n    address public feeMatchAddress;\n    address public globalFund;\n    address public mtcFund;\n    address public sponsorFund;\n    address public feeActions;\n    uint256 MAX_INT =\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n    constructor(\n        address _memberAddress,\n        IERC20 _usd,\n        IERC20 _token,\n        DataStorage _data,\n        address _feeAddress,\n        address _feeMatchAddress,\n        address _globalFund,\n        address _mtcFund,\n        address _sponsorFund,\n        address _feeActions\n    ) {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        member = IMemberManager(_memberAddress);\n        usd = _usd;\n        token = _token;\n        feeAddress = _feeAddress;\n        data = _data;\n        feeMatchAddress = _feeMatchAddress;\n        globalFund = _globalFund;\n        mtcFund = _mtcFund;\n        sponsorFund = _sponsorFund;\n        feeActions = _feeActions;\n        uniswapPair = IUniswapV2Pair(\n            IUniswapV2Factory(uniswapV2Router.factory()).getPair(\n                address(usd),\n                address(token)\n            )\n        );\n        usd.approve(address(uniswapV2Router), MAX_INT);\n        token.approve(address(uniswapV2Router), MAX_INT);\n    }\n    function vote() public payable {\n        require(msg.value >= VOTE_FEE, "Must pay fee");\n        if (VOTE_FEE > 0) {\n            payable(feeActions).transfer(VOTE_FEE);\n        }\n        address sponsor = member.sponsor(msg.sender);\n        require(sponsor != address(0x0), "Must be member");\n        require(data.isActiveVote(), "Must be active vote");\n        usd.transferFrom(msg.sender, address(this), VOTE_AMOUNT);\n        usd.transfer(feeAddress, 1e18);\n        usd.transfer(globalFund, 6e16);\n        if (sponsorActive(sponsor)) {\n            usd.transfer(sponsor, 5e18);\n        } else {\n            usd.transfer(sponsorFund, 5e18);\n        }\n        swapTokens(2434e16);\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        address[5] memory usersMatch = searchMatchAddress(msg.sender, epoch);\n        uint paid = 0;\n        for (uint i = 0; i < 5; i++) {\n            if (usersMatch[i] != address(0x0)) {\n                usd.transfer(\n                    usersMatch[i],\n                    ((VOTE_AMOUNT - 1e18) * (RANK_PERCENT[i] - paid)) / 1000\n                );\n                paid = RANK_PERCENT[i];\n            }\n        }\n        if (paid < RANK_PERCENT[4]) {\n            usd.transfer(\n                feeMatchAddress,\n                ((VOTE_AMOUNT - 1e18) * (RANK_PERCENT[4] - paid)) / 1000\n            );\n        }\n        uint16 percent = uint16(\n            ((uint256(\n                keccak256(\n                    abi.encodePacked(\n                        msg.sender,\n                        block.timestamp,\n                        getAmountOut(2434e16)\n                    )\n                )\n            ) % PERCENT_DIF) + (30 - PERCENT_DIF)) * 1000\n        );\n        data.userVote(msg.sender, percent);\n    }\n    function editPercentDif(uint percent) public {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be editor");\n        PERCENT_DIF = percent;\n    }\n    function sponsorActive(address user) public view returns (bool) {\n        uint today = (block.timestamp - 20 days) / VOTE_PERIOD;\n        return (data.getVote(user, today) > 0 ||\n            data.getVote(user, today - 1) > 0 ||\n            data.getVote(user, today - 2) > 0);\n    }\n    function getAmountOut(uint amountIn) public view returns (uint amountOut) {\n        (uint256 reserve0, uint256 reserve1, ) = uniswapPair.getReserves();\n        (uint reserveIn, uint reserveOut) = address(usd) < address(token)\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n        uint256 numerator = amountIn * reserveOut;\n        uint256 denominator = reserveIn + amountIn;\n        amountOut = numerator / denominator;\n    }\n    function swapTokens(uint256 tokenAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = address(usd);\n        path[1] = address(token);\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, \n            path,\n            mtcFund,\n            block.timestamp\n        );\n    }\n    function searchMatchAddress(\n        address user,\n        uint epoch\n    ) public view returns (address[5] memory usersMatch) {\n        uint current = 0;\n        address sponsor = member.sponsor(user);\n        while (current < 5) {\n            uint rank = data.userRank(sponsor, epoch);\n            if (rank > current) {\n                usersMatch[rank - 1] = sponsor;\n                current = rank;\n            }\n            sponsor = member.sponsor(sponsor);\n            if (sponsor == address(0x0)) break;\n        }\n    }\n    function claim(uint day) public payable {\n        require(msg.value >= FEE, "Must pay fee");\n        if (FEE > 0) {\n            payable(feeActions).transfer(FEE);\n        }\n        uint today = (block.timestamp - 20 days) / VOTE_PERIOD;\n        require(today >= day + VOTE_EPOCH_PERIOD, "Frozen time vote");\n        (uint64 totalVote, uint64 totalClaim) = data.userInfo(msg.sender);\n        require(totalVote > totalClaim + 3, "Frozen 3 vote");\n        uint percent = data.userClaim(msg.sender, day);\n        uint amount = getAmountOut(\n            ((VOTE_AMOUNT - 1e18) * percent) / 100000 + (VOTE_AMOUNT - 1e18)\n        );\n        token.transfer(msg.sender, amount);\n    }\n    function rankSet(\n        address[] calldata users,\n        uint8[] calldata rank,\n        bool ended\n    ) public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        require(!data.isActiveVote(), "Not active vote");\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        for (uint i = 0; i < users.length; i++) {\n            data.setUserRank(users[i], epoch, rank[i]);\n        }\n        if (ended) {\n            data.activeVote();\n        }\n    }\n    function changeFee(uint newFEE) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        FEE = newFEE;\n    }\n    function changeVoteFee(uint newFEE) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        VOTE_FEE = newFEE;\n    }\n    function withdrawStuck() external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        uint256 balance = token.balanceOf(address(this));\n        token.transfer(msg.sender, balance);\n        uint256 balanceU = usd.balanceOf(address(this));\n        usd.transfer(msg.sender, balanceU);\n        payable(msg.sender).transfer(address(this).balance);\n    }\n    function withdrawTokenStuck(address _token) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        uint256 balance = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).transfer(msg.sender, balance);\n    }\n    function withdrawStuckEth(address toAddr) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        (bool success, ) = toAddr.call{value: address(this).balance}("");\n        require(success);\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'NewVoteContract.claim', 'start_line': 305, 'end_line': 319, 'offset_start': 11280, 'offset_end': 11953, 'content': 'function claim(uint day) public payable {\n        require(msg.value >= FEE, "Must pay fee");\n        if (FEE > 0) {\n            payable(feeActions).transfer(FEE);\n        }\n        uint today = (block.timestamp - 20 days) / VOTE_PERIOD;\n        require(today >= day + VOTE_EPOCH_PERIOD, "Frozen time vote");\n        (uint64 totalVote, uint64 totalClaim) = data.userInfo(msg.sender);\n        require(totalVote > totalClaim + 3, "Frozen 3 vote");\n        uint percent = data.userClaim(msg.sender, day);\n        uint amount = getAmountOut(\n            ((VOTE_AMOUNT - 1e18) * percent) / 100000 + (VOTE_AMOUNT - 1e18)\n        );\n        token.transfer(msg.sender, amount);\n    }', 'contract_name': 'NewVoteContract', 'contract_code': '{\n    uint public FEE = 300000000000000;\n    uint public VOTE_FEE = 0;\n    bytes32 public constant EDITOR = keccak256("EDITOR");\n    IUniswapV2Pair public uniswapPair;\n    IUniswapV2Router02 public immutable uniswapV2Router =\n        IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n    uint public constant VOTE_PERIOD = 1 days;\n    uint public constant VOTE_EPOCH_PERIOD = 30;\n    uint public constant VOTE_AMOUNT = 31e18;\n    uint[5] public RANK_PERCENT = [4, 8, 12, 16, 20];\n    uint public PERCENT_DIF = 6;\n    IMemberManager public member;\n    IERC20 public usd;\n    IERC20 public token;\n    DataStorage public data;\n    address public feeAddress;\n    address public feeMatchAddress;\n    address public globalFund;\n    address public mtcFund;\n    address public sponsorFund;\n    address public feeActions;\n    uint256 MAX_INT =\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n    constructor(\n        address _memberAddress,\n        IERC20 _usd,\n        IERC20 _token,\n        DataStorage _data,\n        address _feeAddress,\n        address _feeMatchAddress,\n        address _globalFund,\n        address _mtcFund,\n        address _sponsorFund,\n        address _feeActions\n    ) {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        member = IMemberManager(_memberAddress);\n        usd = _usd;\n        token = _token;\n        feeAddress = _feeAddress;\n        data = _data;\n        feeMatchAddress = _feeMatchAddress;\n        globalFund = _globalFund;\n        mtcFund = _mtcFund;\n        sponsorFund = _sponsorFund;\n        feeActions = _feeActions;\n        uniswapPair = IUniswapV2Pair(\n            IUniswapV2Factory(uniswapV2Router.factory()).getPair(\n                address(usd),\n                address(token)\n            )\n        );\n        usd.approve(address(uniswapV2Router), MAX_INT);\n        token.approve(address(uniswapV2Router), MAX_INT);\n    }\n    function vote() public payable {\n        require(msg.value >= VOTE_FEE, "Must pay fee");\n        if (VOTE_FEE > 0) {\n            payable(feeActions).transfer(VOTE_FEE);\n        }\n        address sponsor = member.sponsor(msg.sender);\n        require(sponsor != address(0x0), "Must be member");\n        require(data.isActiveVote(), "Must be active vote");\n        usd.transferFrom(msg.sender, address(this), VOTE_AMOUNT);\n        usd.transfer(feeAddress, 1e18);\n        usd.transfer(globalFund, 6e16);\n        if (sponsorActive(sponsor)) {\n            usd.transfer(sponsor, 5e18);\n        } else {\n            usd.transfer(sponsorFund, 5e18);\n        }\n        swapTokens(2434e16);\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        address[5] memory usersMatch = searchMatchAddress(msg.sender, epoch);\n        uint paid = 0;\n        for (uint i = 0; i < 5; i++) {\n            if (usersMatch[i] != address(0x0)) {\n                usd.transfer(\n                    usersMatch[i],\n                    ((VOTE_AMOUNT - 1e18) * (RANK_PERCENT[i] - paid)) / 1000\n                );\n                paid = RANK_PERCENT[i];\n            }\n        }\n        if (paid < RANK_PERCENT[4]) {\n            usd.transfer(\n                feeMatchAddress,\n                ((VOTE_AMOUNT - 1e18) * (RANK_PERCENT[4] - paid)) / 1000\n            );\n        }\n        uint16 percent = uint16(\n            ((uint256(\n                keccak256(\n                    abi.encodePacked(\n                        msg.sender,\n                        block.timestamp,\n                        getAmountOut(2434e16)\n                    )\n                )\n            ) % PERCENT_DIF) + (30 - PERCENT_DIF)) * 1000\n        );\n        data.userVote(msg.sender, percent);\n    }\n    function editPercentDif(uint percent) public {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be editor");\n        PERCENT_DIF = percent;\n    }\n    function sponsorActive(address user) public view returns (bool) {\n        uint today = (block.timestamp - 20 days) / VOTE_PERIOD;\n        return (data.getVote(user, today) > 0 ||\n            data.getVote(user, today - 1) > 0 ||\n            data.getVote(user, today - 2) > 0);\n    }\n    function getAmountOut(uint amountIn) public view returns (uint amountOut) {\n        (uint256 reserve0, uint256 reserve1, ) = uniswapPair.getReserves();\n        (uint reserveIn, uint reserveOut) = address(usd) < address(token)\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n        uint256 numerator = amountIn * reserveOut;\n        uint256 denominator = reserveIn + amountIn;\n        amountOut = numerator / denominator;\n    }\n    function swapTokens(uint256 tokenAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = address(usd);\n        path[1] = address(token);\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, \n            path,\n            mtcFund,\n            block.timestamp\n        );\n    }\n    function searchMatchAddress(\n        address user,\n        uint epoch\n    ) public view returns (address[5] memory usersMatch) {\n        uint current = 0;\n        address sponsor = member.sponsor(user);\n        while (current < 5) {\n            uint rank = data.userRank(sponsor, epoch);\n            if (rank > current) {\n                usersMatch[rank - 1] = sponsor;\n                current = rank;\n            }\n            sponsor = member.sponsor(sponsor);\n            if (sponsor == address(0x0)) break;\n        }\n    }\n    function claim(uint day) public payable {\n        require(msg.value >= FEE, "Must pay fee");\n        if (FEE > 0) {\n            payable(feeActions).transfer(FEE);\n        }\n        uint today = (block.timestamp - 20 days) / VOTE_PERIOD;\n        require(today >= day + VOTE_EPOCH_PERIOD, "Frozen time vote");\n        (uint64 totalVote, uint64 totalClaim) = data.userInfo(msg.sender);\n        require(totalVote > totalClaim + 3, "Frozen 3 vote");\n        uint percent = data.userClaim(msg.sender, day);\n        uint amount = getAmountOut(\n            ((VOTE_AMOUNT - 1e18) * percent) / 100000 + (VOTE_AMOUNT - 1e18)\n        );\n        token.transfer(msg.sender, amount);\n    }\n    function rankSet(\n        address[] calldata users,\n        uint8[] calldata rank,\n        bool ended\n    ) public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        require(!data.isActiveVote(), "Not active vote");\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        for (uint i = 0; i < users.length; i++) {\n            data.setUserRank(users[i], epoch, rank[i]);\n        }\n        if (ended) {\n            data.activeVote();\n        }\n    }\n    function changeFee(uint newFEE) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        FEE = newFEE;\n    }\n    function changeVoteFee(uint newFEE) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        VOTE_FEE = newFEE;\n    }\n    function withdrawStuck() external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        uint256 balance = token.balanceOf(address(this));\n        token.transfer(msg.sender, balance);\n        uint256 balanceU = usd.balanceOf(address(this));\n        usd.transfer(msg.sender, balanceU);\n        payable(msg.sender).transfer(address(this).balance);\n    }\n    function withdrawTokenStuck(address _token) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        uint256 balance = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).transfer(msg.sender, balance);\n    }\n    function withdrawStuckEth(address toAddr) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        (bool success, ) = toAddr.call{value: address(this).balance}("");\n        require(success);\n    }\n}', 'modifiers': [], 'stateMutability': 'payable', 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'NewVoteContract.rankSet', 'start_line': 320, 'end_line': 335, 'offset_start': 11959, 'offset_end': 12478, 'content': 'function rankSet(\n        address[] calldata users,\n        uint8[] calldata rank,\n        bool ended\n    ) public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        require(!data.isActiveVote(), "Not active vote");\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        for (uint i = 0; i < users.length; i++) {\n            data.setUserRank(users[i], epoch, rank[i]);\n        }\n        if (ended) {\n            data.activeVote();\n        }\n    }', 'contract_name': 'NewVoteContract', 'contract_code': '{\n    uint public FEE = 300000000000000;\n    uint public VOTE_FEE = 0;\n    bytes32 public constant EDITOR = keccak256("EDITOR");\n    IUniswapV2Pair public uniswapPair;\n    IUniswapV2Router02 public immutable uniswapV2Router =\n        IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n    uint public constant VOTE_PERIOD = 1 days;\n    uint public constant VOTE_EPOCH_PERIOD = 30;\n    uint public constant VOTE_AMOUNT = 31e18;\n    uint[5] public RANK_PERCENT = [4, 8, 12, 16, 20];\n    uint public PERCENT_DIF = 6;\n    IMemberManager public member;\n    IERC20 public usd;\n    IERC20 public token;\n    DataStorage public data;\n    address public feeAddress;\n    address public feeMatchAddress;\n    address public globalFund;\n    address public mtcFund;\n    address public sponsorFund;\n    address public feeActions;\n    uint256 MAX_INT =\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n    constructor(\n        address _memberAddress,\n        IERC20 _usd,\n        IERC20 _token,\n        DataStorage _data,\n        address _feeAddress,\n        address _feeMatchAddress,\n        address _globalFund,\n        address _mtcFund,\n        address _sponsorFund,\n        address _feeActions\n    ) {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        member = IMemberManager(_memberAddress);\n        usd = _usd;\n        token = _token;\n        feeAddress = _feeAddress;\n        data = _data;\n        feeMatchAddress = _feeMatchAddress;\n        globalFund = _globalFund;\n        mtcFund = _mtcFund;\n        sponsorFund = _sponsorFund;\n        feeActions = _feeActions;\n        uniswapPair = IUniswapV2Pair(\n            IUniswapV2Factory(uniswapV2Router.factory()).getPair(\n                address(usd),\n                address(token)\n            )\n        );\n        usd.approve(address(uniswapV2Router), MAX_INT);\n        token.approve(address(uniswapV2Router), MAX_INT);\n    }\n    function vote() public payable {\n        require(msg.value >= VOTE_FEE, "Must pay fee");\n        if (VOTE_FEE > 0) {\n            payable(feeActions).transfer(VOTE_FEE);\n        }\n        address sponsor = member.sponsor(msg.sender);\n        require(sponsor != address(0x0), "Must be member");\n        require(data.isActiveVote(), "Must be active vote");\n        usd.transferFrom(msg.sender, address(this), VOTE_AMOUNT);\n        usd.transfer(feeAddress, 1e18);\n        usd.transfer(globalFund, 6e16);\n        if (sponsorActive(sponsor)) {\n            usd.transfer(sponsor, 5e18);\n        } else {\n            usd.transfer(sponsorFund, 5e18);\n        }\n        swapTokens(2434e16);\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        address[5] memory usersMatch = searchMatchAddress(msg.sender, epoch);\n        uint paid = 0;\n        for (uint i = 0; i < 5; i++) {\n            if (usersMatch[i] != address(0x0)) {\n                usd.transfer(\n                    usersMatch[i],\n                    ((VOTE_AMOUNT - 1e18) * (RANK_PERCENT[i] - paid)) / 1000\n                );\n                paid = RANK_PERCENT[i];\n            }\n        }\n        if (paid < RANK_PERCENT[4]) {\n            usd.transfer(\n                feeMatchAddress,\n                ((VOTE_AMOUNT - 1e18) * (RANK_PERCENT[4] - paid)) / 1000\n            );\n        }\n        uint16 percent = uint16(\n            ((uint256(\n                keccak256(\n                    abi.encodePacked(\n                        msg.sender,\n                        block.timestamp,\n                        getAmountOut(2434e16)\n                    )\n                )\n            ) % PERCENT_DIF) + (30 - PERCENT_DIF)) * 1000\n        );\n        data.userVote(msg.sender, percent);\n    }\n    function editPercentDif(uint percent) public {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be editor");\n        PERCENT_DIF = percent;\n    }\n    function sponsorActive(address user) public view returns (bool) {\n        uint today = (block.timestamp - 20 days) / VOTE_PERIOD;\n        return (data.getVote(user, today) > 0 ||\n            data.getVote(user, today - 1) > 0 ||\n            data.getVote(user, today - 2) > 0);\n    }\n    function getAmountOut(uint amountIn) public view returns (uint amountOut) {\n        (uint256 reserve0, uint256 reserve1, ) = uniswapPair.getReserves();\n        (uint reserveIn, uint reserveOut) = address(usd) < address(token)\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n        uint256 numerator = amountIn * reserveOut;\n        uint256 denominator = reserveIn + amountIn;\n        amountOut = numerator / denominator;\n    }\n    function swapTokens(uint256 tokenAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = address(usd);\n        path[1] = address(token);\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, \n            path,\n            mtcFund,\n            block.timestamp\n        );\n    }\n    function searchMatchAddress(\n        address user,\n        uint epoch\n    ) public view returns (address[5] memory usersMatch) {\n        uint current = 0;\n        address sponsor = member.sponsor(user);\n        while (current < 5) {\n            uint rank = data.userRank(sponsor, epoch);\n            if (rank > current) {\n                usersMatch[rank - 1] = sponsor;\n                current = rank;\n            }\n            sponsor = member.sponsor(sponsor);\n            if (sponsor == address(0x0)) break;\n        }\n    }\n    function claim(uint day) public payable {\n        require(msg.value >= FEE, "Must pay fee");\n        if (FEE > 0) {\n            payable(feeActions).transfer(FEE);\n        }\n        uint today = (block.timestamp - 20 days) / VOTE_PERIOD;\n        require(today >= day + VOTE_EPOCH_PERIOD, "Frozen time vote");\n        (uint64 totalVote, uint64 totalClaim) = data.userInfo(msg.sender);\n        require(totalVote > totalClaim + 3, "Frozen 3 vote");\n        uint percent = data.userClaim(msg.sender, day);\n        uint amount = getAmountOut(\n            ((VOTE_AMOUNT - 1e18) * percent) / 100000 + (VOTE_AMOUNT - 1e18)\n        );\n        token.transfer(msg.sender, amount);\n    }\n    function rankSet(\n        address[] calldata users,\n        uint8[] calldata rank,\n        bool ended\n    ) public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        require(!data.isActiveVote(), "Not active vote");\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        for (uint i = 0; i < users.length; i++) {\n            data.setUserRank(users[i], epoch, rank[i]);\n        }\n        if (ended) {\n            data.activeVote();\n        }\n    }\n    function changeFee(uint newFEE) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        FEE = newFEE;\n    }\n    function changeVoteFee(uint newFEE) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        VOTE_FEE = newFEE;\n    }\n    function withdrawStuck() external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        uint256 balance = token.balanceOf(address(this));\n        token.transfer(msg.sender, balance);\n        uint256 balanceU = usd.balanceOf(address(this));\n        usd.transfer(msg.sender, balanceU);\n        payable(msg.sender).transfer(address(this).balance);\n    }\n    function withdrawTokenStuck(address _token) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        uint256 balance = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).transfer(msg.sender, balance);\n    }\n    function withdrawStuckEth(address toAddr) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        (bool success, ) = toAddr.call{value: address(this).balance}("");\n        require(success);\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'NewVoteContract.changeFee', 'start_line': 336, 'end_line': 339, 'offset_start': 12484, 'offset_end': 12628, 'content': 'function changeFee(uint newFEE) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        FEE = newFEE;\n    }', 'contract_name': 'NewVoteContract', 'contract_code': '{\n    uint public FEE = 300000000000000;\n    uint public VOTE_FEE = 0;\n    bytes32 public constant EDITOR = keccak256("EDITOR");\n    IUniswapV2Pair public uniswapPair;\n    IUniswapV2Router02 public immutable uniswapV2Router =\n        IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n    uint public constant VOTE_PERIOD = 1 days;\n    uint public constant VOTE_EPOCH_PERIOD = 30;\n    uint public constant VOTE_AMOUNT = 31e18;\n    uint[5] public RANK_PERCENT = [4, 8, 12, 16, 20];\n    uint public PERCENT_DIF = 6;\n    IMemberManager public member;\n    IERC20 public usd;\n    IERC20 public token;\n    DataStorage public data;\n    address public feeAddress;\n    address public feeMatchAddress;\n    address public globalFund;\n    address public mtcFund;\n    address public sponsorFund;\n    address public feeActions;\n    uint256 MAX_INT =\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n    constructor(\n        address _memberAddress,\n        IERC20 _usd,\n        IERC20 _token,\n        DataStorage _data,\n        address _feeAddress,\n        address _feeMatchAddress,\n        address _globalFund,\n        address _mtcFund,\n        address _sponsorFund,\n        address _feeActions\n    ) {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        member = IMemberManager(_memberAddress);\n        usd = _usd;\n        token = _token;\n        feeAddress = _feeAddress;\n        data = _data;\n        feeMatchAddress = _feeMatchAddress;\n        globalFund = _globalFund;\n        mtcFund = _mtcFund;\n        sponsorFund = _sponsorFund;\n        feeActions = _feeActions;\n        uniswapPair = IUniswapV2Pair(\n            IUniswapV2Factory(uniswapV2Router.factory()).getPair(\n                address(usd),\n                address(token)\n            )\n        );\n        usd.approve(address(uniswapV2Router), MAX_INT);\n        token.approve(address(uniswapV2Router), MAX_INT);\n    }\n    function vote() public payable {\n        require(msg.value >= VOTE_FEE, "Must pay fee");\n        if (VOTE_FEE > 0) {\n            payable(feeActions).transfer(VOTE_FEE);\n        }\n        address sponsor = member.sponsor(msg.sender);\n        require(sponsor != address(0x0), "Must be member");\n        require(data.isActiveVote(), "Must be active vote");\n        usd.transferFrom(msg.sender, address(this), VOTE_AMOUNT);\n        usd.transfer(feeAddress, 1e18);\n        usd.transfer(globalFund, 6e16);\n        if (sponsorActive(sponsor)) {\n            usd.transfer(sponsor, 5e18);\n        } else {\n            usd.transfer(sponsorFund, 5e18);\n        }\n        swapTokens(2434e16);\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        address[5] memory usersMatch = searchMatchAddress(msg.sender, epoch);\n        uint paid = 0;\n        for (uint i = 0; i < 5; i++) {\n            if (usersMatch[i] != address(0x0)) {\n                usd.transfer(\n                    usersMatch[i],\n                    ((VOTE_AMOUNT - 1e18) * (RANK_PERCENT[i] - paid)) / 1000\n                );\n                paid = RANK_PERCENT[i];\n            }\n        }\n        if (paid < RANK_PERCENT[4]) {\n            usd.transfer(\n                feeMatchAddress,\n                ((VOTE_AMOUNT - 1e18) * (RANK_PERCENT[4] - paid)) / 1000\n            );\n        }\n        uint16 percent = uint16(\n            ((uint256(\n                keccak256(\n                    abi.encodePacked(\n                        msg.sender,\n                        block.timestamp,\n                        getAmountOut(2434e16)\n                    )\n                )\n            ) % PERCENT_DIF) + (30 - PERCENT_DIF)) * 1000\n        );\n        data.userVote(msg.sender, percent);\n    }\n    function editPercentDif(uint percent) public {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be editor");\n        PERCENT_DIF = percent;\n    }\n    function sponsorActive(address user) public view returns (bool) {\n        uint today = (block.timestamp - 20 days) / VOTE_PERIOD;\n        return (data.getVote(user, today) > 0 ||\n            data.getVote(user, today - 1) > 0 ||\n            data.getVote(user, today - 2) > 0);\n    }\n    function getAmountOut(uint amountIn) public view returns (uint amountOut) {\n        (uint256 reserve0, uint256 reserve1, ) = uniswapPair.getReserves();\n        (uint reserveIn, uint reserveOut) = address(usd) < address(token)\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n        uint256 numerator = amountIn * reserveOut;\n        uint256 denominator = reserveIn + amountIn;\n        amountOut = numerator / denominator;\n    }\n    function swapTokens(uint256 tokenAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = address(usd);\n        path[1] = address(token);\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, \n            path,\n            mtcFund,\n            block.timestamp\n        );\n    }\n    function searchMatchAddress(\n        address user,\n        uint epoch\n    ) public view returns (address[5] memory usersMatch) {\n        uint current = 0;\n        address sponsor = member.sponsor(user);\n        while (current < 5) {\n            uint rank = data.userRank(sponsor, epoch);\n            if (rank > current) {\n                usersMatch[rank - 1] = sponsor;\n                current = rank;\n            }\n            sponsor = member.sponsor(sponsor);\n            if (sponsor == address(0x0)) break;\n        }\n    }\n    function claim(uint day) public payable {\n        require(msg.value >= FEE, "Must pay fee");\n        if (FEE > 0) {\n            payable(feeActions).transfer(FEE);\n        }\n        uint today = (block.timestamp - 20 days) / VOTE_PERIOD;\n        require(today >= day + VOTE_EPOCH_PERIOD, "Frozen time vote");\n        (uint64 totalVote, uint64 totalClaim) = data.userInfo(msg.sender);\n        require(totalVote > totalClaim + 3, "Frozen 3 vote");\n        uint percent = data.userClaim(msg.sender, day);\n        uint amount = getAmountOut(\n            ((VOTE_AMOUNT - 1e18) * percent) / 100000 + (VOTE_AMOUNT - 1e18)\n        );\n        token.transfer(msg.sender, amount);\n    }\n    function rankSet(\n        address[] calldata users,\n        uint8[] calldata rank,\n        bool ended\n    ) public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        require(!data.isActiveVote(), "Not active vote");\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        for (uint i = 0; i < users.length; i++) {\n            data.setUserRank(users[i], epoch, rank[i]);\n        }\n        if (ended) {\n            data.activeVote();\n        }\n    }\n    function changeFee(uint newFEE) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        FEE = newFEE;\n    }\n    function changeVoteFee(uint newFEE) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        VOTE_FEE = newFEE;\n    }\n    function withdrawStuck() external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        uint256 balance = token.balanceOf(address(this));\n        token.transfer(msg.sender, balance);\n        uint256 balanceU = usd.balanceOf(address(this));\n        usd.transfer(msg.sender, balanceU);\n        payable(msg.sender).transfer(address(this).balance);\n    }\n    function withdrawTokenStuck(address _token) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        uint256 balance = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).transfer(msg.sender, balance);\n    }\n    function withdrawStuckEth(address toAddr) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        (bool success, ) = toAddr.call{value: address(this).balance}("");\n        require(success);\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'NewVoteContract.changeVoteFee', 'start_line': 340, 'end_line': 343, 'offset_start': 12634, 'offset_end': 12787, 'content': 'function changeVoteFee(uint newFEE) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        VOTE_FEE = newFEE;\n    }', 'contract_name': 'NewVoteContract', 'contract_code': '{\n    uint public FEE = 300000000000000;\n    uint public VOTE_FEE = 0;\n    bytes32 public constant EDITOR = keccak256("EDITOR");\n    IUniswapV2Pair public uniswapPair;\n    IUniswapV2Router02 public immutable uniswapV2Router =\n        IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n    uint public constant VOTE_PERIOD = 1 days;\n    uint public constant VOTE_EPOCH_PERIOD = 30;\n    uint public constant VOTE_AMOUNT = 31e18;\n    uint[5] public RANK_PERCENT = [4, 8, 12, 16, 20];\n    uint public PERCENT_DIF = 6;\n    IMemberManager public member;\n    IERC20 public usd;\n    IERC20 public token;\n    DataStorage public data;\n    address public feeAddress;\n    address public feeMatchAddress;\n    address public globalFund;\n    address public mtcFund;\n    address public sponsorFund;\n    address public feeActions;\n    uint256 MAX_INT =\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n    constructor(\n        address _memberAddress,\n        IERC20 _usd,\n        IERC20 _token,\n        DataStorage _data,\n        address _feeAddress,\n        address _feeMatchAddress,\n        address _globalFund,\n        address _mtcFund,\n        address _sponsorFund,\n        address _feeActions\n    ) {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        member = IMemberManager(_memberAddress);\n        usd = _usd;\n        token = _token;\n        feeAddress = _feeAddress;\n        data = _data;\n        feeMatchAddress = _feeMatchAddress;\n        globalFund = _globalFund;\n        mtcFund = _mtcFund;\n        sponsorFund = _sponsorFund;\n        feeActions = _feeActions;\n        uniswapPair = IUniswapV2Pair(\n            IUniswapV2Factory(uniswapV2Router.factory()).getPair(\n                address(usd),\n                address(token)\n            )\n        );\n        usd.approve(address(uniswapV2Router), MAX_INT);\n        token.approve(address(uniswapV2Router), MAX_INT);\n    }\n    function vote() public payable {\n        require(msg.value >= VOTE_FEE, "Must pay fee");\n        if (VOTE_FEE > 0) {\n            payable(feeActions).transfer(VOTE_FEE);\n        }\n        address sponsor = member.sponsor(msg.sender);\n        require(sponsor != address(0x0), "Must be member");\n        require(data.isActiveVote(), "Must be active vote");\n        usd.transferFrom(msg.sender, address(this), VOTE_AMOUNT);\n        usd.transfer(feeAddress, 1e18);\n        usd.transfer(globalFund, 6e16);\n        if (sponsorActive(sponsor)) {\n            usd.transfer(sponsor, 5e18);\n        } else {\n            usd.transfer(sponsorFund, 5e18);\n        }\n        swapTokens(2434e16);\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        address[5] memory usersMatch = searchMatchAddress(msg.sender, epoch);\n        uint paid = 0;\n        for (uint i = 0; i < 5; i++) {\n            if (usersMatch[i] != address(0x0)) {\n                usd.transfer(\n                    usersMatch[i],\n                    ((VOTE_AMOUNT - 1e18) * (RANK_PERCENT[i] - paid)) / 1000\n                );\n                paid = RANK_PERCENT[i];\n            }\n        }\n        if (paid < RANK_PERCENT[4]) {\n            usd.transfer(\n                feeMatchAddress,\n                ((VOTE_AMOUNT - 1e18) * (RANK_PERCENT[4] - paid)) / 1000\n            );\n        }\n        uint16 percent = uint16(\n            ((uint256(\n                keccak256(\n                    abi.encodePacked(\n                        msg.sender,\n                        block.timestamp,\n                        getAmountOut(2434e16)\n                    )\n                )\n            ) % PERCENT_DIF) + (30 - PERCENT_DIF)) * 1000\n        );\n        data.userVote(msg.sender, percent);\n    }\n    function editPercentDif(uint percent) public {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be editor");\n        PERCENT_DIF = percent;\n    }\n    function sponsorActive(address user) public view returns (bool) {\n        uint today = (block.timestamp - 20 days) / VOTE_PERIOD;\n        return (data.getVote(user, today) > 0 ||\n            data.getVote(user, today - 1) > 0 ||\n            data.getVote(user, today - 2) > 0);\n    }\n    function getAmountOut(uint amountIn) public view returns (uint amountOut) {\n        (uint256 reserve0, uint256 reserve1, ) = uniswapPair.getReserves();\n        (uint reserveIn, uint reserveOut) = address(usd) < address(token)\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n        uint256 numerator = amountIn * reserveOut;\n        uint256 denominator = reserveIn + amountIn;\n        amountOut = numerator / denominator;\n    }\n    function swapTokens(uint256 tokenAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = address(usd);\n        path[1] = address(token);\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, \n            path,\n            mtcFund,\n            block.timestamp\n        );\n    }\n    function searchMatchAddress(\n        address user,\n        uint epoch\n    ) public view returns (address[5] memory usersMatch) {\n        uint current = 0;\n        address sponsor = member.sponsor(user);\n        while (current < 5) {\n            uint rank = data.userRank(sponsor, epoch);\n            if (rank > current) {\n                usersMatch[rank - 1] = sponsor;\n                current = rank;\n            }\n            sponsor = member.sponsor(sponsor);\n            if (sponsor == address(0x0)) break;\n        }\n    }\n    function claim(uint day) public payable {\n        require(msg.value >= FEE, "Must pay fee");\n        if (FEE > 0) {\n            payable(feeActions).transfer(FEE);\n        }\n        uint today = (block.timestamp - 20 days) / VOTE_PERIOD;\n        require(today >= day + VOTE_EPOCH_PERIOD, "Frozen time vote");\n        (uint64 totalVote, uint64 totalClaim) = data.userInfo(msg.sender);\n        require(totalVote > totalClaim + 3, "Frozen 3 vote");\n        uint percent = data.userClaim(msg.sender, day);\n        uint amount = getAmountOut(\n            ((VOTE_AMOUNT - 1e18) * percent) / 100000 + (VOTE_AMOUNT - 1e18)\n        );\n        token.transfer(msg.sender, amount);\n    }\n    function rankSet(\n        address[] calldata users,\n        uint8[] calldata rank,\n        bool ended\n    ) public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        require(!data.isActiveVote(), "Not active vote");\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        for (uint i = 0; i < users.length; i++) {\n            data.setUserRank(users[i], epoch, rank[i]);\n        }\n        if (ended) {\n            data.activeVote();\n        }\n    }\n    function changeFee(uint newFEE) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        FEE = newFEE;\n    }\n    function changeVoteFee(uint newFEE) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        VOTE_FEE = newFEE;\n    }\n    function withdrawStuck() external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        uint256 balance = token.balanceOf(address(this));\n        token.transfer(msg.sender, balance);\n        uint256 balanceU = usd.balanceOf(address(this));\n        usd.transfer(msg.sender, balanceU);\n        payable(msg.sender).transfer(address(this).balance);\n    }\n    function withdrawTokenStuck(address _token) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        uint256 balance = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).transfer(msg.sender, balance);\n    }\n    function withdrawStuckEth(address toAddr) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        (bool success, ) = toAddr.call{value: address(this).balance}("");\n        require(success);\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'NewVoteContract.withdrawStuck', 'start_line': 344, 'end_line': 351, 'offset_start': 12793, 'offset_end': 13173, 'content': 'function withdrawStuck() external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        uint256 balance = token.balanceOf(address(this));\n        token.transfer(msg.sender, balance);\n        uint256 balanceU = usd.balanceOf(address(this));\n        usd.transfer(msg.sender, balanceU);\n        payable(msg.sender).transfer(address(this).balance);\n    }', 'contract_name': 'NewVoteContract', 'contract_code': '{\n    uint public FEE = 300000000000000;\n    uint public VOTE_FEE = 0;\n    bytes32 public constant EDITOR = keccak256("EDITOR");\n    IUniswapV2Pair public uniswapPair;\n    IUniswapV2Router02 public immutable uniswapV2Router =\n        IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n    uint public constant VOTE_PERIOD = 1 days;\n    uint public constant VOTE_EPOCH_PERIOD = 30;\n    uint public constant VOTE_AMOUNT = 31e18;\n    uint[5] public RANK_PERCENT = [4, 8, 12, 16, 20];\n    uint public PERCENT_DIF = 6;\n    IMemberManager public member;\n    IERC20 public usd;\n    IERC20 public token;\n    DataStorage public data;\n    address public feeAddress;\n    address public feeMatchAddress;\n    address public globalFund;\n    address public mtcFund;\n    address public sponsorFund;\n    address public feeActions;\n    uint256 MAX_INT =\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n    constructor(\n        address _memberAddress,\n        IERC20 _usd,\n        IERC20 _token,\n        DataStorage _data,\n        address _feeAddress,\n        address _feeMatchAddress,\n        address _globalFund,\n        address _mtcFund,\n        address _sponsorFund,\n        address _feeActions\n    ) {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        member = IMemberManager(_memberAddress);\n        usd = _usd;\n        token = _token;\n        feeAddress = _feeAddress;\n        data = _data;\n        feeMatchAddress = _feeMatchAddress;\n        globalFund = _globalFund;\n        mtcFund = _mtcFund;\n        sponsorFund = _sponsorFund;\n        feeActions = _feeActions;\n        uniswapPair = IUniswapV2Pair(\n            IUniswapV2Factory(uniswapV2Router.factory()).getPair(\n                address(usd),\n                address(token)\n            )\n        );\n        usd.approve(address(uniswapV2Router), MAX_INT);\n        token.approve(address(uniswapV2Router), MAX_INT);\n    }\n    function vote() public payable {\n        require(msg.value >= VOTE_FEE, "Must pay fee");\n        if (VOTE_FEE > 0) {\n            payable(feeActions).transfer(VOTE_FEE);\n        }\n        address sponsor = member.sponsor(msg.sender);\n        require(sponsor != address(0x0), "Must be member");\n        require(data.isActiveVote(), "Must be active vote");\n        usd.transferFrom(msg.sender, address(this), VOTE_AMOUNT);\n        usd.transfer(feeAddress, 1e18);\n        usd.transfer(globalFund, 6e16);\n        if (sponsorActive(sponsor)) {\n            usd.transfer(sponsor, 5e18);\n        } else {\n            usd.transfer(sponsorFund, 5e18);\n        }\n        swapTokens(2434e16);\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        address[5] memory usersMatch = searchMatchAddress(msg.sender, epoch);\n        uint paid = 0;\n        for (uint i = 0; i < 5; i++) {\n            if (usersMatch[i] != address(0x0)) {\n                usd.transfer(\n                    usersMatch[i],\n                    ((VOTE_AMOUNT - 1e18) * (RANK_PERCENT[i] - paid)) / 1000\n                );\n                paid = RANK_PERCENT[i];\n            }\n        }\n        if (paid < RANK_PERCENT[4]) {\n            usd.transfer(\n                feeMatchAddress,\n                ((VOTE_AMOUNT - 1e18) * (RANK_PERCENT[4] - paid)) / 1000\n            );\n        }\n        uint16 percent = uint16(\n            ((uint256(\n                keccak256(\n                    abi.encodePacked(\n                        msg.sender,\n                        block.timestamp,\n                        getAmountOut(2434e16)\n                    )\n                )\n            ) % PERCENT_DIF) + (30 - PERCENT_DIF)) * 1000\n        );\n        data.userVote(msg.sender, percent);\n    }\n    function editPercentDif(uint percent) public {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be editor");\n        PERCENT_DIF = percent;\n    }\n    function sponsorActive(address user) public view returns (bool) {\n        uint today = (block.timestamp - 20 days) / VOTE_PERIOD;\n        return (data.getVote(user, today) > 0 ||\n            data.getVote(user, today - 1) > 0 ||\n            data.getVote(user, today - 2) > 0);\n    }\n    function getAmountOut(uint amountIn) public view returns (uint amountOut) {\n        (uint256 reserve0, uint256 reserve1, ) = uniswapPair.getReserves();\n        (uint reserveIn, uint reserveOut) = address(usd) < address(token)\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n        uint256 numerator = amountIn * reserveOut;\n        uint256 denominator = reserveIn + amountIn;\n        amountOut = numerator / denominator;\n    }\n    function swapTokens(uint256 tokenAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = address(usd);\n        path[1] = address(token);\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, \n            path,\n            mtcFund,\n            block.timestamp\n        );\n    }\n    function searchMatchAddress(\n        address user,\n        uint epoch\n    ) public view returns (address[5] memory usersMatch) {\n        uint current = 0;\n        address sponsor = member.sponsor(user);\n        while (current < 5) {\n            uint rank = data.userRank(sponsor, epoch);\n            if (rank > current) {\n                usersMatch[rank - 1] = sponsor;\n                current = rank;\n            }\n            sponsor = member.sponsor(sponsor);\n            if (sponsor == address(0x0)) break;\n        }\n    }\n    function claim(uint day) public payable {\n        require(msg.value >= FEE, "Must pay fee");\n        if (FEE > 0) {\n            payable(feeActions).transfer(FEE);\n        }\n        uint today = (block.timestamp - 20 days) / VOTE_PERIOD;\n        require(today >= day + VOTE_EPOCH_PERIOD, "Frozen time vote");\n        (uint64 totalVote, uint64 totalClaim) = data.userInfo(msg.sender);\n        require(totalVote > totalClaim + 3, "Frozen 3 vote");\n        uint percent = data.userClaim(msg.sender, day);\n        uint amount = getAmountOut(\n            ((VOTE_AMOUNT - 1e18) * percent) / 100000 + (VOTE_AMOUNT - 1e18)\n        );\n        token.transfer(msg.sender, amount);\n    }\n    function rankSet(\n        address[] calldata users,\n        uint8[] calldata rank,\n        bool ended\n    ) public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        require(!data.isActiveVote(), "Not active vote");\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        for (uint i = 0; i < users.length; i++) {\n            data.setUserRank(users[i], epoch, rank[i]);\n        }\n        if (ended) {\n            data.activeVote();\n        }\n    }\n    function changeFee(uint newFEE) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        FEE = newFEE;\n    }\n    function changeVoteFee(uint newFEE) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        VOTE_FEE = newFEE;\n    }\n    function withdrawStuck() external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        uint256 balance = token.balanceOf(address(this));\n        token.transfer(msg.sender, balance);\n        uint256 balanceU = usd.balanceOf(address(this));\n        usd.transfer(msg.sender, balanceU);\n        payable(msg.sender).transfer(address(this).balance);\n    }\n    function withdrawTokenStuck(address _token) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        uint256 balance = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).transfer(msg.sender, balance);\n    }\n    function withdrawStuckEth(address toAddr) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        (bool success, ) = toAddr.call{value: address(this).balance}("");\n        require(success);\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'NewVoteContract.withdrawTokenStuck', 'start_line': 352, 'end_line': 356, 'offset_start': 13179, 'offset_end': 13434, 'content': 'function withdrawTokenStuck(address _token) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        uint256 balance = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).transfer(msg.sender, balance);\n    }', 'contract_name': 'NewVoteContract', 'contract_code': '{\n    uint public FEE = 300000000000000;\n    uint public VOTE_FEE = 0;\n    bytes32 public constant EDITOR = keccak256("EDITOR");\n    IUniswapV2Pair public uniswapPair;\n    IUniswapV2Router02 public immutable uniswapV2Router =\n        IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n    uint public constant VOTE_PERIOD = 1 days;\n    uint public constant VOTE_EPOCH_PERIOD = 30;\n    uint public constant VOTE_AMOUNT = 31e18;\n    uint[5] public RANK_PERCENT = [4, 8, 12, 16, 20];\n    uint public PERCENT_DIF = 6;\n    IMemberManager public member;\n    IERC20 public usd;\n    IERC20 public token;\n    DataStorage public data;\n    address public feeAddress;\n    address public feeMatchAddress;\n    address public globalFund;\n    address public mtcFund;\n    address public sponsorFund;\n    address public feeActions;\n    uint256 MAX_INT =\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n    constructor(\n        address _memberAddress,\n        IERC20 _usd,\n        IERC20 _token,\n        DataStorage _data,\n        address _feeAddress,\n        address _feeMatchAddress,\n        address _globalFund,\n        address _mtcFund,\n        address _sponsorFund,\n        address _feeActions\n    ) {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        member = IMemberManager(_memberAddress);\n        usd = _usd;\n        token = _token;\n        feeAddress = _feeAddress;\n        data = _data;\n        feeMatchAddress = _feeMatchAddress;\n        globalFund = _globalFund;\n        mtcFund = _mtcFund;\n        sponsorFund = _sponsorFund;\n        feeActions = _feeActions;\n        uniswapPair = IUniswapV2Pair(\n            IUniswapV2Factory(uniswapV2Router.factory()).getPair(\n                address(usd),\n                address(token)\n            )\n        );\n        usd.approve(address(uniswapV2Router), MAX_INT);\n        token.approve(address(uniswapV2Router), MAX_INT);\n    }\n    function vote() public payable {\n        require(msg.value >= VOTE_FEE, "Must pay fee");\n        if (VOTE_FEE > 0) {\n            payable(feeActions).transfer(VOTE_FEE);\n        }\n        address sponsor = member.sponsor(msg.sender);\n        require(sponsor != address(0x0), "Must be member");\n        require(data.isActiveVote(), "Must be active vote");\n        usd.transferFrom(msg.sender, address(this), VOTE_AMOUNT);\n        usd.transfer(feeAddress, 1e18);\n        usd.transfer(globalFund, 6e16);\n        if (sponsorActive(sponsor)) {\n            usd.transfer(sponsor, 5e18);\n        } else {\n            usd.transfer(sponsorFund, 5e18);\n        }\n        swapTokens(2434e16);\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        address[5] memory usersMatch = searchMatchAddress(msg.sender, epoch);\n        uint paid = 0;\n        for (uint i = 0; i < 5; i++) {\n            if (usersMatch[i] != address(0x0)) {\n                usd.transfer(\n                    usersMatch[i],\n                    ((VOTE_AMOUNT - 1e18) * (RANK_PERCENT[i] - paid)) / 1000\n                );\n                paid = RANK_PERCENT[i];\n            }\n        }\n        if (paid < RANK_PERCENT[4]) {\n            usd.transfer(\n                feeMatchAddress,\n                ((VOTE_AMOUNT - 1e18) * (RANK_PERCENT[4] - paid)) / 1000\n            );\n        }\n        uint16 percent = uint16(\n            ((uint256(\n                keccak256(\n                    abi.encodePacked(\n                        msg.sender,\n                        block.timestamp,\n                        getAmountOut(2434e16)\n                    )\n                )\n            ) % PERCENT_DIF) + (30 - PERCENT_DIF)) * 1000\n        );\n        data.userVote(msg.sender, percent);\n    }\n    function editPercentDif(uint percent) public {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be editor");\n        PERCENT_DIF = percent;\n    }\n    function sponsorActive(address user) public view returns (bool) {\n        uint today = (block.timestamp - 20 days) / VOTE_PERIOD;\n        return (data.getVote(user, today) > 0 ||\n            data.getVote(user, today - 1) > 0 ||\n            data.getVote(user, today - 2) > 0);\n    }\n    function getAmountOut(uint amountIn) public view returns (uint amountOut) {\n        (uint256 reserve0, uint256 reserve1, ) = uniswapPair.getReserves();\n        (uint reserveIn, uint reserveOut) = address(usd) < address(token)\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n        uint256 numerator = amountIn * reserveOut;\n        uint256 denominator = reserveIn + amountIn;\n        amountOut = numerator / denominator;\n    }\n    function swapTokens(uint256 tokenAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = address(usd);\n        path[1] = address(token);\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, \n            path,\n            mtcFund,\n            block.timestamp\n        );\n    }\n    function searchMatchAddress(\n        address user,\n        uint epoch\n    ) public view returns (address[5] memory usersMatch) {\n        uint current = 0;\n        address sponsor = member.sponsor(user);\n        while (current < 5) {\n            uint rank = data.userRank(sponsor, epoch);\n            if (rank > current) {\n                usersMatch[rank - 1] = sponsor;\n                current = rank;\n            }\n            sponsor = member.sponsor(sponsor);\n            if (sponsor == address(0x0)) break;\n        }\n    }\n    function claim(uint day) public payable {\n        require(msg.value >= FEE, "Must pay fee");\n        if (FEE > 0) {\n            payable(feeActions).transfer(FEE);\n        }\n        uint today = (block.timestamp - 20 days) / VOTE_PERIOD;\n        require(today >= day + VOTE_EPOCH_PERIOD, "Frozen time vote");\n        (uint64 totalVote, uint64 totalClaim) = data.userInfo(msg.sender);\n        require(totalVote > totalClaim + 3, "Frozen 3 vote");\n        uint percent = data.userClaim(msg.sender, day);\n        uint amount = getAmountOut(\n            ((VOTE_AMOUNT - 1e18) * percent) / 100000 + (VOTE_AMOUNT - 1e18)\n        );\n        token.transfer(msg.sender, amount);\n    }\n    function rankSet(\n        address[] calldata users,\n        uint8[] calldata rank,\n        bool ended\n    ) public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        require(!data.isActiveVote(), "Not active vote");\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        for (uint i = 0; i < users.length; i++) {\n            data.setUserRank(users[i], epoch, rank[i]);\n        }\n        if (ended) {\n            data.activeVote();\n        }\n    }\n    function changeFee(uint newFEE) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        FEE = newFEE;\n    }\n    function changeVoteFee(uint newFEE) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        VOTE_FEE = newFEE;\n    }\n    function withdrawStuck() external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        uint256 balance = token.balanceOf(address(this));\n        token.transfer(msg.sender, balance);\n        uint256 balanceU = usd.balanceOf(address(this));\n        usd.transfer(msg.sender, balanceU);\n        payable(msg.sender).transfer(address(this).balance);\n    }\n    function withdrawTokenStuck(address _token) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        uint256 balance = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).transfer(msg.sender, balance);\n    }\n    function withdrawStuckEth(address toAddr) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        (bool success, ) = toAddr.call{value: address(this).balance}("");\n        require(success);\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'NewVoteContract.withdrawStuckEth', 'start_line': 357, 'end_line': 361, 'offset_start': 13440, 'offset_end': 13672, 'content': 'function withdrawStuckEth(address toAddr) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        (bool success, ) = toAddr.call{value: address(this).balance}("");\n        require(success);\n    }', 'contract_name': 'NewVoteContract', 'contract_code': '{\n    uint public FEE = 300000000000000;\n    uint public VOTE_FEE = 0;\n    bytes32 public constant EDITOR = keccak256("EDITOR");\n    IUniswapV2Pair public uniswapPair;\n    IUniswapV2Router02 public immutable uniswapV2Router =\n        IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n    uint public constant VOTE_PERIOD = 1 days;\n    uint public constant VOTE_EPOCH_PERIOD = 30;\n    uint public constant VOTE_AMOUNT = 31e18;\n    uint[5] public RANK_PERCENT = [4, 8, 12, 16, 20];\n    uint public PERCENT_DIF = 6;\n    IMemberManager public member;\n    IERC20 public usd;\n    IERC20 public token;\n    DataStorage public data;\n    address public feeAddress;\n    address public feeMatchAddress;\n    address public globalFund;\n    address public mtcFund;\n    address public sponsorFund;\n    address public feeActions;\n    uint256 MAX_INT =\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n    constructor(\n        address _memberAddress,\n        IERC20 _usd,\n        IERC20 _token,\n        DataStorage _data,\n        address _feeAddress,\n        address _feeMatchAddress,\n        address _globalFund,\n        address _mtcFund,\n        address _sponsorFund,\n        address _feeActions\n    ) {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        member = IMemberManager(_memberAddress);\n        usd = _usd;\n        token = _token;\n        feeAddress = _feeAddress;\n        data = _data;\n        feeMatchAddress = _feeMatchAddress;\n        globalFund = _globalFund;\n        mtcFund = _mtcFund;\n        sponsorFund = _sponsorFund;\n        feeActions = _feeActions;\n        uniswapPair = IUniswapV2Pair(\n            IUniswapV2Factory(uniswapV2Router.factory()).getPair(\n                address(usd),\n                address(token)\n            )\n        );\n        usd.approve(address(uniswapV2Router), MAX_INT);\n        token.approve(address(uniswapV2Router), MAX_INT);\n    }\n    function vote() public payable {\n        require(msg.value >= VOTE_FEE, "Must pay fee");\n        if (VOTE_FEE > 0) {\n            payable(feeActions).transfer(VOTE_FEE);\n        }\n        address sponsor = member.sponsor(msg.sender);\n        require(sponsor != address(0x0), "Must be member");\n        require(data.isActiveVote(), "Must be active vote");\n        usd.transferFrom(msg.sender, address(this), VOTE_AMOUNT);\n        usd.transfer(feeAddress, 1e18);\n        usd.transfer(globalFund, 6e16);\n        if (sponsorActive(sponsor)) {\n            usd.transfer(sponsor, 5e18);\n        } else {\n            usd.transfer(sponsorFund, 5e18);\n        }\n        swapTokens(2434e16);\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        address[5] memory usersMatch = searchMatchAddress(msg.sender, epoch);\n        uint paid = 0;\n        for (uint i = 0; i < 5; i++) {\n            if (usersMatch[i] != address(0x0)) {\n                usd.transfer(\n                    usersMatch[i],\n                    ((VOTE_AMOUNT - 1e18) * (RANK_PERCENT[i] - paid)) / 1000\n                );\n                paid = RANK_PERCENT[i];\n            }\n        }\n        if (paid < RANK_PERCENT[4]) {\n            usd.transfer(\n                feeMatchAddress,\n                ((VOTE_AMOUNT - 1e18) * (RANK_PERCENT[4] - paid)) / 1000\n            );\n        }\n        uint16 percent = uint16(\n            ((uint256(\n                keccak256(\n                    abi.encodePacked(\n                        msg.sender,\n                        block.timestamp,\n                        getAmountOut(2434e16)\n                    )\n                )\n            ) % PERCENT_DIF) + (30 - PERCENT_DIF)) * 1000\n        );\n        data.userVote(msg.sender, percent);\n    }\n    function editPercentDif(uint percent) public {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be editor");\n        PERCENT_DIF = percent;\n    }\n    function sponsorActive(address user) public view returns (bool) {\n        uint today = (block.timestamp - 20 days) / VOTE_PERIOD;\n        return (data.getVote(user, today) > 0 ||\n            data.getVote(user, today - 1) > 0 ||\n            data.getVote(user, today - 2) > 0);\n    }\n    function getAmountOut(uint amountIn) public view returns (uint amountOut) {\n        (uint256 reserve0, uint256 reserve1, ) = uniswapPair.getReserves();\n        (uint reserveIn, uint reserveOut) = address(usd) < address(token)\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n        uint256 numerator = amountIn * reserveOut;\n        uint256 denominator = reserveIn + amountIn;\n        amountOut = numerator / denominator;\n    }\n    function swapTokens(uint256 tokenAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = address(usd);\n        path[1] = address(token);\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, \n            path,\n            mtcFund,\n            block.timestamp\n        );\n    }\n    function searchMatchAddress(\n        address user,\n        uint epoch\n    ) public view returns (address[5] memory usersMatch) {\n        uint current = 0;\n        address sponsor = member.sponsor(user);\n        while (current < 5) {\n            uint rank = data.userRank(sponsor, epoch);\n            if (rank > current) {\n                usersMatch[rank - 1] = sponsor;\n                current = rank;\n            }\n            sponsor = member.sponsor(sponsor);\n            if (sponsor == address(0x0)) break;\n        }\n    }\n    function claim(uint day) public payable {\n        require(msg.value >= FEE, "Must pay fee");\n        if (FEE > 0) {\n            payable(feeActions).transfer(FEE);\n        }\n        uint today = (block.timestamp - 20 days) / VOTE_PERIOD;\n        require(today >= day + VOTE_EPOCH_PERIOD, "Frozen time vote");\n        (uint64 totalVote, uint64 totalClaim) = data.userInfo(msg.sender);\n        require(totalVote > totalClaim + 3, "Frozen 3 vote");\n        uint percent = data.userClaim(msg.sender, day);\n        uint amount = getAmountOut(\n            ((VOTE_AMOUNT - 1e18) * percent) / 100000 + (VOTE_AMOUNT - 1e18)\n        );\n        token.transfer(msg.sender, amount);\n    }\n    function rankSet(\n        address[] calldata users,\n        uint8[] calldata rank,\n        bool ended\n    ) public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        require(!data.isActiveVote(), "Not active vote");\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        for (uint i = 0; i < users.length; i++) {\n            data.setUserRank(users[i], epoch, rank[i]);\n        }\n        if (ended) {\n            data.activeVote();\n        }\n    }\n    function changeFee(uint newFEE) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        FEE = newFEE;\n    }\n    function changeVoteFee(uint newFEE) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        VOTE_FEE = newFEE;\n    }\n    function withdrawStuck() external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        uint256 balance = token.balanceOf(address(this));\n        token.transfer(msg.sender, balance);\n        uint256 balanceU = usd.balanceOf(address(this));\n        usd.transfer(msg.sender, balanceU);\n        payable(msg.sender).transfer(address(this).balance);\n    }\n    function withdrawTokenStuck(address _token) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        uint256 balance = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).transfer(msg.sender, balance);\n    }\n    function withdrawStuckEth(address toAddr) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Must be owner");\n        (bool success, ) = toAddr.call{value: address(this).balance}("");\n        require(success);\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'AccessControl.supportsInterface', 'start_line': 378, 'end_line': 380, 'offset_start': 14226, 'offset_end': 14427, 'content': 'function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }', 'contract_name': 'AccessControl', 'contract_code': '{\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n    mapping(bytes32 role => RoleData) private _roles;\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n        _revokeRole(role, callerConfirmation);\n    }\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'AccessControl.hasRole', 'start_line': 381, 'end_line': 383, 'offset_start': 14433, 'offset_end': 14568, 'content': 'function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }', 'contract_name': 'AccessControl', 'contract_code': '{\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n    mapping(bytes32 role => RoleData) private _roles;\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n        _revokeRole(role, callerConfirmation);\n    }\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'AccessControl._checkRole', 'start_line': 384, 'end_line': 386, 'offset_start': 14574, 'offset_end': 14676, 'content': 'function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }', 'contract_name': 'AccessControl', 'contract_code': '{\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n    mapping(bytes32 role => RoleData) private _roles;\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n        _revokeRole(role, callerConfirmation);\n    }\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'AccessControl._checkRole', 'start_line': 387, 'end_line': 391, 'offset_start': 14682, 'offset_end': 14878, 'content': 'function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }', 'contract_name': 'AccessControl', 'contract_code': '{\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n    mapping(bytes32 role => RoleData) private _roles;\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n        _revokeRole(role, callerConfirmation);\n    }\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'AccessControl.getRoleAdmin', 'start_line': 392, 'end_line': 394, 'offset_start': 14884, 'offset_end': 15003, 'content': 'function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }', 'contract_name': 'AccessControl', 'contract_code': '{\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n    mapping(bytes32 role => RoleData) private _roles;\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n        _revokeRole(role, callerConfirmation);\n    }\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'AccessControl.grantRole', 'start_line': 395, 'end_line': 397, 'offset_start': 15009, 'offset_end': 15144, 'content': 'function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }', 'contract_name': 'AccessControl', 'contract_code': '{\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n    mapping(bytes32 role => RoleData) private _roles;\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n        _revokeRole(role, callerConfirmation);\n    }\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'AccessControl.revokeRole', 'start_line': 398, 'end_line': 400, 'offset_start': 15150, 'offset_end': 15287, 'content': 'function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }', 'contract_name': 'AccessControl', 'contract_code': '{\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n    mapping(bytes32 role => RoleData) private _roles;\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n        _revokeRole(role, callerConfirmation);\n    }\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}', 'modifiers': [None], 'stateMutability': None, 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'AccessControl.renounceRole', 'start_line': 401, 'end_line': 406, 'offset_start': 15293, 'offset_end': 15536, 'content': 'function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n        _revokeRole(role, callerConfirmation);\n    }', 'contract_name': 'AccessControl', 'contract_code': '{\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n    mapping(bytes32 role => RoleData) private _roles;\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n        _revokeRole(role, callerConfirmation);\n    }\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'AccessControl._setRoleAdmin', 'start_line': 407, 'end_line': 411, 'offset_start': 15542, 'offset_end': 15788, 'content': 'function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }', 'contract_name': 'AccessControl', 'contract_code': '{\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n    mapping(bytes32 role => RoleData) private _roles;\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n        _revokeRole(role, callerConfirmation);\n    }\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'internal', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'AccessControl._grantRole', 'start_line': 412, 'end_line': 420, 'offset_start': 15794, 'offset_end': 16109, 'content': 'function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }', 'contract_name': 'AccessControl', 'contract_code': '{\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n    mapping(bytes32 role => RoleData) private _roles;\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n        _revokeRole(role, callerConfirmation);\n    }\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'AccessControl._revokeRole', 'start_line': 421, 'end_line': 429, 'offset_start': 16115, 'offset_end': 16431, 'content': 'function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }', 'contract_name': 'AccessControl', 'contract_code': '{\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n    mapping(bytes32 role => RoleData) private _roles;\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n        _revokeRole(role, callerConfirmation);\n    }\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'DataStorage.tor', 'start_line': 452, 'end_line': 454, 'offset_start': 17302, 'offset_end': 17374, 'content': 'constructor() {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }', 'contract_name': 'DataStorage', 'contract_code': '{\n    bytes32 public constant EDITOR = keccak256("EDITOR");\n    uint public constant VOTE_PERIOD = 1 days;\n    uint public constant VOTE_EPOCH_PERIOD = 30;\n    struct Vote {\n        uint16 percent;\n        bool claimed;\n    }\n    struct UserInfo {\n        uint64 totalVote;\n        uint64 totalClaim;\n    }\n    mapping(address => mapping(uint => Vote)) public votes;\n    mapping(address => mapping(uint => uint)) public epochVote;\n    mapping(address => mapping(uint => uint8)) public userRank;\n    mapping(address => UserInfo) public userInfo;\n    event NewVote(address user, uint day, uint epoch, uint percent);\n    event ClaimedVote(address user, uint day, uint epoch, uint percent);\n    event ActiveVote(uint epoch);\n    constructor() {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n    function isActiveVote() public view returns (bool) {\n        uint day = (block.timestamp - 20 days) / VOTE_PERIOD;\n        uint epoch = day / VOTE_EPOCH_PERIOD;\n        return epochVote[address(0x0)][epoch] > 0;\n    }\n    function getVote(address user, uint day) public view returns (uint) {\n        return (votes[user][day].percent);\n    }\n    function setUserRank(address user, uint epoch, uint8 rank) public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        userRank[user][epoch] = rank;\n    }\n    function activeVote() public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        epochVote[address(0x0)][epoch] = 1;\n        emit ActiveVote(epoch);\n    }\n    function userVote(address user, uint16 percent) public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        uint day = (block.timestamp - 20 days) / VOTE_PERIOD;\n        uint epoch = day / VOTE_EPOCH_PERIOD;\n        require(votes[user][day - 1].percent == 0, "Must no freeze day");\n        require(votes[user][day].percent == 0, "Must no vote same day");\n        votes[user][day] = Vote(percent, false);\n        epochVote[user][epoch] += 1;\n        userInfo[user].totalVote += 1;\n        emit NewVote(user, day, epoch, percent);\n    }\n    function userClaim(address user, uint day) public returns (uint) {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        Vote storage vote = votes[user][day];\n        require(vote.percent > 0, "Must have vote");\n        require(!vote.claimed, "Must not claimed");\n        vote.claimed = true;\n        userInfo[user].totalClaim += 1;\n        uint epoch = day / VOTE_EPOCH_PERIOD;\n        emit ClaimedVote(user, day, epoch, vote.percent);\n        return vote.percent;\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'default', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'DataStorage.isActiveVote', 'start_line': 455, 'end_line': 459, 'offset_start': 17380, 'offset_end': 17596, 'content': 'function isActiveVote() public view returns (bool) {\n        uint day = (block.timestamp - 20 days) / VOTE_PERIOD;\n        uint epoch = day / VOTE_EPOCH_PERIOD;\n        return epochVote[address(0x0)][epoch] > 0;\n    }', 'contract_name': 'DataStorage', 'contract_code': '{\n    bytes32 public constant EDITOR = keccak256("EDITOR");\n    uint public constant VOTE_PERIOD = 1 days;\n    uint public constant VOTE_EPOCH_PERIOD = 30;\n    struct Vote {\n        uint16 percent;\n        bool claimed;\n    }\n    struct UserInfo {\n        uint64 totalVote;\n        uint64 totalClaim;\n    }\n    mapping(address => mapping(uint => Vote)) public votes;\n    mapping(address => mapping(uint => uint)) public epochVote;\n    mapping(address => mapping(uint => uint8)) public userRank;\n    mapping(address => UserInfo) public userInfo;\n    event NewVote(address user, uint day, uint epoch, uint percent);\n    event ClaimedVote(address user, uint day, uint epoch, uint percent);\n    event ActiveVote(uint epoch);\n    constructor() {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n    function isActiveVote() public view returns (bool) {\n        uint day = (block.timestamp - 20 days) / VOTE_PERIOD;\n        uint epoch = day / VOTE_EPOCH_PERIOD;\n        return epochVote[address(0x0)][epoch] > 0;\n    }\n    function getVote(address user, uint day) public view returns (uint) {\n        return (votes[user][day].percent);\n    }\n    function setUserRank(address user, uint epoch, uint8 rank) public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        userRank[user][epoch] = rank;\n    }\n    function activeVote() public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        epochVote[address(0x0)][epoch] = 1;\n        emit ActiveVote(epoch);\n    }\n    function userVote(address user, uint16 percent) public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        uint day = (block.timestamp - 20 days) / VOTE_PERIOD;\n        uint epoch = day / VOTE_EPOCH_PERIOD;\n        require(votes[user][day - 1].percent == 0, "Must no freeze day");\n        require(votes[user][day].percent == 0, "Must no vote same day");\n        votes[user][day] = Vote(percent, false);\n        epochVote[user][epoch] += 1;\n        userInfo[user].totalVote += 1;\n        emit NewVote(user, day, epoch, percent);\n    }\n    function userClaim(address user, uint day) public returns (uint) {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        Vote storage vote = votes[user][day];\n        require(vote.percent > 0, "Must have vote");\n        require(!vote.claimed, "Must not claimed");\n        vote.claimed = true;\n        userInfo[user].totalClaim += 1;\n        uint epoch = day / VOTE_EPOCH_PERIOD;\n        emit ClaimedVote(user, day, epoch, vote.percent);\n        return vote.percent;\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'DataStorage.getVote', 'start_line': 460, 'end_line': 462, 'offset_start': 17602, 'offset_end': 17719, 'content': 'function getVote(address user, uint day) public view returns (uint) {\n        return (votes[user][day].percent);\n    }', 'contract_name': 'DataStorage', 'contract_code': '{\n    bytes32 public constant EDITOR = keccak256("EDITOR");\n    uint public constant VOTE_PERIOD = 1 days;\n    uint public constant VOTE_EPOCH_PERIOD = 30;\n    struct Vote {\n        uint16 percent;\n        bool claimed;\n    }\n    struct UserInfo {\n        uint64 totalVote;\n        uint64 totalClaim;\n    }\n    mapping(address => mapping(uint => Vote)) public votes;\n    mapping(address => mapping(uint => uint)) public epochVote;\n    mapping(address => mapping(uint => uint8)) public userRank;\n    mapping(address => UserInfo) public userInfo;\n    event NewVote(address user, uint day, uint epoch, uint percent);\n    event ClaimedVote(address user, uint day, uint epoch, uint percent);\n    event ActiveVote(uint epoch);\n    constructor() {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n    function isActiveVote() public view returns (bool) {\n        uint day = (block.timestamp - 20 days) / VOTE_PERIOD;\n        uint epoch = day / VOTE_EPOCH_PERIOD;\n        return epochVote[address(0x0)][epoch] > 0;\n    }\n    function getVote(address user, uint day) public view returns (uint) {\n        return (votes[user][day].percent);\n    }\n    function setUserRank(address user, uint epoch, uint8 rank) public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        userRank[user][epoch] = rank;\n    }\n    function activeVote() public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        epochVote[address(0x0)][epoch] = 1;\n        emit ActiveVote(epoch);\n    }\n    function userVote(address user, uint16 percent) public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        uint day = (block.timestamp - 20 days) / VOTE_PERIOD;\n        uint epoch = day / VOTE_EPOCH_PERIOD;\n        require(votes[user][day - 1].percent == 0, "Must no freeze day");\n        require(votes[user][day].percent == 0, "Must no vote same day");\n        votes[user][day] = Vote(percent, false);\n        epochVote[user][epoch] += 1;\n        userInfo[user].totalVote += 1;\n        emit NewVote(user, day, epoch, percent);\n    }\n    function userClaim(address user, uint day) public returns (uint) {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        Vote storage vote = votes[user][day];\n        require(vote.percent > 0, "Must have vote");\n        require(!vote.claimed, "Must not claimed");\n        vote.claimed = true;\n        userInfo[user].totalClaim += 1;\n        uint epoch = day / VOTE_EPOCH_PERIOD;\n        emit ClaimedVote(user, day, epoch, vote.percent);\n        return vote.percent;\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'DataStorage.setUserRank', 'start_line': 463, 'end_line': 466, 'offset_start': 17725, 'offset_end': 17899, 'content': 'function setUserRank(address user, uint epoch, uint8 rank) public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        userRank[user][epoch] = rank;\n    }', 'contract_name': 'DataStorage', 'contract_code': '{\n    bytes32 public constant EDITOR = keccak256("EDITOR");\n    uint public constant VOTE_PERIOD = 1 days;\n    uint public constant VOTE_EPOCH_PERIOD = 30;\n    struct Vote {\n        uint16 percent;\n        bool claimed;\n    }\n    struct UserInfo {\n        uint64 totalVote;\n        uint64 totalClaim;\n    }\n    mapping(address => mapping(uint => Vote)) public votes;\n    mapping(address => mapping(uint => uint)) public epochVote;\n    mapping(address => mapping(uint => uint8)) public userRank;\n    mapping(address => UserInfo) public userInfo;\n    event NewVote(address user, uint day, uint epoch, uint percent);\n    event ClaimedVote(address user, uint day, uint epoch, uint percent);\n    event ActiveVote(uint epoch);\n    constructor() {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n    function isActiveVote() public view returns (bool) {\n        uint day = (block.timestamp - 20 days) / VOTE_PERIOD;\n        uint epoch = day / VOTE_EPOCH_PERIOD;\n        return epochVote[address(0x0)][epoch] > 0;\n    }\n    function getVote(address user, uint day) public view returns (uint) {\n        return (votes[user][day].percent);\n    }\n    function setUserRank(address user, uint epoch, uint8 rank) public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        userRank[user][epoch] = rank;\n    }\n    function activeVote() public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        epochVote[address(0x0)][epoch] = 1;\n        emit ActiveVote(epoch);\n    }\n    function userVote(address user, uint16 percent) public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        uint day = (block.timestamp - 20 days) / VOTE_PERIOD;\n        uint epoch = day / VOTE_EPOCH_PERIOD;\n        require(votes[user][day - 1].percent == 0, "Must no freeze day");\n        require(votes[user][day].percent == 0, "Must no vote same day");\n        votes[user][day] = Vote(percent, false);\n        epochVote[user][epoch] += 1;\n        userInfo[user].totalVote += 1;\n        emit NewVote(user, day, epoch, percent);\n    }\n    function userClaim(address user, uint day) public returns (uint) {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        Vote storage vote = votes[user][day];\n        require(vote.percent > 0, "Must have vote");\n        require(!vote.claimed, "Must not claimed");\n        vote.claimed = true;\n        userInfo[user].totalClaim += 1;\n        uint epoch = day / VOTE_EPOCH_PERIOD;\n        emit ClaimedVote(user, day, epoch, vote.percent);\n        return vote.percent;\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'DataStorage.activeVote', 'start_line': 467, 'end_line': 473, 'offset_start': 17905, 'offset_end': 18178, 'content': 'function activeVote() public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        epochVote[address(0x0)][epoch] = 1;\n        emit ActiveVote(epoch);\n    }', 'contract_name': 'DataStorage', 'contract_code': '{\n    bytes32 public constant EDITOR = keccak256("EDITOR");\n    uint public constant VOTE_PERIOD = 1 days;\n    uint public constant VOTE_EPOCH_PERIOD = 30;\n    struct Vote {\n        uint16 percent;\n        bool claimed;\n    }\n    struct UserInfo {\n        uint64 totalVote;\n        uint64 totalClaim;\n    }\n    mapping(address => mapping(uint => Vote)) public votes;\n    mapping(address => mapping(uint => uint)) public epochVote;\n    mapping(address => mapping(uint => uint8)) public userRank;\n    mapping(address => UserInfo) public userInfo;\n    event NewVote(address user, uint day, uint epoch, uint percent);\n    event ClaimedVote(address user, uint day, uint epoch, uint percent);\n    event ActiveVote(uint epoch);\n    constructor() {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n    function isActiveVote() public view returns (bool) {\n        uint day = (block.timestamp - 20 days) / VOTE_PERIOD;\n        uint epoch = day / VOTE_EPOCH_PERIOD;\n        return epochVote[address(0x0)][epoch] > 0;\n    }\n    function getVote(address user, uint day) public view returns (uint) {\n        return (votes[user][day].percent);\n    }\n    function setUserRank(address user, uint epoch, uint8 rank) public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        userRank[user][epoch] = rank;\n    }\n    function activeVote() public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        epochVote[address(0x0)][epoch] = 1;\n        emit ActiveVote(epoch);\n    }\n    function userVote(address user, uint16 percent) public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        uint day = (block.timestamp - 20 days) / VOTE_PERIOD;\n        uint epoch = day / VOTE_EPOCH_PERIOD;\n        require(votes[user][day - 1].percent == 0, "Must no freeze day");\n        require(votes[user][day].percent == 0, "Must no vote same day");\n        votes[user][day] = Vote(percent, false);\n        epochVote[user][epoch] += 1;\n        userInfo[user].totalVote += 1;\n        emit NewVote(user, day, epoch, percent);\n    }\n    function userClaim(address user, uint day) public returns (uint) {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        Vote storage vote = votes[user][day];\n        require(vote.percent > 0, "Must have vote");\n        require(!vote.claimed, "Must not claimed");\n        vote.claimed = true;\n        userInfo[user].totalClaim += 1;\n        uint epoch = day / VOTE_EPOCH_PERIOD;\n        emit ClaimedVote(user, day, epoch, vote.percent);\n        return vote.percent;\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'DataStorage.userVote', 'start_line': 474, 'end_line': 484, 'offset_start': 18184, 'offset_end': 18738, 'content': 'function userVote(address user, uint16 percent) public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        uint day = (block.timestamp - 20 days) / VOTE_PERIOD;\n        uint epoch = day / VOTE_EPOCH_PERIOD;\n        require(votes[user][day - 1].percent == 0, "Must no freeze day");\n        require(votes[user][day].percent == 0, "Must no vote same day");\n        votes[user][day] = Vote(percent, false);\n        epochVote[user][epoch] += 1;\n        userInfo[user].totalVote += 1;\n        emit NewVote(user, day, epoch, percent);\n    }', 'contract_name': 'DataStorage', 'contract_code': '{\n    bytes32 public constant EDITOR = keccak256("EDITOR");\n    uint public constant VOTE_PERIOD = 1 days;\n    uint public constant VOTE_EPOCH_PERIOD = 30;\n    struct Vote {\n        uint16 percent;\n        bool claimed;\n    }\n    struct UserInfo {\n        uint64 totalVote;\n        uint64 totalClaim;\n    }\n    mapping(address => mapping(uint => Vote)) public votes;\n    mapping(address => mapping(uint => uint)) public epochVote;\n    mapping(address => mapping(uint => uint8)) public userRank;\n    mapping(address => UserInfo) public userInfo;\n    event NewVote(address user, uint day, uint epoch, uint percent);\n    event ClaimedVote(address user, uint day, uint epoch, uint percent);\n    event ActiveVote(uint epoch);\n    constructor() {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n    function isActiveVote() public view returns (bool) {\n        uint day = (block.timestamp - 20 days) / VOTE_PERIOD;\n        uint epoch = day / VOTE_EPOCH_PERIOD;\n        return epochVote[address(0x0)][epoch] > 0;\n    }\n    function getVote(address user, uint day) public view returns (uint) {\n        return (votes[user][day].percent);\n    }\n    function setUserRank(address user, uint epoch, uint8 rank) public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        userRank[user][epoch] = rank;\n    }\n    function activeVote() public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        epochVote[address(0x0)][epoch] = 1;\n        emit ActiveVote(epoch);\n    }\n    function userVote(address user, uint16 percent) public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        uint day = (block.timestamp - 20 days) / VOTE_PERIOD;\n        uint epoch = day / VOTE_EPOCH_PERIOD;\n        require(votes[user][day - 1].percent == 0, "Must no freeze day");\n        require(votes[user][day].percent == 0, "Must no vote same day");\n        votes[user][day] = Vote(percent, false);\n        epochVote[user][epoch] += 1;\n        userInfo[user].totalVote += 1;\n        emit NewVote(user, day, epoch, percent);\n    }\n    function userClaim(address user, uint day) public returns (uint) {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        Vote storage vote = votes[user][day];\n        require(vote.percent > 0, "Must have vote");\n        require(!vote.claimed, "Must not claimed");\n        vote.claimed = true;\n        userInfo[user].totalClaim += 1;\n        uint epoch = day / VOTE_EPOCH_PERIOD;\n        emit ClaimedVote(user, day, epoch, vote.percent);\n        return vote.percent;\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'public', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'DataStorage.userClaim', 'start_line': 485, 'end_line': 495, 'offset_start': 18744, 'offset_end': 19232, 'content': 'function userClaim(address user, uint day) public returns (uint) {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        Vote storage vote = votes[user][day];\n        require(vote.percent > 0, "Must have vote");\n        require(!vote.claimed, "Must not claimed");\n        vote.claimed = true;\n        userInfo[user].totalClaim += 1;\n        uint epoch = day / VOTE_EPOCH_PERIOD;\n        emit ClaimedVote(user, day, epoch, vote.percent);\n        return vote.percent;\n    }', 'contract_name': 'DataStorage', 'contract_code': '{\n    bytes32 public constant EDITOR = keccak256("EDITOR");\n    uint public constant VOTE_PERIOD = 1 days;\n    uint public constant VOTE_EPOCH_PERIOD = 30;\n    struct Vote {\n        uint16 percent;\n        bool claimed;\n    }\n    struct UserInfo {\n        uint64 totalVote;\n        uint64 totalClaim;\n    }\n    mapping(address => mapping(uint => Vote)) public votes;\n    mapping(address => mapping(uint => uint)) public epochVote;\n    mapping(address => mapping(uint => uint8)) public userRank;\n    mapping(address => UserInfo) public userInfo;\n    event NewVote(address user, uint day, uint epoch, uint percent);\n    event ClaimedVote(address user, uint day, uint epoch, uint percent);\n    event ActiveVote(uint epoch);\n    constructor() {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n    function isActiveVote() public view returns (bool) {\n        uint day = (block.timestamp - 20 days) / VOTE_PERIOD;\n        uint epoch = day / VOTE_EPOCH_PERIOD;\n        return epochVote[address(0x0)][epoch] > 0;\n    }\n    function getVote(address user, uint day) public view returns (uint) {\n        return (votes[user][day].percent);\n    }\n    function setUserRank(address user, uint epoch, uint8 rank) public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        userRank[user][epoch] = rank;\n    }\n    function activeVote() public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        uint epoch = ((block.timestamp - 20 days) / VOTE_PERIOD) /\n            VOTE_EPOCH_PERIOD;\n        epochVote[address(0x0)][epoch] = 1;\n        emit ActiveVote(epoch);\n    }\n    function userVote(address user, uint16 percent) public {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        uint day = (block.timestamp - 20 days) / VOTE_PERIOD;\n        uint epoch = day / VOTE_EPOCH_PERIOD;\n        require(votes[user][day - 1].percent == 0, "Must no freeze day");\n        require(votes[user][day].percent == 0, "Must no vote same day");\n        votes[user][day] = Vote(percent, false);\n        epochVote[user][epoch] += 1;\n        userInfo[user].totalVote += 1;\n        emit NewVote(user, day, epoch, percent);\n    }\n    function userClaim(address user, uint day) public returns (uint) {\n        require(hasRole(EDITOR, msg.sender), "Must be editor");\n        Vote storage vote = votes[user][day];\n        require(vote.percent > 0, "Must have vote");\n        require(!vote.claimed, "Must not claimed");\n        vote.claimed = true;\n        userInfo[user].totalClaim += 1;\n        uint epoch = day / VOTE_EPOCH_PERIOD;\n        emit ClaimedVote(user, day, epoch, vote.percent);\n        return vote.percent;\n    }\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'Context._msgSender', 'start_line': 499, 'end_line': 501, 'offset_start': 19293, 'offset_end': 19388, 'content': 'function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }', 'contract_name': 'Context', 'contract_code': '{\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'Context._msgData', 'start_line': 502, 'end_line': 504, 'offset_start': 19394, 'offset_end': 19492, 'content': 'function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }', 'contract_name': 'Context', 'contract_code': '{\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'internal', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC20.totalSupply', 'start_line': 510, 'end_line': 510, 'offset_start': 19704, 'offset_end': 19758, 'content': 'function totalSupply() external view returns (uint256);', 'contract_name': 'IERC20', 'contract_code': '{\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address to, uint256 value) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC20.balanceOf', 'start_line': 511, 'end_line': 511, 'offset_start': 19764, 'offset_end': 19831, 'content': 'function balanceOf(address account) external view returns (uint256);', 'contract_name': 'IERC20', 'contract_code': '{\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address to, uint256 value) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC20.transfer', 'start_line': 512, 'end_line': 512, 'offset_start': 19837, 'offset_end': 19905, 'content': 'function transfer(address to, uint256 value) external returns (bool);', 'contract_name': 'IERC20', 'contract_code': '{\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address to, uint256 value) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC20.allowance', 'start_line': 513, 'end_line': 513, 'offset_start': 19911, 'offset_end': 19993, 'content': 'function allowance(address owner, address spender) external view returns (uint256);', 'contract_name': 'IERC20', 'contract_code': '{\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address to, uint256 value) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC20.approve', 'start_line': 514, 'end_line': 514, 'offset_start': 19999, 'offset_end': 20071, 'content': 'function approve(address spender, uint256 value) external returns (bool);', 'contract_name': 'IERC20', 'contract_code': '{\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address to, uint256 value) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC20.transferFrom', 'start_line': 515, 'end_line': 515, 'offset_start': 20077, 'offset_end': 20163, 'content': 'function transferFrom(address from, address to, uint256 value) external returns (bool);', 'contract_name': 'IERC20', 'contract_code': '{\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address to, uint256 value) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Pair.name', 'start_line': 521, 'end_line': 521, 'offset_start': 20377, 'offset_end': 20430, 'content': 'function name() external pure returns (string memory);', 'contract_name': 'IUniswapV2Pair', 'contract_code': '{\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n    function initialize(address, address) external;\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Pair.symbol', 'start_line': 522, 'end_line': 522, 'offset_start': 20436, 'offset_end': 20491, 'content': 'function symbol() external pure returns (string memory);', 'contract_name': 'IUniswapV2Pair', 'contract_code': '{\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n    function initialize(address, address) external;\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Pair.decimals', 'start_line': 523, 'end_line': 523, 'offset_start': 20497, 'offset_end': 20546, 'content': 'function decimals() external pure returns (uint8);', 'contract_name': 'IUniswapV2Pair', 'contract_code': '{\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n    function initialize(address, address) external;\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Pair.totalSupply', 'start_line': 524, 'end_line': 524, 'offset_start': 20552, 'offset_end': 20603, 'content': 'function totalSupply() external view returns (uint);', 'contract_name': 'IUniswapV2Pair', 'contract_code': '{\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n    function initialize(address, address) external;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Pair.balanceOf', 'start_line': 525, 'end_line': 525, 'offset_start': 20609, 'offset_end': 20671, 'content': 'function balanceOf(address owner) external view returns (uint);', 'contract_name': 'IUniswapV2Pair', 'contract_code': '{\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n    function initialize(address, address) external;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Pair.allowance', 'start_line': 526, 'end_line': 526, 'offset_start': 20677, 'offset_end': 20756, 'content': 'function allowance(address owner, address spender) external view returns (uint);', 'contract_name': 'IUniswapV2Pair', 'contract_code': '{\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n    function initialize(address, address) external;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Pair.approve', 'start_line': 527, 'end_line': 527, 'offset_start': 20762, 'offset_end': 20831, 'content': 'function approve(address spender, uint value) external returns (bool);', 'contract_name': 'IUniswapV2Pair', 'contract_code': '{\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n    function initialize(address, address) external;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Pair.transfer', 'start_line': 528, 'end_line': 528, 'offset_start': 20837, 'offset_end': 20902, 'content': 'function transfer(address to, uint value) external returns (bool);', 'contract_name': 'IUniswapV2Pair', 'contract_code': '{\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n    function initialize(address, address) external;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Pair.transferFrom', 'start_line': 529, 'end_line': 529, 'offset_start': 20908, 'offset_end': 20991, 'content': 'function transferFrom(address from, address to, uint value) external returns (bool);', 'contract_name': 'IUniswapV2Pair', 'contract_code': '{\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n    function initialize(address, address) external;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Pair.DOMAIN_SEPARATOR', 'start_line': 530, 'end_line': 530, 'offset_start': 20997, 'offset_end': 21056, 'content': 'function DOMAIN_SEPARATOR() external view returns (bytes32);', 'contract_name': 'IUniswapV2Pair', 'contract_code': '{\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n    function initialize(address, address) external;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Pair.PERMIT_TYPEHASH', 'start_line': 531, 'end_line': 531, 'offset_start': 21062, 'offset_end': 21120, 'content': 'function PERMIT_TYPEHASH() external pure returns (bytes32);', 'contract_name': 'IUniswapV2Pair', 'contract_code': '{\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n    function initialize(address, address) external;\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Pair.nonces', 'start_line': 532, 'end_line': 532, 'offset_start': 21126, 'offset_end': 21185, 'content': 'function nonces(address owner) external view returns (uint);', 'contract_name': 'IUniswapV2Pair', 'contract_code': '{\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n    function initialize(address, address) external;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Pair.permit', 'start_line': 533, 'end_line': 533, 'offset_start': 21191, 'offset_end': 21305, 'content': 'function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;', 'contract_name': 'IUniswapV2Pair', 'contract_code': '{\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n    function initialize(address, address) external;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Pair.MINIMUM_LIQUIDITY', 'start_line': 545, 'end_line': 545, 'offset_start': 21699, 'offset_end': 21756, 'content': 'function MINIMUM_LIQUIDITY() external pure returns (uint);', 'contract_name': 'IUniswapV2Pair', 'contract_code': '{\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n    function initialize(address, address) external;\n}', 'modifiers': [], 'stateMutability': 'pure', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Pair.factory', 'start_line': 546, 'end_line': 546, 'offset_start': 21762, 'offset_end': 21812, 'content': 'function factory() external view returns (address);', 'contract_name': 'IUniswapV2Pair', 'contract_code': '{\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n    function initialize(address, address) external;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Pair.token0', 'start_line': 547, 'end_line': 547, 'offset_start': 21818, 'offset_end': 21867, 'content': 'function token0() external view returns (address);', 'contract_name': 'IUniswapV2Pair', 'contract_code': '{\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n    function initialize(address, address) external;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Pair.token1', 'start_line': 548, 'end_line': 548, 'offset_start': 21873, 'offset_end': 21922, 'content': 'function token1() external view returns (address);', 'contract_name': 'IUniswapV2Pair', 'contract_code': '{\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n    function initialize(address, address) external;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Pair.getReserves', 'start_line': 549, 'end_line': 549, 'offset_start': 21928, 'offset_end': 22036, 'content': 'function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);', 'contract_name': 'IUniswapV2Pair', 'contract_code': '{\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n    function initialize(address, address) external;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Pair.price0CumulativeLast', 'start_line': 550, 'end_line': 550, 'offset_start': 22042, 'offset_end': 22102, 'content': 'function price0CumulativeLast() external view returns (uint);', 'contract_name': 'IUniswapV2Pair', 'contract_code': '{\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n    function initialize(address, address) external;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Pair.price1CumulativeLast', 'start_line': 551, 'end_line': 551, 'offset_start': 22108, 'offset_end': 22168, 'content': 'function price1CumulativeLast() external view returns (uint);', 'contract_name': 'IUniswapV2Pair', 'contract_code': '{\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n    function initialize(address, address) external;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Pair.kLast', 'start_line': 552, 'end_line': 552, 'offset_start': 22174, 'offset_end': 22219, 'content': 'function kLast() external view returns (uint);', 'contract_name': 'IUniswapV2Pair', 'contract_code': '{\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n    function initialize(address, address) external;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Pair.mint', 'start_line': 553, 'end_line': 553, 'offset_start': 22225, 'offset_end': 22284, 'content': 'function mint(address to) external returns (uint liquidity);', 'contract_name': 'IUniswapV2Pair', 'contract_code': '{\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n    function initialize(address, address) external;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Pair.burn', 'start_line': 554, 'end_line': 554, 'offset_start': 22290, 'offset_end': 22361, 'content': 'function burn(address to) external returns (uint amount0, uint amount1);', 'contract_name': 'IUniswapV2Pair', 'contract_code': '{\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n    function initialize(address, address) external;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Pair.swap', 'start_line': 555, 'end_line': 555, 'offset_start': 22367, 'offset_end': 22456, 'content': 'function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;', 'contract_name': 'IUniswapV2Pair', 'contract_code': '{\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n    function initialize(address, address) external;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Pair.skim', 'start_line': 556, 'end_line': 556, 'offset_start': 22462, 'offset_end': 22496, 'content': 'function skim(address to) external;', 'contract_name': 'IUniswapV2Pair', 'contract_code': '{\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n    function initialize(address, address) external;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Pair.sync', 'start_line': 557, 'end_line': 557, 'offset_start': 22502, 'offset_end': 22526, 'content': 'function sync() external;', 'contract_name': 'IUniswapV2Pair', 'contract_code': '{\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n    function initialize(address, address) external;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Pair.initialize', 'start_line': 558, 'end_line': 558, 'offset_start': 22532, 'offset_end': 22578, 'content': 'function initialize(address, address) external;', 'contract_name': 'IUniswapV2Pair', 'contract_code': '{\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n    function initialize(address, address) external;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IAccessControl.hasRole', 'start_line': 567, 'end_line': 567, 'offset_start': 23064, 'offset_end': 23140, 'content': 'function hasRole(bytes32 role, address account) external view returns (bool);', 'contract_name': 'IAccessControl', 'contract_code': '{\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n    error AccessControlBadConfirmation();\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n    function hasRole(bytes32 role, address account) external view returns (bool);\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n    function grantRole(bytes32 role, address account) external;\n    function revokeRole(bytes32 role, address account) external;\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IAccessControl.getRoleAdmin', 'start_line': 568, 'end_line': 568, 'offset_start': 23146, 'offset_end': 23213, 'content': 'function getRoleAdmin(bytes32 role) external view returns (bytes32);', 'contract_name': 'IAccessControl', 'contract_code': '{\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n    error AccessControlBadConfirmation();\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n    function hasRole(bytes32 role, address account) external view returns (bool);\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n    function grantRole(bytes32 role, address account) external;\n    function revokeRole(bytes32 role, address account) external;\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IAccessControl.grantRole', 'start_line': 569, 'end_line': 569, 'offset_start': 23219, 'offset_end': 23277, 'content': 'function grantRole(bytes32 role, address account) external;', 'contract_name': 'IAccessControl', 'contract_code': '{\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n    error AccessControlBadConfirmation();\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n    function hasRole(bytes32 role, address account) external view returns (bool);\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n    function grantRole(bytes32 role, address account) external;\n    function revokeRole(bytes32 role, address account) external;\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IAccessControl.revokeRole', 'start_line': 570, 'end_line': 570, 'offset_start': 23283, 'offset_end': 23342, 'content': 'function revokeRole(bytes32 role, address account) external;', 'contract_name': 'IAccessControl', 'contract_code': '{\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n    error AccessControlBadConfirmation();\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n    function hasRole(bytes32 role, address account) external view returns (bool);\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n    function grantRole(bytes32 role, address account) external;\n    function revokeRole(bytes32 role, address account) external;\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IAccessControl.renounceRole', 'start_line': 571, 'end_line': 571, 'offset_start': 23348, 'offset_end': 23420, 'content': 'function renounceRole(bytes32 role, address callerConfirmation) external;', 'contract_name': 'IAccessControl', 'contract_code': '{\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n    error AccessControlBadConfirmation();\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n    function hasRole(bytes32 role, address account) external view returns (bool);\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n    function grantRole(bytes32 role, address account) external;\n    function revokeRole(bytes32 role, address account) external;\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Factory.feeTo', 'start_line': 576, 'end_line': 576, 'offset_start': 23574, 'offset_end': 23622, 'content': 'function feeTo() external view returns (address);', 'contract_name': 'IUniswapV2Factory', 'contract_code': '{\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Factory.feeToSetter', 'start_line': 577, 'end_line': 577, 'offset_start': 23628, 'offset_end': 23682, 'content': 'function feeToSetter() external view returns (address);', 'contract_name': 'IUniswapV2Factory', 'contract_code': '{\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Factory.getPair', 'start_line': 578, 'end_line': 578, 'offset_start': 23688, 'offset_end': 23773, 'content': 'function getPair(address tokenA, address tokenB) external view returns (address pair);', 'contract_name': 'IUniswapV2Factory', 'contract_code': '{\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Factory.allPairs', 'start_line': 579, 'end_line': 579, 'offset_start': 23779, 'offset_end': 23839, 'content': 'function allPairs(uint) external view returns (address pair);', 'contract_name': 'IUniswapV2Factory', 'contract_code': '{\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Factory.allPairsLength', 'start_line': 580, 'end_line': 580, 'offset_start': 23845, 'offset_end': 23899, 'content': 'function allPairsLength() external view returns (uint);', 'contract_name': 'IUniswapV2Factory', 'contract_code': '{\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Factory.createPair', 'start_line': 581, 'end_line': 581, 'offset_start': 23905, 'offset_end': 23988, 'content': 'function createPair(address tokenA, address tokenB) external returns (address pair);', 'contract_name': 'IUniswapV2Factory', 'contract_code': '{\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Factory.setFeeTo', 'start_line': 582, 'end_line': 582, 'offset_start': 23994, 'offset_end': 24029, 'content': 'function setFeeTo(address) external;', 'contract_name': 'IUniswapV2Factory', 'contract_code': '{\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IUniswapV2Factory.setFeeToSetter', 'start_line': 583, 'end_line': 583, 'offset_start': 24035, 'offset_end': 24076, 'content': 'function setFeeToSetter(address) external;', 'contract_name': 'IUniswapV2Factory', 'contract_code': '{\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}', 'modifiers': [], 'stateMutability': None, 'returnParameters': [], 'visibility': 'external', 'node_count': 4, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'IERC165.supportsInterface', 'start_line': 587, 'end_line': 587, 'offset_start': 24129, 'offset_end': 24204, 'content': 'function supportsInterface(bytes4 interfaceId) external view returns (bool);', 'contract_name': 'IERC165', 'contract_code': '{\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'external', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
{'type': 'FunctionDefinition', 'name': 'ERC165.supportsInterface', 'start_line': 592, 'end_line': 594, 'offset_start': 24314, 'offset_end': 24459, 'content': 'function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }', 'contract_name': 'ERC165', 'contract_code': '{\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}', 'modifiers': [], 'stateMutability': 'view', 'returnParameters': None, 'visibility': 'public', 'node_count': 5, 'relative_file_path': './testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol', 'absolute_file_path': '/Users/oker/okx/Token-Check/testDownload/56/0x28ded18e44e160caa85799e17906291378d65b02/0x28ded18e44e160caa85799e17906291378d65b02.sol'}
