{
    "AccessControl.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "AccessControl.hasRole(bytes32,address) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "AccessControl.getRoleAdmin(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "AccessControl.grantRole(bytes32,address) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "AccessControl.revokeRole(bytes32,address) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "AccessControl.renounceRole(bytes32,address) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "AccessControl._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "AccessControl._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "AccessControl._checkRole(bytes32) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "AccessControl._checkRole(bytes32,address) returns()": {
        "lines": 14,
        "type": [
            "internal"
        ]
    },
    "AccessControl._setupRole(bytes32,address) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "AccessControl._setRoleAdmin(bytes32,bytes32) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "AccessControl._grantRole(bytes32,address) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "AccessControl._revokeRole(bytes32,address) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "AccessControl.slitherConstructorConstantVariables() returns()": {
        "lines": 183,
        "type": [
            "internal"
        ]
    },
    "AccessControlCrossChain._isCrossChain() returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "AccessControlCrossChain._crossChainSender() returns(address)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "AccessControlCrossChain.supportsInterface(bytes4) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "AccessControlCrossChain.hasRole(bytes32,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "AccessControlCrossChain._checkRole(bytes32) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "AccessControlCrossChain._checkRole(bytes32,address) returns()": {
        "lines": 14,
        "type": [
            "internal"
        ]
    },
    "AccessControlCrossChain.getRoleAdmin(bytes32) returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "AccessControlCrossChain.grantRole(bytes32,address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "AccessControlCrossChain.revokeRole(bytes32,address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "AccessControlCrossChain.renounceRole(bytes32,address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "AccessControlCrossChain._setupRole(bytes32,address) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "AccessControlCrossChain._setRoleAdmin(bytes32,bytes32) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "AccessControlCrossChain._grantRole(bytes32,address) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "AccessControlCrossChain._revokeRole(bytes32,address) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "AccessControlCrossChain._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "AccessControlCrossChain._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "AccessControlCrossChain._crossChainRoleAlias(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "AccessControlCrossChain.slitherConstructorConstantVariables() returns()": {
        "lines": 19,
        "type": [
            "internal"
        ]
    },
    "AccessControlDefaultAdminRules.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "AccessControlDefaultAdminRules.hasRole(bytes32,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "AccessControlDefaultAdminRules._checkRole(bytes32) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "AccessControlDefaultAdminRules._checkRole(bytes32,address) returns()": {
        "lines": 14,
        "type": [
            "internal"
        ]
    },
    "AccessControlDefaultAdminRules.getRoleAdmin(bytes32) returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "AccessControlDefaultAdminRules.grantRole(bytes32,address) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "AccessControlDefaultAdminRules.revokeRole(bytes32,address) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "AccessControlDefaultAdminRules.renounceRole(bytes32,address) returns()": {
        "lines": 10,
        "type": [
            "public"
        ]
    },
    "AccessControlDefaultAdminRules._setupRole(bytes32,address) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "AccessControlDefaultAdminRules._setRoleAdmin(bytes32,bytes32) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "AccessControlDefaultAdminRules._grantRole(bytes32,address) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "AccessControlDefaultAdminRules._revokeRole(bytes32,address) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "AccessControlDefaultAdminRules._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "AccessControlDefaultAdminRules._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "AccessControlDefaultAdminRules.owner() returns(address)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "AccessControlDefaultAdminRules.defaultAdmin() returns(address)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "AccessControlDefaultAdminRules.pendingDefaultAdmin() returns(address,uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "AccessControlDefaultAdminRules.defaultAdminDelay() returns(uint)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "AccessControlDefaultAdminRules.pendingDefaultAdminDelay() returns(uint,uint)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "AccessControlDefaultAdminRules.beginDefaultAdminTransfer(address) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "AccessControlDefaultAdminRules.cancelDefaultAdminTransfer() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "AccessControlDefaultAdminRules.acceptDefaultAdminTransfer() returns()": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "AccessControlDefaultAdminRules.changeDefaultAdminDelay(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "AccessControlDefaultAdminRules.rollbackDefaultAdminDelay() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "AccessControlDefaultAdminRules.defaultAdminDelayIncreaseWait() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "AccessControlDefaultAdminRules.constructor(uint,address) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "AccessControlDefaultAdminRules._beginDefaultAdminTransfer(address) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "AccessControlDefaultAdminRules._cancelDefaultAdminTransfer() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "AccessControlDefaultAdminRules._acceptDefaultAdminTransfer() returns()": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "AccessControlDefaultAdminRules._changeDefaultAdminDelay(uint) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "AccessControlDefaultAdminRules._rollbackDefaultAdminDelay() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "AccessControlDefaultAdminRules._delayChangeWait(uint) returns(uint)": {
        "lines": 16,
        "type": [
            "internal"
        ]
    },
    "AccessControlDefaultAdminRules._setPendingDefaultAdmin(address,uint) returns()": {
        "lines": 10,
        "type": [
            "private"
        ]
    },
    "AccessControlDefaultAdminRules._setPendingDelay(uint,uint) returns()": {
        "lines": 14,
        "type": [
            "private"
        ]
    },
    "AccessControlDefaultAdminRules._isScheduleSet(uint) returns(bool)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "AccessControlDefaultAdminRules._hasSchedulePassed(uint) returns(bool)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "AccessControlDefaultAdminRules.slitherConstructorConstantVariables() returns()": {
        "lines": 301,
        "type": [
            "internal"
        ]
    },
    "AccessControlEnumerable.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "AccessControlEnumerable.hasRole(bytes32,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "AccessControlEnumerable._checkRole(bytes32) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "AccessControlEnumerable._checkRole(bytes32,address) returns()": {
        "lines": 14,
        "type": [
            "internal"
        ]
    },
    "AccessControlEnumerable.getRoleAdmin(bytes32) returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "AccessControlEnumerable.grantRole(bytes32,address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "AccessControlEnumerable.revokeRole(bytes32,address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "AccessControlEnumerable.renounceRole(bytes32,address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "AccessControlEnumerable._setupRole(bytes32,address) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "AccessControlEnumerable._setRoleAdmin(bytes32,bytes32) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "AccessControlEnumerable._grantRole(bytes32,address) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "AccessControlEnumerable._revokeRole(bytes32,address) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "AccessControlEnumerable._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "AccessControlEnumerable._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "AccessControlEnumerable.getRoleMember(bytes32,uint) returns(address)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "AccessControlEnumerable.getRoleMemberCount(bytes32) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "AccessControlEnumerable.slitherConstructorConstantVariables() returns()": {
        "lines": 46,
        "type": [
            "internal"
        ]
    },
    "IAccessControl.hasRole(bytes32,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAccessControl.getRoleAdmin(bytes32) returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAccessControl.grantRole(bytes32,address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAccessControl.revokeRole(bytes32,address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAccessControl.renounceRole(bytes32,address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAccessControlDefaultAdminRules.hasRole(bytes32,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAccessControlDefaultAdminRules.getRoleAdmin(bytes32) returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAccessControlDefaultAdminRules.grantRole(bytes32,address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAccessControlDefaultAdminRules.revokeRole(bytes32,address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAccessControlDefaultAdminRules.renounceRole(bytes32,address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAccessControlDefaultAdminRules.defaultAdmin() returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAccessControlDefaultAdminRules.pendingDefaultAdmin() returns(address,uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAccessControlDefaultAdminRules.defaultAdminDelay() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAccessControlDefaultAdminRules.pendingDefaultAdminDelay() returns(uint,uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAccessControlDefaultAdminRules.beginDefaultAdminTransfer(address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAccessControlDefaultAdminRules.cancelDefaultAdminTransfer() returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAccessControlDefaultAdminRules.acceptDefaultAdminTransfer() returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAccessControlDefaultAdminRules.changeDefaultAdminDelay(uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAccessControlDefaultAdminRules.rollbackDefaultAdminDelay() returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAccessControlDefaultAdminRules.defaultAdminDelayIncreaseWait() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAccessControlEnumerable.hasRole(bytes32,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAccessControlEnumerable.getRoleAdmin(bytes32) returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAccessControlEnumerable.grantRole(bytes32,address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAccessControlEnumerable.revokeRole(bytes32,address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAccessControlEnumerable.renounceRole(bytes32,address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAccessControlEnumerable.getRoleMember(bytes32,uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAccessControlEnumerable.getRoleMemberCount(bytes32) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "Ownable._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Ownable._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Ownable.constructor() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Ownable.owner() returns(address)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "Ownable._checkOwner() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Ownable.renounceOwnership() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "Ownable.transferOwnership(address) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "Ownable._transferOwnership(address) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "Ownable2Step.constructor() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Ownable2Step.owner() returns(address)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "Ownable2Step._checkOwner() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Ownable2Step.renounceOwnership() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "Ownable2Step.transferOwnership(address) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "Ownable2Step._transferOwnership(address) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "Ownable2Step._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Ownable2Step._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Ownable2Step.pendingOwner() returns(address)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "Ownable2Step.acceptOwnership() returns()": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "CrossChainEnabled._isCrossChain() returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabled._crossChainSender() returns(address)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledAMB._isCrossChain() returns(bool)": {
        "lines": 2,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledAMB._crossChainSender() returns(address)": {
        "lines": 2,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledAMB.constructor(address) returns()": {
        "lines": 2,
        "type": [
            "public"
        ]
    },
    "LibAMB.isCrossChain(address) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "LibAMB.crossChainSender(address) returns(address)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledArbitrumL1._isCrossChain() returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledArbitrumL1._crossChainSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledArbitrumL1.constructor(address) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledArbitrumL2._isCrossChain() returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledArbitrumL2._crossChainSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "LibArbitrumL1.isCrossChain(address) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "LibArbitrumL1.crossChainSender(address) returns(address)": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "LibArbitrumL2.isCrossChain(address) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "LibArbitrumL2.crossChainSender(address) returns(address)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "LibArbitrumL2.slitherConstructorConstantVariables() returns()": {
        "lines": 22,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledOptimism._isCrossChain() returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledOptimism._crossChainSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledOptimism.constructor(address) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "LibOptimism.isCrossChain(address) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "LibOptimism.crossChainSender(address) returns(address)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledPolygonChild.constructor() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledPolygonChild._nonReentrantBefore() returns()": {
        "lines": 6,
        "type": [
            "private"
        ]
    },
    "CrossChainEnabledPolygonChild._nonReentrantAfter() returns()": {
        "lines": 5,
        "type": [
            "private"
        ]
    },
    "CrossChainEnabledPolygonChild._reentrancyGuardEntered() returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledPolygonChild._isCrossChain() returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledPolygonChild._crossChainSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledPolygonChild.processMessageFromRoot(uint,address,bytes) returns()": {
        "lines": 10,
        "type": [
            "external"
        ]
    },
    "CrossChainEnabledPolygonChild.constructor(address) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledPolygonChild.slitherConstructorVariables() returns()": {
        "lines": 42,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledPolygonChild.slitherConstructorConstantVariables() returns()": {
        "lines": 42,
        "type": [
            "internal"
        ]
    },
    "PaymentSplitter._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "PaymentSplitter._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "PaymentSplitter.constructor(address[],uint[]) returns()": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "PaymentSplitter.receive() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "PaymentSplitter.totalShares() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "PaymentSplitter.totalReleased() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "PaymentSplitter.totalReleased(IERC20) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "PaymentSplitter.shares(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "PaymentSplitter.released(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "PaymentSplitter.released(IERC20,address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "PaymentSplitter.payee(uint) returns(address)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "PaymentSplitter.releasable(address) returns(uint)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "PaymentSplitter.releasable(IERC20,address) returns(uint)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "PaymentSplitter.release(address) returns()": {
        "lines": 13,
        "type": [
            "public"
        ]
    },
    "PaymentSplitter.release(IERC20,address) returns()": {
        "lines": 14,
        "type": [
            "public"
        ]
    },
    "PaymentSplitter._pendingPayment(address,uint,uint) returns(uint)": {
        "lines": 7,
        "type": [
            "private"
        ]
    },
    "PaymentSplitter._addPayee(address,uint) returns()": {
        "lines": 9,
        "type": [
            "private"
        ]
    },
    "VestingWallet._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "VestingWallet._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "VestingWallet.constructor(address,uint,uint) returns()": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "VestingWallet.receive() returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "VestingWallet.beneficiary() returns(address)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "VestingWallet.start() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "VestingWallet.duration() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "VestingWallet.released() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "VestingWallet.released(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "VestingWallet.releasable() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "VestingWallet.releasable(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "VestingWallet.release() returns()": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "VestingWallet.release(address) returns()": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "VestingWallet.vestedAmount(uint) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "VestingWallet.vestedAmount(address,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "VestingWallet._vestingSchedule(uint,uint) returns(uint)": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "Governor.onERC1155Received(address,address,uint,uint,bytes) returns(bytes4)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "Governor.onERC1155BatchReceived(address,address,uint[],uint[],bytes) returns(bytes4)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "Governor.supportsInterface(bytes4) returns(bool)": {
        "lines": 20,
        "type": [
            "public"
        ]
    },
    "Governor.onERC721Received(address,address,uint,bytes) returns(bytes4)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "Governor.name() returns(string)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "Governor.version() returns(string)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "Governor.clock() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "Governor.CLOCK_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "Governor.COUNTING_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "Governor.hashProposal(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 8,
        "type": [
            "public"
        ]
    },
    "Governor.state(uint) returns(IGovernor.ProposalState)": {
        "lines": 26,
        "type": [
            "public"
        ]
    },
    "Governor.proposalSnapshot(uint) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "Governor.proposalDeadline(uint) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "Governor.proposalProposer(uint) returns(address)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "Governor.votingDelay() returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "Governor.votingPeriod() returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "Governor.quorum(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "Governor.getVotes(address,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "Governor.getVotesWithParams(address,uint,bytes) returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "Governor.hasVoted(uint,address) returns(bool)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "Governor.propose(address[],uint[],bytes[],string) returns(uint)": {
        "lines": 41,
        "type": [
            "public"
        ]
    },
    "Governor.execute(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 19,
        "type": [
            "public"
        ]
    },
    "Governor.cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 11,
        "type": [
            "public"
        ]
    },
    "Governor.castVote(uint,uint) returns(uint)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "Governor.castVoteWithReason(uint,uint,string) returns(uint)": {
        "lines": 8,
        "type": [
            "public"
        ]
    },
    "Governor.castVoteWithReasonAndParams(uint,uint,string,bytes) returns(uint)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "Governor.castVoteBySig(uint,uint,uint,bytes32,bytes32) returns(uint)": {
        "lines": 15,
        "type": [
            "public"
        ]
    },
    "Governor.castVoteWithReasonAndParamsBySig(uint,uint,string,bytes,uint,bytes32,bytes32) returns(uint)": {
        "lines": 27,
        "type": [
            "public"
        ]
    },
    "Governor.constructor(string,string) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "Governor._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "Governor._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "Governor._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Governor.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "Governor._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Governor._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Governor.constructor(string) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Governor.receive() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "Governor.proposalThreshold() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "Governor._quorumReached(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "Governor._voteSucceeded(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "Governor._getVotes(address,uint,bytes) returns(uint)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "Governor._countVote(uint,address,uint,uint,bytes) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "Governor._defaultParams() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Governor._execute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "Governor._beforeExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "Governor._afterExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "Governor._cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "Governor._castVote(uint,address,uint,string) returns(uint)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "Governor._castVote(uint,address,uint,string,bytes) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "Governor.relay(address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "external"
        ]
    },
    "Governor._executor() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Governor.slitherConstructorConstantVariables() returns()": {
        "lines": 534,
        "type": [
            "internal"
        ]
    },
    "IGovernor.clock() returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernor.CLOCK_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernor.supportsInterface(bytes4) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IGovernor.name() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernor.version() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernor.COUNTING_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernor.hashProposal(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "IGovernor.state(uint) returns(IGovernor.ProposalState)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernor.proposalSnapshot(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernor.proposalDeadline(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernor.proposalProposer(uint) returns(address)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernor.votingDelay() returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernor.votingPeriod() returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernor.quorum(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernor.getVotes(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernor.getVotesWithParams(address,uint,bytes) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "IGovernor.hasVoted(uint,address) returns(bool)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernor.propose(address[],uint[],bytes[],string) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "IGovernor.execute(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "IGovernor.cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "IGovernor.castVote(uint,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernor.castVoteWithReason(uint,uint,string) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "IGovernor.castVoteWithReasonAndParams(uint,uint,string,bytes) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "IGovernor.castVoteBySig(uint,uint,uint,bytes32,bytes32) returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "IGovernor.castVoteWithReasonAndParamsBySig(uint,uint,string,bytes,uint,bytes32,bytes32) returns(uint)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "TimelockController.onERC1155Received(address,address,uint,uint,bytes) returns(bytes4)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "TimelockController.onERC1155BatchReceived(address,address,uint[],uint[],bytes) returns(bytes4)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "TimelockController.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "TimelockController.onERC721Received(address,address,uint,bytes) returns(bytes4)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "TimelockController.hasRole(bytes32,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "TimelockController._checkRole(bytes32) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "TimelockController._checkRole(bytes32,address) returns()": {
        "lines": 14,
        "type": [
            "internal"
        ]
    },
    "TimelockController.getRoleAdmin(bytes32) returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "TimelockController.grantRole(bytes32,address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "TimelockController.revokeRole(bytes32,address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "TimelockController.renounceRole(bytes32,address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "TimelockController._setupRole(bytes32,address) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "TimelockController._setRoleAdmin(bytes32,bytes32) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "TimelockController._grantRole(bytes32,address) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "TimelockController._revokeRole(bytes32,address) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "TimelockController._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "TimelockController._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "TimelockController.constructor(uint,address[],address[],address) returns()": {
        "lines": 23,
        "type": [
            "public"
        ]
    },
    "TimelockController.receive() returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "TimelockController.isOperation(bytes32) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "TimelockController.isOperationPending(bytes32) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "TimelockController.isOperationReady(bytes32) returns(bool)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "TimelockController.isOperationDone(bytes32) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "TimelockController.getTimestamp(bytes32) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "TimelockController.getMinDelay() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "TimelockController.hashOperation(address,uint,bytes,bytes32,bytes32) returns(bytes32)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "TimelockController.hashOperationBatch(address[],uint[],bytes[],bytes32,bytes32) returns(bytes32)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "TimelockController.schedule(address,uint,bytes,bytes32,bytes32,uint) returns()": {
        "lines": 15,
        "type": [
            "public"
        ]
    },
    "TimelockController.scheduleBatch(address[],uint[],bytes[],bytes32,bytes32,uint) returns()": {
        "lines": 19,
        "type": [
            "public"
        ]
    },
    "TimelockController._schedule(bytes32,uint) returns()": {
        "lines": 5,
        "type": [
            "private"
        ]
    },
    "TimelockController.cancel(bytes32) returns()": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "TimelockController.execute(address,uint,bytes,bytes32,bytes32) returns()": {
        "lines": 13,
        "type": [
            "public"
        ]
    },
    "TimelockController.executeBatch(address[],uint[],bytes[],bytes32,bytes32) returns()": {
        "lines": 20,
        "type": [
            "public"
        ]
    },
    "TimelockController._execute(address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "TimelockController._beforeCall(bytes32,bytes32) returns()": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "TimelockController._afterCall(bytes32) returns()": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "TimelockController.updateDelay(uint) returns()": {
        "lines": 5,
        "type": [
            "external"
        ]
    },
    "TimelockController.slitherConstructorConstantVariables() returns()": {
        "lines": 357,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravo.constructor(string) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravo.receive() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "GovernorCompatibilityBravo.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo.name() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo.version() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo.hashProposal(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo.state(uint) returns(IGovernor.ProposalState)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo.proposalThreshold() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo.proposalSnapshot(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo.proposalDeadline(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo.proposalProposer(uint) returns(address)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo._quorumReached(uint) returns(bool)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravo._voteSucceeded(uint) returns(bool)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravo._getVotes(address,uint,bytes) returns(uint)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravo._countVote(uint,address,uint,uint,bytes) returns()": {
        "lines": 23,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravo._defaultParams() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravo.propose(address[],uint[],bytes[],string) returns(uint)": {
        "lines": 10,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo.execute(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo.cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 14,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo._execute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravo._beforeExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravo._afterExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravo._cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravo.getVotes(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo.getVotesWithParams(address,uint,bytes) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo.castVote(uint,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo.castVoteWithReason(uint,uint,string) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo.castVoteWithReasonAndParams(uint,uint,string,bytes) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo.castVoteBySig(uint,uint,uint,bytes32,bytes32) returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo.castVoteWithReasonAndParamsBySig(uint,uint,string,bytes,uint,bytes32,bytes32) returns(uint)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo._castVote(uint,address,uint,string) returns(uint)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravo._castVote(uint,address,uint,string,bytes) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravo.relay(address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "external"
        ]
    },
    "GovernorCompatibilityBravo._executor() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravo.onERC721Received(address,address,uint,bytes) returns(bytes4)": {
        "lines": 6,
        "type": [
            "external"
        ]
    },
    "GovernorCompatibilityBravo.onERC1155Received(address,address,uint,uint,bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorCompatibilityBravo.onERC1155BatchReceived(address,address,uint[],uint[],bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorCompatibilityBravo.clock() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "GovernorCompatibilityBravo.CLOCK_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "GovernorCompatibilityBravo.COUNTING_MODE() returns(string)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo.votingDelay() returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo.votingPeriod() returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo.quorum(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo.hasVoted(uint,address) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo.constructor(string,string) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravo._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravo._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "GovernorCompatibilityBravo._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravo.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "GovernorCompatibilityBravo._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravo._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravo.quorumVotes() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo.proposals(uint) returns(uint,address,uint,uint,uint,uint,uint,uint,bool,bool)": {
        "lines": 33,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo.propose(address[],uint[],string[],bytes[],string) returns(uint)": {
        "lines": 15,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo.queue(uint) returns()": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo.execute(uint) returns()": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo.cancel(uint) returns()": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo.getActions(uint) returns(address[],uint[],string[],bytes[])": {
        "lines": 17,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo.getReceipt(uint,address) returns(IGovernorCompatibilityBravo.Receipt)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo.timelock() returns(address)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo.proposalEta(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo.queue(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravo._encodeCalldata(string[],bytes[]) returns(bytes[])": {
        "lines": 12,
        "type": [
            "private"
        ]
    },
    "GovernorCompatibilityBravo._getProposalParameters(uint) returns(address[],uint[],bytes[],bytes32)": {
        "lines": 15,
        "type": [
            "private"
        ]
    },
    "GovernorCompatibilityBravo._storeProposal(address,address[],uint[],string[],bytes[],string) returns()": {
        "lines": 20,
        "type": [
            "private"
        ]
    },
    "GovernorCompatibilityBravo.slitherConstructorConstantVariables() returns()": {
        "lines": 282,
        "type": [
            "internal"
        ]
    },
    "IGovernorCompatibilityBravo.name() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernorCompatibilityBravo.version() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernorCompatibilityBravo.clock() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IGovernorCompatibilityBravo.CLOCK_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IGovernorCompatibilityBravo.COUNTING_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernorCompatibilityBravo.hashProposal(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "IGovernorCompatibilityBravo.state(uint) returns(IGovernor.ProposalState)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernorCompatibilityBravo.proposalSnapshot(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernorCompatibilityBravo.proposalDeadline(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernorCompatibilityBravo.proposalProposer(uint) returns(address)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernorCompatibilityBravo.votingDelay() returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernorCompatibilityBravo.votingPeriod() returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernorCompatibilityBravo.quorum(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernorCompatibilityBravo.getVotes(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernorCompatibilityBravo.getVotesWithParams(address,uint,bytes) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "IGovernorCompatibilityBravo.hasVoted(uint,address) returns(bool)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernorCompatibilityBravo.propose(address[],uint[],bytes[],string) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "IGovernorCompatibilityBravo.execute(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "IGovernorCompatibilityBravo.cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "IGovernorCompatibilityBravo.castVote(uint,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernorCompatibilityBravo.castVoteWithReason(uint,uint,string) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "IGovernorCompatibilityBravo.castVoteWithReasonAndParams(uint,uint,string,bytes) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "IGovernorCompatibilityBravo.castVoteBySig(uint,uint,uint,bytes32,bytes32) returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "IGovernorCompatibilityBravo.castVoteWithReasonAndParamsBySig(uint,uint,string,bytes,uint,bytes32,bytes32) returns(uint)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "IGovernorCompatibilityBravo.supportsInterface(bytes4) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IGovernorCompatibilityBravo.quorumVotes() returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernorCompatibilityBravo.proposals(uint) returns(uint,address,uint,uint,uint,uint,uint,uint,bool,bool)": {
        "lines": 18,
        "type": [
            "public"
        ]
    },
    "IGovernorCompatibilityBravo.propose(address[],uint[],string[],bytes[],string) returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "IGovernorCompatibilityBravo.queue(uint) returns()": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernorCompatibilityBravo.execute(uint) returns()": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernorCompatibilityBravo.cancel(uint) returns()": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernorCompatibilityBravo.getActions(uint) returns(address[],uint[],string[],bytes[])": {
        "lines": 12,
        "type": [
            "public"
        ]
    },
    "IGovernorCompatibilityBravo.getReceipt(uint,address) returns(IGovernorCompatibilityBravo.Receipt)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCountingSimple.constructor(string) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorCountingSimple.receive() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "GovernorCountingSimple.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorCountingSimple.name() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCountingSimple.version() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCountingSimple.hashProposal(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorCountingSimple.state(uint) returns(IGovernor.ProposalState)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCountingSimple.proposalThreshold() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorCountingSimple.proposalSnapshot(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCountingSimple.proposalDeadline(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCountingSimple.proposalProposer(uint) returns(address)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCountingSimple._quorumReached(uint) returns(bool)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "GovernorCountingSimple._voteSucceeded(uint) returns(bool)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "GovernorCountingSimple._getVotes(address,uint,bytes) returns(uint)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorCountingSimple._countVote(uint,address,uint,uint,bytes) returns()": {
        "lines": 20,
        "type": [
            "internal"
        ]
    },
    "GovernorCountingSimple._defaultParams() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorCountingSimple.propose(address[],uint[],bytes[],string) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorCountingSimple.execute(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorCountingSimple.cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorCountingSimple._execute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "GovernorCountingSimple._beforeExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "GovernorCountingSimple._afterExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "GovernorCountingSimple._cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "GovernorCountingSimple.getVotes(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCountingSimple.getVotesWithParams(address,uint,bytes) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorCountingSimple.castVote(uint,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCountingSimple.castVoteWithReason(uint,uint,string) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorCountingSimple.castVoteWithReasonAndParams(uint,uint,string,bytes) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorCountingSimple.castVoteBySig(uint,uint,uint,bytes32,bytes32) returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorCountingSimple.castVoteWithReasonAndParamsBySig(uint,uint,string,bytes,uint,bytes32,bytes32) returns(uint)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "GovernorCountingSimple._castVote(uint,address,uint,string) returns(uint)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "GovernorCountingSimple._castVote(uint,address,uint,string,bytes) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "GovernorCountingSimple.relay(address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "external"
        ]
    },
    "GovernorCountingSimple._executor() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorCountingSimple.onERC721Received(address,address,uint,bytes) returns(bytes4)": {
        "lines": 6,
        "type": [
            "external"
        ]
    },
    "GovernorCountingSimple.onERC1155Received(address,address,uint,uint,bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorCountingSimple.onERC1155BatchReceived(address,address,uint[],uint[],bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorCountingSimple.clock() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "GovernorCountingSimple.CLOCK_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "GovernorCountingSimple.COUNTING_MODE() returns(string)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorCountingSimple.votingDelay() returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCountingSimple.votingPeriod() returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCountingSimple.quorum(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCountingSimple.hasVoted(uint,address) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorCountingSimple.constructor(string,string) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "GovernorCountingSimple._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorCountingSimple._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "GovernorCountingSimple._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorCountingSimple.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "GovernorCountingSimple._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorCountingSimple._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorCountingSimple.proposalVotes(uint) returns(uint,uint,uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorCountingSimple.slitherConstructorConstantVariables() returns()": {
        "lines": 76,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorum.constructor(string) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorum.receive() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "GovernorPreventLateQuorum.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorum.name() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorum.version() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorum.hashProposal(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorum.state(uint) returns(IGovernor.ProposalState)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorum.proposalThreshold() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorum.proposalSnapshot(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorum.proposalDeadline(uint) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorum.proposalProposer(uint) returns(address)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorum._quorumReached(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorum._voteSucceeded(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorum._getVotes(address,uint,bytes) returns(uint)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorum._countVote(uint,address,uint,uint,bytes) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorum._defaultParams() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorum.propose(address[],uint[],bytes[],string) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorum.execute(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorum.cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorum._execute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorum._beforeExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorum._afterExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorum._cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorum.getVotes(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorum.getVotesWithParams(address,uint,bytes) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorum.castVote(uint,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorum.castVoteWithReason(uint,uint,string) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorum.castVoteWithReasonAndParams(uint,uint,string,bytes) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorum.castVoteBySig(uint,uint,uint,bytes32,bytes32) returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorum.castVoteWithReasonAndParamsBySig(uint,uint,string,bytes,uint,bytes32,bytes32) returns(uint)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorum._castVote(uint,address,uint,string) returns(uint)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorum._castVote(uint,address,uint,string,bytes) returns(uint)": {
        "lines": 17,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorum.relay(address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "external"
        ]
    },
    "GovernorPreventLateQuorum._executor() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorum.onERC721Received(address,address,uint,bytes) returns(bytes4)": {
        "lines": 6,
        "type": [
            "external"
        ]
    },
    "GovernorPreventLateQuorum.onERC1155Received(address,address,uint,uint,bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorPreventLateQuorum.onERC1155BatchReceived(address,address,uint[],uint[],bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorPreventLateQuorum.clock() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "GovernorPreventLateQuorum.CLOCK_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "GovernorPreventLateQuorum.COUNTING_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorum.votingDelay() returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorum.votingPeriod() returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorum.quorum(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorum.hasVoted(uint,address) returns(bool)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorum.constructor(string,string) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorum._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorum._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "GovernorPreventLateQuorum._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorum.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "GovernorPreventLateQuorum._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorum._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorum.constructor(uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorum.lateQuorumVoteExtension() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorum.setLateQuorumVoteExtension(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorum._setLateQuorumVoteExtension(uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorum.slitherConstructorConstantVariables() returns()": {
        "lines": 73,
        "type": [
            "internal"
        ]
    },
    "GovernorProposalThreshold.constructor(string) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorProposalThreshold.receive() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "GovernorProposalThreshold.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorProposalThreshold.name() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorProposalThreshold.version() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorProposalThreshold.hashProposal(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorProposalThreshold.state(uint) returns(IGovernor.ProposalState)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorProposalThreshold.proposalThreshold() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorProposalThreshold.proposalSnapshot(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorProposalThreshold.proposalDeadline(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorProposalThreshold.proposalProposer(uint) returns(address)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorProposalThreshold._quorumReached(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorProposalThreshold._voteSucceeded(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorProposalThreshold._getVotes(address,uint,bytes) returns(uint)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorProposalThreshold._countVote(uint,address,uint,uint,bytes) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorProposalThreshold._defaultParams() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorProposalThreshold.propose(address[],uint[],bytes[],string) returns(uint)": {
        "lines": 8,
        "type": [
            "public"
        ]
    },
    "GovernorProposalThreshold.execute(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorProposalThreshold.cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorProposalThreshold._execute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "GovernorProposalThreshold._beforeExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "GovernorProposalThreshold._afterExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "GovernorProposalThreshold._cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "GovernorProposalThreshold.getVotes(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorProposalThreshold.getVotesWithParams(address,uint,bytes) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorProposalThreshold.castVote(uint,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorProposalThreshold.castVoteWithReason(uint,uint,string) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorProposalThreshold.castVoteWithReasonAndParams(uint,uint,string,bytes) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorProposalThreshold.castVoteBySig(uint,uint,uint,bytes32,bytes32) returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorProposalThreshold.castVoteWithReasonAndParamsBySig(uint,uint,string,bytes,uint,bytes32,bytes32) returns(uint)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "GovernorProposalThreshold._castVote(uint,address,uint,string) returns(uint)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "GovernorProposalThreshold._castVote(uint,address,uint,string,bytes) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "GovernorProposalThreshold.relay(address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "external"
        ]
    },
    "GovernorProposalThreshold._executor() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorProposalThreshold.onERC721Received(address,address,uint,bytes) returns(bytes4)": {
        "lines": 6,
        "type": [
            "external"
        ]
    },
    "GovernorProposalThreshold.onERC1155Received(address,address,uint,uint,bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorProposalThreshold.onERC1155BatchReceived(address,address,uint[],uint[],bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorProposalThreshold.clock() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "GovernorProposalThreshold.CLOCK_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "GovernorProposalThreshold.COUNTING_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorProposalThreshold.votingDelay() returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorProposalThreshold.votingPeriod() returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorProposalThreshold.quorum(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorProposalThreshold.hasVoted(uint,address) returns(bool)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorProposalThreshold.constructor(string,string) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "GovernorProposalThreshold._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorProposalThreshold._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "GovernorProposalThreshold._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorProposalThreshold.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "GovernorProposalThreshold._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorProposalThreshold._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorProposalThreshold.slitherConstructorConstantVariables() returns()": {
        "lines": 10,
        "type": [
            "internal"
        ]
    },
    "GovernorSettings.constructor(string) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorSettings.receive() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "GovernorSettings.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorSettings.name() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorSettings.version() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorSettings.hashProposal(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorSettings.state(uint) returns(IGovernor.ProposalState)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorSettings.proposalThreshold() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorSettings.proposalSnapshot(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorSettings.proposalDeadline(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorSettings.proposalProposer(uint) returns(address)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorSettings._quorumReached(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorSettings._voteSucceeded(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorSettings._getVotes(address,uint,bytes) returns(uint)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorSettings._countVote(uint,address,uint,uint,bytes) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorSettings._defaultParams() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorSettings.propose(address[],uint[],bytes[],string) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorSettings.execute(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorSettings.cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorSettings._execute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "GovernorSettings._beforeExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "GovernorSettings._afterExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "GovernorSettings._cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "GovernorSettings.getVotes(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorSettings.getVotesWithParams(address,uint,bytes) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorSettings.castVote(uint,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorSettings.castVoteWithReason(uint,uint,string) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorSettings.castVoteWithReasonAndParams(uint,uint,string,bytes) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorSettings.castVoteBySig(uint,uint,uint,bytes32,bytes32) returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorSettings.castVoteWithReasonAndParamsBySig(uint,uint,string,bytes,uint,bytes32,bytes32) returns(uint)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "GovernorSettings._castVote(uint,address,uint,string) returns(uint)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "GovernorSettings._castVote(uint,address,uint,string,bytes) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "GovernorSettings.relay(address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "external"
        ]
    },
    "GovernorSettings._executor() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorSettings.onERC721Received(address,address,uint,bytes) returns(bytes4)": {
        "lines": 6,
        "type": [
            "external"
        ]
    },
    "GovernorSettings.onERC1155Received(address,address,uint,uint,bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorSettings.onERC1155BatchReceived(address,address,uint[],uint[],bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorSettings.clock() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "GovernorSettings.CLOCK_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "GovernorSettings.COUNTING_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorSettings.votingDelay() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorSettings.votingPeriod() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorSettings.quorum(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorSettings.hasVoted(uint,address) returns(bool)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorSettings.constructor(string,string) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "GovernorSettings._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorSettings._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "GovernorSettings._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorSettings.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "GovernorSettings._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorSettings._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorSettings.constructor(uint,uint,uint) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "GovernorSettings.setVotingDelay(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorSettings.setVotingPeriod(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorSettings.setProposalThreshold(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorSettings._setVotingDelay(uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "GovernorSettings._setVotingPeriod(uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "GovernorSettings._setProposalThreshold(uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "GovernorSettings.slitherConstructorConstantVariables() returns()": {
        "lines": 87,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompound.constructor(string) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompound.receive() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockCompound.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompound.name() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompound.version() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompound.hashProposal(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompound.state(uint) returns(IGovernor.ProposalState)": {
        "lines": 14,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompound.proposalThreshold() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompound.proposalSnapshot(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompound.proposalDeadline(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompound.proposalProposer(uint) returns(address)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompound._quorumReached(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompound._voteSucceeded(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompound._getVotes(address,uint,bytes) returns(uint)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompound._countVote(uint,address,uint,uint,bytes) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompound._defaultParams() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompound.propose(address[],uint[],bytes[],string) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompound.execute(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompound.cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompound._execute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 14,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompound._beforeExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompound._afterExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompound._cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompound.getVotes(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompound.getVotesWithParams(address,uint,bytes) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompound.castVote(uint,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompound.castVoteWithReason(uint,uint,string) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompound.castVoteWithReasonAndParams(uint,uint,string,bytes) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompound.castVoteBySig(uint,uint,uint,bytes32,bytes32) returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompound.castVoteWithReasonAndParamsBySig(uint,uint,string,bytes,uint,bytes32,bytes32) returns(uint)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompound._castVote(uint,address,uint,string) returns(uint)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompound._castVote(uint,address,uint,string,bytes) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompound.relay(address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockCompound._executor() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompound.onERC721Received(address,address,uint,bytes) returns(bytes4)": {
        "lines": 6,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockCompound.onERC1155Received(address,address,uint,uint,bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockCompound.onERC1155BatchReceived(address,address,uint[],uint[],bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockCompound.clock() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockCompound.CLOCK_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockCompound.COUNTING_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompound.votingDelay() returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompound.votingPeriod() returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompound.quorum(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompound.hasVoted(uint,address) returns(bool)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompound.constructor(string,string) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompound._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompound._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "GovernorTimelockCompound._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompound.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockCompound._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompound._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompound.timelock() returns(address)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompound.proposalEta(uint) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompound.queue(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 20,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompound.constructor(ICompoundTimelock) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompound.__acceptAdmin() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompound.updateTimelock(ICompoundTimelock) returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockCompound._updateTimelock(ICompoundTimelock) returns()": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "GovernorTimelockCompound.slitherConstructorConstantVariables() returns()": {
        "lines": 144,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControl.constructor(string) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControl.receive() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockControl.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControl.name() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControl.version() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControl.hashProposal(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControl.state(uint) returns(IGovernor.ProposalState)": {
        "lines": 17,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControl.proposalThreshold() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControl.proposalSnapshot(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControl.proposalDeadline(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControl.proposalProposer(uint) returns(address)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControl._quorumReached(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControl._voteSucceeded(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControl._getVotes(address,uint,bytes) returns(uint)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControl._countVote(uint,address,uint,uint,bytes) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControl._defaultParams() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControl.propose(address[],uint[],bytes[],string) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControl.execute(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControl.cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControl._execute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControl._beforeExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControl._afterExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControl._cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControl.getVotes(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControl.getVotesWithParams(address,uint,bytes) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControl.castVote(uint,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControl.castVoteWithReason(uint,uint,string) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControl.castVoteWithReasonAndParams(uint,uint,string,bytes) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControl.castVoteBySig(uint,uint,uint,bytes32,bytes32) returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControl.castVoteWithReasonAndParamsBySig(uint,uint,string,bytes,uint,bytes32,bytes32) returns(uint)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControl._castVote(uint,address,uint,string) returns(uint)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControl._castVote(uint,address,uint,string,bytes) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControl.relay(address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockControl._executor() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControl.onERC721Received(address,address,uint,bytes) returns(bytes4)": {
        "lines": 6,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockControl.onERC1155Received(address,address,uint,uint,bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockControl.onERC1155BatchReceived(address,address,uint[],uint[],bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockControl.clock() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockControl.CLOCK_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockControl.COUNTING_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControl.votingDelay() returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControl.votingPeriod() returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControl.quorum(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControl.hasVoted(uint,address) returns(bool)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControl.constructor(string,string) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControl._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControl._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "GovernorTimelockControl._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControl.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockControl._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControl._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControl.timelock() returns(address)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControl.proposalEta(uint) returns(uint)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControl.queue(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 14,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControl.constructor(TimelockController) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControl.updateTimelock(TimelockController) returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockControl._updateTimelock(TimelockController) returns()": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "GovernorTimelockControl.slitherConstructorConstantVariables() returns()": {
        "lines": 121,
        "type": [
            "internal"
        ]
    },
    "GovernorVotes.constructor(string) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorVotes.receive() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "GovernorVotes.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorVotes.name() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotes.version() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotes.hashProposal(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorVotes.state(uint) returns(IGovernor.ProposalState)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotes.proposalThreshold() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorVotes.proposalSnapshot(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotes.proposalDeadline(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotes.proposalProposer(uint) returns(address)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotes._quorumReached(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorVotes._voteSucceeded(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorVotes._getVotes(address,uint,bytes) returns(uint)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorVotes._countVote(uint,address,uint,uint,bytes) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorVotes._defaultParams() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorVotes.propose(address[],uint[],bytes[],string) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorVotes.execute(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorVotes.cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorVotes._execute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "GovernorVotes._beforeExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "GovernorVotes._afterExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "GovernorVotes._cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "GovernorVotes.getVotes(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotes.getVotesWithParams(address,uint,bytes) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorVotes.castVote(uint,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotes.castVoteWithReason(uint,uint,string) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorVotes.castVoteWithReasonAndParams(uint,uint,string,bytes) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorVotes.castVoteBySig(uint,uint,uint,bytes32,bytes32) returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorVotes.castVoteWithReasonAndParamsBySig(uint,uint,string,bytes,uint,bytes32,bytes32) returns(uint)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "GovernorVotes._castVote(uint,address,uint,string) returns(uint)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "GovernorVotes._castVote(uint,address,uint,string,bytes) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "GovernorVotes.relay(address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "external"
        ]
    },
    "GovernorVotes._executor() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorVotes.onERC721Received(address,address,uint,bytes) returns(bytes4)": {
        "lines": 6,
        "type": [
            "external"
        ]
    },
    "GovernorVotes.onERC1155Received(address,address,uint,uint,bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorVotes.onERC1155BatchReceived(address,address,uint[],uint[],bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorVotes.clock() returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorVotes.CLOCK_MODE() returns(string)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorVotes.COUNTING_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotes.votingDelay() returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotes.votingPeriod() returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotes.quorum(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotes.hasVoted(uint,address) returns(bool)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotes.constructor(string,string) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "GovernorVotes._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorVotes._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "GovernorVotes._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorVotes.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "GovernorVotes._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorVotes._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorVotes.constructor(IVotes) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorVotes.slitherConstructorConstantVariables() returns()": {
        "lines": 38,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesComp.constructor(string) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesComp.receive() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "GovernorVotesComp.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorVotesComp.name() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotesComp.version() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotesComp.hashProposal(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorVotesComp.state(uint) returns(IGovernor.ProposalState)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotesComp.proposalThreshold() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorVotesComp.proposalSnapshot(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotesComp.proposalDeadline(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotesComp.proposalProposer(uint) returns(address)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotesComp._quorumReached(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesComp._voteSucceeded(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesComp._getVotes(address,uint,bytes) returns(uint)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesComp._countVote(uint,address,uint,uint,bytes) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesComp._defaultParams() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesComp.propose(address[],uint[],bytes[],string) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorVotesComp.execute(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorVotesComp.cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorVotesComp._execute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesComp._beforeExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesComp._afterExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesComp._cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesComp.getVotes(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotesComp.getVotesWithParams(address,uint,bytes) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorVotesComp.castVote(uint,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotesComp.castVoteWithReason(uint,uint,string) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorVotesComp.castVoteWithReasonAndParams(uint,uint,string,bytes) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorVotesComp.castVoteBySig(uint,uint,uint,bytes32,bytes32) returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorVotesComp.castVoteWithReasonAndParamsBySig(uint,uint,string,bytes,uint,bytes32,bytes32) returns(uint)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "GovernorVotesComp._castVote(uint,address,uint,string) returns(uint)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesComp._castVote(uint,address,uint,string,bytes) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesComp.relay(address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "external"
        ]
    },
    "GovernorVotesComp._executor() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesComp.onERC721Received(address,address,uint,bytes) returns(bytes4)": {
        "lines": 6,
        "type": [
            "external"
        ]
    },
    "GovernorVotesComp.onERC1155Received(address,address,uint,uint,bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorVotesComp.onERC1155BatchReceived(address,address,uint[],uint[],bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorVotesComp.clock() returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorVotesComp.CLOCK_MODE() returns(string)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorVotesComp.COUNTING_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotesComp.votingDelay() returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotesComp.votingPeriod() returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotesComp.quorum(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotesComp.hasVoted(uint,address) returns(bool)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotesComp.constructor(string,string) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesComp._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesComp._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "GovernorVotesComp._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesComp.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "GovernorVotesComp._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesComp._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesComp.constructor(ERC20VotesComp) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesComp.slitherConstructorConstantVariables() returns()": {
        "lines": 38,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesQuorumFraction.constructor(IVotes) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesQuorumFraction.clock() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "GovernorVotesQuorumFraction.CLOCK_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "GovernorVotesQuorumFraction._getVotes(address,uint,bytes) returns(uint)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesQuorumFraction.constructor(string) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesQuorumFraction.receive() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "GovernorVotesQuorumFraction.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorVotesQuorumFraction.name() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotesQuorumFraction.version() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotesQuorumFraction.hashProposal(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorVotesQuorumFraction.state(uint) returns(IGovernor.ProposalState)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotesQuorumFraction.proposalThreshold() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorVotesQuorumFraction.proposalSnapshot(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotesQuorumFraction.proposalDeadline(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotesQuorumFraction.proposalProposer(uint) returns(address)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotesQuorumFraction._quorumReached(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesQuorumFraction._voteSucceeded(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesQuorumFraction._countVote(uint,address,uint,uint,bytes) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesQuorumFraction._defaultParams() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesQuorumFraction.propose(address[],uint[],bytes[],string) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorVotesQuorumFraction.execute(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorVotesQuorumFraction.cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorVotesQuorumFraction._execute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesQuorumFraction._beforeExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesQuorumFraction._afterExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesQuorumFraction._cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesQuorumFraction.getVotes(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotesQuorumFraction.getVotesWithParams(address,uint,bytes) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorVotesQuorumFraction.castVote(uint,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotesQuorumFraction.castVoteWithReason(uint,uint,string) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorVotesQuorumFraction.castVoteWithReasonAndParams(uint,uint,string,bytes) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorVotesQuorumFraction.castVoteBySig(uint,uint,uint,bytes32,bytes32) returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorVotesQuorumFraction.castVoteWithReasonAndParamsBySig(uint,uint,string,bytes,uint,bytes32,bytes32) returns(uint)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "GovernorVotesQuorumFraction._castVote(uint,address,uint,string) returns(uint)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesQuorumFraction._castVote(uint,address,uint,string,bytes) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesQuorumFraction.relay(address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "external"
        ]
    },
    "GovernorVotesQuorumFraction._executor() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesQuorumFraction.onERC721Received(address,address,uint,bytes) returns(bytes4)": {
        "lines": 6,
        "type": [
            "external"
        ]
    },
    "GovernorVotesQuorumFraction.onERC1155Received(address,address,uint,uint,bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorVotesQuorumFraction.onERC1155BatchReceived(address,address,uint[],uint[],bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorVotesQuorumFraction.COUNTING_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotesQuorumFraction.votingDelay() returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotesQuorumFraction.votingPeriod() returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotesQuorumFraction.quorum(uint) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorVotesQuorumFraction.hasVoted(uint,address) returns(bool)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVotesQuorumFraction.constructor(string,string) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesQuorumFraction._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesQuorumFraction._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "GovernorVotesQuorumFraction._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesQuorumFraction.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "GovernorVotesQuorumFraction._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesQuorumFraction._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesQuorumFraction.constructor(uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesQuorumFraction.quorumNumerator() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorVotesQuorumFraction.quorumNumerator(uint) returns(uint)": {
        "lines": 14,
        "type": [
            "public"
        ]
    },
    "GovernorVotesQuorumFraction.quorumDenominator() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorVotesQuorumFraction.updateQuorumNumerator(uint) returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "GovernorVotesQuorumFraction._updateQuorumNumerator(uint) returns()": {
        "lines": 16,
        "type": [
            "internal"
        ]
    },
    "GovernorVotesQuorumFraction.slitherConstructorConstantVariables() returns()": {
        "lines": 90,
        "type": [
            "internal"
        ]
    },
    "IGovernorTimelock.name() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernorTimelock.version() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernorTimelock.clock() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IGovernorTimelock.CLOCK_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IGovernorTimelock.COUNTING_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernorTimelock.hashProposal(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "IGovernorTimelock.state(uint) returns(IGovernor.ProposalState)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernorTimelock.proposalSnapshot(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernorTimelock.proposalDeadline(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernorTimelock.proposalProposer(uint) returns(address)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernorTimelock.votingDelay() returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernorTimelock.votingPeriod() returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernorTimelock.quorum(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernorTimelock.getVotes(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernorTimelock.getVotesWithParams(address,uint,bytes) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "IGovernorTimelock.hasVoted(uint,address) returns(bool)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernorTimelock.propose(address[],uint[],bytes[],string) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "IGovernorTimelock.execute(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "IGovernorTimelock.cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "IGovernorTimelock.castVote(uint,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernorTimelock.castVoteWithReason(uint,uint,string) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "IGovernorTimelock.castVoteWithReasonAndParams(uint,uint,string,bytes) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "IGovernorTimelock.castVoteBySig(uint,uint,uint,bytes32,bytes32) returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "IGovernorTimelock.castVoteWithReasonAndParamsBySig(uint,uint,string,bytes,uint,bytes32,bytes32) returns(uint)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "IGovernorTimelock.supportsInterface(bytes4) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IGovernorTimelock.timelock() returns(address)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernorTimelock.proposalEta(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "IGovernorTimelock.queue(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "IVotes.getVotes(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IVotes.getPastVotes(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IVotes.getPastTotalSupply(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IVotes.delegates(address) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IVotes.delegate(address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IVotes.delegateBySig(address,uint,uint,uint,bytes32,bytes32) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "Votes.getVotes(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "Votes.getPastVotes(address,uint) returns(uint)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "Votes.getPastTotalSupply(uint) returns(uint)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "Votes.delegates(address) returns(address)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "Votes.delegate(address) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "Votes.delegateBySig(address,uint,uint,uint,bytes32,bytes32) returns()": {
        "lines": 18,
        "type": [
            "public"
        ]
    },
    "Votes.clock() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "Votes.CLOCK_MODE() returns(string)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "Votes.constructor(string,string) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "Votes._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "Votes._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "Votes._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Votes.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "Votes._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Votes._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Votes._getTotalSupply() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Votes._delegate(address,address) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "Votes._transferVotingUnits(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "Votes._moveDelegateVotes(address,address,uint) returns()": {
        "lines": 20,
        "type": [
            "private"
        ]
    },
    "Votes._push(Checkpoints.Trace224,function(uint,uint) returns(uint),uint) returns(uint,uint)": {
        "lines": 7,
        "type": [
            "private"
        ]
    },
    "Votes._add(uint,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "Votes._subtract(uint,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "Votes._useNonce(address) returns(uint)": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "Votes.nonces(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "Votes.DOMAIN_SEPARATOR() returns(bytes32)": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "Votes._getVotingUnits(address) returns(uint)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "Votes.slitherConstructorConstantVariables() returns()": {
        "lines": 189,
        "type": [
            "internal"
        ]
    },
    "IERC1271.isValidSignature(bytes32,bytes) returns(bytes4)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1363.totalSupply() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1363.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1363.transfer(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1363.allowance(address,address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1363.approve(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1363.transferFrom(address,address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1363.supportsInterface(bytes4) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1363.transferAndCall(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1363.transferAndCall(address,uint,bytes) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1363.transferFromAndCall(address,address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1363.transferFromAndCall(address,address,uint,bytes) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1363.approveAndCall(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1363.approveAndCall(address,uint,bytes) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1363Receiver.onTransferReceived(address,address,uint,bytes) returns(bytes4)": {
        "lines": 6,
        "type": [
            "external"
        ]
    },
    "IERC1363Spender.onApprovalReceived(address,uint,bytes) returns(bytes4)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC2612.permit(address,address,uint,uint,uint,bytes32,bytes32) returns()": {
        "lines": 9,
        "type": [
            "external"
        ]
    },
    "IERC2612.nonces(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC2612.DOMAIN_SEPARATOR() returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC2981.supportsInterface(bytes4) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC2981.royaltyInfo(uint,uint) returns(address,uint)": {
        "lines": 4,
        "type": [
            "external"
        ]
    },
    "IERC3156FlashBorrower.onFlashLoan(address,address,uint,uint,bytes) returns(bytes32)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "IERC3156FlashLender.maxFlashLoan(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC3156FlashLender.flashFee(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC3156FlashLender.flashLoan(IERC3156FlashBorrower,address,uint,bytes) returns(bool)": {
        "lines": 6,
        "type": [
            "external"
        ]
    },
    "IERC4626.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC4626.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC4626.decimals() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC4626.totalSupply() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC4626.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC4626.transfer(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC4626.allowance(address,address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC4626.approve(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC4626.transferFrom(address,address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC4626.asset() returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC4626.totalAssets() returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "IERC4626.convertToShares(uint) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "IERC4626.convertToAssets(uint) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "IERC4626.maxDeposit(address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "IERC4626.previewDeposit(uint) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "IERC4626.deposit(uint,address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "IERC4626.maxMint(address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "IERC4626.previewMint(uint) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "IERC4626.mint(uint,address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "IERC4626.maxWithdraw(address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "IERC4626.previewWithdraw(uint) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "IERC4626.withdraw(uint,address,address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "IERC4626.maxRedeem(address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "IERC4626.previewRedeem(uint) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "IERC4626.redeem(uint,address,address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "IERC4906.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC4906.ownerOf(uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC4906.safeTransferFrom(address,address,uint,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC4906.safeTransferFrom(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC4906.transferFrom(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC4906.approve(address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC4906.setApprovalForAll(address,bool) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC4906.getApproved(uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC4906.isApprovedForAll(address,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC4906.supportsInterface(bytes4) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC5267.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "IERC5313.owner() returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC5805.getVotes(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC5805.getPastVotes(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC5805.getPastTotalSupply(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC5805.delegates(address) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC5805.delegate(address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC5805.delegateBySig(address,uint,uint,uint,bytes32,bytes32) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC5805.clock() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC5805.CLOCK_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC6372.clock() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC6372.CLOCK_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1822Proxiable.proxiableUUID() returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC2771Context._msgSender() returns(address)": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC2771Context._msgData() returns(bytes)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC2771Context.constructor(address) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC2771Context.isTrustedForwarder(address) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "MinimalForwarder.constructor(string,string) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "MinimalForwarder._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "MinimalForwarder._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "MinimalForwarder._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MinimalForwarder.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "MinimalForwarder.constructor() returns()": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MinimalForwarder.getNonce(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "MinimalForwarder.verify(MinimalForwarder.ForwardRequest,bytes) returns(bool)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "MinimalForwarder.execute(MinimalForwarder.ForwardRequest,bytes) returns(bool,bytes)": {
        "lines": 22,
        "type": [
            "public"
        ]
    },
    "MinimalForwarder.slitherConstructorConstantVariables() returns()": {
        "lines": 46,
        "type": [
            "internal"
        ]
    },
    "AccessControlCrossChainMock._isCrossChain() returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "AccessControlCrossChainMock._crossChainSender() returns(address)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "AccessControlCrossChainMock._checkRole(bytes32) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "AccessControlCrossChainMock._crossChainRoleAlias(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "AccessControlCrossChainMock.supportsInterface(bytes4) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "AccessControlCrossChainMock.hasRole(bytes32,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "AccessControlCrossChainMock._checkRole(bytes32,address) returns()": {
        "lines": 14,
        "type": [
            "internal"
        ]
    },
    "AccessControlCrossChainMock.getRoleAdmin(bytes32) returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "AccessControlCrossChainMock.grantRole(bytes32,address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "AccessControlCrossChainMock.revokeRole(bytes32,address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "AccessControlCrossChainMock.renounceRole(bytes32,address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "AccessControlCrossChainMock._setupRole(bytes32,address) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "AccessControlCrossChainMock._setRoleAdmin(bytes32,bytes32) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "AccessControlCrossChainMock._grantRole(bytes32,address) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "AccessControlCrossChainMock._revokeRole(bytes32,address) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "AccessControlCrossChainMock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "AccessControlCrossChainMock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "AccessControlCrossChainMock.slitherConstructorConstantVariables() returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "UintArraysMock.constructor(uint[]) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "UintArraysMock.findUpperBound(uint) returns(uint)": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "UintArraysMock.unsafeAccess(uint) returns(uint)": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "AddressArraysMock.constructor(address[]) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "AddressArraysMock.unsafeAccess(uint) returns(address)": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "Bytes32ArraysMock.constructor(bytes32[]) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "Bytes32ArraysMock.unsafeAccess(uint) returns(bytes32)": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "CallReceiverMock.mockFunction() returns(string)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "CallReceiverMock.mockFunctionEmptyReturn() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "CallReceiverMock.mockFunctionWithArgs(uint,uint) returns(string)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "CallReceiverMock.mockFunctionNonPayable() returns(string)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "CallReceiverMock.mockStaticFunction() returns(string)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "CallReceiverMock.mockFunctionRevertsNoReason() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "CallReceiverMock.mockFunctionRevertsReason() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "CallReceiverMock.mockFunctionThrows() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "CallReceiverMock.mockFunctionOutOfGas() returns()": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "CallReceiverMock.mockFunctionWritesStorage(bytes32,bytes32) returns(string)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "ConditionalEscrowMock.withdrawalAllowed(address) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ConditionalEscrowMock.withdraw(address) returns()": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "ConditionalEscrowMock.depositsOf(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ConditionalEscrowMock.deposit(address) returns()": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ConditionalEscrowMock.constructor() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ConditionalEscrowMock.owner() returns(address)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ConditionalEscrowMock._checkOwner() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ConditionalEscrowMock.renounceOwnership() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ConditionalEscrowMock.transferOwnership(address) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ConditionalEscrowMock._transferOwnership(address) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ConditionalEscrowMock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ConditionalEscrowMock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ConditionalEscrowMock.setAllowed(address,bool) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ContextMock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ContextMock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ContextMock.msgSender() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ContextMock.msgData(uint,string) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ContextMockCaller.callSender(ContextMock) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ContextMockCaller.callData(ContextMock,uint,string) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "Impl.version() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "DummyImplementation.initializeNonPayable() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "DummyImplementation.initializePayable() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "DummyImplementation.initializeNonPayableWithValue(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "DummyImplementation.initializePayableWithValue(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "DummyImplementation.initialize(uint,string,uint[]) returns()": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "DummyImplementation.get() returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "DummyImplementation.version() returns(string)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "DummyImplementation.reverts() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "DummyImplementationV2.initializeNonPayable() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "DummyImplementationV2.initializePayable() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "DummyImplementationV2.initializeNonPayableWithValue(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "DummyImplementationV2.initializePayableWithValue(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "DummyImplementationV2.initialize(uint,string,uint[]) returns()": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "DummyImplementationV2.get() returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "DummyImplementationV2.version() returns(string)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "DummyImplementationV2.reverts() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "DummyImplementationV2.migrate(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "EIP712Verifier.constructor(string,string) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "EIP712Verifier._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "EIP712Verifier._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "EIP712Verifier._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EIP712Verifier.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "EIP712Verifier.verify(bytes,address,address,string) returns()": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "EIP712Verifier.slitherConstructorConstantVariables() returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC1271WalletMock.isValidSignature(bytes32,bytes) returns(bytes4)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC1271WalletMock.constructor() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1271WalletMock.owner() returns(address)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC1271WalletMock._checkOwner() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1271WalletMock.renounceOwnership() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC1271WalletMock.transferOwnership(address) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC1271WalletMock._transferOwnership(address) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC1271WalletMock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1271WalletMock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1271WalletMock.constructor(address) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC1271MaliciousMock.isValidSignature(bytes32,bytes) returns(bytes4)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "ERC165MaliciousData.supportsInterface(bytes4) returns(bool)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "ERC165MissingData.supportsInterface(bytes4) returns()": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "ERC165ReturnBombMock.supportsInterface(bytes4) returns(bool)": {
        "lines": 10,
        "type": [
            "public"
        ]
    },
    "ERC20Mock.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20Mock.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Mock.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Mock.decimals() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Mock.totalSupply() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Mock.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Mock.transfer(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Mock.allowance(address,address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Mock.approve(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Mock.transferFrom(address,address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Mock.increaseAllowance(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC20Mock.decreaseAllowance(address,uint) returns(bool)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC20Mock._transfer(address,address,uint) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC20Mock._mint(address,uint) returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC20Mock._burn(address,uint) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "ERC20Mock._approve(address,address,uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC20Mock._spendAllowance(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC20Mock._beforeTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20Mock._afterTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20Mock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20Mock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20Mock.constructor() returns()": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "ERC20Mock.mint(address,uint) returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "ERC20Mock.burn(address,uint) returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "ERC20Reentrant.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20Reentrant.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Reentrant.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Reentrant.decimals() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Reentrant.totalSupply() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Reentrant.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Reentrant.transfer(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Reentrant.allowance(address,address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Reentrant.approve(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Reentrant.transferFrom(address,address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Reentrant.increaseAllowance(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC20Reentrant.decreaseAllowance(address,uint) returns(bool)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC20Reentrant._transfer(address,address,uint) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC20Reentrant._mint(address,uint) returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC20Reentrant._burn(address,uint) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "ERC20Reentrant._approve(address,address,uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC20Reentrant._spendAllowance(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC20Reentrant._beforeTokenTransfer(address,address,uint) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC20Reentrant._afterTokenTransfer(address,address,uint) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC20Reentrant._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20Reentrant._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20Reentrant.scheduleReenter(ERC20Reentrant.Type,address,bytes) returns()": {
        "lines": 5,
        "type": [
            "external"
        ]
    },
    "ERC20Reentrant.functionCall(address,bytes) returns(bytes)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC2771ContextMock.constructor(address) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC2771ContextMock.isTrustedForwarder(address) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC2771ContextMock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC2771ContextMock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC2771ContextMock.msgSender() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC2771ContextMock.msgData(uint,string) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC3156FlashBorrowerMock.onFlashLoan(address,address,uint,uint,bytes) returns(bytes32)": {
        "lines": 19,
        "type": [
            "public"
        ]
    },
    "ERC3156FlashBorrowerMock.constructor(bool,bool) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC3156FlashBorrowerMock.slitherConstructorConstantVariables() returns()": {
        "lines": 30,
        "type": [
            "internal"
        ]
    },
    "ERC4626Mock.constructor(IERC20) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC4626Mock._tryGetAssetDecimals(IERC20) returns(bool,uint)": {
        "lines": 12,
        "type": [
            "private"
        ]
    },
    "ERC4626Mock.decimals() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626Mock.asset() returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC4626Mock.totalAssets() returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626Mock.convertToShares(uint) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626Mock.convertToAssets(uint) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626Mock.maxDeposit(address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626Mock.maxMint(address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626Mock.maxWithdraw(address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626Mock.maxRedeem(address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626Mock.previewDeposit(uint) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626Mock.previewMint(uint) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626Mock.previewWithdraw(uint) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626Mock.previewRedeem(uint) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626Mock.deposit(uint,address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626Mock.mint(uint,address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626Mock.withdraw(uint,address,address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626Mock.redeem(uint,address,address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626Mock._convertToShares(uint,Math.Rounding) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC4626Mock._convertToAssets(uint,Math.Rounding) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC4626Mock._deposit(address,address,uint,uint) returns()": {
        "lines": 12,
        "type": [
            "internal"
        ]
    },
    "ERC4626Mock._withdraw(address,address,address,uint,uint) returns()": {
        "lines": 20,
        "type": [
            "internal"
        ]
    },
    "ERC4626Mock._decimalsOffset() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC4626Mock.name() returns(string)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626Mock.symbol() returns(string)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626Mock.totalSupply() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626Mock.balanceOf(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626Mock.transfer(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC4626Mock.allowance(address,address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626Mock.approve(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC4626Mock.transferFrom(address,address,uint) returns(bool)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "ERC4626Mock.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC4626Mock.increaseAllowance(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC4626Mock.decreaseAllowance(address,uint) returns(bool)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC4626Mock._transfer(address,address,uint) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC4626Mock._mint(address,uint) returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC4626Mock._burn(address,uint) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "ERC4626Mock._approve(address,address,uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC4626Mock._spendAllowance(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC4626Mock._beforeTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC4626Mock._afterTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC4626Mock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC4626Mock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC4626Mock.constructor(address) returns()": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "ERC4626Mock.mint(address,uint) returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "ERC4626Mock.burn(address,uint) returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "EtherReceiverMock.setAcceptEther(bool) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "EtherReceiverMock.receive() returns()": {
        "lines": 5,
        "type": [
            "external"
        ]
    },
    "InitializableMock._disableInitializers() returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "InitializableMock._getInitializedVersion() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "InitializableMock._isInitializing() returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "InitializableMock.isInitializing() returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "InitializableMock.initialize() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "InitializableMock.initializeOnlyInitializing() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "InitializableMock.initializerNested() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "InitializableMock.onlyInitializingNested() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "InitializableMock.initializeWithX(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "InitializableMock.nonInitializable(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "InitializableMock.fail() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ConstructorInitializableMock._disableInitializers() returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ConstructorInitializableMock._getInitializedVersion() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ConstructorInitializableMock._isInitializing() returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ConstructorInitializableMock.constructor() returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ConstructorInitializableMock.initialize() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ConstructorInitializableMock.initializeOnlyInitializing() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ChildConstructorInitializableMock.constructor() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ChildConstructorInitializableMock.initialize() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ChildConstructorInitializableMock.initializeOnlyInitializing() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ChildConstructorInitializableMock._disableInitializers() returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ChildConstructorInitializableMock._getInitializedVersion() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ChildConstructorInitializableMock._isInitializing() returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ChildConstructorInitializableMock.childInitialize() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ReinitializerMock._disableInitializers() returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ReinitializerMock._getInitializedVersion() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ReinitializerMock._isInitializing() returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ReinitializerMock.getInitializedVersion() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ReinitializerMock.initialize() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ReinitializerMock.reinitialize(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ReinitializerMock.nestedReinitialize(uint,uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ReinitializerMock.chainReinitialize(uint,uint) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ReinitializerMock.disableInitializers() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ReinitializerMock.doStuff() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "DisableNew._disableInitializers() returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "DisableNew._getInitializedVersion() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "DisableNew._isInitializing() returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "DisableNew.constructor() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "DisableOld._disableInitializers() returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "DisableOld._getInitializedVersion() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "DisableOld._isInitializing() returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "DisableOld.constructor() returns()": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "DisableBad1.constructor() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "DisableBad1._disableInitializers() returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "DisableBad1._getInitializedVersion() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "DisableBad1._isInitializing() returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "DisableBad2._disableInitializers() returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "DisableBad2._getInitializedVersion() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "DisableBad2._isInitializing() returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "DisableBad2.constructor() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "DisableOk.constructor() returns()": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "DisableOk._disableInitializers() returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "DisableOk._getInitializedVersion() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "DisableOk._isInitializing() returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MulticallTest.checkReturnValues(ERC20MulticallMock,address[],uint[]) returns()": {
        "lines": 14,
        "type": [
            "external"
        ]
    },
    "SampleHuman._disableInitializers() returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "SampleHuman._getInitializedVersion() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SampleHuman._isInitializing() returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SampleHuman.initialize() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "SampleHuman.__SampleHuman_init() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SampleHuman.__SampleHuman_init_unchained() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SampleMother.initialize() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "SampleMother.__SampleHuman_init() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SampleMother.__SampleHuman_init_unchained() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SampleMother._disableInitializers() returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "SampleMother._getInitializedVersion() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SampleMother._isInitializing() returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SampleMother.initialize(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "SampleMother.__SampleMother_init(uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SampleMother.__SampleMother_init_unchained(uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SampleGramps.initialize() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "SampleGramps.__SampleHuman_init() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SampleGramps.__SampleHuman_init_unchained() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SampleGramps._disableInitializers() returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "SampleGramps._getInitializedVersion() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SampleGramps._isInitializing() returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SampleGramps.initialize(string) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "SampleGramps.__SampleGramps_init(string) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SampleGramps.__SampleGramps_init_unchained(string) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SampleFather.initialize(string) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "SampleFather.__SampleGramps_init(string) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SampleFather.__SampleGramps_init_unchained(string) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SampleFather.initialize() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "SampleFather.__SampleHuman_init() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SampleFather.__SampleHuman_init_unchained() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SampleFather._disableInitializers() returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "SampleFather._getInitializedVersion() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SampleFather._isInitializing() returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SampleFather.initialize(string,uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "SampleFather.__SampleFather_init(string,uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SampleFather.__SampleFather_init_unchained(uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SampleChild.initialize(string,uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "SampleChild.__SampleFather_init(string,uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SampleChild.__SampleFather_init_unchained(uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SampleChild.initialize(string) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "SampleChild.__SampleGramps_init(string) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SampleChild.__SampleGramps_init_unchained(string) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SampleChild.initialize() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "SampleChild.__SampleHuman_init() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SampleChild.__SampleHuman_init_unchained() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SampleChild._disableInitializers() returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "SampleChild._getInitializedVersion() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SampleChild._isInitializing() returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SampleChild.initialize(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "SampleChild.__SampleMother_init(uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SampleChild.__SampleMother_init_unchained(uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SampleChild.initialize(uint,string,uint,uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "SampleChild.__SampleChild_init(uint,string,uint,uint) returns()": {
        "lines": 10,
        "type": [
            "internal"
        ]
    },
    "SampleChild.__SampleChild_init_unchained(uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "PausableMock.constructor() returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "PausableMock.paused() returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "PausableMock._requireNotPaused() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "PausableMock._requirePaused() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "PausableMock._pause() returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "PausableMock._unpause() returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "PausableMock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "PausableMock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "PausableMock.normalProcess() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "PausableMock.drasticMeasure() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "PausableMock.pause() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "PausableMock.unpause() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "PullPaymentMock.constructor() returns()": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "PullPaymentMock.withdrawPayments(address) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "PullPaymentMock.payments(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "PullPaymentMock._asyncTransfer(address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "PullPaymentMock.callTransfer(address,uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ReentrancyAttack._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ReentrancyAttack._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ReentrancyAttack.callSender(bytes4) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ReentrancyMock.constructor() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ReentrancyMock._nonReentrantBefore() returns()": {
        "lines": 6,
        "type": [
            "private"
        ]
    },
    "ReentrancyMock._nonReentrantAfter() returns()": {
        "lines": 5,
        "type": [
            "private"
        ]
    },
    "ReentrancyMock._reentrancyGuardEntered() returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ReentrancyMock.callback() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "ReentrancyMock.countLocalRecursive(uint) returns()": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "ReentrancyMock.countThisRecursive(uint) returns()": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "ReentrancyMock.countAndCall(ReentrancyAttack) returns()": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ReentrancyMock._count() returns()": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "ReentrancyMock.guardedCheckEntered() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ReentrancyMock.unguardedCheckNotEntered() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ReentrancyMock.slitherConstructorConstantVariables() returns()": {
        "lines": 36,
        "type": [
            "internal"
        ]
    },
    "Implementation1._disableInitializers() returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "Implementation1._getInitializedVersion() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Implementation1._isInitializing() returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Implementation1.initialize() returns()": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "Implementation1.setValue(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "Implementation2._disableInitializers() returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "Implementation2._getInitializedVersion() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Implementation2._isInitializing() returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Implementation2.initialize() returns()": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "Implementation2.setValue(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "Implementation2.getValue() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "Implementation3._disableInitializers() returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "Implementation3._getInitializedVersion() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Implementation3._isInitializing() returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Implementation3.initialize() returns()": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "Implementation3.setValue(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "Implementation3.getValue(uint) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "Implementation4._disableInitializers() returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "Implementation4._getInitializedVersion() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Implementation4._isInitializing() returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Implementation4.initialize() returns()": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "Implementation4.setValue(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "Implementation4.getValue() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "Implementation4.fallback() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "SafeMathMemoryCheck.addMemoryCheck() returns(uint)": {
        "lines": 12,
        "type": [
            "internal"
        ]
    },
    "SafeMathMemoryCheck.subMemoryCheck() returns(uint)": {
        "lines": 12,
        "type": [
            "internal"
        ]
    },
    "SafeMathMemoryCheck.mulMemoryCheck() returns(uint)": {
        "lines": 12,
        "type": [
            "internal"
        ]
    },
    "SafeMathMemoryCheck.divMemoryCheck() returns(uint)": {
        "lines": 12,
        "type": [
            "internal"
        ]
    },
    "SafeMathMemoryCheck.modMemoryCheck() returns(uint)": {
        "lines": 12,
        "type": [
            "internal"
        ]
    },
    "MigratableMockV1._disableInitializers() returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "MigratableMockV1._getInitializedVersion() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MigratableMockV1._isInitializing() returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MigratableMockV1.initialize(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "MigratableMockV2.initialize(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "MigratableMockV2._disableInitializers() returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "MigratableMockV2._getInitializedVersion() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MigratableMockV2._isInitializing() returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MigratableMockV2.migrate(uint,uint) returns()": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "MigratableMockV3.migrate(uint,uint) returns()": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "MigratableMockV3.initialize(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "MigratableMockV3._disableInitializers() returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "MigratableMockV3._getInitializedVersion() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MigratableMockV3._isInitializing() returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MigratableMockV3.migrate() returns()": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "StorageSlotMock.setBoolean(bytes32,bool) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "StorageSlotMock.setAddress(bytes32,address) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "StorageSlotMock.setBytes32(bytes32,bytes32) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "StorageSlotMock.setUint(bytes32,uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "StorageSlotMock.getBoolean(bytes32) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "StorageSlotMock.getAddress(bytes32) returns(address)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "StorageSlotMock.getBytes32(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "StorageSlotMock.getUint(bytes32) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "StorageSlotMock.setString(bytes32,string) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "StorageSlotMock.setStringStorage(uint,string) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "StorageSlotMock.getString(bytes32) returns(string)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "StorageSlotMock.getStringStorage(uint) returns(string)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "StorageSlotMock.setBytes(bytes32,bytes) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "StorageSlotMock.setBytesStorage(uint,bytes) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "StorageSlotMock.getBytes(bytes32) returns(bytes)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "StorageSlotMock.getBytesStorage(uint) returns(bytes)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "TimelockReentrant.disableReentrancy() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "TimelockReentrant.enableRentrancy(address,bytes) returns()": {
        "lines": 4,
        "type": [
            "external"
        ]
    },
    "TimelockReentrant.reenter() returns()": {
        "lines": 6,
        "type": [
            "external"
        ]
    },
    "TimersBlockNumberImpl.getDeadline() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "TimersBlockNumberImpl.setDeadline(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "TimersBlockNumberImpl.reset() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "TimersBlockNumberImpl.isUnset() returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "TimersBlockNumberImpl.isStarted() returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "TimersBlockNumberImpl.isPending() returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "TimersBlockNumberImpl.isExpired() returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "TimersTimestampImpl.getDeadline() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "TimersTimestampImpl.setDeadline(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "TimersTimestampImpl.reset() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "TimersTimestampImpl.isUnset() returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "TimersTimestampImpl.isStarted() returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "TimersTimestampImpl.isPending() returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "TimersTimestampImpl.isExpired() returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "VotesMock.clock() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "VotesMock.CLOCK_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "VotesMock.getVotes(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "VotesMock.getPastVotes(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "VotesMock.getPastTotalSupply(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "VotesMock._getTotalSupply() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "VotesMock.delegates(address) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "VotesMock.delegate(address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "VotesMock.delegateBySig(address,uint,uint,uint,bytes32,bytes32) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "VotesMock._delegate(address,address) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "VotesMock._transferVotingUnits(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "VotesMock._moveDelegateVotes(address,address,uint) returns()": {
        "lines": 20,
        "type": [
            "private"
        ]
    },
    "VotesMock._push(Checkpoints.Trace224,function(uint,uint) returns(uint),uint) returns(uint,uint)": {
        "lines": 7,
        "type": [
            "private"
        ]
    },
    "VotesMock._add(uint,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "VotesMock._subtract(uint,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "VotesMock._useNonce(address) returns(uint)": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "VotesMock.nonces(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "VotesMock.DOMAIN_SEPARATOR() returns(bytes32)": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "VotesMock._getVotingUnits(address) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "VotesMock.constructor(string,string) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "VotesMock._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "VotesMock._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "VotesMock._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "VotesMock.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "VotesMock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "VotesMock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "VotesMock.getTotalSupply() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "VotesMock.delegate(address,address) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "VotesMock._mint(address,uint) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "VotesMock._burn(uint) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "VotesMock.slitherConstructorConstantVariables() returns()": {
        "lines": 23,
        "type": [
            "internal"
        ]
    },
    "VotesTimestampMock.getTotalSupply() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "VotesTimestampMock.delegate(address,address) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "VotesTimestampMock._getVotingUnits(address) returns(uint)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "VotesTimestampMock._mint(address,uint) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "VotesTimestampMock._burn(uint) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "VotesTimestampMock.clock() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "VotesTimestampMock.CLOCK_MODE() returns(string)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "VotesTimestampMock.getVotes(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "VotesTimestampMock.getPastVotes(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "VotesTimestampMock.getPastTotalSupply(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "VotesTimestampMock._getTotalSupply() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "VotesTimestampMock.delegates(address) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "VotesTimestampMock.delegate(address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "VotesTimestampMock.delegateBySig(address,uint,uint,uint,bytes32,bytes32) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "VotesTimestampMock._delegate(address,address) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "VotesTimestampMock._transferVotingUnits(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "VotesTimestampMock._moveDelegateVotes(address,address,uint) returns()": {
        "lines": 20,
        "type": [
            "private"
        ]
    },
    "VotesTimestampMock._push(Checkpoints.Trace224,function(uint,uint) returns(uint),uint) returns(uint,uint)": {
        "lines": 7,
        "type": [
            "private"
        ]
    },
    "VotesTimestampMock._add(uint,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "VotesTimestampMock._subtract(uint,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "VotesTimestampMock._useNonce(address) returns(uint)": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "VotesTimestampMock.nonces(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "VotesTimestampMock.DOMAIN_SEPARATOR() returns(bytes32)": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "VotesTimestampMock.constructor(string,string) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "VotesTimestampMock._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "VotesTimestampMock._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "VotesTimestampMock._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "VotesTimestampMock.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "VotesTimestampMock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "VotesTimestampMock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "VotesTimestampMock.slitherConstructorConstantVariables() returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "CompTimelock.constructor(address,uint) returns()": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "CompTimelock.receive() returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "CompTimelock.setDelay(uint) returns()": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "CompTimelock.acceptAdmin() returns()": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "CompTimelock.setPendingAdmin(address) returns()": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "CompTimelock.queueTransaction(address,uint,string,bytes,uint) returns(bytes32)": {
        "lines": 17,
        "type": [
            "public"
        ]
    },
    "CompTimelock.cancelTransaction(address,uint,string,bytes,uint) returns()": {
        "lines": 12,
        "type": [
            "public"
        ]
    },
    "CompTimelock.executeTransaction(address,uint,string,bytes,uint) returns(bytes)": {
        "lines": 25,
        "type": [
            "public"
        ]
    },
    "CompTimelock.getBlockTimestamp() returns(uint)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "CompTimelock.slitherConstructorConstantVariables() returns()": {
        "lines": 119,
        "type": [
            "internal"
        ]
    },
    "BaseRelayMock.relayAs(address,bytes,address) returns()": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "BridgeAMBMock.relayAs(address,bytes,address) returns()": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "BridgeAMBMock.messageSender() returns(address)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "BridgeArbitrumL1Mock.relayAs(address,bytes,address) returns()": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "BridgeArbitrumL1Mock.activeOutbox() returns(address)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "BridgeArbitrumL1Mock.currentSender() returns(address)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "BridgeArbitrumL1Mock.slitherConstructorVariables() returns()": {
        "lines": 12,
        "type": [
            "internal"
        ]
    },
    "BridgeArbitrumL1Inbox.slitherConstructorVariables() returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "BridgeArbitrumL1Outbox.l2ToL1Sender() returns(address)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "BridgeArbitrumL1Outbox.slitherConstructorVariables() returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "BridgeArbitrumL2Mock.relayAs(address,bytes,address) returns()": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "BridgeArbitrumL2Mock.wasMyCallersAddressAliased() returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "BridgeArbitrumL2Mock.myCallersAddressWithoutAliasing() returns(address)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "BridgeOptimismMock.relayAs(address,bytes,address) returns()": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "BridgeOptimismMock.xDomainMessageSender() returns(address)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "BridgePolygonChildMock.relayAs(address,bytes,address) returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "Receiver._isCrossChain() returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "Receiver._crossChainSender() returns(address)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "Receiver.crossChainRestricted() returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "Receiver.crossChainOwnerRestricted() returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "Receiver.slitherConstructorVariables() returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledAMBMock.constructor(address) returns()": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "CrossChainEnabledAMBMock._isCrossChain() returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledAMBMock._crossChainSender() returns(address)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledAMBMock.crossChainRestricted() returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "CrossChainEnabledAMBMock.crossChainOwnerRestricted() returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "CrossChainEnabledAMBMock.slitherConstructorVariables() returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledArbitrumL1Mock.constructor(address) returns()": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "CrossChainEnabledArbitrumL1Mock._isCrossChain() returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledArbitrumL1Mock._crossChainSender() returns(address)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledArbitrumL1Mock.crossChainRestricted() returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "CrossChainEnabledArbitrumL1Mock.crossChainOwnerRestricted() returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "CrossChainEnabledArbitrumL1Mock.slitherConstructorVariables() returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledArbitrumL2Mock._isCrossChain() returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledArbitrumL2Mock._crossChainSender() returns(address)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledArbitrumL2Mock.crossChainRestricted() returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "CrossChainEnabledArbitrumL2Mock.crossChainOwnerRestricted() returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "CrossChainEnabledArbitrumL2Mock.slitherConstructorVariables() returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledOptimismMock.constructor(address) returns()": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "CrossChainEnabledOptimismMock._isCrossChain() returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledOptimismMock._crossChainSender() returns(address)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledOptimismMock.crossChainRestricted() returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "CrossChainEnabledOptimismMock.crossChainOwnerRestricted() returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "CrossChainEnabledOptimismMock.slitherConstructorVariables() returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledPolygonChildMock.constructor(address) returns()": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "CrossChainEnabledPolygonChildMock._isCrossChain() returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledPolygonChildMock._crossChainSender() returns(address)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledPolygonChildMock.processMessageFromRoot(uint,address,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "CrossChainEnabledPolygonChildMock.constructor() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledPolygonChildMock._nonReentrantBefore() returns()": {
        "lines": 6,
        "type": [
            "private"
        ]
    },
    "CrossChainEnabledPolygonChildMock._nonReentrantAfter() returns()": {
        "lines": 5,
        "type": [
            "private"
        ]
    },
    "CrossChainEnabledPolygonChildMock._reentrancyGuardEntered() returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledPolygonChildMock.crossChainRestricted() returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "CrossChainEnabledPolygonChildMock.crossChainOwnerRestricted() returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "CrossChainEnabledPolygonChildMock.slitherConstructorVariables() returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "CrossChainEnabledPolygonChildMock.slitherConstructorConstantVariables() returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC4626Fees.constructor(IERC20) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC4626Fees._tryGetAssetDecimals(IERC20) returns(bool,uint)": {
        "lines": 12,
        "type": [
            "private"
        ]
    },
    "ERC4626Fees.decimals() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626Fees.asset() returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC4626Fees.totalAssets() returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626Fees.convertToShares(uint) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626Fees.convertToAssets(uint) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626Fees.maxDeposit(address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626Fees.maxMint(address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626Fees.maxWithdraw(address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626Fees.maxRedeem(address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626Fees.previewDeposit(uint) returns(uint)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC4626Fees.previewMint(uint) returns(uint)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC4626Fees.previewWithdraw(uint) returns(uint)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC4626Fees.previewRedeem(uint) returns(uint)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC4626Fees.deposit(uint,address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626Fees.mint(uint,address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626Fees.withdraw(uint,address,address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626Fees.redeem(uint,address,address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626Fees._convertToShares(uint,Math.Rounding) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC4626Fees._convertToAssets(uint,Math.Rounding) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC4626Fees._deposit(address,address,uint,uint) returns()": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "ERC4626Fees._withdraw(address,address,address,uint,uint) returns()": {
        "lines": 14,
        "type": [
            "internal"
        ]
    },
    "ERC4626Fees._decimalsOffset() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC4626Fees.name() returns(string)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626Fees.symbol() returns(string)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626Fees.totalSupply() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626Fees.balanceOf(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626Fees.transfer(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC4626Fees.allowance(address,address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626Fees.approve(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC4626Fees.transferFrom(address,address,uint) returns(bool)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "ERC4626Fees.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC4626Fees.increaseAllowance(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC4626Fees.decreaseAllowance(address,uint) returns(bool)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC4626Fees._transfer(address,address,uint) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC4626Fees._mint(address,uint) returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC4626Fees._burn(address,uint) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "ERC4626Fees._approve(address,address,uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC4626Fees._spendAllowance(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC4626Fees._beforeTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC4626Fees._afterTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC4626Fees._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC4626Fees._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC4626Fees._entryFeeBasePoint() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC4626Fees._entryFeeRecipient() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC4626Fees._exitFeeBasePoint() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC4626Fees._exitFeeRecipient() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC4626Fees._feeOnRaw(uint,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "ERC4626Fees._feeOnTotal(uint,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "GovernorCompMock.COUNTING_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompMock.hasVoted(uint,address) returns(bool)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompMock.proposalVotes(uint) returns(uint,uint,uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorCompMock._quorumReached(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorCompMock._voteSucceeded(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorCompMock._countVote(uint,address,uint,uint,bytes) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorCompMock.constructor(string) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorCompMock.receive() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "GovernorCompMock.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorCompMock.name() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompMock.version() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompMock.hashProposal(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorCompMock.state(uint) returns(IGovernor.ProposalState)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompMock.proposalThreshold() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorCompMock.proposalSnapshot(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompMock.proposalDeadline(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompMock.proposalProposer(uint) returns(address)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompMock._getVotes(address,uint,bytes) returns(uint)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorCompMock._defaultParams() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorCompMock.propose(address[],uint[],bytes[],string) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorCompMock.execute(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorCompMock.cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorCompMock._execute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "GovernorCompMock._beforeExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "GovernorCompMock._afterExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "GovernorCompMock._cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "GovernorCompMock.getVotes(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompMock.getVotesWithParams(address,uint,bytes) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorCompMock.castVote(uint,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompMock.castVoteWithReason(uint,uint,string) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorCompMock.castVoteWithReasonAndParams(uint,uint,string,bytes) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorCompMock.castVoteBySig(uint,uint,uint,bytes32,bytes32) returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorCompMock.castVoteWithReasonAndParamsBySig(uint,uint,string,bytes,uint,bytes32,bytes32) returns(uint)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "GovernorCompMock._castVote(uint,address,uint,string) returns(uint)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "GovernorCompMock._castVote(uint,address,uint,string,bytes) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "GovernorCompMock.relay(address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "external"
        ]
    },
    "GovernorCompMock._executor() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorCompMock.onERC721Received(address,address,uint,bytes) returns(bytes4)": {
        "lines": 6,
        "type": [
            "external"
        ]
    },
    "GovernorCompMock.onERC1155Received(address,address,uint,uint,bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorCompMock.onERC1155BatchReceived(address,address,uint[],uint[],bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorCompMock.clock() returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorCompMock.CLOCK_MODE() returns(string)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorCompMock.votingDelay() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorCompMock.votingPeriod() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorCompMock.quorum(uint) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorCompMock.constructor(string,string) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "GovernorCompMock._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorCompMock._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "GovernorCompMock._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorCompMock.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "GovernorCompMock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorCompMock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorCompMock.constructor(ERC20VotesComp) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorCompMock.slitherConstructorConstantVariables() returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravoMock.constructor(ERC20VotesComp) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravoMock.clock() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "GovernorCompatibilityBravoMock.CLOCK_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "GovernorCompatibilityBravoMock._getVotes(address,uint,bytes) returns(uint)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravoMock.constructor(string) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravoMock.receive() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "GovernorCompatibilityBravoMock.supportsInterface(bytes4) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock.name() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock.version() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock.hashProposal(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock.state(uint) returns(IGovernor.ProposalState)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock.proposalThreshold() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock.proposalSnapshot(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock.proposalDeadline(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock.proposalProposer(uint) returns(address)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock._quorumReached(uint) returns(bool)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravoMock._voteSucceeded(uint) returns(bool)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravoMock._countVote(uint,address,uint,uint,bytes) returns()": {
        "lines": 23,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravoMock._defaultParams() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravoMock.propose(address[],uint[],bytes[],string) returns(uint)": {
        "lines": 8,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock.execute(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 8,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock.cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 8,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock._execute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravoMock._beforeExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravoMock._afterExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravoMock._cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravoMock.getVotes(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock.getVotesWithParams(address,uint,bytes) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock.castVote(uint,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock.castVoteWithReason(uint,uint,string) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock.castVoteWithReasonAndParams(uint,uint,string,bytes) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock.castVoteBySig(uint,uint,uint,bytes32,bytes32) returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock.castVoteWithReasonAndParamsBySig(uint,uint,string,bytes,uint,bytes32,bytes32) returns(uint)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock._castVote(uint,address,uint,string) returns(uint)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravoMock._castVote(uint,address,uint,string,bytes) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravoMock.relay(address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "external"
        ]
    },
    "GovernorCompatibilityBravoMock._executor() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravoMock.onERC721Received(address,address,uint,bytes) returns(bytes4)": {
        "lines": 6,
        "type": [
            "external"
        ]
    },
    "GovernorCompatibilityBravoMock.onERC1155Received(address,address,uint,uint,bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorCompatibilityBravoMock.onERC1155BatchReceived(address,address,uint[],uint[],bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorCompatibilityBravoMock.COUNTING_MODE() returns(string)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock.votingDelay() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock.votingPeriod() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock.quorum(uint) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock.hasVoted(uint,address) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock.constructor(string,string) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravoMock._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravoMock._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "GovernorCompatibilityBravoMock._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravoMock.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "GovernorCompatibilityBravoMock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravoMock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravoMock.constructor(ICompoundTimelock) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravoMock.timelock() returns(address)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock.proposalEta(uint) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock.queue(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 8,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock.__acceptAdmin() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock.updateTimelock(ICompoundTimelock) returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "GovernorCompatibilityBravoMock._updateTimelock(ICompoundTimelock) returns()": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "GovernorCompatibilityBravoMock.constructor(uint,uint,uint) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravoMock.setVotingDelay(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock.setVotingPeriod(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock.setProposalThreshold(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock._setVotingDelay(uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravoMock._setVotingPeriod(uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravoMock._setProposalThreshold(uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "GovernorCompatibilityBravoMock.propose(address[],uint[],string[],bytes[],string) returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock.queue(uint) returns()": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock.execute(uint) returns()": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock.cancel(uint) returns()": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock._encodeCalldata(string[],bytes[]) returns(bytes[])": {
        "lines": 12,
        "type": [
            "private"
        ]
    },
    "GovernorCompatibilityBravoMock._getProposalParameters(uint) returns(address[],uint[],bytes[],bytes32)": {
        "lines": 15,
        "type": [
            "private"
        ]
    },
    "GovernorCompatibilityBravoMock._storeProposal(address,address[],uint[],string[],bytes[],string) returns()": {
        "lines": 20,
        "type": [
            "private"
        ]
    },
    "GovernorCompatibilityBravoMock.proposals(uint) returns(uint,address,uint,uint,uint,uint,uint,uint,bool,bool)": {
        "lines": 18,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock.getActions(uint) returns(address[],uint[],string[],bytes[])": {
        "lines": 12,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock.getReceipt(uint,address) returns(IGovernorCompatibilityBravo.Receipt)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock.quorumVotes() returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorCompatibilityBravoMock.slitherConstructorConstantVariables() returns()": {
        "lines": 80,
        "type": [
            "internal"
        ]
    },
    "GovernorMock.COUNTING_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorMock.hasVoted(uint,address) returns(bool)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorMock.proposalVotes(uint) returns(uint,uint,uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorMock._quorumReached(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorMock._voteSucceeded(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorMock._countVote(uint,address,uint,uint,bytes) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorMock.constructor(string) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorMock.receive() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "GovernorMock.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorMock.name() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorMock.version() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorMock.hashProposal(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorMock.state(uint) returns(IGovernor.ProposalState)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorMock.proposalThreshold() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorMock.proposalSnapshot(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorMock.proposalDeadline(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorMock.proposalProposer(uint) returns(address)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorMock._getVotes(address,uint,bytes) returns(uint)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorMock._defaultParams() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorMock.propose(address[],uint[],bytes[],string) returns(uint)": {
        "lines": 8,
        "type": [
            "public"
        ]
    },
    "GovernorMock.execute(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorMock.cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorMock._execute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "GovernorMock._beforeExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "GovernorMock._afterExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "GovernorMock._cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "GovernorMock.getVotes(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorMock.getVotesWithParams(address,uint,bytes) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorMock.castVote(uint,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorMock.castVoteWithReason(uint,uint,string) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorMock.castVoteWithReasonAndParams(uint,uint,string,bytes) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorMock.castVoteBySig(uint,uint,uint,bytes32,bytes32) returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorMock.castVoteWithReasonAndParamsBySig(uint,uint,string,bytes,uint,bytes32,bytes32) returns(uint)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "GovernorMock._castVote(uint,address,uint,string) returns(uint)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "GovernorMock._castVote(uint,address,uint,string,bytes) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "GovernorMock.relay(address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "external"
        ]
    },
    "GovernorMock._executor() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorMock.onERC721Received(address,address,uint,bytes) returns(bytes4)": {
        "lines": 6,
        "type": [
            "external"
        ]
    },
    "GovernorMock.onERC1155Received(address,address,uint,uint,bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorMock.onERC1155BatchReceived(address,address,uint[],uint[],bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorMock.clock() returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorMock.CLOCK_MODE() returns(string)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorMock.votingDelay() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorMock.votingPeriod() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorMock.quorum(uint) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorMock.constructor(string,string) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "GovernorMock._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorMock._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "GovernorMock._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorMock.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "GovernorMock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorMock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorMock.constructor(uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorMock.quorumNumerator() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorMock.quorumNumerator(uint) returns(uint)": {
        "lines": 14,
        "type": [
            "public"
        ]
    },
    "GovernorMock.quorumDenominator() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorMock.updateQuorumNumerator(uint) returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "GovernorMock._updateQuorumNumerator(uint) returns()": {
        "lines": 16,
        "type": [
            "internal"
        ]
    },
    "GovernorMock.constructor(IVotes) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorMock.constructor(uint,uint,uint) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "GovernorMock.setVotingDelay(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorMock.setVotingPeriod(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorMock.setProposalThreshold(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorMock._setVotingDelay(uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "GovernorMock._setVotingPeriod(uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "GovernorMock._setProposalThreshold(uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "GovernorMock.slitherConstructorConstantVariables() returns()": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorumMock.constructor(uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorumMock.proposalDeadline(uint) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorumMock._castVote(uint,address,uint,string,bytes) returns(uint)": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorumMock.lateQuorumVoteExtension() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorumMock.setLateQuorumVoteExtension(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorumMock._setLateQuorumVoteExtension(uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorumMock.constructor(string) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorumMock.receive() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "GovernorPreventLateQuorumMock.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorumMock.name() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorumMock.version() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorumMock.hashProposal(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorumMock.state(uint) returns(IGovernor.ProposalState)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorumMock.proposalThreshold() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorumMock.proposalSnapshot(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorumMock.proposalProposer(uint) returns(address)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorumMock._quorumReached(uint) returns(bool)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorumMock._voteSucceeded(uint) returns(bool)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorumMock._getVotes(address,uint,bytes) returns(uint)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorumMock._countVote(uint,address,uint,uint,bytes) returns()": {
        "lines": 20,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorumMock._defaultParams() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorumMock.propose(address[],uint[],bytes[],string) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorumMock.execute(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorumMock.cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorumMock._execute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorumMock._beforeExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorumMock._afterExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorumMock._cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorumMock.getVotes(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorumMock.getVotesWithParams(address,uint,bytes) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorumMock.castVote(uint,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorumMock.castVoteWithReason(uint,uint,string) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorumMock.castVoteWithReasonAndParams(uint,uint,string,bytes) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorumMock.castVoteBySig(uint,uint,uint,bytes32,bytes32) returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorumMock.castVoteWithReasonAndParamsBySig(uint,uint,string,bytes,uint,bytes32,bytes32) returns(uint)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorumMock._castVote(uint,address,uint,string) returns(uint)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorumMock.relay(address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "external"
        ]
    },
    "GovernorPreventLateQuorumMock._executor() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorumMock.onERC721Received(address,address,uint,bytes) returns(bytes4)": {
        "lines": 6,
        "type": [
            "external"
        ]
    },
    "GovernorPreventLateQuorumMock.onERC1155Received(address,address,uint,uint,bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorPreventLateQuorumMock.onERC1155BatchReceived(address,address,uint[],uint[],bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorPreventLateQuorumMock.clock() returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorumMock.CLOCK_MODE() returns(string)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorumMock.COUNTING_MODE() returns(string)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorumMock.votingDelay() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorumMock.votingPeriod() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorumMock.quorum(uint) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorumMock.hasVoted(uint,address) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorumMock.constructor(string,string) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorumMock._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorumMock._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "GovernorPreventLateQuorumMock._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorumMock.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "GovernorPreventLateQuorumMock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorumMock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorumMock.proposalVotes(uint) returns(uint,uint,uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorumMock.constructor(IVotes) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorumMock.constructor(uint,uint,uint) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorumMock.setVotingDelay(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorumMock.setVotingPeriod(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorumMock.setProposalThreshold(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorPreventLateQuorumMock._setVotingDelay(uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorumMock._setVotingPeriod(uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorumMock._setProposalThreshold(uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "GovernorPreventLateQuorumMock.slitherConstructorConstantVariables() returns()": {
        "lines": 31,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompoundMock.COUNTING_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock.hasVoted(uint,address) returns(bool)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock.proposalVotes(uint) returns(uint,uint,uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock._quorumReached(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompoundMock._voteSucceeded(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompoundMock._countVote(uint,address,uint,uint,bytes) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompoundMock.constructor(string) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompoundMock.receive() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockCompoundMock.supportsInterface(bytes4) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock.name() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock.version() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock.hashProposal(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock.state(uint) returns(IGovernor.ProposalState)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock.proposalThreshold() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock.proposalSnapshot(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock.proposalDeadline(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock.proposalProposer(uint) returns(address)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock._getVotes(address,uint,bytes) returns(uint)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompoundMock._defaultParams() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompoundMock.propose(address[],uint[],bytes[],string) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock.execute(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock.cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock._execute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompoundMock._beforeExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompoundMock._afterExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompoundMock._cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompoundMock.getVotes(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock.getVotesWithParams(address,uint,bytes) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock.castVote(uint,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock.castVoteWithReason(uint,uint,string) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock.castVoteWithReasonAndParams(uint,uint,string,bytes) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock.castVoteBySig(uint,uint,uint,bytes32,bytes32) returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock.castVoteWithReasonAndParamsBySig(uint,uint,string,bytes,uint,bytes32,bytes32) returns(uint)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock._castVote(uint,address,uint,string) returns(uint)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompoundMock._castVote(uint,address,uint,string,bytes) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompoundMock.relay(address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockCompoundMock._executor() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompoundMock.onERC721Received(address,address,uint,bytes) returns(bytes4)": {
        "lines": 6,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockCompoundMock.onERC1155Received(address,address,uint,uint,bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockCompoundMock.onERC1155BatchReceived(address,address,uint[],uint[],bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockCompoundMock.clock() returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock.CLOCK_MODE() returns(string)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock.votingDelay() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock.votingPeriod() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock.quorum(uint) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock.constructor(string,string) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompoundMock._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompoundMock._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "GovernorTimelockCompoundMock._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompoundMock.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockCompoundMock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompoundMock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompoundMock.constructor(uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompoundMock.quorumNumerator() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock.quorumNumerator(uint) returns(uint)": {
        "lines": 14,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock.quorumDenominator() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock.updateQuorumNumerator(uint) returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockCompoundMock._updateQuorumNumerator(uint) returns()": {
        "lines": 16,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompoundMock.constructor(IVotes) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompoundMock.constructor(ICompoundTimelock) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompoundMock.timelock() returns(address)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock.proposalEta(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock.queue(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock.__acceptAdmin() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock.updateTimelock(ICompoundTimelock) returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockCompoundMock._updateTimelock(ICompoundTimelock) returns()": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "GovernorTimelockCompoundMock.constructor(uint,uint,uint) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompoundMock.setVotingDelay(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock.setVotingPeriod(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock.setProposalThreshold(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockCompoundMock._setVotingDelay(uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompoundMock._setVotingPeriod(uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompoundMock._setProposalThreshold(uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockCompoundMock.slitherConstructorConstantVariables() returns()": {
        "lines": 45,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControlMock.COUNTING_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock.hasVoted(uint,address) returns(bool)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock.proposalVotes(uint) returns(uint,uint,uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock._quorumReached(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControlMock._voteSucceeded(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControlMock._countVote(uint,address,uint,uint,bytes) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControlMock.constructor(string) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControlMock.receive() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockControlMock.supportsInterface(bytes4) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock.name() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock.version() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock.hashProposal(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock.state(uint) returns(IGovernor.ProposalState)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock.proposalThreshold() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock.proposalSnapshot(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock.proposalDeadline(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock.proposalProposer(uint) returns(address)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock._getVotes(address,uint,bytes) returns(uint)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControlMock._defaultParams() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControlMock.propose(address[],uint[],bytes[],string) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock.execute(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock.cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock._execute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControlMock._beforeExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControlMock._afterExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControlMock._cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControlMock.getVotes(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock.getVotesWithParams(address,uint,bytes) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock.castVote(uint,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock.castVoteWithReason(uint,uint,string) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock.castVoteWithReasonAndParams(uint,uint,string,bytes) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock.castVoteBySig(uint,uint,uint,bytes32,bytes32) returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock.castVoteWithReasonAndParamsBySig(uint,uint,string,bytes,uint,bytes32,bytes32) returns(uint)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock._castVote(uint,address,uint,string) returns(uint)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControlMock._castVote(uint,address,uint,string,bytes) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControlMock.relay(address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockControlMock._executor() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControlMock.onERC721Received(address,address,uint,bytes) returns(bytes4)": {
        "lines": 6,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockControlMock.onERC1155Received(address,address,uint,uint,bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockControlMock.onERC1155BatchReceived(address,address,uint[],uint[],bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockControlMock.clock() returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock.CLOCK_MODE() returns(string)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock.votingDelay() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock.votingPeriod() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock.quorum(uint) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock.constructor(string,string) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControlMock._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControlMock._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "GovernorTimelockControlMock._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControlMock.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockControlMock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControlMock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControlMock.constructor(uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControlMock.quorumNumerator() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock.quorumNumerator(uint) returns(uint)": {
        "lines": 14,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock.quorumDenominator() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock.updateQuorumNumerator(uint) returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockControlMock._updateQuorumNumerator(uint) returns()": {
        "lines": 16,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControlMock.constructor(IVotes) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControlMock.constructor(TimelockController) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControlMock.timelock() returns(address)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock.proposalEta(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock.queue(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock.updateTimelock(TimelockController) returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockControlMock._updateTimelock(TimelockController) returns()": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "GovernorTimelockControlMock.constructor(uint,uint,uint) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControlMock.setVotingDelay(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock.setVotingPeriod(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock.setProposalThreshold(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorTimelockControlMock._setVotingDelay(uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControlMock._setVotingPeriod(uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControlMock._setProposalThreshold(uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "GovernorTimelockControlMock.nonGovernanceFunction() returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "GovernorTimelockControlMock.slitherConstructorConstantVariables() returns()": {
        "lines": 44,
        "type": [
            "internal"
        ]
    },
    "GovernorVoteMocks.COUNTING_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVoteMocks.hasVoted(uint,address) returns(bool)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVoteMocks.proposalVotes(uint) returns(uint,uint,uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorVoteMocks._quorumReached(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorVoteMocks._voteSucceeded(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorVoteMocks._countVote(uint,address,uint,uint,bytes) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorVoteMocks.constructor(string) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorVoteMocks.receive() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "GovernorVoteMocks.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorVoteMocks.name() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVoteMocks.version() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVoteMocks.hashProposal(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorVoteMocks.state(uint) returns(IGovernor.ProposalState)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVoteMocks.proposalThreshold() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorVoteMocks.proposalSnapshot(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVoteMocks.proposalDeadline(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVoteMocks.proposalProposer(uint) returns(address)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVoteMocks._getVotes(address,uint,bytes) returns(uint)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorVoteMocks._defaultParams() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorVoteMocks.propose(address[],uint[],bytes[],string) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorVoteMocks.execute(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorVoteMocks.cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorVoteMocks._execute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "GovernorVoteMocks._beforeExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "GovernorVoteMocks._afterExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "GovernorVoteMocks._cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "GovernorVoteMocks.getVotes(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVoteMocks.getVotesWithParams(address,uint,bytes) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorVoteMocks.castVote(uint,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorVoteMocks.castVoteWithReason(uint,uint,string) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorVoteMocks.castVoteWithReasonAndParams(uint,uint,string,bytes) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorVoteMocks.castVoteBySig(uint,uint,uint,bytes32,bytes32) returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorVoteMocks.castVoteWithReasonAndParamsBySig(uint,uint,string,bytes,uint,bytes32,bytes32) returns(uint)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "GovernorVoteMocks._castVote(uint,address,uint,string) returns(uint)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "GovernorVoteMocks._castVote(uint,address,uint,string,bytes) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "GovernorVoteMocks.relay(address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "external"
        ]
    },
    "GovernorVoteMocks._executor() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorVoteMocks.onERC721Received(address,address,uint,bytes) returns(bytes4)": {
        "lines": 6,
        "type": [
            "external"
        ]
    },
    "GovernorVoteMocks.onERC1155Received(address,address,uint,uint,bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorVoteMocks.onERC1155BatchReceived(address,address,uint[],uint[],bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorVoteMocks.clock() returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorVoteMocks.CLOCK_MODE() returns(string)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorVoteMocks.votingDelay() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorVoteMocks.votingPeriod() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorVoteMocks.quorum(uint) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorVoteMocks.constructor(string,string) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "GovernorVoteMocks._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorVoteMocks._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "GovernorVoteMocks._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorVoteMocks.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "GovernorVoteMocks._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorVoteMocks._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorVoteMocks.constructor(IVotes) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorVoteMocks.slitherConstructorConstantVariables() returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "GovernorWithParamsMock.COUNTING_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorWithParamsMock.hasVoted(uint,address) returns(bool)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorWithParamsMock.proposalVotes(uint) returns(uint,uint,uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorWithParamsMock._quorumReached(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorWithParamsMock._voteSucceeded(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "GovernorWithParamsMock._countVote(uint,address,uint,uint,bytes) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "GovernorWithParamsMock.constructor(string) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorWithParamsMock.receive() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "GovernorWithParamsMock.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorWithParamsMock.name() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorWithParamsMock.version() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorWithParamsMock.hashProposal(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorWithParamsMock.state(uint) returns(IGovernor.ProposalState)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorWithParamsMock.proposalThreshold() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorWithParamsMock.proposalSnapshot(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorWithParamsMock.proposalDeadline(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorWithParamsMock.proposalProposer(uint) returns(address)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorWithParamsMock._getVotes(address,uint,bytes) returns(uint)": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "GovernorWithParamsMock._defaultParams() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorWithParamsMock.propose(address[],uint[],bytes[],string) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorWithParamsMock.execute(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorWithParamsMock.cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorWithParamsMock._execute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "GovernorWithParamsMock._beforeExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "GovernorWithParamsMock._afterExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "GovernorWithParamsMock._cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "GovernorWithParamsMock.getVotes(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorWithParamsMock.getVotesWithParams(address,uint,bytes) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorWithParamsMock.castVote(uint,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "GovernorWithParamsMock.castVoteWithReason(uint,uint,string) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "GovernorWithParamsMock.castVoteWithReasonAndParams(uint,uint,string,bytes) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "GovernorWithParamsMock.castVoteBySig(uint,uint,uint,bytes32,bytes32) returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorWithParamsMock.castVoteWithReasonAndParamsBySig(uint,uint,string,bytes,uint,bytes32,bytes32) returns(uint)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "GovernorWithParamsMock._castVote(uint,address,uint,string) returns(uint)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "GovernorWithParamsMock._castVote(uint,address,uint,string,bytes) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "GovernorWithParamsMock.relay(address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "external"
        ]
    },
    "GovernorWithParamsMock._executor() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorWithParamsMock.onERC721Received(address,address,uint,bytes) returns(bytes4)": {
        "lines": 6,
        "type": [
            "external"
        ]
    },
    "GovernorWithParamsMock.onERC1155Received(address,address,uint,uint,bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorWithParamsMock.onERC1155BatchReceived(address,address,uint[],uint[],bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "GovernorWithParamsMock.clock() returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorWithParamsMock.CLOCK_MODE() returns(string)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "GovernorWithParamsMock.votingDelay() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorWithParamsMock.votingPeriod() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorWithParamsMock.quorum(uint) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "GovernorWithParamsMock.constructor(string,string) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "GovernorWithParamsMock._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "GovernorWithParamsMock._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "GovernorWithParamsMock._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorWithParamsMock.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "GovernorWithParamsMock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorWithParamsMock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorWithParamsMock.constructor(IVotes) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "GovernorWithParamsMock.slitherConstructorConstantVariables() returns()": {
        "lines": 38,
        "type": [
            "internal"
        ]
    },
    "BadBeaconNotContract.implementation() returns(address)": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "ClashingImplementation.admin() returns(address)": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "ClashingImplementation.delegatedFunction() returns(bool)": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "UUPSUpgradeableLegacyMock._authorizeUpgrade(address) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeableLegacyMock.proxiableUUID() returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "UUPSUpgradeableLegacyMock.upgradeTo(address) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "UUPSUpgradeableLegacyMock.upgradeToAndCall(address,bytes) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "UUPSUpgradeableLegacyMock._getImplementation() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeableLegacyMock._setImplementation(address) returns()": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "UUPSUpgradeableLegacyMock._upgradeTo(address) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeableLegacyMock._upgradeToAndCall(address,bytes,bool) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeableLegacyMock._upgradeToAndCallUUPS(address,bytes,bool) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeableLegacyMock._getAdmin() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeableLegacyMock._setAdmin(address) returns()": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "UUPSUpgradeableLegacyMock._changeAdmin(address) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeableLegacyMock._getBeacon() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeableLegacyMock._setBeacon(address) returns()": {
        "lines": 8,
        "type": [
            "private"
        ]
    },
    "UUPSUpgradeableLegacyMock._upgradeBeaconToAndCall(address,bytes,bool) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeableLegacyMock.current() returns(uint)": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "UUPSUpgradeableLegacyMock.increment() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "UUPSUpgradeableLegacyMock.__setImplementation(address) returns()": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1(address,bytes,bool) returns()": {
        "lines": 23,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeableLegacyMock.slitherConstructorVariables() returns()": {
        "lines": 40,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeableLegacyMock.slitherConstructorConstantVariables() returns()": {
        "lines": 40,
        "type": [
            "internal"
        ]
    },
    "NonUpgradeableMock.current() returns(uint)": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "NonUpgradeableMock.increment() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "UUPSUpgradeableMock.proxiableUUID() returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "UUPSUpgradeableMock.upgradeTo(address) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "UUPSUpgradeableMock.upgradeToAndCall(address,bytes) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "UUPSUpgradeableMock._authorizeUpgrade(address) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeableMock._getImplementation() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeableMock._setImplementation(address) returns()": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "UUPSUpgradeableMock._upgradeTo(address) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeableMock._upgradeToAndCall(address,bytes,bool) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeableMock._upgradeToAndCallUUPS(address,bytes,bool) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeableMock._getAdmin() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeableMock._setAdmin(address) returns()": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "UUPSUpgradeableMock._changeAdmin(address) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeableMock._getBeacon() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeableMock._setBeacon(address) returns()": {
        "lines": 8,
        "type": [
            "private"
        ]
    },
    "UUPSUpgradeableMock._upgradeBeaconToAndCall(address,bytes,bool) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeableMock.current() returns(uint)": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "UUPSUpgradeableMock.increment() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "UUPSUpgradeableMock.slitherConstructorVariables() returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeableMock.slitherConstructorConstantVariables() returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeableUnsafeMock._authorizeUpgrade(address) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeableUnsafeMock.proxiableUUID() returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "UUPSUpgradeableUnsafeMock.upgradeTo(address) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "UUPSUpgradeableUnsafeMock.upgradeToAndCall(address,bytes) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "UUPSUpgradeableUnsafeMock._getImplementation() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeableUnsafeMock._setImplementation(address) returns()": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "UUPSUpgradeableUnsafeMock._upgradeTo(address) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeableUnsafeMock._upgradeToAndCall(address,bytes,bool) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeableUnsafeMock._upgradeToAndCallUUPS(address,bytes,bool) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeableUnsafeMock._getAdmin() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeableUnsafeMock._setAdmin(address) returns()": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "UUPSUpgradeableUnsafeMock._changeAdmin(address) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeableUnsafeMock._getBeacon() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeableUnsafeMock._setBeacon(address) returns()": {
        "lines": 8,
        "type": [
            "private"
        ]
    },
    "UUPSUpgradeableUnsafeMock._upgradeBeaconToAndCall(address,bytes,bool) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeableUnsafeMock.current() returns(uint)": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "UUPSUpgradeableUnsafeMock.increment() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "UUPSUpgradeableUnsafeMock.slitherConstructorVariables() returns()": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeableUnsafeMock.slitherConstructorConstantVariables() returns()": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "ERC1155ReceiverMock.onERC1155Received(address,address,uint,uint,bytes) returns(bytes4)": {
        "lines": 11,
        "type": [
            "external"
        ]
    },
    "ERC1155ReceiverMock.onERC1155BatchReceived(address,address,uint[],uint[],bytes) returns(bytes4)": {
        "lines": 11,
        "type": [
            "external"
        ]
    },
    "ERC1155ReceiverMock.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC1155ReceiverMock.constructor(bytes4,bool,bytes4,bool) returns()": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "ERC20DecimalsMock.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20DecimalsMock.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20DecimalsMock.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20DecimalsMock.decimals() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20DecimalsMock.totalSupply() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20DecimalsMock.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20DecimalsMock.transfer(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20DecimalsMock.allowance(address,address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20DecimalsMock.approve(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20DecimalsMock.transferFrom(address,address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20DecimalsMock.increaseAllowance(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC20DecimalsMock.decreaseAllowance(address,uint) returns(bool)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC20DecimalsMock._transfer(address,address,uint) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC20DecimalsMock._mint(address,uint) returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC20DecimalsMock._burn(address,uint) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "ERC20DecimalsMock._approve(address,address,uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC20DecimalsMock._spendAllowance(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC20DecimalsMock._beforeTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20DecimalsMock._afterTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20DecimalsMock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20DecimalsMock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20DecimalsMock.constructor(uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20ExcessDecimalsMock.decimals() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20FlashMintMock.maxFlashLoan(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20FlashMintMock.flashFee(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20FlashMintMock._flashFee(address,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20FlashMintMock._flashFeeReceiver() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20FlashMintMock.flashLoan(IERC3156FlashBorrower,address,uint,bytes) returns(bool)": {
        "lines": 6,
        "type": [
            "external"
        ]
    },
    "ERC20FlashMintMock.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20FlashMintMock.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20FlashMintMock.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20FlashMintMock.decimals() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20FlashMintMock.totalSupply() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20FlashMintMock.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20FlashMintMock.transfer(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20FlashMintMock.allowance(address,address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20FlashMintMock.approve(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20FlashMintMock.transferFrom(address,address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20FlashMintMock.increaseAllowance(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC20FlashMintMock.decreaseAllowance(address,uint) returns(bool)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC20FlashMintMock._transfer(address,address,uint) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC20FlashMintMock._mint(address,uint) returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC20FlashMintMock._burn(address,uint) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "ERC20FlashMintMock._approve(address,address,uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC20FlashMintMock._spendAllowance(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC20FlashMintMock._beforeTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20FlashMintMock._afterTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20FlashMintMock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20FlashMintMock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20FlashMintMock.setFlashFee(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20FlashMintMock.setFlashFeeReceiver(address) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20FlashMintMock.slitherConstructorConstantVariables() returns()": {
        "lines": 16,
        "type": [
            "internal"
        ]
    },
    "ERC20ForceApproveMock.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20ForceApproveMock.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20ForceApproveMock.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20ForceApproveMock.decimals() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20ForceApproveMock.totalSupply() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20ForceApproveMock.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20ForceApproveMock.transfer(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20ForceApproveMock.allowance(address,address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20ForceApproveMock.approve(address,uint) returns(bool)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20ForceApproveMock.transferFrom(address,address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20ForceApproveMock.increaseAllowance(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC20ForceApproveMock.decreaseAllowance(address,uint) returns(bool)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC20ForceApproveMock._transfer(address,address,uint) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC20ForceApproveMock._mint(address,uint) returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC20ForceApproveMock._burn(address,uint) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "ERC20ForceApproveMock._approve(address,address,uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC20ForceApproveMock._spendAllowance(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC20ForceApproveMock._beforeTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20ForceApproveMock._afterTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20ForceApproveMock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20ForceApproveMock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20MulticallMock.multicall(bytes[]) returns(bytes[])": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "ERC20MulticallMock.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20MulticallMock.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20MulticallMock.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20MulticallMock.decimals() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20MulticallMock.totalSupply() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20MulticallMock.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20MulticallMock.transfer(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20MulticallMock.allowance(address,address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20MulticallMock.approve(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20MulticallMock.transferFrom(address,address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20MulticallMock.increaseAllowance(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC20MulticallMock.decreaseAllowance(address,uint) returns(bool)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC20MulticallMock._transfer(address,address,uint) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC20MulticallMock._mint(address,uint) returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC20MulticallMock._burn(address,uint) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "ERC20MulticallMock._approve(address,address,uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC20MulticallMock._spendAllowance(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC20MulticallMock._beforeTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20MulticallMock._afterTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20MulticallMock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20MulticallMock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20NoReturnMock.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20NoReturnMock.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20NoReturnMock.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20NoReturnMock.decimals() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20NoReturnMock.totalSupply() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20NoReturnMock.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20NoReturnMock.transfer(address,uint) returns(bool)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "ERC20NoReturnMock.allowance(address,address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20NoReturnMock.approve(address,uint) returns(bool)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "ERC20NoReturnMock.transferFrom(address,address,uint) returns(bool)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "ERC20NoReturnMock.increaseAllowance(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC20NoReturnMock.decreaseAllowance(address,uint) returns(bool)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC20NoReturnMock._transfer(address,address,uint) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC20NoReturnMock._mint(address,uint) returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC20NoReturnMock._burn(address,uint) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "ERC20NoReturnMock._approve(address,address,uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC20NoReturnMock._spendAllowance(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC20NoReturnMock._beforeTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20NoReturnMock._afterTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20NoReturnMock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20NoReturnMock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20PermitNoRevertMock.constructor(string) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20PermitNoRevertMock.permit(address,address,uint,uint,uint,bytes32,bytes32) returns()": {
        "lines": 15,
        "type": [
            "public"
        ]
    },
    "ERC20PermitNoRevertMock.nonces(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PermitNoRevertMock.DOMAIN_SEPARATOR() returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PermitNoRevertMock._useNonce(address) returns(uint)": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC20PermitNoRevertMock.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20PermitNoRevertMock._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC20PermitNoRevertMock._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "ERC20PermitNoRevertMock._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20PermitNoRevertMock.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "ERC20PermitNoRevertMock.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PermitNoRevertMock.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PermitNoRevertMock.decimals() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PermitNoRevertMock.totalSupply() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PermitNoRevertMock.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PermitNoRevertMock.transfer(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PermitNoRevertMock.allowance(address,address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PermitNoRevertMock.approve(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PermitNoRevertMock.transferFrom(address,address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PermitNoRevertMock.increaseAllowance(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC20PermitNoRevertMock.decreaseAllowance(address,uint) returns(bool)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC20PermitNoRevertMock._transfer(address,address,uint) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC20PermitNoRevertMock._mint(address,uint) returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC20PermitNoRevertMock._burn(address,uint) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "ERC20PermitNoRevertMock._approve(address,address,uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC20PermitNoRevertMock._spendAllowance(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC20PermitNoRevertMock._beforeTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20PermitNoRevertMock._afterTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20PermitNoRevertMock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20PermitNoRevertMock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20PermitNoRevertMock.permitThatMayRevert(address,address,uint,uint,uint,bytes32,bytes32) returns()": {
        "lines": 11,
        "type": [
            "public"
        ]
    },
    "ERC20PermitNoRevertMock.slitherConstructorConstantVariables() returns()": {
        "lines": 28,
        "type": [
            "internal"
        ]
    },
    "ERC20ReturnFalseMock.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20ReturnFalseMock.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20ReturnFalseMock.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20ReturnFalseMock.decimals() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20ReturnFalseMock.totalSupply() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20ReturnFalseMock.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20ReturnFalseMock.transfer(address,uint) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20ReturnFalseMock.allowance(address,address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20ReturnFalseMock.approve(address,uint) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20ReturnFalseMock.transferFrom(address,address,uint) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20ReturnFalseMock.increaseAllowance(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC20ReturnFalseMock.decreaseAllowance(address,uint) returns(bool)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC20ReturnFalseMock._transfer(address,address,uint) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC20ReturnFalseMock._mint(address,uint) returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC20ReturnFalseMock._burn(address,uint) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "ERC20ReturnFalseMock._approve(address,address,uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC20ReturnFalseMock._spendAllowance(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC20ReturnFalseMock._beforeTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20ReturnFalseMock._afterTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20ReturnFalseMock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20ReturnFalseMock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesLegacyMock.constructor(string) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesLegacyMock.permit(address,address,uint,uint,uint,bytes32,bytes32) returns()": {
        "lines": 9,
        "type": [
            "external"
        ]
    },
    "ERC20VotesLegacyMock.nonces(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesLegacyMock.DOMAIN_SEPARATOR() returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesLegacyMock._useNonce(address) returns(uint)": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesLegacyMock.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20VotesLegacyMock._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesLegacyMock._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "ERC20VotesLegacyMock._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesLegacyMock.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "ERC20VotesLegacyMock.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesLegacyMock.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesLegacyMock.decimals() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesLegacyMock.totalSupply() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesLegacyMock.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesLegacyMock.transfer(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesLegacyMock.allowance(address,address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesLegacyMock.approve(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesLegacyMock.transferFrom(address,address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesLegacyMock.increaseAllowance(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC20VotesLegacyMock.decreaseAllowance(address,uint) returns(bool)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC20VotesLegacyMock._transfer(address,address,uint) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesLegacyMock._mint(address,uint) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesLegacyMock._burn(address,uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesLegacyMock._approve(address,address,uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesLegacyMock._spendAllowance(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesLegacyMock._beforeTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesLegacyMock._afterTokenTransfer(address,address,uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesLegacyMock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesLegacyMock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesLegacyMock.getVotes(address) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "ERC20VotesLegacyMock.getPastVotes(address,uint) returns(uint)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20VotesLegacyMock.getPastTotalSupply(uint) returns(uint)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20VotesLegacyMock.delegates(address) returns(address)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20VotesLegacyMock.delegate(address) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20VotesLegacyMock.delegateBySig(address,uint,uint,uint,bytes32,bytes32) returns()": {
        "lines": 18,
        "type": [
            "public"
        ]
    },
    "ERC20VotesLegacyMock.checkpoints(address,uint) returns(ERC20VotesLegacyMock.Checkpoint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20VotesLegacyMock.numCheckpoints(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20VotesLegacyMock._checkpointsLookup(ERC20VotesLegacyMock.Checkpoint[],uint) returns(uint)": {
        "lines": 36,
        "type": [
            "private"
        ]
    },
    "ERC20VotesLegacyMock._maxSupply() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesLegacyMock._delegate(address,address) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesLegacyMock._moveVotingPower(address,address,uint) returns()": {
        "lines": 12,
        "type": [
            "private"
        ]
    },
    "ERC20VotesLegacyMock._writeCheckpoint(ERC20VotesLegacyMock.Checkpoint[],function(uint,uint) returns(uint),uint) returns(uint,uint)": {
        "lines": 19,
        "type": [
            "private"
        ]
    },
    "ERC20VotesLegacyMock._add(uint,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "ERC20VotesLegacyMock._subtract(uint,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "ERC20VotesLegacyMock._unsafeAccess(ERC20VotesLegacyMock.Checkpoint[],uint) returns(ERC20VotesLegacyMock.Checkpoint)": {
        "lines": 6,
        "type": [
            "private"
        ]
    },
    "ERC20VotesLegacyMock.slitherConstructorConstantVariables() returns()": {
        "lines": 215,
        "type": [
            "internal"
        ]
    },
    "ERC4626OffsetMock.constructor(IERC20) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC4626OffsetMock._tryGetAssetDecimals(IERC20) returns(bool,uint)": {
        "lines": 12,
        "type": [
            "private"
        ]
    },
    "ERC4626OffsetMock.decimals() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626OffsetMock.asset() returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC4626OffsetMock.totalAssets() returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626OffsetMock.convertToShares(uint) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626OffsetMock.convertToAssets(uint) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626OffsetMock.maxDeposit(address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626OffsetMock.maxMint(address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626OffsetMock.maxWithdraw(address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626OffsetMock.maxRedeem(address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626OffsetMock.previewDeposit(uint) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626OffsetMock.previewMint(uint) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626OffsetMock.previewWithdraw(uint) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626OffsetMock.previewRedeem(uint) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626OffsetMock.deposit(uint,address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626OffsetMock.mint(uint,address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626OffsetMock.withdraw(uint,address,address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626OffsetMock.redeem(uint,address,address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626OffsetMock._convertToShares(uint,Math.Rounding) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC4626OffsetMock._convertToAssets(uint,Math.Rounding) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC4626OffsetMock._deposit(address,address,uint,uint) returns()": {
        "lines": 12,
        "type": [
            "internal"
        ]
    },
    "ERC4626OffsetMock._withdraw(address,address,address,uint,uint) returns()": {
        "lines": 20,
        "type": [
            "internal"
        ]
    },
    "ERC4626OffsetMock._decimalsOffset() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC4626OffsetMock.name() returns(string)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626OffsetMock.symbol() returns(string)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626OffsetMock.totalSupply() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626OffsetMock.balanceOf(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626OffsetMock.transfer(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC4626OffsetMock.allowance(address,address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626OffsetMock.approve(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC4626OffsetMock.transferFrom(address,address,uint) returns(bool)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "ERC4626OffsetMock.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC4626OffsetMock.increaseAllowance(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC4626OffsetMock.decreaseAllowance(address,uint) returns(bool)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC4626OffsetMock._transfer(address,address,uint) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC4626OffsetMock._mint(address,uint) returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC4626OffsetMock._burn(address,uint) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "ERC4626OffsetMock._approve(address,address,uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC4626OffsetMock._spendAllowance(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC4626OffsetMock._beforeTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC4626OffsetMock._afterTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC4626OffsetMock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC4626OffsetMock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC4626OffsetMock.constructor(uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC4626FeesMock.previewDeposit(uint) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626FeesMock.previewMint(uint) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626FeesMock.previewWithdraw(uint) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626FeesMock.previewRedeem(uint) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626FeesMock._deposit(address,address,uint,uint) returns()": {
        "lines": 12,
        "type": [
            "internal"
        ]
    },
    "ERC4626FeesMock._withdraw(address,address,address,uint,uint) returns()": {
        "lines": 20,
        "type": [
            "internal"
        ]
    },
    "ERC4626FeesMock._entryFeeBasePoint() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC4626FeesMock._entryFeeRecipient() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC4626FeesMock._exitFeeBasePoint() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC4626FeesMock._exitFeeRecipient() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC4626FeesMock._feeOnRaw(uint,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "ERC4626FeesMock._feeOnTotal(uint,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "ERC4626FeesMock.constructor(IERC20) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC4626FeesMock._tryGetAssetDecimals(IERC20) returns(bool,uint)": {
        "lines": 12,
        "type": [
            "private"
        ]
    },
    "ERC4626FeesMock.decimals() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626FeesMock.asset() returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC4626FeesMock.totalAssets() returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626FeesMock.convertToShares(uint) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626FeesMock.convertToAssets(uint) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626FeesMock.maxDeposit(address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626FeesMock.maxMint(address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626FeesMock.maxWithdraw(address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626FeesMock.maxRedeem(address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626FeesMock.deposit(uint,address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626FeesMock.mint(uint,address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626FeesMock.withdraw(uint,address,address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626FeesMock.redeem(uint,address,address) returns(uint)": {
        "lines": 0,
        "type": [
            "external"
        ]
    },
    "ERC4626FeesMock._convertToShares(uint,Math.Rounding) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC4626FeesMock._convertToAssets(uint,Math.Rounding) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC4626FeesMock._decimalsOffset() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC4626FeesMock.name() returns(string)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626FeesMock.symbol() returns(string)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626FeesMock.totalSupply() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626FeesMock.balanceOf(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626FeesMock.transfer(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC4626FeesMock.allowance(address,address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626FeesMock.approve(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC4626FeesMock.transferFrom(address,address,uint) returns(bool)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "ERC4626FeesMock.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC4626FeesMock.increaseAllowance(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC4626FeesMock.decreaseAllowance(address,uint) returns(bool)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC4626FeesMock._transfer(address,address,uint) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC4626FeesMock._mint(address,uint) returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC4626FeesMock._burn(address,uint) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "ERC4626FeesMock._approve(address,address,uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC4626FeesMock._spendAllowance(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC4626FeesMock._beforeTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC4626FeesMock._afterTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC4626FeesMock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC4626FeesMock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC4626FeesMock.constructor(uint,address,uint,address) returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveEnumerableMock.supportsInterface(bytes4) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC721ConsecutiveEnumerableMock.tokenOfOwnerByIndex(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveEnumerableMock.totalSupply() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveEnumerableMock.tokenByIndex(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveEnumerableMock._beforeTokenTransfer(address,address,uint,uint) returns()": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveEnumerableMock._addTokenToOwnerEnumeration(address,uint) returns()": {
        "lines": 5,
        "type": [
            "private"
        ]
    },
    "ERC721ConsecutiveEnumerableMock._addTokenToAllTokensEnumeration(uint) returns()": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "ERC721ConsecutiveEnumerableMock._removeTokenFromOwnerEnumeration(address,uint) returns()": {
        "lines": 15,
        "type": [
            "private"
        ]
    },
    "ERC721ConsecutiveEnumerableMock._removeTokenFromAllTokensEnumeration(uint) returns()": {
        "lines": 15,
        "type": [
            "private"
        ]
    },
    "ERC721ConsecutiveEnumerableMock.balanceOf(address) returns(uint)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC721ConsecutiveEnumerableMock.ownerOf(uint) returns(address)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC721ConsecutiveEnumerableMock.safeTransferFrom(address,address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC721ConsecutiveEnumerableMock.safeTransferFrom(address,address,uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC721ConsecutiveEnumerableMock.transferFrom(address,address,uint) returns()": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC721ConsecutiveEnumerableMock.approve(address,uint) returns()": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC721ConsecutiveEnumerableMock.setApprovalForAll(address,bool) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC721ConsecutiveEnumerableMock.getApproved(uint) returns(address)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC721ConsecutiveEnumerableMock.isApprovedForAll(address,address) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC721ConsecutiveEnumerableMock.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC721ConsecutiveEnumerableMock.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveEnumerableMock.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveEnumerableMock.tokenURI(uint) returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveEnumerableMock._baseURI() returns(string)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveEnumerableMock._safeTransfer(address,address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveEnumerableMock._ownerOf(uint) returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveEnumerableMock._exists(uint) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveEnumerableMock._isApprovedOrOwner(address,uint) returns(bool)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveEnumerableMock._safeMint(address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveEnumerableMock._safeMint(address,uint,bytes) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveEnumerableMock._mint(address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveEnumerableMock._burn(uint) returns()": {
        "lines": 16,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveEnumerableMock._transfer(address,address,uint) returns()": {
        "lines": 21,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveEnumerableMock._approve(address,uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveEnumerableMock._setApprovalForAll(address,address,bool) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveEnumerableMock._requireMinted(uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveEnumerableMock._checkOnERC721Received(address,address,uint,bytes) returns(bool)": {
        "lines": 23,
        "type": [
            "private"
        ]
    },
    "ERC721ConsecutiveEnumerableMock._afterTokenTransfer(address,address,uint,uint) returns()": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveEnumerableMock.__unsafe_increaseBalance(address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveEnumerableMock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveEnumerableMock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveEnumerableMock._maxBatchSize() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveEnumerableMock._mintConsecutive(address,uint) returns(uint)": {
        "lines": 21,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveEnumerableMock._totalConsecutiveSupply() returns(uint)": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "ERC721ConsecutiveEnumerableMock.constructor(string,string,address[],uint[]) returns()": {
        "lines": 10,
        "type": [
            "public"
        ]
    },
    "ERC721ConsecutiveMock._afterTokenTransfer(address,address,uint,uint) returns()": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveMock._getVotingUnits(address) returns(uint)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveMock.clock() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveMock.CLOCK_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveMock.getVotes(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveMock.getPastVotes(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveMock.getPastTotalSupply(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveMock._getTotalSupply() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveMock.delegates(address) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveMock.delegate(address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveMock.delegateBySig(address,uint,uint,uint,bytes32,bytes32) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveMock._delegate(address,address) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveMock._transferVotingUnits(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveMock._moveDelegateVotes(address,address,uint) returns()": {
        "lines": 20,
        "type": [
            "private"
        ]
    },
    "ERC721ConsecutiveMock._push(Checkpoints.Trace224,function(uint,uint) returns(uint),uint) returns(uint,uint)": {
        "lines": 7,
        "type": [
            "private"
        ]
    },
    "ERC721ConsecutiveMock._add(uint,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "ERC721ConsecutiveMock._subtract(uint,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "ERC721ConsecutiveMock._useNonce(address) returns(uint)": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveMock.nonces(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC721ConsecutiveMock.DOMAIN_SEPARATOR() returns(bytes32)": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveMock.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC721ConsecutiveMock._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveMock._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "ERC721ConsecutiveMock._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveMock.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveMock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveMock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveMock.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC721ConsecutiveMock.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveMock.ownerOf(uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveMock.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveMock.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveMock.tokenURI(uint) returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveMock._baseURI() returns(string)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveMock.approve(address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveMock.getApproved(uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveMock.setApprovalForAll(address,bool) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveMock.isApprovedForAll(address,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveMock.transferFrom(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveMock.safeTransferFrom(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveMock.safeTransferFrom(address,address,uint,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveMock._safeTransfer(address,address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveMock._ownerOf(uint) returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveMock._exists(uint) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveMock._isApprovedOrOwner(address,uint) returns(bool)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveMock._safeMint(address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveMock._safeMint(address,uint,bytes) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveMock._mint(address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveMock._burn(uint) returns()": {
        "lines": 16,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveMock._transfer(address,address,uint) returns()": {
        "lines": 21,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveMock._approve(address,uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveMock._setApprovalForAll(address,address,bool) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveMock._requireMinted(uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveMock._checkOnERC721Received(address,address,uint,bytes) returns(bool)": {
        "lines": 23,
        "type": [
            "private"
        ]
    },
    "ERC721ConsecutiveMock._beforeTokenTransfer(address,address,uint,uint) returns()": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveMock.__unsafe_increaseBalance(address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveMock.constructor() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveMock.paused() returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC721ConsecutiveMock._requireNotPaused() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveMock._requirePaused() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveMock._pause() returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveMock._unpause() returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveMock._maxBatchSize() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveMock._mintConsecutive(address,uint) returns(uint)": {
        "lines": 21,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveMock._totalConsecutiveSupply() returns(uint)": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "ERC721ConsecutiveMock.constructor(string,string,address[],address[],uint[]) returns()": {
        "lines": 14,
        "type": [
            "public"
        ]
    },
    "ERC721ConsecutiveMock.slitherConstructorConstantVariables() returns()": {
        "lines": 38,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock._maxBatchSize() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock._ownerOf(uint) returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock._mintConsecutive(address,uint) returns(uint)": {
        "lines": 21,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock._mint(address,uint) returns()": {
        "lines": 17,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock._afterTokenTransfer(address,address,uint,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock._totalConsecutiveSupply() returns(uint)": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock.constructor(string,string) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock.ownerOf(uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock.tokenURI(uint) returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock._baseURI() returns(string)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock.approve(address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock.getApproved(uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock.setApprovalForAll(address,bool) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock.isApprovedForAll(address,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock.transferFrom(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock.safeTransferFrom(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock.safeTransferFrom(address,address,uint,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock._safeTransfer(address,address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock._exists(uint) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock._isApprovedOrOwner(address,uint) returns(bool)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock._safeMint(address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock._safeMint(address,uint,bytes) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock._burn(uint) returns()": {
        "lines": 16,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock._transfer(address,address,uint) returns()": {
        "lines": 21,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock._approve(address,uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock._setApprovalForAll(address,address,bool) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock._requireMinted(uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock._checkOnERC721Received(address,address,uint,bytes) returns(bool)": {
        "lines": 23,
        "type": [
            "private"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock._beforeTokenTransfer(address,address,uint,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock.__unsafe_increaseBalance(address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721ConsecutiveNoConstructorMintMock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721ReceiverMock.onERC721Received(address,address,uint,bytes) returns(bytes4)": {
        "lines": 17,
        "type": [
            "public"
        ]
    },
    "ERC721ReceiverMock.constructor(bytes4,ERC721ReceiverMock.Error) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC721URIStorageMock.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC721URIStorageMock.tokenURI(uint) returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721URIStorageMock._setTokenURI(uint,string) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorageMock._burn(uint) returns()": {
        "lines": 16,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorageMock.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC721URIStorageMock.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721URIStorageMock.ownerOf(uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721URIStorageMock.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721URIStorageMock.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721URIStorageMock._baseURI() returns(string)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorageMock.approve(address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721URIStorageMock.getApproved(uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721URIStorageMock.setApprovalForAll(address,bool) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721URIStorageMock.isApprovedForAll(address,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721URIStorageMock.transferFrom(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721URIStorageMock.safeTransferFrom(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721URIStorageMock.safeTransferFrom(address,address,uint,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721URIStorageMock._safeTransfer(address,address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorageMock._ownerOf(uint) returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorageMock._exists(uint) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorageMock._isApprovedOrOwner(address,uint) returns(bool)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorageMock._safeMint(address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorageMock._safeMint(address,uint,bytes) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorageMock._mint(address,uint) returns()": {
        "lines": 17,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorageMock._transfer(address,address,uint) returns()": {
        "lines": 21,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorageMock._approve(address,uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorageMock._setApprovalForAll(address,address,bool) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorageMock._requireMinted(uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorageMock._checkOnERC721Received(address,address,uint,bytes) returns(bool)": {
        "lines": 23,
        "type": [
            "private"
        ]
    },
    "ERC721URIStorageMock._beforeTokenTransfer(address,address,uint,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorageMock._afterTokenTransfer(address,address,uint,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorageMock.__unsafe_increaseBalance(address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorageMock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorageMock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorageMock.setBaseURI(string) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC777Mock.constructor(string,string,address[]) returns()": {
        "lines": 11,
        "type": [
            "public"
        ]
    },
    "ERC777Mock.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC777Mock.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC777Mock.decimals() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC777Mock.granularity() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC777Mock.totalSupply() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC777Mock.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC777Mock.send(address,uint,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC777Mock.transfer(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC777Mock.burn(uint,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC777Mock.isOperatorFor(address,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC777Mock.authorizeOperator(address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC777Mock.revokeOperator(address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC777Mock.defaultOperators() returns(address[])": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC777Mock.operatorSend(address,address,uint,bytes,bytes) returns()": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "ERC777Mock.operatorBurn(address,uint,bytes,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC777Mock.allowance(address,address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC777Mock.approve(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC777Mock.transferFrom(address,address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC777Mock._mint(address,uint,bytes,bytes) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC777Mock._mint(address,uint,bytes,bytes,bool) returns()": {
        "lines": 17,
        "type": [
            "internal"
        ]
    },
    "ERC777Mock._send(address,address,uint,bytes,bytes,bool) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC777Mock._burn(address,uint,bytes,bytes) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC777Mock._move(address,address,address,uint,bytes,bytes) returns()": {
        "lines": 18,
        "type": [
            "private"
        ]
    },
    "ERC777Mock._approve(address,address,uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC777Mock._callTokensToSend(address,address,address,uint,bytes,bytes) returns()": {
        "lines": 13,
        "type": [
            "private"
        ]
    },
    "ERC777Mock._callTokensReceived(address,address,address,uint,bytes,bytes,bool) returns()": {
        "lines": 16,
        "type": [
            "private"
        ]
    },
    "ERC777Mock._spendAllowance(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC777Mock._beforeTokenTransfer(address,address,address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC777Mock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC777Mock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC777Mock.slitherConstructorConstantVariables() returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC777SenderRecipientMock.canImplementInterfaceForAddress(bytes32,address) returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC777SenderRecipientMock._registerInterfaceForAddress(bytes32,address) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC777SenderRecipientMock.tokensReceived(address,address,address,uint,bytes,bytes) returns()": {
        "lines": 27,
        "type": [
            "external"
        ]
    },
    "ERC777SenderRecipientMock.tokensToSend(address,address,address,uint,bytes,bytes) returns()": {
        "lines": 27,
        "type": [
            "external"
        ]
    },
    "ERC777SenderRecipientMock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC777SenderRecipientMock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC777SenderRecipientMock.senderFor(address) returns()": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "ERC777SenderRecipientMock.registerSender(address) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC777SenderRecipientMock.recipientFor(address) returns()": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "ERC777SenderRecipientMock.registerRecipient(address) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC777SenderRecipientMock.setShouldRevertSend(bool) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC777SenderRecipientMock.setShouldRevertReceive(bool) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC777SenderRecipientMock.send(IERC777,address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC777SenderRecipientMock.burn(IERC777,uint,bytes) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC777SenderRecipientMock.slitherConstructorVariables() returns()": {
        "lines": 118,
        "type": [
            "internal"
        ]
    },
    "ERC777SenderRecipientMock.slitherConstructorConstantVariables() returns()": {
        "lines": 118,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesTimestampMock.clock() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20VotesTimestampMock.CLOCK_MODE() returns(string)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20VotesTimestampMock.checkpoints(address,uint) returns(ERC20Votes.Checkpoint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20VotesTimestampMock.numCheckpoints(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20VotesTimestampMock.delegates(address) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesTimestampMock.getVotes(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesTimestampMock.getPastVotes(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesTimestampMock.getPastTotalSupply(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesTimestampMock._checkpointsLookup(ERC20Votes.Checkpoint[],uint) returns(uint)": {
        "lines": 36,
        "type": [
            "private"
        ]
    },
    "ERC20VotesTimestampMock.delegate(address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesTimestampMock.delegateBySig(address,uint,uint,uint,bytes32,bytes32) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesTimestampMock._maxSupply() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesTimestampMock._mint(address,uint) returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesTimestampMock._burn(address,uint) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesTimestampMock._afterTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesTimestampMock._delegate(address,address) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesTimestampMock._moveVotingPower(address,address,uint) returns()": {
        "lines": 12,
        "type": [
            "private"
        ]
    },
    "ERC20VotesTimestampMock._writeCheckpoint(ERC20Votes.Checkpoint[],function(uint,uint) returns(uint),uint) returns(uint,uint)": {
        "lines": 17,
        "type": [
            "private"
        ]
    },
    "ERC20VotesTimestampMock._add(uint,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "ERC20VotesTimestampMock._subtract(uint,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "ERC20VotesTimestampMock._unsafeAccess(ERC20Votes.Checkpoint[],uint) returns(ERC20Votes.Checkpoint)": {
        "lines": 6,
        "type": [
            "private"
        ]
    },
    "ERC20VotesTimestampMock.constructor(string) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesTimestampMock.permit(address,address,uint,uint,uint,bytes32,bytes32) returns()": {
        "lines": 9,
        "type": [
            "external"
        ]
    },
    "ERC20VotesTimestampMock.nonces(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesTimestampMock.DOMAIN_SEPARATOR() returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesTimestampMock._useNonce(address) returns(uint)": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesTimestampMock.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20VotesTimestampMock._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesTimestampMock._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "ERC20VotesTimestampMock._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesTimestampMock.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "ERC20VotesTimestampMock.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesTimestampMock.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesTimestampMock.decimals() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesTimestampMock.totalSupply() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesTimestampMock.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesTimestampMock.transfer(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesTimestampMock.allowance(address,address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesTimestampMock.approve(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesTimestampMock.transferFrom(address,address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesTimestampMock.increaseAllowance(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC20VotesTimestampMock.decreaseAllowance(address,uint) returns(bool)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC20VotesTimestampMock._transfer(address,address,uint) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesTimestampMock._approve(address,address,uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesTimestampMock._spendAllowance(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesTimestampMock._beforeTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesTimestampMock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesTimestampMock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesTimestampMock.slitherConstructorConstantVariables() returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesCompTimestampMock.getCurrentVotes(address) returns(uint)": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "ERC20VotesCompTimestampMock.getPriorVotes(address,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "ERC20VotesCompTimestampMock._maxSupply() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesCompTimestampMock.clock() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20VotesCompTimestampMock.CLOCK_MODE() returns(string)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20VotesCompTimestampMock.checkpoints(address,uint) returns(ERC20Votes.Checkpoint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20VotesCompTimestampMock.numCheckpoints(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20VotesCompTimestampMock.delegates(address) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesCompTimestampMock.getVotes(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesCompTimestampMock.getPastVotes(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesCompTimestampMock.getPastTotalSupply(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesCompTimestampMock._checkpointsLookup(ERC20Votes.Checkpoint[],uint) returns(uint)": {
        "lines": 36,
        "type": [
            "private"
        ]
    },
    "ERC20VotesCompTimestampMock.delegate(address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesCompTimestampMock.delegateBySig(address,uint,uint,uint,bytes32,bytes32) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesCompTimestampMock._mint(address,uint) returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesCompTimestampMock._burn(address,uint) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesCompTimestampMock._afterTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesCompTimestampMock._delegate(address,address) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesCompTimestampMock._moveVotingPower(address,address,uint) returns()": {
        "lines": 12,
        "type": [
            "private"
        ]
    },
    "ERC20VotesCompTimestampMock._writeCheckpoint(ERC20Votes.Checkpoint[],function(uint,uint) returns(uint),uint) returns(uint,uint)": {
        "lines": 17,
        "type": [
            "private"
        ]
    },
    "ERC20VotesCompTimestampMock._add(uint,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "ERC20VotesCompTimestampMock._subtract(uint,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "ERC20VotesCompTimestampMock._unsafeAccess(ERC20Votes.Checkpoint[],uint) returns(ERC20Votes.Checkpoint)": {
        "lines": 6,
        "type": [
            "private"
        ]
    },
    "ERC20VotesCompTimestampMock.constructor(string) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesCompTimestampMock.permit(address,address,uint,uint,uint,bytes32,bytes32) returns()": {
        "lines": 9,
        "type": [
            "external"
        ]
    },
    "ERC20VotesCompTimestampMock.nonces(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesCompTimestampMock.DOMAIN_SEPARATOR() returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesCompTimestampMock._useNonce(address) returns(uint)": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesCompTimestampMock.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20VotesCompTimestampMock._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesCompTimestampMock._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "ERC20VotesCompTimestampMock._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesCompTimestampMock.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "ERC20VotesCompTimestampMock.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesCompTimestampMock.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesCompTimestampMock.decimals() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesCompTimestampMock.totalSupply() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesCompTimestampMock.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesCompTimestampMock.transfer(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesCompTimestampMock.allowance(address,address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesCompTimestampMock.approve(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesCompTimestampMock.transferFrom(address,address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesCompTimestampMock.increaseAllowance(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC20VotesCompTimestampMock.decreaseAllowance(address,uint) returns(bool)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC20VotesCompTimestampMock._transfer(address,address,uint) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesCompTimestampMock._approve(address,address,uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesCompTimestampMock._spendAllowance(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesCompTimestampMock._beforeTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesCompTimestampMock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesCompTimestampMock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesCompTimestampMock.slitherConstructorConstantVariables() returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC721VotesTimestampMock._afterTokenTransfer(address,address,uint,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC721VotesTimestampMock._getVotingUnits(address) returns(uint)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC721VotesTimestampMock.clock() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC721VotesTimestampMock.CLOCK_MODE() returns(string)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC721VotesTimestampMock.getVotes(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721VotesTimestampMock.getPastVotes(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721VotesTimestampMock.getPastTotalSupply(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721VotesTimestampMock._getTotalSupply() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721VotesTimestampMock.delegates(address) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721VotesTimestampMock.delegate(address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721VotesTimestampMock.delegateBySig(address,uint,uint,uint,bytes32,bytes32) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721VotesTimestampMock._delegate(address,address) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC721VotesTimestampMock._transferVotingUnits(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC721VotesTimestampMock._moveDelegateVotes(address,address,uint) returns()": {
        "lines": 20,
        "type": [
            "private"
        ]
    },
    "ERC721VotesTimestampMock._push(Checkpoints.Trace224,function(uint,uint) returns(uint),uint) returns(uint,uint)": {
        "lines": 7,
        "type": [
            "private"
        ]
    },
    "ERC721VotesTimestampMock._add(uint,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "ERC721VotesTimestampMock._subtract(uint,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "ERC721VotesTimestampMock._useNonce(address) returns(uint)": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC721VotesTimestampMock.nonces(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC721VotesTimestampMock.DOMAIN_SEPARATOR() returns(bytes32)": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "ERC721VotesTimestampMock.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC721VotesTimestampMock._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC721VotesTimestampMock._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "ERC721VotesTimestampMock._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721VotesTimestampMock.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "ERC721VotesTimestampMock._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721VotesTimestampMock._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721VotesTimestampMock.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC721VotesTimestampMock.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721VotesTimestampMock.ownerOf(uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721VotesTimestampMock.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721VotesTimestampMock.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721VotesTimestampMock.tokenURI(uint) returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721VotesTimestampMock._baseURI() returns(string)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721VotesTimestampMock.approve(address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721VotesTimestampMock.getApproved(uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721VotesTimestampMock.setApprovalForAll(address,bool) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721VotesTimestampMock.isApprovedForAll(address,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721VotesTimestampMock.transferFrom(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721VotesTimestampMock.safeTransferFrom(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721VotesTimestampMock.safeTransferFrom(address,address,uint,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721VotesTimestampMock._safeTransfer(address,address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721VotesTimestampMock._ownerOf(uint) returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721VotesTimestampMock._exists(uint) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721VotesTimestampMock._isApprovedOrOwner(address,uint) returns(bool)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721VotesTimestampMock._safeMint(address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721VotesTimestampMock._safeMint(address,uint,bytes) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC721VotesTimestampMock._mint(address,uint) returns()": {
        "lines": 17,
        "type": [
            "internal"
        ]
    },
    "ERC721VotesTimestampMock._burn(uint) returns()": {
        "lines": 16,
        "type": [
            "internal"
        ]
    },
    "ERC721VotesTimestampMock._transfer(address,address,uint) returns()": {
        "lines": 21,
        "type": [
            "internal"
        ]
    },
    "ERC721VotesTimestampMock._approve(address,uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721VotesTimestampMock._setApprovalForAll(address,address,bool) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC721VotesTimestampMock._requireMinted(uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721VotesTimestampMock._checkOnERC721Received(address,address,uint,bytes) returns(bool)": {
        "lines": 23,
        "type": [
            "private"
        ]
    },
    "ERC721VotesTimestampMock._beforeTokenTransfer(address,address,uint,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC721VotesTimestampMock.__unsafe_increaseBalance(address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721VotesTimestampMock.slitherConstructorConstantVariables() returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "MyGovernor1.COUNTING_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MyGovernor1.hasVoted(uint,address) returns(bool)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MyGovernor1.proposalVotes(uint) returns(uint,uint,uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "MyGovernor1._quorumReached(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "MyGovernor1._voteSucceeded(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "MyGovernor1._countVote(uint,address,uint,uint,bytes) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "MyGovernor1.constructor(string) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MyGovernor1.receive() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "MyGovernor1.supportsInterface(bytes4) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "MyGovernor1.name() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MyGovernor1.version() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MyGovernor1.hashProposal(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "MyGovernor1.state(uint) returns(IGovernor.ProposalState)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "MyGovernor1.proposalThreshold() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "MyGovernor1.proposalSnapshot(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MyGovernor1.proposalDeadline(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MyGovernor1.proposalProposer(uint) returns(address)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MyGovernor1._getVotes(address,uint,bytes) returns(uint)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "MyGovernor1._defaultParams() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MyGovernor1.propose(address[],uint[],bytes[],string) returns(uint)": {
        "lines": 8,
        "type": [
            "public"
        ]
    },
    "MyGovernor1.execute(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "MyGovernor1.cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "MyGovernor1._execute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "MyGovernor1._beforeExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "MyGovernor1._afterExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "MyGovernor1._cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "MyGovernor1.getVotes(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MyGovernor1.getVotesWithParams(address,uint,bytes) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "MyGovernor1.castVote(uint,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MyGovernor1.castVoteWithReason(uint,uint,string) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "MyGovernor1.castVoteWithReasonAndParams(uint,uint,string,bytes) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "MyGovernor1.castVoteBySig(uint,uint,uint,bytes32,bytes32) returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "MyGovernor1.castVoteWithReasonAndParamsBySig(uint,uint,string,bytes,uint,bytes32,bytes32) returns(uint)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "MyGovernor1._castVote(uint,address,uint,string) returns(uint)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "MyGovernor1._castVote(uint,address,uint,string,bytes) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "MyGovernor1.relay(address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "external"
        ]
    },
    "MyGovernor1._executor() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MyGovernor1.onERC721Received(address,address,uint,bytes) returns(bytes4)": {
        "lines": 6,
        "type": [
            "external"
        ]
    },
    "MyGovernor1.onERC1155Received(address,address,uint,uint,bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "MyGovernor1.onERC1155BatchReceived(address,address,uint[],uint[],bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "MyGovernor1.clock() returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "MyGovernor1.CLOCK_MODE() returns(string)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "MyGovernor1.votingDelay() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "MyGovernor1.votingPeriod() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "MyGovernor1.quorum(uint) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "MyGovernor1.constructor(string,string) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "MyGovernor1._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "MyGovernor1._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "MyGovernor1._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MyGovernor1.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "MyGovernor1._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MyGovernor1._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MyGovernor1.constructor(uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MyGovernor1.quorumNumerator() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "MyGovernor1.quorumNumerator(uint) returns(uint)": {
        "lines": 14,
        "type": [
            "public"
        ]
    },
    "MyGovernor1.quorumDenominator() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "MyGovernor1.updateQuorumNumerator(uint) returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "MyGovernor1._updateQuorumNumerator(uint) returns()": {
        "lines": 16,
        "type": [
            "internal"
        ]
    },
    "MyGovernor1.constructor(IVotes) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MyGovernor1.constructor(TimelockController) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MyGovernor1.timelock() returns(address)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MyGovernor1.proposalEta(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MyGovernor1.queue(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "MyGovernor1.updateTimelock(TimelockController) returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "MyGovernor1._updateTimelock(TimelockController) returns()": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "MyGovernor1.constructor(IVotes,TimelockController) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "MyGovernor1.slitherConstructorConstantVariables() returns()": {
        "lines": 60,
        "type": [
            "internal"
        ]
    },
    "MyGovernor2.COUNTING_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MyGovernor2.hasVoted(uint,address) returns(bool)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MyGovernor2.proposalVotes(uint) returns(uint,uint,uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "MyGovernor2._quorumReached(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "MyGovernor2._voteSucceeded(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "MyGovernor2._countVote(uint,address,uint,uint,bytes) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "MyGovernor2.constructor(string) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MyGovernor2.receive() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "MyGovernor2.supportsInterface(bytes4) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "MyGovernor2.name() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MyGovernor2.version() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MyGovernor2.hashProposal(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "MyGovernor2.state(uint) returns(IGovernor.ProposalState)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "MyGovernor2.proposalThreshold() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "MyGovernor2.proposalSnapshot(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MyGovernor2.proposalDeadline(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MyGovernor2.proposalProposer(uint) returns(address)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MyGovernor2._getVotes(address,uint,bytes) returns(uint)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "MyGovernor2._defaultParams() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MyGovernor2.propose(address[],uint[],bytes[],string) returns(uint)": {
        "lines": 8,
        "type": [
            "public"
        ]
    },
    "MyGovernor2.execute(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "MyGovernor2.cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "MyGovernor2._execute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "MyGovernor2._beforeExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "MyGovernor2._afterExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "MyGovernor2._cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "MyGovernor2.getVotes(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MyGovernor2.getVotesWithParams(address,uint,bytes) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "MyGovernor2.castVote(uint,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MyGovernor2.castVoteWithReason(uint,uint,string) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "MyGovernor2.castVoteWithReasonAndParams(uint,uint,string,bytes) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "MyGovernor2.castVoteBySig(uint,uint,uint,bytes32,bytes32) returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "MyGovernor2.castVoteWithReasonAndParamsBySig(uint,uint,string,bytes,uint,bytes32,bytes32) returns(uint)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "MyGovernor2._castVote(uint,address,uint,string) returns(uint)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "MyGovernor2._castVote(uint,address,uint,string,bytes) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "MyGovernor2.relay(address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "external"
        ]
    },
    "MyGovernor2._executor() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MyGovernor2.onERC721Received(address,address,uint,bytes) returns(bytes4)": {
        "lines": 6,
        "type": [
            "external"
        ]
    },
    "MyGovernor2.onERC1155Received(address,address,uint,uint,bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "MyGovernor2.onERC1155BatchReceived(address,address,uint[],uint[],bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "MyGovernor2.clock() returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "MyGovernor2.CLOCK_MODE() returns(string)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "MyGovernor2.votingDelay() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "MyGovernor2.votingPeriod() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "MyGovernor2.quorum(uint) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "MyGovernor2.constructor(string,string) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "MyGovernor2._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "MyGovernor2._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "MyGovernor2._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MyGovernor2.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "MyGovernor2._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MyGovernor2._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MyGovernor2.constructor(uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MyGovernor2.quorumNumerator() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "MyGovernor2.quorumNumerator(uint) returns(uint)": {
        "lines": 14,
        "type": [
            "public"
        ]
    },
    "MyGovernor2.quorumDenominator() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "MyGovernor2.updateQuorumNumerator(uint) returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "MyGovernor2._updateQuorumNumerator(uint) returns()": {
        "lines": 16,
        "type": [
            "internal"
        ]
    },
    "MyGovernor2.constructor(IVotes) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MyGovernor2.constructor(TimelockController) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MyGovernor2.timelock() returns(address)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MyGovernor2.proposalEta(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MyGovernor2.queue(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "MyGovernor2.updateTimelock(TimelockController) returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "MyGovernor2._updateTimelock(TimelockController) returns()": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "MyGovernor2.constructor(IVotes,TimelockController) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "MyGovernor2.slitherConstructorConstantVariables() returns()": {
        "lines": 64,
        "type": [
            "internal"
        ]
    },
    "MyGovernor.constructor(uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MyGovernor.quorumNumerator() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "MyGovernor.quorumNumerator(uint) returns(uint)": {
        "lines": 14,
        "type": [
            "public"
        ]
    },
    "MyGovernor.quorumDenominator() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "MyGovernor.quorum(uint) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "MyGovernor.updateQuorumNumerator(uint) returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "MyGovernor._updateQuorumNumerator(uint) returns()": {
        "lines": 16,
        "type": [
            "internal"
        ]
    },
    "MyGovernor.constructor(IVotes) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MyGovernor.clock() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "MyGovernor.CLOCK_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "MyGovernor._getVotes(address,uint,bytes) returns(uint)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "MyGovernor.constructor(string) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MyGovernor.receive() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "MyGovernor.supportsInterface(bytes4) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "MyGovernor.name() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MyGovernor.version() returns(string)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MyGovernor.hashProposal(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "MyGovernor.state(uint) returns(IGovernor.ProposalState)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "MyGovernor.proposalThreshold() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "MyGovernor.proposalSnapshot(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MyGovernor.proposalDeadline(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MyGovernor.proposalProposer(uint) returns(address)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MyGovernor._quorumReached(uint) returns(bool)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "MyGovernor._voteSucceeded(uint) returns(bool)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "MyGovernor._countVote(uint,address,uint,uint,bytes) returns()": {
        "lines": 23,
        "type": [
            "internal"
        ]
    },
    "MyGovernor._defaultParams() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MyGovernor.propose(address[],uint[],bytes[],string) returns(uint)": {
        "lines": 8,
        "type": [
            "public"
        ]
    },
    "MyGovernor.execute(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "MyGovernor.cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 8,
        "type": [
            "public"
        ]
    },
    "MyGovernor._execute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "MyGovernor._beforeExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "MyGovernor._afterExecute(uint,address[],uint[],bytes[],bytes32) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "MyGovernor._cancel(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "MyGovernor.getVotes(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MyGovernor.getVotesWithParams(address,uint,bytes) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "MyGovernor.castVote(uint,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MyGovernor.castVoteWithReason(uint,uint,string) returns(uint)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "MyGovernor.castVoteWithReasonAndParams(uint,uint,string,bytes) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "MyGovernor.castVoteBySig(uint,uint,uint,bytes32,bytes32) returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "MyGovernor.castVoteWithReasonAndParamsBySig(uint,uint,string,bytes,uint,bytes32,bytes32) returns(uint)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "MyGovernor._castVote(uint,address,uint,string) returns(uint)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "MyGovernor._castVote(uint,address,uint,string,bytes) returns(uint)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "MyGovernor.relay(address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "external"
        ]
    },
    "MyGovernor._executor() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MyGovernor.onERC721Received(address,address,uint,bytes) returns(bytes4)": {
        "lines": 6,
        "type": [
            "external"
        ]
    },
    "MyGovernor.onERC1155Received(address,address,uint,uint,bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "MyGovernor.onERC1155BatchReceived(address,address,uint[],uint[],bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "MyGovernor.COUNTING_MODE() returns(string)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "MyGovernor.votingDelay() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "MyGovernor.votingPeriod() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "MyGovernor.hasVoted(uint,address) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "MyGovernor.constructor(string,string) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "MyGovernor._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "MyGovernor._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "MyGovernor._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MyGovernor.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "MyGovernor._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MyGovernor._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MyGovernor.propose(address[],uint[],string[],bytes[],string) returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "MyGovernor.queue(uint) returns()": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MyGovernor.execute(uint) returns()": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MyGovernor.cancel(uint) returns()": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MyGovernor._encodeCalldata(string[],bytes[]) returns(bytes[])": {
        "lines": 12,
        "type": [
            "private"
        ]
    },
    "MyGovernor._getProposalParameters(uint) returns(address[],uint[],bytes[],bytes32)": {
        "lines": 15,
        "type": [
            "private"
        ]
    },
    "MyGovernor._storeProposal(address,address[],uint[],string[],bytes[],string) returns()": {
        "lines": 20,
        "type": [
            "private"
        ]
    },
    "MyGovernor.proposals(uint) returns(uint,address,uint,uint,uint,uint,uint,uint,bool,bool)": {
        "lines": 18,
        "type": [
            "public"
        ]
    },
    "MyGovernor.getActions(uint) returns(address[],uint[],string[],bytes[])": {
        "lines": 12,
        "type": [
            "public"
        ]
    },
    "MyGovernor.getReceipt(uint,address) returns(IGovernorCompatibilityBravo.Receipt)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MyGovernor.quorumVotes() returns(uint)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "MyGovernor.timelock() returns(address)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "MyGovernor.proposalEta(uint) returns(uint)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "MyGovernor.queue(address[],uint[],bytes[],bytes32) returns(uint)": {
        "lines": 14,
        "type": [
            "public"
        ]
    },
    "MyGovernor.constructor(TimelockController) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MyGovernor.updateTimelock(TimelockController) returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "MyGovernor._updateTimelock(TimelockController) returns()": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "MyGovernor.constructor(IVotes,TimelockController) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "MyGovernor.slitherConstructorConstantVariables() returns()": {
        "lines": 73,
        "type": [
            "internal"
        ]
    },
    "Clones.clone(address) returns(address)": {
        "lines": 12,
        "type": [
            "internal"
        ]
    },
    "Clones.cloneDeterministic(address,bytes32) returns(address)": {
        "lines": 12,
        "type": [
            "internal"
        ]
    },
    "Clones.predictDeterministicAddress(address,bytes32,address) returns(address)": {
        "lines": 17,
        "type": [
            "internal"
        ]
    },
    "Clones.predictDeterministicAddress(address,bytes32) returns(address)": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC1967Proxy._getImplementation() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1967Proxy._setImplementation(address) returns()": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "ERC1967Proxy._upgradeTo(address) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC1967Proxy._upgradeToAndCall(address,bytes,bool) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC1967Proxy._upgradeToAndCallUUPS(address,bytes,bool) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC1967Proxy._getAdmin() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1967Proxy._setAdmin(address) returns()": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "ERC1967Proxy._changeAdmin(address) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC1967Proxy._getBeacon() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1967Proxy._setBeacon(address) returns()": {
        "lines": 8,
        "type": [
            "private"
        ]
    },
    "ERC1967Proxy._upgradeBeaconToAndCall(address,bytes,bool) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC1967Proxy._delegate(address) returns()": {
        "lines": 21,
        "type": [
            "internal"
        ]
    },
    "ERC1967Proxy._implementation() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1967Proxy._fallback() returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC1967Proxy.fallback() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "ERC1967Proxy.receive() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "ERC1967Proxy._beforeFallback() returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC1967Proxy.constructor(address,bytes) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC1967Proxy.slitherConstructorConstantVariables() returns()": {
        "lines": 17,
        "type": [
            "internal"
        ]
    },
    "ERC1967Upgrade._getImplementation() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1967Upgrade._setImplementation(address) returns()": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "ERC1967Upgrade._upgradeTo(address) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC1967Upgrade._upgradeToAndCall(address,bytes,bool) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC1967Upgrade._upgradeToAndCallUUPS(address,bytes,bool) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC1967Upgrade._getAdmin() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1967Upgrade._setAdmin(address) returns()": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "ERC1967Upgrade._changeAdmin(address) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC1967Upgrade._getBeacon() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1967Upgrade._setBeacon(address) returns()": {
        "lines": 8,
        "type": [
            "private"
        ]
    },
    "ERC1967Upgrade._upgradeBeaconToAndCall(address,bytes,bool) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC1967Upgrade.slitherConstructorConstantVariables() returns()": {
        "lines": 126,
        "type": [
            "internal"
        ]
    },
    "Proxy._delegate(address) returns()": {
        "lines": 21,
        "type": [
            "internal"
        ]
    },
    "Proxy._implementation() returns(address)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "Proxy._fallback() returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "Proxy.fallback() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "Proxy.receive() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "Proxy._beforeFallback() returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "BeaconProxy._getImplementation() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "BeaconProxy._setImplementation(address) returns()": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "BeaconProxy._upgradeTo(address) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "BeaconProxy._upgradeToAndCall(address,bytes,bool) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "BeaconProxy._upgradeToAndCallUUPS(address,bytes,bool) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "BeaconProxy._getAdmin() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "BeaconProxy._setAdmin(address) returns()": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "BeaconProxy._changeAdmin(address) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "BeaconProxy._getBeacon() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "BeaconProxy._setBeacon(address) returns()": {
        "lines": 8,
        "type": [
            "private"
        ]
    },
    "BeaconProxy._upgradeBeaconToAndCall(address,bytes,bool) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "BeaconProxy._delegate(address) returns()": {
        "lines": 21,
        "type": [
            "internal"
        ]
    },
    "BeaconProxy._implementation() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "BeaconProxy._fallback() returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "BeaconProxy.fallback() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "BeaconProxy.receive() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "BeaconProxy._beforeFallback() returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "BeaconProxy.constructor(address,bytes) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "BeaconProxy._beacon() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "BeaconProxy._setBeacon(address,bytes) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "BeaconProxy.slitherConstructorConstantVariables() returns()": {
        "lines": 41,
        "type": [
            "internal"
        ]
    },
    "IBeacon.implementation() returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "UpgradeableBeacon.constructor() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "UpgradeableBeacon.owner() returns(address)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "UpgradeableBeacon._checkOwner() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "UpgradeableBeacon.renounceOwnership() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "UpgradeableBeacon.transferOwnership(address) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "UpgradeableBeacon._transferOwnership(address) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "UpgradeableBeacon._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "UpgradeableBeacon._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "UpgradeableBeacon.implementation() returns(address)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "UpgradeableBeacon.constructor(address) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "UpgradeableBeacon.upgradeTo(address) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "UpgradeableBeacon._setImplementation(address) returns()": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "ProxyAdmin.constructor() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ProxyAdmin.owner() returns(address)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ProxyAdmin._checkOwner() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ProxyAdmin.renounceOwnership() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ProxyAdmin.transferOwnership(address) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ProxyAdmin._transferOwnership(address) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ProxyAdmin._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ProxyAdmin._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ProxyAdmin.getProxyImplementation(ITransparentUpgradeableProxy) returns(address)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "ProxyAdmin.getProxyAdmin(ITransparentUpgradeableProxy) returns(address)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "ProxyAdmin.changeProxyAdmin(ITransparentUpgradeableProxy,address) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ProxyAdmin.upgrade(ITransparentUpgradeableProxy,address) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ProxyAdmin.upgradeAndCall(ITransparentUpgradeableProxy,address,bytes) returns()": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "ITransparentUpgradeableProxy.admin() returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ITransparentUpgradeableProxy.implementation() returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ITransparentUpgradeableProxy.changeAdmin(address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ITransparentUpgradeableProxy.upgradeTo(address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ITransparentUpgradeableProxy.upgradeToAndCall(address,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "TransparentUpgradeableProxy.constructor(address,bytes) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "TransparentUpgradeableProxy._implementation() returns(address)": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "TransparentUpgradeableProxy._getImplementation() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "TransparentUpgradeableProxy._setImplementation(address) returns()": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "TransparentUpgradeableProxy._upgradeTo(address) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "TransparentUpgradeableProxy._upgradeToAndCall(address,bytes,bool) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "TransparentUpgradeableProxy._upgradeToAndCallUUPS(address,bytes,bool) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "TransparentUpgradeableProxy._getAdmin() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "TransparentUpgradeableProxy._setAdmin(address) returns()": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "TransparentUpgradeableProxy._changeAdmin(address) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "TransparentUpgradeableProxy._getBeacon() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "TransparentUpgradeableProxy._setBeacon(address) returns()": {
        "lines": 8,
        "type": [
            "private"
        ]
    },
    "TransparentUpgradeableProxy._upgradeBeaconToAndCall(address,bytes,bool) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "TransparentUpgradeableProxy._delegate(address) returns()": {
        "lines": 21,
        "type": [
            "internal"
        ]
    },
    "TransparentUpgradeableProxy._fallback() returns()": {
        "lines": 24,
        "type": [
            "internal"
        ]
    },
    "TransparentUpgradeableProxy.fallback() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "TransparentUpgradeableProxy.receive() returns()": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "TransparentUpgradeableProxy._beforeFallback() returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "TransparentUpgradeableProxy.constructor(address,address,bytes) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "TransparentUpgradeableProxy._dispatchAdmin() returns(bytes)": {
        "lines": 5,
        "type": [
            "private"
        ]
    },
    "TransparentUpgradeableProxy._dispatchImplementation() returns(bytes)": {
        "lines": 5,
        "type": [
            "private"
        ]
    },
    "TransparentUpgradeableProxy._dispatchChangeAdmin() returns(bytes)": {
        "lines": 6,
        "type": [
            "private"
        ]
    },
    "TransparentUpgradeableProxy._dispatchUpgradeTo() returns(bytes)": {
        "lines": 6,
        "type": [
            "private"
        ]
    },
    "TransparentUpgradeableProxy._dispatchUpgradeToAndCall() returns(bytes)": {
        "lines": 5,
        "type": [
            "private"
        ]
    },
    "TransparentUpgradeableProxy._admin() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "TransparentUpgradeableProxy._requireZeroValue() returns()": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "TransparentUpgradeableProxy.slitherConstructorConstantVariables() returns()": {
        "lines": 118,
        "type": [
            "internal"
        ]
    },
    "Initializable._disableInitializers() returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "Initializable._getInitializedVersion() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Initializable._isInitializing() returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeable._getImplementation() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeable._setImplementation(address) returns()": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "UUPSUpgradeable._upgradeTo(address) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeable._upgradeToAndCall(address,bytes,bool) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeable._upgradeToAndCallUUPS(address,bytes,bool) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeable._getAdmin() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeable._setAdmin(address) returns()": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "UUPSUpgradeable._changeAdmin(address) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeable._getBeacon() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeable._setBeacon(address) returns()": {
        "lines": 8,
        "type": [
            "private"
        ]
    },
    "UUPSUpgradeable._upgradeBeaconToAndCall(address,bytes,bool) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeable.proxiableUUID() returns(bytes32)": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "UUPSUpgradeable.upgradeTo(address) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "UUPSUpgradeable.upgradeToAndCall(address,bytes) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "UUPSUpgradeable._authorizeUpgrade(address) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeable.slitherConstructorVariables() returns()": {
        "lines": 73,
        "type": [
            "internal"
        ]
    },
    "UUPSUpgradeable.slitherConstructorConstantVariables() returns()": {
        "lines": 73,
        "type": [
            "internal"
        ]
    },
    "Pausable._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Pausable._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Pausable.constructor() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Pausable.paused() returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "Pausable._requireNotPaused() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Pausable._requirePaused() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Pausable._pause() returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "Pausable._unpause() returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "PullPayment.constructor() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "PullPayment.withdrawPayments(address) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "PullPayment.payments(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "PullPayment._asyncTransfer(address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ReentrancyGuard.constructor() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ReentrancyGuard._nonReentrantBefore() returns()": {
        "lines": 6,
        "type": [
            "private"
        ]
    },
    "ReentrancyGuard._nonReentrantAfter() returns()": {
        "lines": 5,
        "type": [
            "private"
        ]
    },
    "ReentrancyGuard._reentrancyGuardEntered() returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ReentrancyGuard.slitherConstructorConstantVariables() returns()": {
        "lines": 48,
        "type": [
            "internal"
        ]
    },
    "ERC1155.uri(uint) returns(string)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC1155.balanceOf(address,uint) returns(uint)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC1155.balanceOfBatch(address[],uint[]) returns(uint[])": {
        "lines": 11,
        "type": [
            "public"
        ]
    },
    "ERC1155.setApprovalForAll(address,bool) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC1155.isApprovedForAll(address,address) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC1155.safeTransferFrom(address,address,uint,uint,bytes) returns()": {
        "lines": 13,
        "type": [
            "public"
        ]
    },
    "ERC1155.safeBatchTransferFrom(address,address,uint[],uint[],bytes) returns()": {
        "lines": 13,
        "type": [
            "public"
        ]
    },
    "ERC1155.supportsInterface(bytes4) returns(bool)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "ERC1155._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1155._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1155.constructor(string) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC1155._safeTransferFrom(address,address,uint,uint,bytes) returns()": {
        "lines": 22,
        "type": [
            "internal"
        ]
    },
    "ERC1155._safeBatchTransferFrom(address,address,uint[],uint[],bytes) returns()": {
        "lines": 25,
        "type": [
            "internal"
        ]
    },
    "ERC1155._setURI(string) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1155._mint(address,uint,uint,bytes) returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC1155._mintBatch(address,uint[],uint[],bytes) returns()": {
        "lines": 17,
        "type": [
            "internal"
        ]
    },
    "ERC1155._burn(address,uint,uint) returns()": {
        "lines": 14,
        "type": [
            "internal"
        ]
    },
    "ERC1155._burnBatch(address,uint[],uint[]) returns()": {
        "lines": 17,
        "type": [
            "internal"
        ]
    },
    "ERC1155._setApprovalForAll(address,address,bool) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC1155._beforeTokenTransfer(address,address,address,uint[],uint[],bytes) returns()": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "ERC1155._afterTokenTransfer(address,address,address,uint[],uint[],bytes) returns()": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "ERC1155._doSafeTransferAcceptanceCheck(address,address,address,uint,uint,bytes) returns()": {
        "lines": 20,
        "type": [
            "private"
        ]
    },
    "ERC1155._doSafeBatchTransferAcceptanceCheck(address,address,address,uint[],uint[],bytes) returns()": {
        "lines": 22,
        "type": [
            "private"
        ]
    },
    "ERC1155._asSingletonArray(uint) returns(uint[])": {
        "lines": 5,
        "type": [
            "private"
        ]
    },
    "IERC1155.supportsInterface(bytes4) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1155.balanceOf(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1155.balanceOfBatch(address[],uint[]) returns(uint[])": {
        "lines": 4,
        "type": [
            "external"
        ]
    },
    "IERC1155.setApprovalForAll(address,bool) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1155.isApprovedForAll(address,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1155.safeTransferFrom(address,address,uint,uint,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1155.safeBatchTransferFrom(address,address,uint[],uint[],bytes) returns()": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "IERC1155Receiver.supportsInterface(bytes4) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1155Receiver.onERC1155Received(address,address,uint,uint,bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "IERC1155Receiver.onERC1155BatchReceived(address,address,uint[],uint[],bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "ERC1155Burnable.constructor(string) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC1155Burnable.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC1155Burnable.uri(uint) returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC1155Burnable.balanceOf(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC1155Burnable.balanceOfBatch(address[],uint[]) returns(uint[])": {
        "lines": 4,
        "type": [
            "external"
        ]
    },
    "ERC1155Burnable.setApprovalForAll(address,bool) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC1155Burnable.isApprovedForAll(address,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC1155Burnable.safeTransferFrom(address,address,uint,uint,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC1155Burnable.safeBatchTransferFrom(address,address,uint[],uint[],bytes) returns()": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "ERC1155Burnable._safeTransferFrom(address,address,uint,uint,bytes) returns()": {
        "lines": 22,
        "type": [
            "internal"
        ]
    },
    "ERC1155Burnable._safeBatchTransferFrom(address,address,uint[],uint[],bytes) returns()": {
        "lines": 25,
        "type": [
            "internal"
        ]
    },
    "ERC1155Burnable._setURI(string) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1155Burnable._mint(address,uint,uint,bytes) returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC1155Burnable._mintBatch(address,uint[],uint[],bytes) returns()": {
        "lines": 17,
        "type": [
            "internal"
        ]
    },
    "ERC1155Burnable._burn(address,uint,uint) returns()": {
        "lines": 14,
        "type": [
            "internal"
        ]
    },
    "ERC1155Burnable._burnBatch(address,uint[],uint[]) returns()": {
        "lines": 17,
        "type": [
            "internal"
        ]
    },
    "ERC1155Burnable._setApprovalForAll(address,address,bool) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC1155Burnable._beforeTokenTransfer(address,address,address,uint[],uint[],bytes) returns()": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "ERC1155Burnable._afterTokenTransfer(address,address,address,uint[],uint[],bytes) returns()": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "ERC1155Burnable._doSafeTransferAcceptanceCheck(address,address,address,uint,uint,bytes) returns()": {
        "lines": 20,
        "type": [
            "private"
        ]
    },
    "ERC1155Burnable._doSafeBatchTransferAcceptanceCheck(address,address,address,uint[],uint[],bytes) returns()": {
        "lines": 22,
        "type": [
            "private"
        ]
    },
    "ERC1155Burnable._asSingletonArray(uint) returns(uint[])": {
        "lines": 5,
        "type": [
            "private"
        ]
    },
    "ERC1155Burnable._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1155Burnable._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1155Burnable.burn(address,uint,uint) returns()": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "ERC1155Burnable.burnBatch(address,uint[],uint[]) returns()": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "ERC1155Pausable.constructor() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1155Pausable.paused() returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC1155Pausable._requireNotPaused() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1155Pausable._requirePaused() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1155Pausable._pause() returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC1155Pausable._unpause() returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC1155Pausable._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1155Pausable._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1155Pausable.constructor(string) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC1155Pausable.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC1155Pausable.uri(uint) returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC1155Pausable.balanceOf(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC1155Pausable.balanceOfBatch(address[],uint[]) returns(uint[])": {
        "lines": 4,
        "type": [
            "external"
        ]
    },
    "ERC1155Pausable.setApprovalForAll(address,bool) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC1155Pausable.isApprovedForAll(address,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC1155Pausable.safeTransferFrom(address,address,uint,uint,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC1155Pausable.safeBatchTransferFrom(address,address,uint[],uint[],bytes) returns()": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "ERC1155Pausable._safeTransferFrom(address,address,uint,uint,bytes) returns()": {
        "lines": 22,
        "type": [
            "internal"
        ]
    },
    "ERC1155Pausable._safeBatchTransferFrom(address,address,uint[],uint[],bytes) returns()": {
        "lines": 25,
        "type": [
            "internal"
        ]
    },
    "ERC1155Pausable._setURI(string) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1155Pausable._mint(address,uint,uint,bytes) returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC1155Pausable._mintBatch(address,uint[],uint[],bytes) returns()": {
        "lines": 17,
        "type": [
            "internal"
        ]
    },
    "ERC1155Pausable._burn(address,uint,uint) returns()": {
        "lines": 14,
        "type": [
            "internal"
        ]
    },
    "ERC1155Pausable._burnBatch(address,uint[],uint[]) returns()": {
        "lines": 17,
        "type": [
            "internal"
        ]
    },
    "ERC1155Pausable._setApprovalForAll(address,address,bool) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC1155Pausable._beforeTokenTransfer(address,address,address,uint[],uint[],bytes) returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC1155Pausable._afterTokenTransfer(address,address,address,uint[],uint[],bytes) returns()": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "ERC1155Pausable._doSafeTransferAcceptanceCheck(address,address,address,uint,uint,bytes) returns()": {
        "lines": 20,
        "type": [
            "private"
        ]
    },
    "ERC1155Pausable._doSafeBatchTransferAcceptanceCheck(address,address,address,uint[],uint[],bytes) returns()": {
        "lines": 22,
        "type": [
            "private"
        ]
    },
    "ERC1155Pausable._asSingletonArray(uint) returns(uint[])": {
        "lines": 5,
        "type": [
            "private"
        ]
    },
    "ERC1155Supply.constructor(string) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC1155Supply.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC1155Supply.uri(uint) returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC1155Supply.balanceOf(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC1155Supply.balanceOfBatch(address[],uint[]) returns(uint[])": {
        "lines": 4,
        "type": [
            "external"
        ]
    },
    "ERC1155Supply.setApprovalForAll(address,bool) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC1155Supply.isApprovedForAll(address,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC1155Supply.safeTransferFrom(address,address,uint,uint,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC1155Supply.safeBatchTransferFrom(address,address,uint[],uint[],bytes) returns()": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "ERC1155Supply._safeTransferFrom(address,address,uint,uint,bytes) returns()": {
        "lines": 22,
        "type": [
            "internal"
        ]
    },
    "ERC1155Supply._safeBatchTransferFrom(address,address,uint[],uint[],bytes) returns()": {
        "lines": 25,
        "type": [
            "internal"
        ]
    },
    "ERC1155Supply._setURI(string) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1155Supply._mint(address,uint,uint,bytes) returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC1155Supply._mintBatch(address,uint[],uint[],bytes) returns()": {
        "lines": 17,
        "type": [
            "internal"
        ]
    },
    "ERC1155Supply._burn(address,uint,uint) returns()": {
        "lines": 14,
        "type": [
            "internal"
        ]
    },
    "ERC1155Supply._burnBatch(address,uint[],uint[]) returns()": {
        "lines": 17,
        "type": [
            "internal"
        ]
    },
    "ERC1155Supply._setApprovalForAll(address,address,bool) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC1155Supply._beforeTokenTransfer(address,address,address,uint[],uint[],bytes) returns()": {
        "lines": 26,
        "type": [
            "internal"
        ]
    },
    "ERC1155Supply._afterTokenTransfer(address,address,address,uint[],uint[],bytes) returns()": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "ERC1155Supply._doSafeTransferAcceptanceCheck(address,address,address,uint,uint,bytes) returns()": {
        "lines": 20,
        "type": [
            "private"
        ]
    },
    "ERC1155Supply._doSafeBatchTransferAcceptanceCheck(address,address,address,uint[],uint[],bytes) returns()": {
        "lines": 22,
        "type": [
            "private"
        ]
    },
    "ERC1155Supply._asSingletonArray(uint) returns(uint[])": {
        "lines": 5,
        "type": [
            "private"
        ]
    },
    "ERC1155Supply._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1155Supply._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1155Supply.totalSupply(uint) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC1155Supply.exists(uint) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC1155URIStorage.constructor(string) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC1155URIStorage.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC1155URIStorage.uri(uint) returns(string)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC1155URIStorage.balanceOf(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC1155URIStorage.balanceOfBatch(address[],uint[]) returns(uint[])": {
        "lines": 4,
        "type": [
            "external"
        ]
    },
    "ERC1155URIStorage.setApprovalForAll(address,bool) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC1155URIStorage.isApprovedForAll(address,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC1155URIStorage.safeTransferFrom(address,address,uint,uint,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC1155URIStorage.safeBatchTransferFrom(address,address,uint[],uint[],bytes) returns()": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "ERC1155URIStorage._safeTransferFrom(address,address,uint,uint,bytes) returns()": {
        "lines": 22,
        "type": [
            "internal"
        ]
    },
    "ERC1155URIStorage._safeBatchTransferFrom(address,address,uint[],uint[],bytes) returns()": {
        "lines": 25,
        "type": [
            "internal"
        ]
    },
    "ERC1155URIStorage._setURI(string) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1155URIStorage._mint(address,uint,uint,bytes) returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC1155URIStorage._mintBatch(address,uint[],uint[],bytes) returns()": {
        "lines": 17,
        "type": [
            "internal"
        ]
    },
    "ERC1155URIStorage._burn(address,uint,uint) returns()": {
        "lines": 14,
        "type": [
            "internal"
        ]
    },
    "ERC1155URIStorage._burnBatch(address,uint[],uint[]) returns()": {
        "lines": 17,
        "type": [
            "internal"
        ]
    },
    "ERC1155URIStorage._setApprovalForAll(address,address,bool) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC1155URIStorage._beforeTokenTransfer(address,address,address,uint[],uint[],bytes) returns()": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "ERC1155URIStorage._afterTokenTransfer(address,address,address,uint[],uint[],bytes) returns()": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "ERC1155URIStorage._doSafeTransferAcceptanceCheck(address,address,address,uint,uint,bytes) returns()": {
        "lines": 20,
        "type": [
            "private"
        ]
    },
    "ERC1155URIStorage._doSafeBatchTransferAcceptanceCheck(address,address,address,uint[],uint[],bytes) returns()": {
        "lines": 22,
        "type": [
            "private"
        ]
    },
    "ERC1155URIStorage._asSingletonArray(uint) returns(uint[])": {
        "lines": 5,
        "type": [
            "private"
        ]
    },
    "ERC1155URIStorage._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1155URIStorage._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1155URIStorage._setURI(uint,string) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC1155URIStorage._setBaseURI(string) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1155URIStorage.slitherConstructorVariables() returns()": {
        "lines": 43,
        "type": [
            "internal"
        ]
    },
    "IERC1155MetadataURI.balanceOf(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1155MetadataURI.balanceOfBatch(address[],uint[]) returns(uint[])": {
        "lines": 4,
        "type": [
            "external"
        ]
    },
    "IERC1155MetadataURI.setApprovalForAll(address,bool) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1155MetadataURI.isApprovedForAll(address,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1155MetadataURI.safeTransferFrom(address,address,uint,uint,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1155MetadataURI.safeBatchTransferFrom(address,address,uint[],uint[],bytes) returns()": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "IERC1155MetadataURI.supportsInterface(bytes4) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1155MetadataURI.uri(uint) returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC1155PresetMinterPauser._beforeTokenTransfer(address,address,address,uint[],uint[],bytes) returns()": {
        "lines": 10,
        "type": [
            "internal"
        ]
    },
    "ERC1155PresetMinterPauser.constructor() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1155PresetMinterPauser.paused() returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC1155PresetMinterPauser._requireNotPaused() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1155PresetMinterPauser._requirePaused() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1155PresetMinterPauser._pause() returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC1155PresetMinterPauser._unpause() returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC1155PresetMinterPauser._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1155PresetMinterPauser._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1155PresetMinterPauser.constructor(string) returns()": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC1155PresetMinterPauser.supportsInterface(bytes4) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC1155PresetMinterPauser.uri(uint) returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC1155PresetMinterPauser.balanceOf(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC1155PresetMinterPauser.balanceOfBatch(address[],uint[]) returns(uint[])": {
        "lines": 4,
        "type": [
            "external"
        ]
    },
    "ERC1155PresetMinterPauser.setApprovalForAll(address,bool) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC1155PresetMinterPauser.isApprovedForAll(address,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC1155PresetMinterPauser.safeTransferFrom(address,address,uint,uint,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC1155PresetMinterPauser.safeBatchTransferFrom(address,address,uint[],uint[],bytes) returns()": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "ERC1155PresetMinterPauser._safeTransferFrom(address,address,uint,uint,bytes) returns()": {
        "lines": 22,
        "type": [
            "internal"
        ]
    },
    "ERC1155PresetMinterPauser._safeBatchTransferFrom(address,address,uint[],uint[],bytes) returns()": {
        "lines": 25,
        "type": [
            "internal"
        ]
    },
    "ERC1155PresetMinterPauser._setURI(string) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1155PresetMinterPauser._mint(address,uint,uint,bytes) returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC1155PresetMinterPauser._mintBatch(address,uint[],uint[],bytes) returns()": {
        "lines": 17,
        "type": [
            "internal"
        ]
    },
    "ERC1155PresetMinterPauser._burn(address,uint,uint) returns()": {
        "lines": 14,
        "type": [
            "internal"
        ]
    },
    "ERC1155PresetMinterPauser._burnBatch(address,uint[],uint[]) returns()": {
        "lines": 17,
        "type": [
            "internal"
        ]
    },
    "ERC1155PresetMinterPauser._setApprovalForAll(address,address,bool) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC1155PresetMinterPauser._afterTokenTransfer(address,address,address,uint[],uint[],bytes) returns()": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "ERC1155PresetMinterPauser._doSafeTransferAcceptanceCheck(address,address,address,uint,uint,bytes) returns()": {
        "lines": 20,
        "type": [
            "private"
        ]
    },
    "ERC1155PresetMinterPauser._doSafeBatchTransferAcceptanceCheck(address,address,address,uint[],uint[],bytes) returns()": {
        "lines": 22,
        "type": [
            "private"
        ]
    },
    "ERC1155PresetMinterPauser._asSingletonArray(uint) returns(uint[])": {
        "lines": 5,
        "type": [
            "private"
        ]
    },
    "ERC1155PresetMinterPauser.burn(address,uint,uint) returns()": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "ERC1155PresetMinterPauser.burnBatch(address,uint[],uint[]) returns()": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "ERC1155PresetMinterPauser.getRoleMember(bytes32,uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC1155PresetMinterPauser.getRoleMemberCount(bytes32) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC1155PresetMinterPauser._grantRole(bytes32,address) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC1155PresetMinterPauser._revokeRole(bytes32,address) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC1155PresetMinterPauser.hasRole(bytes32,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC1155PresetMinterPauser._checkRole(bytes32) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1155PresetMinterPauser._checkRole(bytes32,address) returns()": {
        "lines": 14,
        "type": [
            "internal"
        ]
    },
    "ERC1155PresetMinterPauser.getRoleAdmin(bytes32) returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC1155PresetMinterPauser.grantRole(bytes32,address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC1155PresetMinterPauser.revokeRole(bytes32,address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC1155PresetMinterPauser.renounceRole(bytes32,address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC1155PresetMinterPauser._setupRole(bytes32,address) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1155PresetMinterPauser._setRoleAdmin(bytes32,bytes32) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC1155PresetMinterPauser.mint(address,uint,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC1155PresetMinterPauser.mintBatch(address,uint[],uint[],bytes) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC1155PresetMinterPauser.pause() returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC1155PresetMinterPauser.unpause() returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC1155PresetMinterPauser.slitherConstructorConstantVariables() returns()": {
        "lines": 77,
        "type": [
            "internal"
        ]
    },
    "ERC1155Holder.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC1155Holder.onERC1155Received(address,address,uint,uint,bytes) returns(bytes4)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC1155Holder.onERC1155BatchReceived(address,address,uint[],uint[],bytes) returns(bytes4)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC1155Receiver.onERC1155Received(address,address,uint,uint,bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "ERC1155Receiver.onERC1155BatchReceived(address,address,uint[],uint[],bytes) returns(bytes4)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "ERC1155Receiver.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20.name() returns(string)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20.symbol() returns(string)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20.decimals() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20.totalSupply() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20.balanceOf(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20.transfer(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC20.allowance(address,address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20.approve(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC20.transferFrom(address,address,uint) returns(bool)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "ERC20._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20.increaseAllowance(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC20.decreaseAllowance(address,uint) returns(bool)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC20._transfer(address,address,uint) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC20._mint(address,uint) returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC20._burn(address,uint) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "ERC20._approve(address,address,uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC20._spendAllowance(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC20._beforeTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20._afterTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "IERC20.totalSupply() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC20.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC20.transfer(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC20.allowance(address,address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC20.approve(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC20.transferFrom(address,address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Burnable.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20Burnable.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Burnable.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Burnable.decimals() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Burnable.totalSupply() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Burnable.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Burnable.transfer(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Burnable.allowance(address,address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Burnable.approve(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Burnable.transferFrom(address,address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Burnable.increaseAllowance(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC20Burnable.decreaseAllowance(address,uint) returns(bool)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC20Burnable._transfer(address,address,uint) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC20Burnable._mint(address,uint) returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC20Burnable._burn(address,uint) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "ERC20Burnable._approve(address,address,uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC20Burnable._spendAllowance(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC20Burnable._beforeTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20Burnable._afterTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20Burnable._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20Burnable._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20Burnable.burn(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20Burnable.burnFrom(address,uint) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20Capped.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20Capped.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Capped.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Capped.decimals() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Capped.totalSupply() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Capped.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Capped.transfer(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Capped.allowance(address,address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Capped.approve(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Capped.transferFrom(address,address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Capped.increaseAllowance(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC20Capped.decreaseAllowance(address,uint) returns(bool)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC20Capped._transfer(address,address,uint) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC20Capped._mint(address,uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC20Capped._burn(address,uint) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "ERC20Capped._approve(address,address,uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC20Capped._spendAllowance(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC20Capped._beforeTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20Capped._afterTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20Capped._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20Capped._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20Capped.constructor(uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC20Capped.cap() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20FlashMint.maxFlashLoan(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20FlashMint.flashFee(address,uint) returns(uint)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20FlashMint.flashLoan(IERC3156FlashBorrower,address,uint,bytes) returns(bool)": {
        "lines": 23,
        "type": [
            "public"
        ]
    },
    "ERC20FlashMint.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20FlashMint.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20FlashMint.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20FlashMint.decimals() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20FlashMint.totalSupply() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20FlashMint.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20FlashMint.transfer(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20FlashMint.allowance(address,address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20FlashMint.approve(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20FlashMint.transferFrom(address,address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20FlashMint.increaseAllowance(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC20FlashMint.decreaseAllowance(address,uint) returns(bool)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC20FlashMint._transfer(address,address,uint) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC20FlashMint._mint(address,uint) returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC20FlashMint._burn(address,uint) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "ERC20FlashMint._approve(address,address,uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC20FlashMint._spendAllowance(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC20FlashMint._beforeTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20FlashMint._afterTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20FlashMint._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20FlashMint._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20FlashMint._flashFee(address,uint) returns(uint)": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC20FlashMint._flashFeeReceiver() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20FlashMint.slitherConstructorConstantVariables() returns()": {
        "lines": 86,
        "type": [
            "internal"
        ]
    },
    "ERC20Pausable.constructor() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20Pausable.paused() returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20Pausable._requireNotPaused() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20Pausable._requirePaused() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20Pausable._pause() returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC20Pausable._unpause() returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC20Pausable._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20Pausable._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20Pausable.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20Pausable.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Pausable.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Pausable.decimals() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Pausable.totalSupply() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Pausable.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Pausable.transfer(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Pausable.allowance(address,address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Pausable.approve(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Pausable.transferFrom(address,address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Pausable.increaseAllowance(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC20Pausable.decreaseAllowance(address,uint) returns(bool)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC20Pausable._transfer(address,address,uint) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC20Pausable._mint(address,uint) returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC20Pausable._burn(address,uint) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "ERC20Pausable._approve(address,address,uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC20Pausable._spendAllowance(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC20Pausable._beforeTokenTransfer(address,address,uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC20Pausable._afterTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20Permit.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20Permit._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC20Permit._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "ERC20Permit._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20Permit.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "ERC20Permit.permit(address,address,uint,uint,uint,bytes32,bytes32) returns()": {
        "lines": 16,
        "type": [
            "public"
        ]
    },
    "ERC20Permit.nonces(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20Permit.DOMAIN_SEPARATOR() returns(bytes32)": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "ERC20Permit.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Permit.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Permit.decimals() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Permit.totalSupply() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Permit.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Permit.transfer(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Permit.allowance(address,address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Permit.approve(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Permit.transferFrom(address,address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Permit.increaseAllowance(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC20Permit.decreaseAllowance(address,uint) returns(bool)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC20Permit._transfer(address,address,uint) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC20Permit._mint(address,uint) returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC20Permit._burn(address,uint) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "ERC20Permit._approve(address,address,uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC20Permit._spendAllowance(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC20Permit._beforeTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20Permit._afterTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20Permit._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20Permit._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20Permit.constructor(string) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20Permit._useNonce(address) returns(uint)": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC20Permit.slitherConstructorConstantVariables() returns()": {
        "lines": 63,
        "type": [
            "internal"
        ]
    },
    "ERC20Snapshot.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20Snapshot.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Snapshot.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Snapshot.decimals() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Snapshot.totalSupply() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Snapshot.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Snapshot.transfer(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Snapshot.allowance(address,address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Snapshot.approve(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Snapshot.transferFrom(address,address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Snapshot.increaseAllowance(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC20Snapshot.decreaseAllowance(address,uint) returns(bool)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC20Snapshot._transfer(address,address,uint) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC20Snapshot._mint(address,uint) returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC20Snapshot._burn(address,uint) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "ERC20Snapshot._approve(address,address,uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC20Snapshot._spendAllowance(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC20Snapshot._beforeTokenTransfer(address,address,uint) returns()": {
        "lines": 16,
        "type": [
            "internal"
        ]
    },
    "ERC20Snapshot._afterTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20Snapshot._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20Snapshot._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20Snapshot._snapshot() returns(uint)": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC20Snapshot._getCurrentSnapshotId() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20Snapshot.balanceOfAt(address,uint) returns(uint)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20Snapshot.totalSupplyAt(uint) returns(uint)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20Snapshot._valueAt(uint,ERC20Snapshot.Snapshots) returns(bool,uint)": {
        "lines": 23,
        "type": [
            "private"
        ]
    },
    "ERC20Snapshot._updateAccountSnapshot(address) returns()": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "ERC20Snapshot._updateTotalSupplySnapshot() returns()": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "ERC20Snapshot._updateSnapshot(ERC20Snapshot.Snapshots,uint) returns()": {
        "lines": 7,
        "type": [
            "private"
        ]
    },
    "ERC20Snapshot._lastSnapshotId(uint[]) returns(uint)": {
        "lines": 7,
        "type": [
            "private"
        ]
    },
    "ERC20Votes.getVotes(address) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "ERC20Votes.getPastVotes(address,uint) returns(uint)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20Votes.getPastTotalSupply(uint) returns(uint)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20Votes.delegates(address) returns(address)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20Votes.delegate(address) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20Votes.delegateBySig(address,uint,uint,uint,bytes32,bytes32) returns()": {
        "lines": 18,
        "type": [
            "public"
        ]
    },
    "ERC20Votes.clock() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20Votes.CLOCK_MODE() returns(string)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC20Votes.constructor(string) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20Votes.permit(address,address,uint,uint,uint,bytes32,bytes32) returns()": {
        "lines": 9,
        "type": [
            "external"
        ]
    },
    "ERC20Votes.nonces(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Votes.DOMAIN_SEPARATOR() returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Votes._useNonce(address) returns(uint)": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC20Votes.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20Votes._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC20Votes._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "ERC20Votes._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20Votes.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "ERC20Votes.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Votes.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Votes.decimals() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Votes.totalSupply() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Votes.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Votes.transfer(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Votes.allowance(address,address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Votes.approve(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Votes.transferFrom(address,address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Votes.increaseAllowance(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC20Votes.decreaseAllowance(address,uint) returns(bool)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC20Votes._transfer(address,address,uint) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC20Votes._mint(address,uint) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC20Votes._burn(address,uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC20Votes._approve(address,address,uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC20Votes._spendAllowance(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC20Votes._beforeTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20Votes._afterTokenTransfer(address,address,uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC20Votes._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20Votes._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20Votes.checkpoints(address,uint) returns(ERC20Votes.Checkpoint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20Votes.numCheckpoints(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20Votes._checkpointsLookup(ERC20Votes.Checkpoint[],uint) returns(uint)": {
        "lines": 36,
        "type": [
            "private"
        ]
    },
    "ERC20Votes._maxSupply() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20Votes._delegate(address,address) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC20Votes._moveVotingPower(address,address,uint) returns()": {
        "lines": 12,
        "type": [
            "private"
        ]
    },
    "ERC20Votes._writeCheckpoint(ERC20Votes.Checkpoint[],function(uint,uint) returns(uint),uint) returns(uint,uint)": {
        "lines": 17,
        "type": [
            "private"
        ]
    },
    "ERC20Votes._add(uint,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "ERC20Votes._subtract(uint,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "ERC20Votes._unsafeAccess(ERC20Votes.Checkpoint[],uint) returns(ERC20Votes.Checkpoint)": {
        "lines": 6,
        "type": [
            "private"
        ]
    },
    "ERC20Votes.slitherConstructorConstantVariables() returns()": {
        "lines": 228,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesComp.clock() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesComp.CLOCK_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesComp.checkpoints(address,uint) returns(ERC20Votes.Checkpoint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20VotesComp.numCheckpoints(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20VotesComp.delegates(address) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesComp.getVotes(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesComp.getPastVotes(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesComp.getPastTotalSupply(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesComp._checkpointsLookup(ERC20Votes.Checkpoint[],uint) returns(uint)": {
        "lines": 36,
        "type": [
            "private"
        ]
    },
    "ERC20VotesComp.delegate(address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesComp.delegateBySig(address,uint,uint,uint,bytes32,bytes32) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesComp._maxSupply() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesComp._mint(address,uint) returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesComp._burn(address,uint) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesComp._afterTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesComp._delegate(address,address) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesComp._moveVotingPower(address,address,uint) returns()": {
        "lines": 12,
        "type": [
            "private"
        ]
    },
    "ERC20VotesComp._writeCheckpoint(ERC20Votes.Checkpoint[],function(uint,uint) returns(uint),uint) returns(uint,uint)": {
        "lines": 17,
        "type": [
            "private"
        ]
    },
    "ERC20VotesComp._add(uint,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "ERC20VotesComp._subtract(uint,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "ERC20VotesComp._unsafeAccess(ERC20Votes.Checkpoint[],uint) returns(ERC20Votes.Checkpoint)": {
        "lines": 6,
        "type": [
            "private"
        ]
    },
    "ERC20VotesComp.constructor(string) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesComp.permit(address,address,uint,uint,uint,bytes32,bytes32) returns()": {
        "lines": 9,
        "type": [
            "external"
        ]
    },
    "ERC20VotesComp.nonces(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesComp.DOMAIN_SEPARATOR() returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesComp._useNonce(address) returns(uint)": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesComp.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20VotesComp._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesComp._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "ERC20VotesComp._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesComp.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "ERC20VotesComp.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesComp.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesComp.decimals() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesComp.totalSupply() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesComp.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesComp.transfer(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesComp.allowance(address,address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesComp.approve(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesComp.transferFrom(address,address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20VotesComp.increaseAllowance(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC20VotesComp.decreaseAllowance(address,uint) returns(bool)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC20VotesComp._transfer(address,address,uint) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesComp._approve(address,address,uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesComp._spendAllowance(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesComp._beforeTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesComp._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesComp._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20VotesComp.getCurrentVotes(address) returns(uint)": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "ERC20VotesComp.getPriorVotes(address,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "ERC20VotesComp.slitherConstructorConstantVariables() returns()": {
        "lines": 20,
        "type": [
            "internal"
        ]
    },
    "ERC20Wrapper.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20Wrapper.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Wrapper.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Wrapper.decimals() returns(uint)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "ERC20Wrapper.totalSupply() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Wrapper.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Wrapper.transfer(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Wrapper.allowance(address,address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Wrapper.approve(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Wrapper.transferFrom(address,address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20Wrapper.increaseAllowance(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC20Wrapper.decreaseAllowance(address,uint) returns(bool)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC20Wrapper._transfer(address,address,uint) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC20Wrapper._mint(address,uint) returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC20Wrapper._burn(address,uint) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "ERC20Wrapper._approve(address,address,uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC20Wrapper._spendAllowance(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC20Wrapper._beforeTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20Wrapper._afterTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20Wrapper._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20Wrapper._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20Wrapper.constructor(IERC20) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC20Wrapper.underlying() returns(IERC20)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20Wrapper.depositFor(address,uint) returns(bool)": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "ERC20Wrapper.withdrawTo(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC20Wrapper._recover(address) returns(uint)": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC4626.asset() returns(address)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626.totalAssets() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626.convertToShares(uint) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626.convertToAssets(uint) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626.maxDeposit(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626.previewDeposit(uint) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626.deposit(uint,address) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "ERC4626.maxMint(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626.previewMint(uint) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626.mint(uint,address) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "ERC4626.maxWithdraw(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626.previewWithdraw(uint) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626.withdraw(uint,address,address) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "ERC4626.maxRedeem(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626.previewRedeem(uint) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626.redeem(uint,address,address) returns(uint)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "ERC4626.name() returns(string)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626.symbol() returns(string)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626.decimals() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626.totalSupply() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626.balanceOf(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626.transfer(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC4626.allowance(address,address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC4626.approve(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC4626.transferFrom(address,address,uint) returns(bool)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "ERC4626.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC4626.increaseAllowance(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC4626.decreaseAllowance(address,uint) returns(bool)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC4626._transfer(address,address,uint) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC4626._mint(address,uint) returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC4626._burn(address,uint) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "ERC4626._approve(address,address,uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC4626._spendAllowance(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC4626._beforeTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC4626._afterTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC4626._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC4626._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC4626.constructor(IERC20) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC4626._tryGetAssetDecimals(IERC20) returns(bool,uint)": {
        "lines": 12,
        "type": [
            "private"
        ]
    },
    "ERC4626._convertToShares(uint,Math.Rounding) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC4626._convertToAssets(uint,Math.Rounding) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC4626._deposit(address,address,uint,uint) returns()": {
        "lines": 12,
        "type": [
            "internal"
        ]
    },
    "ERC4626._withdraw(address,address,address,uint,uint) returns()": {
        "lines": 20,
        "type": [
            "internal"
        ]
    },
    "ERC4626._decimalsOffset() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "IERC20Metadata.totalSupply() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC20Metadata.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC20Metadata.transfer(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC20Metadata.allowance(address,address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC20Metadata.approve(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC20Metadata.transferFrom(address,address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC20Metadata.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC20Metadata.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC20Metadata.decimals() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC20Permit.permit(address,address,uint,uint,uint,bytes32,bytes32) returns()": {
        "lines": 9,
        "type": [
            "external"
        ]
    },
    "IERC20Permit.nonces(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC20Permit.DOMAIN_SEPARATOR() returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PresetFixedSupply.burn(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20PresetFixedSupply.burnFrom(address,uint) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20PresetFixedSupply.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20PresetFixedSupply.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PresetFixedSupply.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PresetFixedSupply.decimals() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PresetFixedSupply.totalSupply() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PresetFixedSupply.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PresetFixedSupply.transfer(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PresetFixedSupply.allowance(address,address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PresetFixedSupply.approve(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PresetFixedSupply.transferFrom(address,address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PresetFixedSupply.increaseAllowance(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC20PresetFixedSupply.decreaseAllowance(address,uint) returns(bool)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC20PresetFixedSupply._transfer(address,address,uint) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC20PresetFixedSupply._mint(address,uint) returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC20PresetFixedSupply._burn(address,uint) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "ERC20PresetFixedSupply._approve(address,address,uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC20PresetFixedSupply._spendAllowance(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC20PresetFixedSupply._beforeTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20PresetFixedSupply._afterTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20PresetFixedSupply._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20PresetFixedSupply._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20PresetFixedSupply.constructor(string,string,uint,address) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20PresetMinterPauser._beforeTokenTransfer(address,address,uint) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC20PresetMinterPauser.constructor() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20PresetMinterPauser.paused() returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20PresetMinterPauser._requireNotPaused() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20PresetMinterPauser._requirePaused() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20PresetMinterPauser._pause() returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC20PresetMinterPauser._unpause() returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC20PresetMinterPauser._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20PresetMinterPauser._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20PresetMinterPauser.constructor(string,string) returns()": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC20PresetMinterPauser.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PresetMinterPauser.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PresetMinterPauser.decimals() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PresetMinterPauser.totalSupply() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PresetMinterPauser.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PresetMinterPauser.transfer(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PresetMinterPauser.allowance(address,address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PresetMinterPauser.approve(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PresetMinterPauser.transferFrom(address,address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PresetMinterPauser.increaseAllowance(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC20PresetMinterPauser.decreaseAllowance(address,uint) returns(bool)": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC20PresetMinterPauser._transfer(address,address,uint) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC20PresetMinterPauser._mint(address,uint) returns()": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ERC20PresetMinterPauser._burn(address,uint) returns()": {
        "lines": 13,
        "type": [
            "internal"
        ]
    },
    "ERC20PresetMinterPauser._approve(address,address,uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC20PresetMinterPauser._spendAllowance(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC20PresetMinterPauser._afterTokenTransfer(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC20PresetMinterPauser.burn(uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC20PresetMinterPauser.burnFrom(address,uint) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20PresetMinterPauser.supportsInterface(bytes4) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PresetMinterPauser.getRoleMember(bytes32,uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PresetMinterPauser.getRoleMemberCount(bytes32) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PresetMinterPauser._grantRole(bytes32,address) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC20PresetMinterPauser._revokeRole(bytes32,address) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC20PresetMinterPauser.hasRole(bytes32,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PresetMinterPauser._checkRole(bytes32) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20PresetMinterPauser._checkRole(bytes32,address) returns()": {
        "lines": 14,
        "type": [
            "internal"
        ]
    },
    "ERC20PresetMinterPauser.getRoleAdmin(bytes32) returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PresetMinterPauser.grantRole(bytes32,address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PresetMinterPauser.revokeRole(bytes32,address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PresetMinterPauser.renounceRole(bytes32,address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC20PresetMinterPauser._setupRole(bytes32,address) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC20PresetMinterPauser._setRoleAdmin(bytes32,bytes32) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC20PresetMinterPauser.mint(address,uint) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20PresetMinterPauser.pause() returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20PresetMinterPauser.unpause() returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC20PresetMinterPauser.slitherConstructorConstantVariables() returns()": {
        "lines": 61,
        "type": [
            "internal"
        ]
    },
    "SafeERC20.safeTransfer(IERC20,address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SafeERC20.safeTransferFrom(IERC20,address,address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SafeERC20.safeApprove(IERC20,address,uint) returns()": {
        "lines": 10,
        "type": [
            "internal"
        ]
    },
    "SafeERC20.safeIncreaseAllowance(IERC20,address,uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SafeERC20.safeDecreaseAllowance(IERC20,address,uint) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "SafeERC20.forceApprove(IERC20,address,uint) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "SafeERC20.safePermit(IERC20Permit,address,address,uint,uint,uint,bytes32,bytes32) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "SafeERC20._callOptionalReturn(IERC20,bytes) returns()": {
        "lines": 7,
        "type": [
            "private"
        ]
    },
    "SafeERC20._callOptionalReturnBool(IERC20,bytes) returns(bool)": {
        "lines": 8,
        "type": [
            "private"
        ]
    },
    "TokenTimelock.constructor(IERC20,address,uint) returns()": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "TokenTimelock.token() returns(IERC20)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "TokenTimelock.beneficiary() returns(address)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "TokenTimelock.releaseTime() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "TokenTimelock.release() returns()": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "ERC721.name() returns(string)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC721.symbol() returns(string)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC721.tokenURI(uint) returns(string)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC721.balanceOf(address) returns(uint)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC721.ownerOf(uint) returns(address)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC721.safeTransferFrom(address,address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC721.safeTransferFrom(address,address,uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC721.transferFrom(address,address,uint) returns()": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC721.approve(address,uint) returns()": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC721.setApprovalForAll(address,bool) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC721.getApproved(uint) returns(address)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC721.isApprovedForAll(address,address) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC721.supportsInterface(bytes4) returns(bool)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "ERC721._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC721._baseURI() returns(string)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721._safeTransfer(address,address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721._ownerOf(uint) returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721._exists(uint) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721._isApprovedOrOwner(address,uint) returns(bool)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721._safeMint(address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721._safeMint(address,uint,bytes) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC721._mint(address,uint) returns()": {
        "lines": 17,
        "type": [
            "internal"
        ]
    },
    "ERC721._burn(uint) returns()": {
        "lines": 16,
        "type": [
            "internal"
        ]
    },
    "ERC721._transfer(address,address,uint) returns()": {
        "lines": 21,
        "type": [
            "internal"
        ]
    },
    "ERC721._approve(address,uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721._setApprovalForAll(address,address,bool) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC721._requireMinted(uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721._checkOnERC721Received(address,address,uint,bytes) returns(bool)": {
        "lines": 23,
        "type": [
            "private"
        ]
    },
    "ERC721._beforeTokenTransfer(address,address,uint,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC721._afterTokenTransfer(address,address,uint,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC721.__unsafe_increaseBalance(address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "IERC721.supportsInterface(bytes4) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721.ownerOf(uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721.safeTransferFrom(address,address,uint,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721.safeTransferFrom(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721.transferFrom(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721.approve(address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721.setApprovalForAll(address,bool) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721.getApproved(uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721.isApprovedForAll(address,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721Receiver.onERC721Received(address,address,uint,bytes) returns(bytes4)": {
        "lines": 6,
        "type": [
            "external"
        ]
    },
    "ERC721Burnable.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC721Burnable.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC721Burnable.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Burnable.ownerOf(uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Burnable.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Burnable.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Burnable.tokenURI(uint) returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Burnable._baseURI() returns(string)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Burnable.approve(address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Burnable.getApproved(uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Burnable.setApprovalForAll(address,bool) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Burnable.isApprovedForAll(address,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Burnable.transferFrom(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Burnable.safeTransferFrom(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Burnable.safeTransferFrom(address,address,uint,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Burnable._safeTransfer(address,address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721Burnable._ownerOf(uint) returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Burnable._exists(uint) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Burnable._isApprovedOrOwner(address,uint) returns(bool)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721Burnable._safeMint(address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Burnable._safeMint(address,uint,bytes) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC721Burnable._mint(address,uint) returns()": {
        "lines": 17,
        "type": [
            "internal"
        ]
    },
    "ERC721Burnable._burn(uint) returns()": {
        "lines": 16,
        "type": [
            "internal"
        ]
    },
    "ERC721Burnable._transfer(address,address,uint) returns()": {
        "lines": 21,
        "type": [
            "internal"
        ]
    },
    "ERC721Burnable._approve(address,uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721Burnable._setApprovalForAll(address,address,bool) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC721Burnable._requireMinted(uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Burnable._checkOnERC721Received(address,address,uint,bytes) returns(bool)": {
        "lines": 23,
        "type": [
            "private"
        ]
    },
    "ERC721Burnable._beforeTokenTransfer(address,address,uint,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC721Burnable._afterTokenTransfer(address,address,uint,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC721Burnable.__unsafe_increaseBalance(address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Burnable._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Burnable._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Burnable.burn(uint) returns()": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC721Consecutive.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC721Consecutive.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC721Consecutive.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Consecutive.ownerOf(uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Consecutive.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Consecutive.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Consecutive.tokenURI(uint) returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Consecutive._baseURI() returns(string)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Consecutive.approve(address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Consecutive.getApproved(uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Consecutive.setApprovalForAll(address,bool) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Consecutive.isApprovedForAll(address,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Consecutive.transferFrom(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Consecutive.safeTransferFrom(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Consecutive.safeTransferFrom(address,address,uint,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Consecutive._safeTransfer(address,address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721Consecutive._ownerOf(uint) returns(address)": {
        "lines": 10,
        "type": [
            "internal"
        ]
    },
    "ERC721Consecutive._exists(uint) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Consecutive._isApprovedOrOwner(address,uint) returns(bool)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721Consecutive._safeMint(address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Consecutive._safeMint(address,uint,bytes) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC721Consecutive._mint(address,uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721Consecutive._burn(uint) returns()": {
        "lines": 16,
        "type": [
            "internal"
        ]
    },
    "ERC721Consecutive._transfer(address,address,uint) returns()": {
        "lines": 21,
        "type": [
            "internal"
        ]
    },
    "ERC721Consecutive._approve(address,uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721Consecutive._setApprovalForAll(address,address,bool) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC721Consecutive._requireMinted(uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Consecutive._checkOnERC721Received(address,address,uint,bytes) returns(bool)": {
        "lines": 23,
        "type": [
            "private"
        ]
    },
    "ERC721Consecutive._beforeTokenTransfer(address,address,uint,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC721Consecutive._afterTokenTransfer(address,address,uint,uint) returns()": {
        "lines": 16,
        "type": [
            "internal"
        ]
    },
    "ERC721Consecutive.__unsafe_increaseBalance(address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Consecutive._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Consecutive._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Consecutive._maxBatchSize() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Consecutive._mintConsecutive(address,uint) returns(uint)": {
        "lines": 21,
        "type": [
            "internal"
        ]
    },
    "ERC721Consecutive._totalConsecutiveSupply() returns(uint)": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "ERC721Enumerable.totalSupply() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC721Enumerable.tokenOfOwnerByIndex(address,uint) returns(uint)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC721Enumerable.tokenByIndex(uint) returns(uint)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC721Enumerable.balanceOf(address) returns(uint)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC721Enumerable.ownerOf(uint) returns(address)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC721Enumerable.safeTransferFrom(address,address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC721Enumerable.safeTransferFrom(address,address,uint) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC721Enumerable.transferFrom(address,address,uint) returns()": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC721Enumerable.approve(address,uint) returns()": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC721Enumerable.setApprovalForAll(address,bool) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC721Enumerable.getApproved(uint) returns(address)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC721Enumerable.isApprovedForAll(address,address) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC721Enumerable.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC721Enumerable.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC721Enumerable.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Enumerable.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Enumerable.tokenURI(uint) returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Enumerable._baseURI() returns(string)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Enumerable._safeTransfer(address,address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721Enumerable._ownerOf(uint) returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Enumerable._exists(uint) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Enumerable._isApprovedOrOwner(address,uint) returns(bool)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721Enumerable._safeMint(address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Enumerable._safeMint(address,uint,bytes) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC721Enumerable._mint(address,uint) returns()": {
        "lines": 17,
        "type": [
            "internal"
        ]
    },
    "ERC721Enumerable._burn(uint) returns()": {
        "lines": 16,
        "type": [
            "internal"
        ]
    },
    "ERC721Enumerable._transfer(address,address,uint) returns()": {
        "lines": 21,
        "type": [
            "internal"
        ]
    },
    "ERC721Enumerable._approve(address,uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721Enumerable._setApprovalForAll(address,address,bool) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC721Enumerable._requireMinted(uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Enumerable._checkOnERC721Received(address,address,uint,bytes) returns(bool)": {
        "lines": 23,
        "type": [
            "private"
        ]
    },
    "ERC721Enumerable._beforeTokenTransfer(address,address,uint,uint) returns()": {
        "lines": 23,
        "type": [
            "internal"
        ]
    },
    "ERC721Enumerable._afterTokenTransfer(address,address,uint,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC721Enumerable.__unsafe_increaseBalance(address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Enumerable._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Enumerable._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Enumerable._addTokenToOwnerEnumeration(address,uint) returns()": {
        "lines": 5,
        "type": [
            "private"
        ]
    },
    "ERC721Enumerable._addTokenToAllTokensEnumeration(uint) returns()": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "ERC721Enumerable._removeTokenFromOwnerEnumeration(address,uint) returns()": {
        "lines": 15,
        "type": [
            "private"
        ]
    },
    "ERC721Enumerable._removeTokenFromAllTokensEnumeration(uint) returns()": {
        "lines": 15,
        "type": [
            "private"
        ]
    },
    "ERC721Pausable.constructor() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Pausable.paused() returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC721Pausable._requireNotPaused() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Pausable._requirePaused() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Pausable._pause() returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721Pausable._unpause() returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721Pausable._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Pausable._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Pausable.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC721Pausable.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC721Pausable.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Pausable.ownerOf(uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Pausable.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Pausable.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Pausable.tokenURI(uint) returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Pausable._baseURI() returns(string)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Pausable.approve(address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Pausable.getApproved(uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Pausable.setApprovalForAll(address,bool) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Pausable.isApprovedForAll(address,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Pausable.transferFrom(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Pausable.safeTransferFrom(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Pausable.safeTransferFrom(address,address,uint,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Pausable._safeTransfer(address,address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721Pausable._ownerOf(uint) returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Pausable._exists(uint) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Pausable._isApprovedOrOwner(address,uint) returns(bool)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721Pausable._safeMint(address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Pausable._safeMint(address,uint,bytes) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC721Pausable._mint(address,uint) returns()": {
        "lines": 17,
        "type": [
            "internal"
        ]
    },
    "ERC721Pausable._burn(uint) returns()": {
        "lines": 16,
        "type": [
            "internal"
        ]
    },
    "ERC721Pausable._transfer(address,address,uint) returns()": {
        "lines": 21,
        "type": [
            "internal"
        ]
    },
    "ERC721Pausable._approve(address,uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721Pausable._setApprovalForAll(address,address,bool) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC721Pausable._requireMinted(uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Pausable._checkOnERC721Received(address,address,uint,bytes) returns(bool)": {
        "lines": 23,
        "type": [
            "private"
        ]
    },
    "ERC721Pausable._beforeTokenTransfer(address,address,uint,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC721Pausable._afterTokenTransfer(address,address,uint,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC721Pausable.__unsafe_increaseBalance(address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Royalty.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC721Royalty.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC721Royalty.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Royalty.ownerOf(uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Royalty.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Royalty.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Royalty.tokenURI(uint) returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Royalty._baseURI() returns(string)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Royalty.approve(address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Royalty.getApproved(uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Royalty.setApprovalForAll(address,bool) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Royalty.isApprovedForAll(address,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Royalty.transferFrom(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Royalty.safeTransferFrom(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Royalty.safeTransferFrom(address,address,uint,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Royalty._safeTransfer(address,address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721Royalty._ownerOf(uint) returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Royalty._exists(uint) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Royalty._isApprovedOrOwner(address,uint) returns(bool)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721Royalty._safeMint(address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Royalty._safeMint(address,uint,bytes) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC721Royalty._mint(address,uint) returns()": {
        "lines": 17,
        "type": [
            "internal"
        ]
    },
    "ERC721Royalty._burn(uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721Royalty._transfer(address,address,uint) returns()": {
        "lines": 21,
        "type": [
            "internal"
        ]
    },
    "ERC721Royalty._approve(address,uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721Royalty._setApprovalForAll(address,address,bool) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC721Royalty._requireMinted(uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Royalty._checkOnERC721Received(address,address,uint,bytes) returns(bool)": {
        "lines": 23,
        "type": [
            "private"
        ]
    },
    "ERC721Royalty._beforeTokenTransfer(address,address,uint,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC721Royalty._afterTokenTransfer(address,address,uint,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC721Royalty.__unsafe_increaseBalance(address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Royalty._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Royalty._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Royalty.royaltyInfo(uint,uint) returns(address,uint)": {
        "lines": 4,
        "type": [
            "external"
        ]
    },
    "ERC721Royalty._feeDenominator() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Royalty._setDefaultRoyalty(address,uint) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC721Royalty._deleteDefaultRoyalty() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Royalty._setTokenRoyalty(uint,address,uint) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC721Royalty._resetTokenRoyalty(uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorage.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC721URIStorage.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC721URIStorage.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721URIStorage.ownerOf(uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721URIStorage.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721URIStorage.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721URIStorage.tokenURI(uint) returns(string)": {
        "lines": 14,
        "type": [
            "public"
        ]
    },
    "ERC721URIStorage._baseURI() returns(string)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorage.approve(address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721URIStorage.getApproved(uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721URIStorage.setApprovalForAll(address,bool) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721URIStorage.isApprovedForAll(address,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721URIStorage.transferFrom(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721URIStorage.safeTransferFrom(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721URIStorage.safeTransferFrom(address,address,uint,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721URIStorage._safeTransfer(address,address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorage._ownerOf(uint) returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorage._exists(uint) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorage._isApprovedOrOwner(address,uint) returns(bool)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorage._safeMint(address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorage._safeMint(address,uint,bytes) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorage._mint(address,uint) returns()": {
        "lines": 17,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorage._burn(uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorage._transfer(address,address,uint) returns()": {
        "lines": 21,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorage._approve(address,uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorage._setApprovalForAll(address,address,bool) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorage._requireMinted(uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorage._checkOnERC721Received(address,address,uint,bytes) returns(bool)": {
        "lines": 23,
        "type": [
            "private"
        ]
    },
    "ERC721URIStorage._beforeTokenTransfer(address,address,uint,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorage._afterTokenTransfer(address,address,uint,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorage.__unsafe_increaseBalance(address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorage._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorage._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721URIStorage._setTokenURI(uint,string) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC721Votes.clock() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Votes.CLOCK_MODE() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Votes.getVotes(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Votes.getPastVotes(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Votes.getPastTotalSupply(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Votes._getTotalSupply() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Votes.delegates(address) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Votes.delegate(address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Votes.delegateBySig(address,uint,uint,uint,bytes32,bytes32) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Votes._delegate(address,address) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC721Votes._transferVotingUnits(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC721Votes._moveDelegateVotes(address,address,uint) returns()": {
        "lines": 20,
        "type": [
            "private"
        ]
    },
    "ERC721Votes._push(Checkpoints.Trace224,function(uint,uint) returns(uint),uint) returns(uint,uint)": {
        "lines": 7,
        "type": [
            "private"
        ]
    },
    "ERC721Votes._add(uint,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "ERC721Votes._subtract(uint,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "ERC721Votes._useNonce(address) returns(uint)": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC721Votes.nonces(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC721Votes.DOMAIN_SEPARATOR() returns(bytes32)": {
        "lines": 3,
        "type": [
            "external"
        ]
    },
    "ERC721Votes._getVotingUnits(address) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Votes.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC721Votes._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC721Votes._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "ERC721Votes._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Votes.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 12,
        "type": [
            "external"
        ]
    },
    "ERC721Votes._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Votes._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Votes.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC721Votes.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Votes.ownerOf(uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Votes.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Votes.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Votes.tokenURI(uint) returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Votes._baseURI() returns(string)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Votes.approve(address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Votes.getApproved(uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Votes.setApprovalForAll(address,bool) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Votes.isApprovedForAll(address,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Votes.transferFrom(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Votes.safeTransferFrom(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Votes.safeTransferFrom(address,address,uint,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Votes._safeTransfer(address,address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721Votes._ownerOf(uint) returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Votes._exists(uint) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Votes._isApprovedOrOwner(address,uint) returns(bool)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721Votes._safeMint(address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Votes._safeMint(address,uint,bytes) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC721Votes._mint(address,uint) returns()": {
        "lines": 17,
        "type": [
            "internal"
        ]
    },
    "ERC721Votes._burn(uint) returns()": {
        "lines": 16,
        "type": [
            "internal"
        ]
    },
    "ERC721Votes._transfer(address,address,uint) returns()": {
        "lines": 21,
        "type": [
            "internal"
        ]
    },
    "ERC721Votes._approve(address,uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721Votes._setApprovalForAll(address,address,bool) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC721Votes._requireMinted(uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Votes._checkOnERC721Received(address,address,uint,bytes) returns(bool)": {
        "lines": 23,
        "type": [
            "private"
        ]
    },
    "ERC721Votes._beforeTokenTransfer(address,address,uint,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC721Votes._afterTokenTransfer(address,address,uint,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC721Votes.__unsafe_increaseBalance(address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Votes.slitherConstructorConstantVariables() returns()": {
        "lines": 24,
        "type": [
            "internal"
        ]
    },
    "ERC721Wrapper.onERC721Received(address,address,uint,bytes) returns(bytes4)": {
        "lines": 10,
        "type": [
            "public"
        ]
    },
    "ERC721Wrapper.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC721Wrapper.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC721Wrapper.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Wrapper.ownerOf(uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Wrapper.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Wrapper.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Wrapper.tokenURI(uint) returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Wrapper._baseURI() returns(string)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Wrapper.approve(address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Wrapper.getApproved(uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Wrapper.setApprovalForAll(address,bool) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Wrapper.isApprovedForAll(address,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Wrapper.transferFrom(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Wrapper.safeTransferFrom(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Wrapper.safeTransferFrom(address,address,uint,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721Wrapper._safeTransfer(address,address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721Wrapper._ownerOf(uint) returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Wrapper._exists(uint) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Wrapper._isApprovedOrOwner(address,uint) returns(bool)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721Wrapper._safeMint(address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Wrapper._safeMint(address,uint,bytes) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC721Wrapper._mint(address,uint) returns()": {
        "lines": 17,
        "type": [
            "internal"
        ]
    },
    "ERC721Wrapper._burn(uint) returns()": {
        "lines": 16,
        "type": [
            "internal"
        ]
    },
    "ERC721Wrapper._transfer(address,address,uint) returns()": {
        "lines": 21,
        "type": [
            "internal"
        ]
    },
    "ERC721Wrapper._approve(address,uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721Wrapper._setApprovalForAll(address,address,bool) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC721Wrapper._requireMinted(uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Wrapper._checkOnERC721Received(address,address,uint,bytes) returns(bool)": {
        "lines": 23,
        "type": [
            "private"
        ]
    },
    "ERC721Wrapper._beforeTokenTransfer(address,address,uint,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC721Wrapper._afterTokenTransfer(address,address,uint,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC721Wrapper.__unsafe_increaseBalance(address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Wrapper._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Wrapper._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Wrapper.constructor(IERC721) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721Wrapper.depositFor(address,uint[]) returns(bool)": {
        "lines": 12,
        "type": [
            "public"
        ]
    },
    "ERC721Wrapper.withdrawTo(address,uint[]) returns(bool)": {
        "lines": 13,
        "type": [
            "public"
        ]
    },
    "ERC721Wrapper._recover(address,uint) returns(uint)": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC721Wrapper.underlying() returns(IERC721)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "IERC721Enumerable.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721Enumerable.ownerOf(uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721Enumerable.safeTransferFrom(address,address,uint,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721Enumerable.safeTransferFrom(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721Enumerable.transferFrom(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721Enumerable.approve(address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721Enumerable.setApprovalForAll(address,bool) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721Enumerable.getApproved(uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721Enumerable.isApprovedForAll(address,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721Enumerable.supportsInterface(bytes4) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721Enumerable.totalSupply() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721Enumerable.tokenOfOwnerByIndex(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721Enumerable.tokenByIndex(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721Metadata.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721Metadata.ownerOf(uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721Metadata.safeTransferFrom(address,address,uint,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721Metadata.safeTransferFrom(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721Metadata.transferFrom(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721Metadata.approve(address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721Metadata.setApprovalForAll(address,bool) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721Metadata.getApproved(uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721Metadata.isApprovedForAll(address,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721Metadata.supportsInterface(bytes4) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721Metadata.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721Metadata.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC721Metadata.tokenURI(uint) returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721PresetMinterPauserAutoId._beforeTokenTransfer(address,address,uint,uint) returns()": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "ERC721PresetMinterPauserAutoId.constructor() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721PresetMinterPauserAutoId.paused() returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC721PresetMinterPauserAutoId._requireNotPaused() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721PresetMinterPauserAutoId._requirePaused() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721PresetMinterPauserAutoId._pause() returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721PresetMinterPauserAutoId._unpause() returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721PresetMinterPauserAutoId._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721PresetMinterPauserAutoId._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721PresetMinterPauserAutoId.constructor(string,string) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC721PresetMinterPauserAutoId.supportsInterface(bytes4) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC721PresetMinterPauserAutoId.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721PresetMinterPauserAutoId.ownerOf(uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721PresetMinterPauserAutoId.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721PresetMinterPauserAutoId.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721PresetMinterPauserAutoId.tokenURI(uint) returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721PresetMinterPauserAutoId._baseURI() returns(string)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721PresetMinterPauserAutoId.approve(address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721PresetMinterPauserAutoId.getApproved(uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721PresetMinterPauserAutoId.setApprovalForAll(address,bool) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721PresetMinterPauserAutoId.isApprovedForAll(address,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721PresetMinterPauserAutoId.transferFrom(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721PresetMinterPauserAutoId.safeTransferFrom(address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721PresetMinterPauserAutoId.safeTransferFrom(address,address,uint,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721PresetMinterPauserAutoId._safeTransfer(address,address,uint,bytes) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721PresetMinterPauserAutoId._ownerOf(uint) returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721PresetMinterPauserAutoId._exists(uint) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721PresetMinterPauserAutoId._isApprovedOrOwner(address,uint) returns(bool)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721PresetMinterPauserAutoId._safeMint(address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721PresetMinterPauserAutoId._safeMint(address,uint,bytes) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC721PresetMinterPauserAutoId._mint(address,uint) returns()": {
        "lines": 17,
        "type": [
            "internal"
        ]
    },
    "ERC721PresetMinterPauserAutoId._burn(uint) returns()": {
        "lines": 16,
        "type": [
            "internal"
        ]
    },
    "ERC721PresetMinterPauserAutoId._transfer(address,address,uint) returns()": {
        "lines": 21,
        "type": [
            "internal"
        ]
    },
    "ERC721PresetMinterPauserAutoId._approve(address,uint) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC721PresetMinterPauserAutoId._setApprovalForAll(address,address,bool) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC721PresetMinterPauserAutoId._requireMinted(uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721PresetMinterPauserAutoId._checkOnERC721Received(address,address,uint,bytes) returns(bool)": {
        "lines": 23,
        "type": [
            "private"
        ]
    },
    "ERC721PresetMinterPauserAutoId._afterTokenTransfer(address,address,uint,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC721PresetMinterPauserAutoId.__unsafe_increaseBalance(address,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721PresetMinterPauserAutoId.burn(uint) returns()": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC721PresetMinterPauserAutoId.tokenOfOwnerByIndex(address,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721PresetMinterPauserAutoId.totalSupply() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721PresetMinterPauserAutoId.tokenByIndex(uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721PresetMinterPauserAutoId._addTokenToOwnerEnumeration(address,uint) returns()": {
        "lines": 5,
        "type": [
            "private"
        ]
    },
    "ERC721PresetMinterPauserAutoId._addTokenToAllTokensEnumeration(uint) returns()": {
        "lines": 4,
        "type": [
            "private"
        ]
    },
    "ERC721PresetMinterPauserAutoId._removeTokenFromOwnerEnumeration(address,uint) returns()": {
        "lines": 15,
        "type": [
            "private"
        ]
    },
    "ERC721PresetMinterPauserAutoId._removeTokenFromAllTokensEnumeration(uint) returns()": {
        "lines": 15,
        "type": [
            "private"
        ]
    },
    "ERC721PresetMinterPauserAutoId.getRoleMember(bytes32,uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721PresetMinterPauserAutoId.getRoleMemberCount(bytes32) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721PresetMinterPauserAutoId._grantRole(bytes32,address) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC721PresetMinterPauserAutoId._revokeRole(bytes32,address) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC721PresetMinterPauserAutoId.hasRole(bytes32,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721PresetMinterPauserAutoId._checkRole(bytes32) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721PresetMinterPauserAutoId._checkRole(bytes32,address) returns()": {
        "lines": 14,
        "type": [
            "internal"
        ]
    },
    "ERC721PresetMinterPauserAutoId.getRoleAdmin(bytes32) returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721PresetMinterPauserAutoId.grantRole(bytes32,address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721PresetMinterPauserAutoId.revokeRole(bytes32,address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721PresetMinterPauserAutoId.renounceRole(bytes32,address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC721PresetMinterPauserAutoId._setupRole(bytes32,address) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC721PresetMinterPauserAutoId._setRoleAdmin(bytes32,bytes32) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC721PresetMinterPauserAutoId.constructor(string,string,string) returns()": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "ERC721PresetMinterPauserAutoId.mint(address) returns()": {
        "lines": 7,
        "type": [
            "public"
        ]
    },
    "ERC721PresetMinterPauserAutoId.pause() returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC721PresetMinterPauserAutoId.unpause() returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC721PresetMinterPauserAutoId.slitherConstructorConstantVariables() returns()": {
        "lines": 89,
        "type": [
            "internal"
        ]
    },
    "ERC721Holder.onERC721Received(address,address,uint,bytes) returns(bytes4)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC777.totalSupply() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC777.balanceOf(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC777.transfer(address,uint) returns(bool)": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC777.allowance(address,address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC777.approve(address,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ERC777.transferFrom(address,address,uint) returns(bool)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "ERC777.name() returns(string)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC777.symbol() returns(string)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC777.granularity() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC777.send(address,uint,bytes) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC777.burn(uint,bytes) returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC777.isOperatorFor(address,address) returns(bool)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "ERC777.authorizeOperator(address) returns()": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC777.revokeOperator(address) returns()": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC777.defaultOperators() returns(address[])": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC777.operatorSend(address,address,uint,bytes,bytes) returns()": {
        "lines": 10,
        "type": [
            "public"
        ]
    },
    "ERC777.operatorBurn(address,uint,bytes,bytes) returns()": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC777._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC777._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC777.constructor(string,string,address[]) returns()": {
        "lines": 11,
        "type": [
            "public"
        ]
    },
    "ERC777.decimals() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC777._mint(address,uint,bytes,bytes) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC777._mint(address,uint,bytes,bytes,bool) returns()": {
        "lines": 17,
        "type": [
            "internal"
        ]
    },
    "ERC777._send(address,address,uint,bytes,bytes,bool) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC777._burn(address,uint,bytes,bytes) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC777._move(address,address,address,uint,bytes,bytes) returns()": {
        "lines": 18,
        "type": [
            "private"
        ]
    },
    "ERC777._approve(address,address,uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC777._callTokensToSend(address,address,address,uint,bytes,bytes) returns()": {
        "lines": 13,
        "type": [
            "private"
        ]
    },
    "ERC777._callTokensReceived(address,address,address,uint,bytes,bytes,bool) returns()": {
        "lines": 16,
        "type": [
            "private"
        ]
    },
    "ERC777._spendAllowance(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC777._beforeTokenTransfer(address,address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC777.slitherConstructorConstantVariables() returns()": {
        "lines": 423,
        "type": [
            "internal"
        ]
    },
    "IERC777.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC777.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC777.granularity() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC777.totalSupply() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC777.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC777.send(address,uint,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC777.burn(uint,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC777.isOperatorFor(address,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC777.authorizeOperator(address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC777.revokeOperator(address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC777.defaultOperators() returns(address[])": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC777.operatorSend(address,address,uint,bytes,bytes) returns()": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "IERC777.operatorBurn(address,uint,bytes,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC777Recipient.tokensReceived(address,address,address,uint,bytes,bytes) returns()": {
        "lines": 8,
        "type": [
            "external"
        ]
    },
    "IERC777Sender.tokensToSend(address,address,address,uint,bytes,bytes) returns()": {
        "lines": 8,
        "type": [
            "external"
        ]
    },
    "ERC777PresetFixedSupply.constructor(string,string,address[]) returns()": {
        "lines": 11,
        "type": [
            "public"
        ]
    },
    "ERC777PresetFixedSupply.name() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC777PresetFixedSupply.symbol() returns(string)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC777PresetFixedSupply.decimals() returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC777PresetFixedSupply.granularity() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC777PresetFixedSupply.totalSupply() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC777PresetFixedSupply.balanceOf(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC777PresetFixedSupply.send(address,uint,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC777PresetFixedSupply.transfer(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC777PresetFixedSupply.burn(uint,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC777PresetFixedSupply.isOperatorFor(address,address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC777PresetFixedSupply.authorizeOperator(address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC777PresetFixedSupply.revokeOperator(address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC777PresetFixedSupply.defaultOperators() returns(address[])": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC777PresetFixedSupply.operatorSend(address,address,uint,bytes,bytes) returns()": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "ERC777PresetFixedSupply.operatorBurn(address,uint,bytes,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC777PresetFixedSupply.allowance(address,address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC777PresetFixedSupply.approve(address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC777PresetFixedSupply.transferFrom(address,address,uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ERC777PresetFixedSupply._mint(address,uint,bytes,bytes) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC777PresetFixedSupply._mint(address,uint,bytes,bytes,bool) returns()": {
        "lines": 17,
        "type": [
            "internal"
        ]
    },
    "ERC777PresetFixedSupply._send(address,address,uint,bytes,bytes,bool) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC777PresetFixedSupply._burn(address,uint,bytes,bytes) returns()": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC777PresetFixedSupply._move(address,address,address,uint,bytes,bytes) returns()": {
        "lines": 18,
        "type": [
            "private"
        ]
    },
    "ERC777PresetFixedSupply._approve(address,address,uint) returns()": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "ERC777PresetFixedSupply._callTokensToSend(address,address,address,uint,bytes,bytes) returns()": {
        "lines": 13,
        "type": [
            "private"
        ]
    },
    "ERC777PresetFixedSupply._callTokensReceived(address,address,address,uint,bytes,bytes,bool) returns()": {
        "lines": 16,
        "type": [
            "private"
        ]
    },
    "ERC777PresetFixedSupply._spendAllowance(address,address,uint) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ERC777PresetFixedSupply._beforeTokenTransfer(address,address,address,uint) returns()": {
        "lines": 1,
        "type": [
            "internal"
        ]
    },
    "ERC777PresetFixedSupply._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC777PresetFixedSupply._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC777PresetFixedSupply.constructor(string,string,address[],uint,address) returns()": {
        "lines": 9,
        "type": [
            "public"
        ]
    },
    "ERC777PresetFixedSupply.slitherConstructorConstantVariables() returns()": {
        "lines": 16,
        "type": [
            "internal"
        ]
    },
    "ERC2981.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC2981.royaltyInfo(uint,uint) returns(address,uint)": {
        "lines": 8,
        "type": [
            "public"
        ]
    },
    "ERC2981._feeDenominator() returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC2981._setDefaultRoyalty(address,uint) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC2981._deleteDefaultRoyalty() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC2981._setTokenRoyalty(uint,address,uint) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ERC2981._resetTokenRoyalty(uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Address.isContract(address) returns(bool)": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "Address.sendValue(address,uint) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "Address.functionCall(address,bytes) returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Address.functionCall(address,bytes,string) returns(bytes)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "Address.functionCallWithValue(address,bytes,uint) returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Address.functionCallWithValue(address,bytes,uint,string) returns(bytes)": {
        "lines": 10,
        "type": [
            "internal"
        ]
    },
    "Address.functionStaticCall(address,bytes) returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Address.functionStaticCall(address,bytes,string) returns(bytes)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "Address.functionDelegateCall(address,bytes) returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Address.functionDelegateCall(address,bytes,string) returns(bytes)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "Address.verifyCallResultFromTarget(address,bool,bytes,string) returns(bytes)": {
        "lines": 17,
        "type": [
            "internal"
        ]
    },
    "Address.verifyCallResult(bool,bytes,string) returns(bytes)": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "Address._revert(bytes,string) returns()": {
        "lines": 13,
        "type": [
            "private"
        ]
    },
    "Arrays.findUpperBound(uint[],uint) returns(uint)": {
        "lines": 23,
        "type": [
            "internal"
        ]
    },
    "Arrays.unsafeAccess(address[],uint) returns(StorageSlot.AddressSlot)": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "Arrays.unsafeAccess(bytes32[],uint) returns(StorageSlot.Bytes32Slot)": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "Arrays.unsafeAccess(uint[],uint) returns(StorageSlot.UintSlot)": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "Base64.encode(bytes) returns(string)": {
        "lines": 59,
        "type": [
            "internal"
        ]
    },
    "Base64.slitherConstructorConstantVariables() returns()": {
        "lines": 68,
        "type": [
            "internal"
        ]
    },
    "Checkpoints.getAtBlock(Checkpoints.History,uint) returns(uint)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "Checkpoints.getAtProbablyRecentBlock(Checkpoints.History,uint) returns(uint)": {
        "lines": 17,
        "type": [
            "internal"
        ]
    },
    "Checkpoints.push(Checkpoints.History,uint) returns(uint,uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Checkpoints.push(Checkpoints.History,function(uint,uint) returns(uint),uint) returns(uint,uint)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "Checkpoints.latest(Checkpoints.History) returns(uint)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "Checkpoints.latestCheckpoint(Checkpoints.History) returns(bool,uint,uint)": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "Checkpoints.length(Checkpoints.History) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Checkpoints._insert(Checkpoints.Checkpoint[],uint,uint) returns(uint,uint)": {
        "lines": 19,
        "type": [
            "private"
        ]
    },
    "Checkpoints._upperBinaryLookup(Checkpoints.Checkpoint[],uint,uint,uint) returns(uint)": {
        "lines": 16,
        "type": [
            "private"
        ]
    },
    "Checkpoints._lowerBinaryLookup(Checkpoints.Checkpoint[],uint,uint,uint) returns(uint)": {
        "lines": 16,
        "type": [
            "private"
        ]
    },
    "Checkpoints._unsafeAccess(Checkpoints.Checkpoint[],uint) returns(Checkpoints.Checkpoint)": {
        "lines": 9,
        "type": [
            "private"
        ]
    },
    "Checkpoints.push(Checkpoints.Trace224,uint,uint) returns(uint,uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Checkpoints.lowerLookup(Checkpoints.Trace224,uint) returns(uint)": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "Checkpoints.upperLookup(Checkpoints.Trace224,uint) returns(uint)": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "Checkpoints.upperLookupRecent(Checkpoints.Trace224,uint) returns(uint)": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "Checkpoints.latest(Checkpoints.Trace224) returns(uint)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "Checkpoints.latestCheckpoint(Checkpoints.Trace224) returns(bool,uint,uint)": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "Checkpoints.length(Checkpoints.Trace224) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Checkpoints.push(Checkpoints.Trace160,uint,uint) returns(uint,uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Checkpoints.lowerLookup(Checkpoints.Trace160,uint) returns(uint)": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "Checkpoints.upperLookup(Checkpoints.Trace160,uint) returns(uint)": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "Checkpoints.upperLookupRecent(Checkpoints.Trace160,uint) returns(uint)": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "Checkpoints.latest(Checkpoints.Trace160) returns(uint)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "Checkpoints.latestCheckpoint(Checkpoints.Trace160) returns(bool,uint,uint)": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "Checkpoints.length(Checkpoints.Trace160) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Context._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Context._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Counters.current(Counters.Counter) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Counters.increment(Counters.Counter) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "Counters.decrement(Counters.Counter) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "Counters.reset(Counters.Counter) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Create2.deploy(uint,bytes32,bytes) returns(address)": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "Create2.computeAddress(bytes32,bytes32) returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Create2.computeAddress(bytes32,bytes32,address) returns(address)": {
        "lines": 20,
        "type": [
            "internal"
        ]
    },
    "Multicall.multicall(bytes[]) returns(bytes[])": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "ShortStrings.toShortString(string) returns(ShortString)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ShortStrings.toString(ShortString) returns(string)": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "ShortStrings.byteLength(ShortString) returns(uint)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ShortStrings.toShortStringWithFallback(string,string) returns(ShortString)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "ShortStrings.toStringWithFallback(ShortString,string) returns(string)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ShortStrings.byteLengthWithFallback(ShortString,string) returns(uint)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ShortStrings.slitherConstructorConstantVariables() returns()": {
        "lines": 76,
        "type": [
            "internal"
        ]
    },
    "StorageSlot.getAddressSlot(bytes32) returns(StorageSlot.AddressSlot)": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "StorageSlot.getBooleanSlot(bytes32) returns(StorageSlot.BooleanSlot)": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "StorageSlot.getBytes32Slot(bytes32) returns(StorageSlot.Bytes32Slot)": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "StorageSlot.getUintSlot(bytes32) returns(StorageSlot.UintSlot)": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "StorageSlot.getStringSlot(bytes32) returns(StorageSlot.StringSlot)": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "StorageSlot.getStringSlot(string) returns(StorageSlot.StringSlot)": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "StorageSlot.getBytesSlot(bytes32) returns(StorageSlot.BytesSlot)": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "StorageSlot.getBytesSlot(bytes) returns(StorageSlot.BytesSlot)": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "Strings.toString(uint) returns(string)": {
        "lines": 21,
        "type": [
            "internal"
        ]
    },
    "Strings.toString(int) returns(string)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Strings.toHexString(uint) returns(string)": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "Strings.toHexString(uint,uint) returns(string)": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "Strings.toHexString(address) returns(string)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Strings.equal(string,string) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Strings.slitherConstructorConstantVariables() returns()": {
        "lines": 68,
        "type": [
            "internal"
        ]
    },
    "Timers.getDeadline(Timers.Timestamp) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Timers.setDeadline(Timers.Timestamp,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Timers.reset(Timers.Timestamp) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Timers.isUnset(Timers.Timestamp) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Timers.isStarted(Timers.Timestamp) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Timers.isPending(Timers.Timestamp) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Timers.isExpired(Timers.Timestamp) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Timers.getDeadline(Timers.BlockNumber) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Timers.setDeadline(Timers.BlockNumber,uint) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Timers.reset(Timers.BlockNumber) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Timers.isUnset(Timers.BlockNumber) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Timers.isStarted(Timers.BlockNumber) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Timers.isPending(Timers.BlockNumber) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Timers.isExpired(Timers.BlockNumber) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ECDSA._throwError(ECDSA.RecoverError) returns()": {
        "lines": 11,
        "type": [
            "private"
        ]
    },
    "ECDSA.tryRecover(bytes32,bytes) returns(address,ECDSA.RecoverError)": {
        "lines": 18,
        "type": [
            "internal"
        ]
    },
    "ECDSA.recover(bytes32,bytes) returns(address)": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ECDSA.tryRecover(bytes32,bytes32,bytes32) returns(address,ECDSA.RecoverError)": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ECDSA.recover(bytes32,bytes32,bytes32) returns(address)": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ECDSA.tryRecover(bytes32,uint,bytes32,bytes32) returns(address,ECDSA.RecoverError)": {
        "lines": 19,
        "type": [
            "internal"
        ]
    },
    "ECDSA.recover(bytes32,uint,bytes32,bytes32) returns(address)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ECDSA.toEthSignedMessageHash(bytes32) returns(bytes32)": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ECDSA.toEthSignedMessageHash(bytes) returns(bytes32)": {
        "lines": 2,
        "type": [
            "internal"
        ]
    },
    "ECDSA.toTypedDataHash(bytes32,bytes32) returns(bytes32)": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "ECDSA.toDataWithIntendedValidatorHash(address,bytes) returns(bytes32)": {
        "lines": 2,
        "type": [
            "internal"
        ]
    },
    "EIP712.eip712Domain() returns(bytes1,string,string,uint,address,bytes32,uint[])": {
        "lines": 25,
        "type": [
            "public"
        ]
    },
    "EIP712.constructor(string,string) returns()": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "EIP712._domainSeparatorV4() returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "EIP712._buildDomainSeparator() returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "EIP712._hashTypedDataV4(bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EIP712.slitherConstructorConstantVariables() returns()": {
        "lines": 98,
        "type": [
            "internal"
        ]
    },
    "MerkleProof.verify(bytes32[],bytes32,bytes32) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MerkleProof.verifyCalldata(bytes32[],bytes32,bytes32) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "MerkleProof.processProof(bytes32[],bytes32) returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "MerkleProof.processProofCalldata(bytes32[],bytes32) returns(bytes32)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "MerkleProof.multiProofVerify(bytes32[],bool[],bytes32,bytes32[]) returns(bool)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "MerkleProof.multiProofVerifyCalldata(bytes32[],bool[],bytes32,bytes32[]) returns(bool)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "MerkleProof.processMultiProof(bytes32[],bool[],bytes32[]) returns(bytes32)": {
        "lines": 41,
        "type": [
            "internal"
        ]
    },
    "MerkleProof.processMultiProofCalldata(bytes32[],bool[],bytes32[]) returns(bytes32)": {
        "lines": 41,
        "type": [
            "internal"
        ]
    },
    "MerkleProof._hashPair(bytes32,bytes32) returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "MerkleProof._efficientHash(bytes32,bytes32) returns(bytes32)": {
        "lines": 8,
        "type": [
            "private"
        ]
    },
    "SignatureChecker.isValidSignatureNow(address,bytes32,bytes) returns(bool)": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "SignatureChecker.isValidERC1271SignatureNow(address,bytes32,bytes) returns(bool)": {
        "lines": 12,
        "type": [
            "internal"
        ]
    },
    "ConditionalEscrow.depositsOf(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ConditionalEscrow.deposit(address) returns()": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "ConditionalEscrow.withdraw(address) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ConditionalEscrow.constructor() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ConditionalEscrow.owner() returns(address)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ConditionalEscrow._checkOwner() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ConditionalEscrow.renounceOwnership() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ConditionalEscrow.transferOwnership(address) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ConditionalEscrow._transferOwnership(address) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "ConditionalEscrow._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ConditionalEscrow._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ConditionalEscrow.withdrawalAllowed(address) returns(bool)": {
        "lines": 1,
        "type": [
            "public"
        ]
    },
    "Escrow.constructor() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Escrow.owner() returns(address)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "Escrow._checkOwner() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Escrow.renounceOwnership() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "Escrow.transferOwnership(address) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "Escrow._transferOwnership(address) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "Escrow._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Escrow._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Escrow.depositsOf(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "Escrow.deposit(address) returns()": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "Escrow.withdraw(address) returns()": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "RefundEscrow.withdrawalAllowed(address) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "RefundEscrow.withdraw(address) returns()": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "RefundEscrow.depositsOf(address) returns(uint)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "RefundEscrow.deposit(address) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "RefundEscrow.constructor() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "RefundEscrow.owner() returns(address)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "RefundEscrow._checkOwner() returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "RefundEscrow.renounceOwnership() returns()": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "RefundEscrow.transferOwnership(address) returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "RefundEscrow._transferOwnership(address) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "RefundEscrow._msgSender() returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "RefundEscrow._msgData() returns(bytes)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "RefundEscrow.constructor(address) returns()": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "RefundEscrow.state() returns(RefundEscrow.State)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "RefundEscrow.beneficiary() returns(address)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "RefundEscrow.close() returns()": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "RefundEscrow.enableRefunds() returns()": {
        "lines": 5,
        "type": [
            "public"
        ]
    },
    "RefundEscrow.beneficiaryWithdraw() returns()": {
        "lines": 4,
        "type": [
            "public"
        ]
    },
    "ERC165.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC165Checker.supportsERC165(address) returns(bool)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "ERC165Checker.supportsInterface(address,bytes4) returns(bool)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC165Checker.getSupportedInterfaces(address,bytes4[]) returns(bool[])": {
        "lines": 15,
        "type": [
            "internal"
        ]
    },
    "ERC165Checker.supportsAllInterfaces(address,bytes4[]) returns(bool)": {
        "lines": 14,
        "type": [
            "internal"
        ]
    },
    "ERC165Checker.supportsERC165InterfaceUnchecked(address,bytes4) returns(bool)": {
        "lines": 14,
        "type": [
            "internal"
        ]
    },
    "ERC165Checker.slitherConstructorConstantVariables() returns()": {
        "lines": 101,
        "type": [
            "internal"
        ]
    },
    "ERC165Storage.supportsInterface(bytes4) returns(bool)": {
        "lines": 3,
        "type": [
            "public"
        ]
    },
    "ERC165Storage._registerInterface(bytes4) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "ERC1820Implementer.canImplementInterfaceForAddress(bytes32,address) returns(bytes32)": {
        "lines": 6,
        "type": [
            "public"
        ]
    },
    "ERC1820Implementer._registerInterfaceForAddress(bytes32,address) returns()": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "ERC1820Implementer.slitherConstructorConstantVariables() returns()": {
        "lines": 23,
        "type": [
            "internal"
        ]
    },
    "IERC165.supportsInterface(bytes4) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1820Implementer.canImplementInterfaceForAddress(bytes32,address) returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1820Registry.setManager(address,address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1820Registry.getManager(address) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1820Registry.setInterfaceImplementer(address,bytes32,address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1820Registry.getInterfaceImplementer(address,bytes32) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1820Registry.interfaceHash(string) returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1820Registry.updateERC165Cache(address,bytes4) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1820Registry.implementsERC165Interface(address,bytes4) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IERC1820Registry.implementsERC165InterfaceNoCache(address,bytes4) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "Math.max(uint,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Math.min(uint,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "Math.average(uint,uint) returns(uint)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "Math.ceilDiv(uint,uint) returns(uint)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "Math.mulDiv(uint,uint,uint) returns(uint)": {
        "lines": 67,
        "type": [
            "internal"
        ]
    },
    "Math.mulDiv(uint,uint,uint,Math.Rounding) returns(uint)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "Math.sqrt(uint) returns(uint)": {
        "lines": 29,
        "type": [
            "internal"
        ]
    },
    "Math.sqrt(uint,Math.Rounding) returns(uint)": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "Math.log2(uint) returns(uint)": {
        "lines": 36,
        "type": [
            "internal"
        ]
    },
    "Math.log2(uint,Math.Rounding) returns(uint)": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "Math.log10(uint) returns(uint)": {
        "lines": 32,
        "type": [
            "internal"
        ]
    },
    "Math.log10(uint,Math.Rounding) returns(uint)": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "Math.log256(uint) returns(uint)": {
        "lines": 24,
        "type": [
            "internal"
        ]
    },
    "Math.log256(uint,Math.Rounding) returns(uint)": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "SafeCast.toUint(uint) returns(uint)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SafeCast.toUint(int) returns(uint)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SafeCast.toInt248(int) returns(int)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SafeCast.toInt240(int) returns(int)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SafeCast.toInt232(int) returns(int)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SafeCast.toInt224(int) returns(int)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SafeCast.toInt216(int) returns(int)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SafeCast.toInt208(int) returns(int)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SafeCast.toInt200(int) returns(int)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SafeCast.toInt192(int) returns(int)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SafeCast.toInt184(int) returns(int)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SafeCast.toInt176(int) returns(int)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SafeCast.toInt168(int) returns(int)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SafeCast.toInt160(int) returns(int)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SafeCast.toInt152(int) returns(int)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SafeCast.toInt144(int) returns(int)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SafeCast.toInt136(int) returns(int)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SafeCast.toInt128(int) returns(int)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SafeCast.toInt120(int) returns(int)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SafeCast.toInt112(int) returns(int)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SafeCast.toInt104(int) returns(int)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SafeCast.toInt96(int) returns(int)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SafeCast.toInt88(int) returns(int)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SafeCast.toInt80(int) returns(int)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SafeCast.toInt72(int) returns(int)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SafeCast.toInt64(int) returns(int)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SafeCast.toInt56(int) returns(int)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SafeCast.toInt48(int) returns(int)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SafeCast.toInt40(int) returns(int)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SafeCast.toInt32(int) returns(int)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SafeCast.toInt24(int) returns(int)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SafeCast.toInt16(int) returns(int)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SafeCast.toInt8(int) returns(int)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "SafeCast.toInt256(uint) returns(int)": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "SafeMath.tryAdd(uint,uint) returns(bool,uint)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "SafeMath.trySub(uint,uint) returns(bool,uint)": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "SafeMath.tryMul(uint,uint) returns(bool,uint)": {
        "lines": 11,
        "type": [
            "internal"
        ]
    },
    "SafeMath.tryDiv(uint,uint) returns(bool,uint)": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "SafeMath.tryMod(uint,uint) returns(bool,uint)": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "SafeMath.add(uint,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SafeMath.sub(uint,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SafeMath.mul(uint,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SafeMath.div(uint,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SafeMath.mod(uint,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SafeMath.sub(uint,uint,string) returns(uint)": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "SafeMath.div(uint,uint,string) returns(uint)": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "SafeMath.mod(uint,uint,string) returns(uint)": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "SignedMath.max(int,int) returns(int)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SignedMath.min(int,int) returns(int)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SignedMath.average(int,int) returns(int)": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "SignedMath.abs(int) returns(uint)": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "SignedSafeMath.mul(int,int) returns(int)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SignedSafeMath.div(int,int) returns(int)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SignedSafeMath.sub(int,int) returns(int)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "SignedSafeMath.add(int,int) returns(int)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "BitMaps.get(BitMaps.BitMap,uint) returns(bool)": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "BitMaps.setTo(BitMaps.BitMap,uint,bool) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "BitMaps.set(BitMaps.BitMap,uint) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "BitMaps.unset(BitMaps.BitMap,uint) returns()": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "DoubleEndedQueue.pushBack(DoubleEndedQueue.Bytes32Deque,bytes32) returns()": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "DoubleEndedQueue.popBack(DoubleEndedQueue.Bytes32Deque) returns(bytes32)": {
        "lines": 10,
        "type": [
            "internal"
        ]
    },
    "DoubleEndedQueue.pushFront(DoubleEndedQueue.Bytes32Deque,bytes32) returns()": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "DoubleEndedQueue.popFront(DoubleEndedQueue.Bytes32Deque) returns(bytes32)": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "DoubleEndedQueue.front(DoubleEndedQueue.Bytes32Deque) returns(bytes32)": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "DoubleEndedQueue.back(DoubleEndedQueue.Bytes32Deque) returns(bytes32)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "DoubleEndedQueue.at(DoubleEndedQueue.Bytes32Deque,uint) returns(bytes32)": {
        "lines": 6,
        "type": [
            "internal"
        ]
    },
    "DoubleEndedQueue.clear(DoubleEndedQueue.Bytes32Deque) returns()": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "DoubleEndedQueue.length(DoubleEndedQueue.Bytes32Deque) returns(uint)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "DoubleEndedQueue.empty(DoubleEndedQueue.Bytes32Deque) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.set(EnumerableMap.Bytes32ToBytes32Map,bytes32,bytes32) returns(bool)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.remove(EnumerableMap.Bytes32ToBytes32Map,bytes32) returns(bool)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.contains(EnumerableMap.Bytes32ToBytes32Map,bytes32) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.length(EnumerableMap.Bytes32ToBytes32Map) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.at(EnumerableMap.Bytes32ToBytes32Map,uint) returns(bytes32,bytes32)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.tryGet(EnumerableMap.Bytes32ToBytes32Map,bytes32) returns(bool,bytes32)": {
        "lines": 8,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.get(EnumerableMap.Bytes32ToBytes32Map,bytes32) returns(bytes32)": {
        "lines": 5,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.get(EnumerableMap.Bytes32ToBytes32Map,bytes32,string) returns(bytes32)": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.keys(EnumerableMap.Bytes32ToBytes32Map) returns(bytes32[])": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.set(EnumerableMap.UintToUintMap,uint,uint) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.remove(EnumerableMap.UintToUintMap,uint) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.contains(EnumerableMap.UintToUintMap,uint) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.length(EnumerableMap.UintToUintMap) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.at(EnumerableMap.UintToUintMap,uint) returns(uint,uint)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.tryGet(EnumerableMap.UintToUintMap,uint) returns(bool,uint)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.get(EnumerableMap.UintToUintMap,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.get(EnumerableMap.UintToUintMap,uint,string) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.keys(EnumerableMap.UintToUintMap) returns(uint[])": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.set(EnumerableMap.UintToAddressMap,uint,address) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.remove(EnumerableMap.UintToAddressMap,uint) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.contains(EnumerableMap.UintToAddressMap,uint) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.length(EnumerableMap.UintToAddressMap) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.at(EnumerableMap.UintToAddressMap,uint) returns(uint,address)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.tryGet(EnumerableMap.UintToAddressMap,uint) returns(bool,address)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.get(EnumerableMap.UintToAddressMap,uint) returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.get(EnumerableMap.UintToAddressMap,uint,string) returns(address)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.keys(EnumerableMap.UintToAddressMap) returns(uint[])": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.set(EnumerableMap.AddressToUintMap,address,uint) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.remove(EnumerableMap.AddressToUintMap,address) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.contains(EnumerableMap.AddressToUintMap,address) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.length(EnumerableMap.AddressToUintMap) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.at(EnumerableMap.AddressToUintMap,uint) returns(address,uint)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.tryGet(EnumerableMap.AddressToUintMap,address) returns(bool,uint)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.get(EnumerableMap.AddressToUintMap,address) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.get(EnumerableMap.AddressToUintMap,address,string) returns(uint)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.keys(EnumerableMap.AddressToUintMap) returns(address[])": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.set(EnumerableMap.Bytes32ToUintMap,bytes32,uint) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.remove(EnumerableMap.Bytes32ToUintMap,bytes32) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.contains(EnumerableMap.Bytes32ToUintMap,bytes32) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.length(EnumerableMap.Bytes32ToUintMap) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.at(EnumerableMap.Bytes32ToUintMap,uint) returns(bytes32,uint)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.tryGet(EnumerableMap.Bytes32ToUintMap,bytes32) returns(bool,uint)": {
        "lines": 4,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.get(EnumerableMap.Bytes32ToUintMap,bytes32) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.get(EnumerableMap.Bytes32ToUintMap,bytes32,string) returns(uint)": {
        "lines": 7,
        "type": [
            "internal"
        ]
    },
    "EnumerableMap.keys(EnumerableMap.Bytes32ToUintMap) returns(bytes32[])": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "EnumerableSet._add(EnumerableSet.Set,bytes32) returns(bool)": {
        "lines": 11,
        "type": [
            "private"
        ]
    },
    "EnumerableSet._remove(EnumerableSet.Set,bytes32) returns(bool)": {
        "lines": 26,
        "type": [
            "private"
        ]
    },
    "EnumerableSet._contains(EnumerableSet.Set,bytes32) returns(bool)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "EnumerableSet._length(EnumerableSet.Set) returns(uint)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "EnumerableSet._at(EnumerableSet.Set,uint) returns(bytes32)": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "EnumerableSet._values(EnumerableSet.Set) returns(bytes32[])": {
        "lines": 3,
        "type": [
            "private"
        ]
    },
    "EnumerableSet.add(EnumerableSet.Bytes32Set,bytes32) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableSet.remove(EnumerableSet.Bytes32Set,bytes32) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableSet.contains(EnumerableSet.Bytes32Set,bytes32) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableSet.length(EnumerableSet.Bytes32Set) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableSet.at(EnumerableSet.Bytes32Set,uint) returns(bytes32)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableSet.values(EnumerableSet.Bytes32Set) returns(bytes32[])": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "EnumerableSet.add(EnumerableSet.AddressSet,address) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableSet.remove(EnumerableSet.AddressSet,address) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableSet.contains(EnumerableSet.AddressSet,address) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableSet.length(EnumerableSet.AddressSet) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableSet.at(EnumerableSet.AddressSet,uint) returns(address)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableSet.values(EnumerableSet.AddressSet) returns(address[])": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "EnumerableSet.add(EnumerableSet.UintSet,uint) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableSet.remove(EnumerableSet.UintSet,uint) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableSet.contains(EnumerableSet.UintSet,uint) returns(bool)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableSet.length(EnumerableSet.UintSet) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableSet.at(EnumerableSet.UintSet,uint) returns(uint)": {
        "lines": 3,
        "type": [
            "internal"
        ]
    },
    "EnumerableSet.values(EnumerableSet.UintSet) returns(uint[])": {
        "lines": 9,
        "type": [
            "internal"
        ]
    },
    "IAMB.messageSender() returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAMB.maxGasPerTx() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAMB.transactionHash() returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAMB.messageId() returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAMB.messageSourceChainId() returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAMB.messageCallStatus(bytes32) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAMB.failedMessageDataHash(bytes32) returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAMB.failedMessageReceiver(bytes32) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAMB.failedMessageSender(bytes32) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAMB.requireToPassMessage(address,bytes,uint) returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAMB.requireToConfirmMessage(address,bytes,uint) returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAMB.sourceChainId() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IAMB.destinationChainId() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IArbSys.arbBlockNumber() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IArbSys.arbBlockHash(uint) returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IArbSys.arbChainID() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IArbSys.arbOSVersion() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IArbSys.getStorageGasAvailable() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IArbSys.isTopLevelCall() returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IArbSys.mapL1SenderContractAddressToL2Alias(address,address) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IArbSys.wasMyCallersAddressAliased() returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IArbSys.myCallersAddressWithoutAliasing() returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IArbSys.withdrawEth(address) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IArbSys.sendTxToL1(address,bytes) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IArbSys.sendMerkleTreeState() returns(uint,bytes32,bytes32[])": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IBridge.allowedDelayedInboxList(uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IBridge.allowedOutboxList(uint) returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IBridge.delayedInboxAccs(uint) returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IBridge.sequencerInboxAccs(uint) returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IBridge.rollup() returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IBridge.sequencerInbox() returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IBridge.activeOutbox() returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IBridge.allowedDelayedInboxes(address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IBridge.allowedOutboxes(address) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IBridge.sequencerReportedSubMessageCount() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IBridge.enqueueDelayedMessage(uint,address,bytes32) returns(uint)": {
        "lines": 5,
        "type": [
            "external"
        ]
    },
    "IBridge.executeCall(address,uint,bytes) returns(bool,bytes)": {
        "lines": 5,
        "type": [
            "external"
        ]
    },
    "IBridge.delayedMessageCount() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IBridge.sequencerMessageCount() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IBridge.enqueueSequencerMessage(bytes32,uint,uint,uint) returns(uint,bytes32,bytes32,bytes32)": {
        "lines": 6,
        "type": [
            "external"
        ]
    },
    "IBridge.submitBatchSpendingReport(address,bytes32) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IBridge.setSequencerInbox(address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IBridge.setDelayedInbox(address,bool) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IBridge.setOutbox(address,bool) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IBridge.initialize(address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IInbox.bridge() returns(IBridge)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IInbox.sequencerInbox() returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IInbox.sendL2MessageFromOrigin(bytes) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IInbox.sendL2Message(bytes) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IInbox.sendL1FundedUnsignedTransaction(uint,uint,uint,address,bytes) returns(uint)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "IInbox.sendL1FundedContractTransaction(uint,uint,address,bytes) returns(uint)": {
        "lines": 6,
        "type": [
            "external"
        ]
    },
    "IInbox.sendUnsignedTransaction(uint,uint,uint,address,uint,bytes) returns(uint)": {
        "lines": 8,
        "type": [
            "external"
        ]
    },
    "IInbox.sendContractTransaction(uint,uint,address,uint,bytes) returns(uint)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "IInbox.calculateRetryableSubmissionFee(uint,uint) returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IInbox.depositEth() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IInbox.createRetryableTicket(address,uint,uint,address,address,uint,uint,bytes) returns(uint)": {
        "lines": 10,
        "type": [
            "external"
        ]
    },
    "IInbox.unsafeCreateRetryableTicket(address,uint,uint,address,address,uint,uint,bytes) returns(uint)": {
        "lines": 10,
        "type": [
            "external"
        ]
    },
    "IInbox.pause() returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IInbox.unpause() returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IInbox.postUpgradeInit(IBridge) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IInbox.initialize(IBridge,address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IOutbox.rollup() returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IOutbox.bridge() returns(IBridge)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IOutbox.spent(uint) returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IOutbox.roots(bytes32) returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IOutbox.OUTBOX_VERSION() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IOutbox.updateSendRoot(bytes32,bytes32) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IOutbox.l2ToL1Sender() returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IOutbox.l2ToL1Block() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IOutbox.l2ToL1EthBlock() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IOutbox.l2ToL1Timestamp() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IOutbox.l2ToL1OutputId() returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IOutbox.executeTransaction(bytes32[],uint,address,address,uint,uint,uint,uint,bytes) returns()": {
        "lines": 11,
        "type": [
            "external"
        ]
    },
    "IOutbox.executeTransactionSimulation(uint,address,address,uint,uint,uint,uint,bytes) returns()": {
        "lines": 10,
        "type": [
            "external"
        ]
    },
    "IOutbox.isSpent(uint) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IOutbox.calculateItemHash(address,address,uint,uint,uint,uint,bytes) returns(bytes32)": {
        "lines": 9,
        "type": [
            "external"
        ]
    },
    "IOutbox.calculateMerkleRoot(bytes32[],uint,bytes32) returns(bytes32)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ICompoundTimelock.receive() returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ICompoundTimelock.GRACE_PERIOD() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ICompoundTimelock.MINIMUM_DELAY() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ICompoundTimelock.MAXIMUM_DELAY() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ICompoundTimelock.admin() returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ICompoundTimelock.pendingAdmin() returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ICompoundTimelock.delay() returns(uint)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ICompoundTimelock.queuedTransactions(bytes32) returns(bool)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ICompoundTimelock.setDelay(uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ICompoundTimelock.acceptAdmin() returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ICompoundTimelock.setPendingAdmin(address) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ICompoundTimelock.queueTransaction(address,uint,string,bytes,uint) returns(bytes32)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "ICompoundTimelock.cancelTransaction(address,uint,string,bytes,uint) returns()": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "ICompoundTimelock.executeTransaction(address,uint,string,bytes,uint) returns(bytes)": {
        "lines": 7,
        "type": [
            "external"
        ]
    },
    "ICrossDomainMessenger.xDomainMessageSender() returns(address)": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "ICrossDomainMessenger.sendMessage(address,bytes,uint) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    },
    "IFxMessageProcessor.processMessageFromRoot(uint,address,bytes) returns()": {
        "lines": 1,
        "type": [
            "external"
        ]
    }
}